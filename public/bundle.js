var app = (function () {
'use strict';

function noop() {}

function assign(target) {
	var k,
		source,
		i = 1,
		len = arguments.length;
	for (; i < len; i++) {
		source = arguments[i];
		for (k in source) target[k] = source[k];
	}

	return target;
}

function appendNode(node, target) {
	target.appendChild(node);
}

function insertNode(node, target, anchor) {
	target.insertBefore(node, anchor);
}

function detachNode(node) {
	node.parentNode.removeChild(node);
}

function destroyEach(iterations) {
	for (var i = 0; i < iterations.length; i += 1) {
		if (iterations[i]) iterations[i].d();
	}
}

function createElement(name) {
	return document.createElement(name);
}

function createText(data) {
	return document.createTextNode(data);
}

function addListener(node, event, handler) {
	node.addEventListener(event, handler, false);
}

function removeListener(node, event, handler) {
	node.removeEventListener(event, handler, false);
}

function setAttribute(node, attribute, value) {
	node.setAttribute(attribute, value);
}

function blankObject() {
	return Object.create(null);
}

function destroy(detach) {
	this.destroy = noop;
	this.fire('destroy');
	this.set = this.get = noop;

	if (detach !== false) this._fragment.u();
	this._fragment.d();
	this._fragment = this._state = null;
}

function differs(a, b) {
	return a !== b || ((a && typeof a === 'object') || typeof a === 'function');
}

function dispatchObservers(component, group, changed, newState, oldState) {
	for (var key in group) {
		if (!changed[key]) continue;

		var newValue = newState[key];
		var oldValue = oldState[key];

		var callbacks = group[key];
		if (!callbacks) continue;

		for (var i = 0; i < callbacks.length; i += 1) {
			var callback = callbacks[i];
			if (callback.__calling) continue;

			callback.__calling = true;
			callback.call(component, newValue, oldValue);
			callback.__calling = false;
		}
	}
}

function fire(eventName, data) {
	var handlers =
		eventName in this._handlers && this._handlers[eventName].slice();
	if (!handlers) return;

	for (var i = 0; i < handlers.length; i += 1) {
		handlers[i].call(this, data);
	}
}

function get(key) {
	return key ? this._state[key] : this._state;
}

function init(component, options) {
	component.options = options;

	component._observers = { pre: blankObject(), post: blankObject() };
	component._handlers = blankObject();
	component._root = options._root || component;
	component._bind = options._bind;
}

function observe(key, callback, options) {
	var group = options && options.defer
		? this._observers.post
		: this._observers.pre;

	(group[key] || (group[key] = [])).push(callback);

	if (!options || options.init !== false) {
		callback.__calling = true;
		callback.call(this, this._state[key]);
		callback.__calling = false;
	}

	return {
		cancel: function() {
			var index = group[key].indexOf(callback);
			if (~index) group[key].splice(index, 1);
		}
	};
}

function on(eventName, handler) {
	if (eventName === 'teardown') return this.on('destroy', handler);

	var handlers = this._handlers[eventName] || (this._handlers[eventName] = []);
	handlers.push(handler);

	return {
		cancel: function() {
			var index = handlers.indexOf(handler);
			if (~index) handlers.splice(index, 1);
		}
	};
}

function set(newState) {
	this._set(assign({}, newState));
	if (this._root._lock) return;
	this._root._lock = true;
	callAll(this._root._beforecreate);
	callAll(this._root._oncreate);
	callAll(this._root._aftercreate);
	this._root._lock = false;
}

function _set(newState) {
	var oldState = this._state,
		changed = {},
		dirty = false;

	for (var key in newState) {
		if (differs(newState[key], oldState[key])) changed[key] = dirty = true;
	}
	if (!dirty) return;

	this._state = assign({}, oldState, newState);
	this._recompute(changed, this._state);
	if (this._bind) this._bind(changed, this._state);
	dispatchObservers(this, this._observers.pre, changed, this._state, oldState);
	this._fragment.p(changed, this._state);
	dispatchObservers(this, this._observers.post, changed, this._state, oldState);
}

function callAll(fns) {
	while (fns && fns.length) fns.pop()();
}

function _mount(target, anchor) {
	this._fragment.m(target, anchor);
}

function _unmount() {
	this._fragment.u();
}

var proto = {
	destroy: destroy,
	get: get,
	fire: fire,
	observe: observe,
	on: on,
	set: set,
	teardown: destroy,
	_recompute: noop,
	_set: _set,
	_mount: _mount,
	_unmount: _unmount
};

/* src/components/FileOpener.html generated by Svelte v1.41.3 */
var methods = {
  
  loadFile: function(e){
    var file = e.target.files[0];

    // externalize that
    this.get( "modalityCollection" ).addModality( file, this.get("modalityName"), null, null );
  },
  
  
  simulateClickOnFileInput: function(){
    this.refs.fileInput.click();
  }
  
};

function encapsulateStyles(node) {
	setAttribute(node, "svelte-4157934388", "");
}

function create_main_fragment(state, component) {
	var div, input, text, div_1;

	function change_handler(event) {
		component.loadFile(event);
	}

	function click_handler(event) {
		component.simulateClickOnFileInput();
	}

	return {
		c: function create() {
			div = createElement("div");
			input = createElement("input");
			text = createText("\n");
			div_1 = createElement("div");
			div_1.textContent = "open file";
			this.h();
		},

		h: function hydrate() {
			encapsulateStyles(div);
			div.className = "wrapper";
			input.className = "invisible";
			input.type = "file";
			addListener(input, "change", change_handler);
			div_1.className = "button";
			addListener(div_1, "click", click_handler);
		},

		m: function mount(target, anchor) {
			insertNode(div, target, anchor);
			appendNode(input, div);
			component.refs.fileInput = input;
			appendNode(text, div);
			appendNode(div_1, div);
		},

		p: noop,

		u: function unmount() {
			detachNode(div);
		},

		d: function destroy$$1() {
			removeListener(input, "change", change_handler);
			if (component.refs.fileInput === input) component.refs.fileInput = null;
			removeListener(div_1, "click", click_handler);
		}
	};
}

function FileOpener(options) {
	init(this, options);
	this.refs = {};
	this._state = assign({}, options.data);

	this._fragment = create_main_fragment(this._state, this);

	if (options.target) {
		this._fragment.c();
		this._fragment.m(options.target, options.anchor || null);
	}
}

assign(FileOpener.prototype, methods, proto);

/* src/components/FileLister.html generated by Svelte v1.41.3 */
function data() {
  return {
    files: []
  }
}

var methods$1 = {
  
  updateFileList: function(){
    this.set({ files: this.get("leFoo").getFiles() });
  },
  
  
  selectFile: function(i){
    console.log( i );
  }
};

function oncreate() {


}

function encapsulateStyles$1(node) {
	setAttribute(node, "svelte-727687160", "");
}

function create_main_fragment$1(state, component) {
	var div, ul;

	var files = state.files;

	var each_blocks = [];

	for (var i = 0; i < files.length; i += 1) {
		each_blocks[i] = create_each_block(state, files, files[i], i, component);
	}

	return {
		c: function create() {
			div = createElement("div");
			ul = createElement("ul");

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}
			this.h();
		},

		h: function hydrate() {
			encapsulateStyles$1(div);
			div.className = "wrapper";
		},

		m: function mount(target, anchor) {
			insertNode(div, target, anchor);
			appendNode(ul, div);

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}
		},

		p: function update(changed, state) {
			var files = state.files;

			if (changed.files) {
				for (var i = 0; i < files.length; i += 1) {
					if (each_blocks[i]) {
						each_blocks[i].p(changed, state, files, files[i], i);
					} else {
						each_blocks[i] = create_each_block(state, files, files[i], i, component);
						each_blocks[i].c();
						each_blocks[i].m(ul, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].u();
					each_blocks[i].d();
				}
				each_blocks.length = files.length;
			}
		},

		u: function unmount() {
			detachNode(div);

			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].u();
			}
		},

		d: function destroy$$1() {
			destroyEach(each_blocks);
		}
	};
}

// (3:2) {{#each files as file, i}}
function create_each_block(state, files, file, i, component) {
	var li, text, text_1, text_2_value = file.name, text_2;

	return {
		c: function create() {
			li = createElement("li");
			text = createText(i);
			text_1 = createText(": ");
			text_2 = createText(text_2_value);
			this.h();
		},

		h: function hydrate() {
			addListener(li, "click", click_handler);

			li._svelte = {
				component: component,
				files: files,
				i: i
			};
		},

		m: function mount(target, anchor) {
			insertNode(li, target, anchor);
			appendNode(text, li);
			appendNode(text_1, li);
			appendNode(text_2, li);
		},

		p: function update(changed, state, files, file, i) {
			li._svelte.files = files;
			li._svelte.i = i;

			if ((changed.files) && text_2_value !== (text_2_value = file.name)) {
				text_2.data = text_2_value;
			}
		},

		u: function unmount() {
			detachNode(li);
		},

		d: function destroy$$1() {
			removeListener(li, "click", click_handler);
		}
	};
}

function click_handler(event) {
	var component = this._svelte.component;
	var files = this._svelte.files, i = this._svelte.i, file = files[i];
	component.selectFile( i );
}

function FileLister(options) {
	init(this, options);
	this._state = assign(data(), options.data);

	var _oncreate = oncreate.bind(this);

	if (!options._root) {
		this._oncreate = [_oncreate];
	} else {
	 	this._root._oncreate.push(_oncreate);
	 }

	this._fragment = create_main_fragment$1(this._state, this);

	if (options.target) {
		this._fragment.c();
		this._fragment.m(options.target, options.anchor || null);

		callAll(this._oncreate);
	}
}

assign(FileLister.prototype, methods$1, proto);

// Polyfills

if ( Number.EPSILON === undefined ) {

	Number.EPSILON = Math.pow( 2, - 52 );

}

if ( Number.isInteger === undefined ) {

	// Missing in IE
	// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger

	Number.isInteger = function ( value ) {

		return typeof value === 'number' && isFinite( value ) && Math.floor( value ) === value;

	};

}

//

if ( Math.sign === undefined ) {

	// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign

	Math.sign = function ( x ) {

		return ( x < 0 ) ? - 1 : ( x > 0 ) ? 1 : + x;

	};

}

if ( 'name' in Function.prototype === false ) {

	// Missing in IE
	// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name

	Object.defineProperty( Function.prototype, 'name', {

		get: function () {

			return this.toString().match( /^\s*function\s*([^\(\s]*)/ )[ 1 ];

		}

	} );

}

if ( Object.assign === undefined ) {

	// Missing in IE
	// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign

	( function () {

		Object.assign = function ( target ) {

			'use strict';

			if ( target === undefined || target === null ) {

				throw new TypeError( 'Cannot convert undefined or null to object' );

			}

			var output = Object( target );

			for ( var index = 1; index < arguments.length; index ++ ) {

				var source = arguments[ index ];

				if ( source !== undefined && source !== null ) {

					for ( var nextKey in source ) {

						if ( Object.prototype.hasOwnProperty.call( source, nextKey ) ) {

							output[ nextKey ] = source[ nextKey ];

						}

					}

				}

			}

			return output;

		};

	} )();

}

/**
 * https://github.com/mrdoob/eventdispatcher.js/
 */

function EventDispatcher() {}

Object.assign( EventDispatcher.prototype, {

	addEventListener: function ( type, listener ) {

		if ( this._listeners === undefined ) this._listeners = {};

		var listeners = this._listeners;

		if ( listeners[ type ] === undefined ) {

			listeners[ type ] = [];

		}

		if ( listeners[ type ].indexOf( listener ) === - 1 ) {

			listeners[ type ].push( listener );

		}

	},

	hasEventListener: function ( type, listener ) {

		if ( this._listeners === undefined ) return false;

		var listeners = this._listeners;

		return listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1;

	},

	removeEventListener: function ( type, listener ) {

		if ( this._listeners === undefined ) return;

		var listeners = this._listeners;
		var listenerArray = listeners[ type ];

		if ( listenerArray !== undefined ) {

			var index = listenerArray.indexOf( listener );

			if ( index !== - 1 ) {

				listenerArray.splice( index, 1 );

			}

		}

	},

	dispatchEvent: function ( event ) {

		if ( this._listeners === undefined ) return;

		var listeners = this._listeners;
		var listenerArray = listeners[ event.type ];

		if ( listenerArray !== undefined ) {

			event.target = this;

			var array = listenerArray.slice( 0 );

			for ( var i = 0, l = array.length; i < l; i ++ ) {

				array[ i ].call( this, event );

			}

		}

	}

} );

var REVISION = '88';
var CullFaceNone = 0;
var CullFaceBack = 1;
var CullFaceFront = 2;
var FrontFaceDirectionCW = 0;
var PCFShadowMap = 1;
var PCFSoftShadowMap = 2;
var FrontSide = 0;
var BackSide = 1;
var DoubleSide = 2;
var FlatShading = 1;
var NoColors = 0;
var FaceColors = 1;
var VertexColors = 2;
var NoBlending = 0;
var NormalBlending = 1;
var AdditiveBlending = 2;
var SubtractiveBlending = 3;
var MultiplyBlending = 4;
var CustomBlending = 5;
var AddEquation = 100;
var SubtractEquation = 101;
var ReverseSubtractEquation = 102;
var MinEquation = 103;
var MaxEquation = 104;
var ZeroFactor = 200;
var OneFactor = 201;
var SrcColorFactor = 202;
var OneMinusSrcColorFactor = 203;
var SrcAlphaFactor = 204;
var OneMinusSrcAlphaFactor = 205;
var DstAlphaFactor = 206;
var OneMinusDstAlphaFactor = 207;
var DstColorFactor = 208;
var OneMinusDstColorFactor = 209;
var SrcAlphaSaturateFactor = 210;
var NeverDepth = 0;
var AlwaysDepth = 1;
var LessDepth = 2;
var LessEqualDepth = 3;
var EqualDepth = 4;
var GreaterEqualDepth = 5;
var GreaterDepth = 6;
var NotEqualDepth = 7;
var MultiplyOperation = 0;
var MixOperation = 1;
var AddOperation = 2;
var NoToneMapping = 0;
var LinearToneMapping = 1;
var ReinhardToneMapping = 2;
var Uncharted2ToneMapping = 3;
var CineonToneMapping = 4;
var UVMapping = 300;
var CubeReflectionMapping = 301;
var CubeRefractionMapping = 302;
var EquirectangularReflectionMapping = 303;
var EquirectangularRefractionMapping = 304;
var SphericalReflectionMapping = 305;
var CubeUVReflectionMapping = 306;
var CubeUVRefractionMapping = 307;
var RepeatWrapping = 1000;
var ClampToEdgeWrapping = 1001;
var MirroredRepeatWrapping = 1002;
var NearestFilter = 1003;
var NearestMipMapNearestFilter = 1004;
var NearestMipMapLinearFilter = 1005;
var LinearFilter = 1006;
var LinearMipMapNearestFilter = 1007;
var LinearMipMapLinearFilter = 1008;
var UnsignedByteType = 1009;
var ByteType = 1010;
var ShortType = 1011;
var UnsignedShortType = 1012;
var IntType = 1013;
var UnsignedIntType = 1014;
var FloatType = 1015;
var HalfFloatType = 1016;
var UnsignedShort4444Type = 1017;
var UnsignedShort5551Type = 1018;
var UnsignedShort565Type = 1019;
var UnsignedInt248Type = 1020;
var AlphaFormat = 1021;
var RGBFormat = 1022;
var RGBAFormat = 1023;
var LuminanceFormat = 1024;
var LuminanceAlphaFormat = 1025;
var DepthFormat = 1026;
var DepthStencilFormat = 1027;
var RGB_S3TC_DXT1_Format = 2001;
var RGBA_S3TC_DXT1_Format = 2002;
var RGBA_S3TC_DXT3_Format = 2003;
var RGBA_S3TC_DXT5_Format = 2004;
var RGB_PVRTC_4BPPV1_Format = 2100;
var RGB_PVRTC_2BPPV1_Format = 2101;
var RGBA_PVRTC_4BPPV1_Format = 2102;
var RGBA_PVRTC_2BPPV1_Format = 2103;
var RGB_ETC1_Format = 2151;
var LoopOnce = 2200;
var LoopRepeat = 2201;
var LoopPingPong = 2202;
var InterpolateDiscrete = 2300;
var InterpolateLinear = 2301;
var InterpolateSmooth = 2302;
var ZeroCurvatureEnding = 2400;
var ZeroSlopeEnding = 2401;
var WrapAroundEnding = 2402;
var TrianglesDrawMode = 0;
var TriangleStripDrawMode = 1;
var TriangleFanDrawMode = 2;
var LinearEncoding = 3000;
var sRGBEncoding = 3001;
var GammaEncoding = 3007;
var RGBEEncoding = 3002;
var RGBM7Encoding = 3004;
var RGBM16Encoding = 3005;
var RGBDEncoding = 3006;
var BasicDepthPacking = 3200;
var RGBADepthPacking = 3201;

/**
 * @author alteredq / http://alteredqualia.com/
 * @author mrdoob / http://mrdoob.com/
 */

var _Math = {

	DEG2RAD: Math.PI / 180,
	RAD2DEG: 180 / Math.PI,

	generateUUID: function () {

		// http://www.broofa.com/Tools/Math.uuid.htm
		// Replaced .join with string concatenation (@takahirox)

		var chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split( '' );
		var rnd = 0, r;

		return function generateUUID() {

			var uuid = '';

			for ( var i = 0; i < 36; i ++ ) {

				if ( i === 8 || i === 13 || i === 18 || i === 23 ) {

					uuid += '-';

				} else if ( i === 14 ) {

					uuid += '4';

				} else {

					if ( rnd <= 0x02 ) rnd = 0x2000000 + ( Math.random() * 0x1000000 ) | 0;
					r = rnd & 0xf;
					rnd = rnd >> 4;
					uuid += chars[ ( i === 19 ) ? ( r & 0x3 ) | 0x8 : r ];

				}

			}

			return uuid;

		};

	}(),

	clamp: function ( value, min, max ) {

		return Math.max( min, Math.min( max, value ) );

	},

	// compute euclidian modulo of m % n
	// https://en.wikipedia.org/wiki/Modulo_operation

	euclideanModulo: function ( n, m ) {

		return ( ( n % m ) + m ) % m;

	},

	// Linear mapping from range <a1, a2> to range <b1, b2>

	mapLinear: function ( x, a1, a2, b1, b2 ) {

		return b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );

	},

	// https://en.wikipedia.org/wiki/Linear_interpolation

	lerp: function ( x, y, t ) {

		return ( 1 - t ) * x + t * y;

	},

	// http://en.wikipedia.org/wiki/Smoothstep

	smoothstep: function ( x, min, max ) {

		if ( x <= min ) return 0;
		if ( x >= max ) return 1;

		x = ( x - min ) / ( max - min );

		return x * x * ( 3 - 2 * x );

	},

	smootherstep: function ( x, min, max ) {

		if ( x <= min ) return 0;
		if ( x >= max ) return 1;

		x = ( x - min ) / ( max - min );

		return x * x * x * ( x * ( x * 6 - 15 ) + 10 );

	},

	// Random integer from <low, high> interval

	randInt: function ( low, high ) {

		return low + Math.floor( Math.random() * ( high - low + 1 ) );

	},

	// Random float from <low, high> interval

	randFloat: function ( low, high ) {

		return low + Math.random() * ( high - low );

	},

	// Random float from <-range/2, range/2> interval

	randFloatSpread: function ( range ) {

		return range * ( 0.5 - Math.random() );

	},

	degToRad: function ( degrees ) {

		return degrees * _Math.DEG2RAD;

	},

	radToDeg: function ( radians ) {

		return radians * _Math.RAD2DEG;

	},

	isPowerOfTwo: function ( value ) {

		return ( value & ( value - 1 ) ) === 0 && value !== 0;

	},

	ceilPowerOfTwo: function ( value ) {

		return Math.pow( 2, Math.ceil( Math.log( value ) / Math.LN2 ) );

	},

	floorPowerOfTwo: function ( value ) {

		return Math.pow( 2, Math.floor( Math.log( value ) / Math.LN2 ) );

	}

};

/**
 * @author mrdoob / http://mrdoob.com/
 * @author philogb / http://blog.thejit.org/
 * @author egraether / http://egraether.com/
 * @author zz85 / http://www.lab4games.net/zz85/blog
 */

function Vector2( x, y ) {

	this.x = x || 0;
	this.y = y || 0;

}

Object.defineProperties( Vector2.prototype, {

	"width": {

		get: function () {

			return this.x;

		},

		set: function ( value ) {

			this.x = value;

		}

	},

	"height": {

		get: function () {

			return this.y;

		},

		set: function ( value ) {

			this.y = value;

		}

	}

} );

Object.assign( Vector2.prototype, {

	isVector2: true,

	set: function ( x, y ) {

		this.x = x;
		this.y = y;

		return this;

	},

	setScalar: function ( scalar ) {

		this.x = scalar;
		this.y = scalar;

		return this;

	},

	setX: function ( x ) {

		this.x = x;

		return this;

	},

	setY: function ( y ) {

		this.y = y;

		return this;

	},

	setComponent: function ( index, value ) {

		switch ( index ) {

			case 0: this.x = value; break;
			case 1: this.y = value; break;
			default: throw new Error( 'index is out of range: ' + index );

		}

		return this;

	},

	getComponent: function ( index ) {

		switch ( index ) {

			case 0: return this.x;
			case 1: return this.y;
			default: throw new Error( 'index is out of range: ' + index );

		}

	},

	clone: function () {

		return new this.constructor( this.x, this.y );

	},

	copy: function ( v ) {

		this.x = v.x;
		this.y = v.y;

		return this;

	},

	add: function ( v, w ) {

		if ( w !== undefined ) {

			console.warn( 'THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );
			return this.addVectors( v, w );

		}

		this.x += v.x;
		this.y += v.y;

		return this;

	},

	addScalar: function ( s ) {

		this.x += s;
		this.y += s;

		return this;

	},

	addVectors: function ( a, b ) {

		this.x = a.x + b.x;
		this.y = a.y + b.y;

		return this;

	},

	addScaledVector: function ( v, s ) {

		this.x += v.x * s;
		this.y += v.y * s;

		return this;

	},

	sub: function ( v, w ) {

		if ( w !== undefined ) {

			console.warn( 'THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );
			return this.subVectors( v, w );

		}

		this.x -= v.x;
		this.y -= v.y;

		return this;

	},

	subScalar: function ( s ) {

		this.x -= s;
		this.y -= s;

		return this;

	},

	subVectors: function ( a, b ) {

		this.x = a.x - b.x;
		this.y = a.y - b.y;

		return this;

	},

	multiply: function ( v ) {

		this.x *= v.x;
		this.y *= v.y;

		return this;

	},

	multiplyScalar: function ( scalar ) {

		this.x *= scalar;
		this.y *= scalar;

		return this;

	},

	divide: function ( v ) {

		this.x /= v.x;
		this.y /= v.y;

		return this;

	},

	divideScalar: function ( scalar ) {

		return this.multiplyScalar( 1 / scalar );

	},

	applyMatrix3: function ( m ) {

		var x = this.x, y = this.y;
		var e = m.elements;

		this.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ];
		this.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ];

		return this;

	},

	min: function ( v ) {

		this.x = Math.min( this.x, v.x );
		this.y = Math.min( this.y, v.y );

		return this;

	},

	max: function ( v ) {

		this.x = Math.max( this.x, v.x );
		this.y = Math.max( this.y, v.y );

		return this;

	},

	clamp: function ( min, max ) {

		// assumes min < max, componentwise

		this.x = Math.max( min.x, Math.min( max.x, this.x ) );
		this.y = Math.max( min.y, Math.min( max.y, this.y ) );

		return this;

	},

	clampScalar: function () {

		var min = new Vector2();
		var max = new Vector2();

		return function clampScalar( minVal, maxVal ) {

			min.set( minVal, minVal );
			max.set( maxVal, maxVal );

			return this.clamp( min, max );

		};

	}(),

	clampLength: function ( min, max ) {

		var length = this.length();

		return this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );

	},

	floor: function () {

		this.x = Math.floor( this.x );
		this.y = Math.floor( this.y );

		return this;

	},

	ceil: function () {

		this.x = Math.ceil( this.x );
		this.y = Math.ceil( this.y );

		return this;

	},

	round: function () {

		this.x = Math.round( this.x );
		this.y = Math.round( this.y );

		return this;

	},

	roundToZero: function () {

		this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
		this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );

		return this;

	},

	negate: function () {

		this.x = - this.x;
		this.y = - this.y;

		return this;

	},

	dot: function ( v ) {

		return this.x * v.x + this.y * v.y;

	},

	lengthSq: function () {

		return this.x * this.x + this.y * this.y;

	},

	length: function () {

		return Math.sqrt( this.x * this.x + this.y * this.y );

	},

	manhattanLength: function () {

		return Math.abs( this.x ) + Math.abs( this.y );

	},

	normalize: function () {

		return this.divideScalar( this.length() || 1 );

	},

	angle: function () {

		// computes the angle in radians with respect to the positive x-axis

		var angle = Math.atan2( this.y, this.x );

		if ( angle < 0 ) angle += 2 * Math.PI;

		return angle;

	},

	distanceTo: function ( v ) {

		return Math.sqrt( this.distanceToSquared( v ) );

	},

	distanceToSquared: function ( v ) {

		var dx = this.x - v.x, dy = this.y - v.y;
		return dx * dx + dy * dy;

	},

	manhattanDistanceTo: function ( v ) {

		return Math.abs( this.x - v.x ) + Math.abs( this.y - v.y );

	},

	setLength: function ( length ) {

		return this.normalize().multiplyScalar( length );

	},

	lerp: function ( v, alpha ) {

		this.x += ( v.x - this.x ) * alpha;
		this.y += ( v.y - this.y ) * alpha;

		return this;

	},

	lerpVectors: function ( v1, v2, alpha ) {

		return this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );

	},

	equals: function ( v ) {

		return ( ( v.x === this.x ) && ( v.y === this.y ) );

	},

	fromArray: function ( array, offset ) {

		if ( offset === undefined ) offset = 0;

		this.x = array[ offset ];
		this.y = array[ offset + 1 ];

		return this;

	},

	toArray: function ( array, offset ) {

		if ( array === undefined ) array = [];
		if ( offset === undefined ) offset = 0;

		array[ offset ] = this.x;
		array[ offset + 1 ] = this.y;

		return array;

	},

	fromBufferAttribute: function ( attribute, index, offset ) {

		if ( offset !== undefined ) {

			console.warn( 'THREE.Vector2: offset has been removed from .fromBufferAttribute().' );

		}

		this.x = attribute.getX( index );
		this.y = attribute.getY( index );

		return this;

	},

	rotateAround: function ( center, angle ) {

		var c = Math.cos( angle ), s = Math.sin( angle );

		var x = this.x - center.x;
		var y = this.y - center.y;

		this.x = x * c - y * s + center.x;
		this.y = x * s + y * c + center.y;

		return this;

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 * @author supereggbert / http://www.paulbrunt.co.uk/
 * @author philogb / http://blog.thejit.org/
 * @author jordi_ros / http://plattsoft.com
 * @author D1plo1d / http://github.com/D1plo1d
 * @author alteredq / http://alteredqualia.com/
 * @author mikael emtinger / http://gomo.se/
 * @author timknip / http://www.floorplanner.com/
 * @author bhouston / http://clara.io
 * @author WestLangley / http://github.com/WestLangley
 */

function Matrix4() {

	this.elements = [

		1, 0, 0, 0,
		0, 1, 0, 0,
		0, 0, 1, 0,
		0, 0, 0, 1

	];

	if ( arguments.length > 0 ) {

		console.error( 'THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.' );

	}

}

Object.assign( Matrix4.prototype, {

	isMatrix4: true,

	set: function ( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {

		var te = this.elements;

		te[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;
		te[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;
		te[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;
		te[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;

		return this;

	},

	identity: function () {

		this.set(

			1, 0, 0, 0,
			0, 1, 0, 0,
			0, 0, 1, 0,
			0, 0, 0, 1

		);

		return this;

	},

	clone: function () {

		return new Matrix4().fromArray( this.elements );

	},

	copy: function ( m ) {

		var te = this.elements;
		var me = m.elements;

		te[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ]; te[ 3 ] = me[ 3 ];
		te[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ]; te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ];
		te[ 8 ] = me[ 8 ]; te[ 9 ] = me[ 9 ]; te[ 10 ] = me[ 10 ]; te[ 11 ] = me[ 11 ];
		te[ 12 ] = me[ 12 ]; te[ 13 ] = me[ 13 ]; te[ 14 ] = me[ 14 ]; te[ 15 ] = me[ 15 ];

		return this;

	},

	copyPosition: function ( m ) {

		var te = this.elements, me = m.elements;

		te[ 12 ] = me[ 12 ];
		te[ 13 ] = me[ 13 ];
		te[ 14 ] = me[ 14 ];

		return this;

	},

	extractBasis: function ( xAxis, yAxis, zAxis ) {

		xAxis.setFromMatrixColumn( this, 0 );
		yAxis.setFromMatrixColumn( this, 1 );
		zAxis.setFromMatrixColumn( this, 2 );

		return this;

	},

	makeBasis: function ( xAxis, yAxis, zAxis ) {

		this.set(
			xAxis.x, yAxis.x, zAxis.x, 0,
			xAxis.y, yAxis.y, zAxis.y, 0,
			xAxis.z, yAxis.z, zAxis.z, 0,
			0, 0, 0, 1
		);

		return this;

	},

	extractRotation: function () {

		var v1 = new Vector3();

		return function extractRotation( m ) {

			var te = this.elements;
			var me = m.elements;

			var scaleX = 1 / v1.setFromMatrixColumn( m, 0 ).length();
			var scaleY = 1 / v1.setFromMatrixColumn( m, 1 ).length();
			var scaleZ = 1 / v1.setFromMatrixColumn( m, 2 ).length();

			te[ 0 ] = me[ 0 ] * scaleX;
			te[ 1 ] = me[ 1 ] * scaleX;
			te[ 2 ] = me[ 2 ] * scaleX;

			te[ 4 ] = me[ 4 ] * scaleY;
			te[ 5 ] = me[ 5 ] * scaleY;
			te[ 6 ] = me[ 6 ] * scaleY;

			te[ 8 ] = me[ 8 ] * scaleZ;
			te[ 9 ] = me[ 9 ] * scaleZ;
			te[ 10 ] = me[ 10 ] * scaleZ;

			return this;

		};

	}(),

	makeRotationFromEuler: function ( euler ) {

		if ( ! ( euler && euler.isEuler ) ) {

			console.error( 'THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );

		}

		var te = this.elements;

		var x = euler.x, y = euler.y, z = euler.z;
		var a = Math.cos( x ), b = Math.sin( x );
		var c = Math.cos( y ), d = Math.sin( y );
		var e = Math.cos( z ), f = Math.sin( z );

		if ( euler.order === 'XYZ' ) {

			var ae = a * e, af = a * f, be = b * e, bf = b * f;

			te[ 0 ] = c * e;
			te[ 4 ] = - c * f;
			te[ 8 ] = d;

			te[ 1 ] = af + be * d;
			te[ 5 ] = ae - bf * d;
			te[ 9 ] = - b * c;

			te[ 2 ] = bf - ae * d;
			te[ 6 ] = be + af * d;
			te[ 10 ] = a * c;

		} else if ( euler.order === 'YXZ' ) {

			var ce = c * e, cf = c * f, de = d * e, df = d * f;

			te[ 0 ] = ce + df * b;
			te[ 4 ] = de * b - cf;
			te[ 8 ] = a * d;

			te[ 1 ] = a * f;
			te[ 5 ] = a * e;
			te[ 9 ] = - b;

			te[ 2 ] = cf * b - de;
			te[ 6 ] = df + ce * b;
			te[ 10 ] = a * c;

		} else if ( euler.order === 'ZXY' ) {

			var ce = c * e, cf = c * f, de = d * e, df = d * f;

			te[ 0 ] = ce - df * b;
			te[ 4 ] = - a * f;
			te[ 8 ] = de + cf * b;

			te[ 1 ] = cf + de * b;
			te[ 5 ] = a * e;
			te[ 9 ] = df - ce * b;

			te[ 2 ] = - a * d;
			te[ 6 ] = b;
			te[ 10 ] = a * c;

		} else if ( euler.order === 'ZYX' ) {

			var ae = a * e, af = a * f, be = b * e, bf = b * f;

			te[ 0 ] = c * e;
			te[ 4 ] = be * d - af;
			te[ 8 ] = ae * d + bf;

			te[ 1 ] = c * f;
			te[ 5 ] = bf * d + ae;
			te[ 9 ] = af * d - be;

			te[ 2 ] = - d;
			te[ 6 ] = b * c;
			te[ 10 ] = a * c;

		} else if ( euler.order === 'YZX' ) {

			var ac = a * c, ad = a * d, bc = b * c, bd = b * d;

			te[ 0 ] = c * e;
			te[ 4 ] = bd - ac * f;
			te[ 8 ] = bc * f + ad;

			te[ 1 ] = f;
			te[ 5 ] = a * e;
			te[ 9 ] = - b * e;

			te[ 2 ] = - d * e;
			te[ 6 ] = ad * f + bc;
			te[ 10 ] = ac - bd * f;

		} else if ( euler.order === 'XZY' ) {

			var ac = a * c, ad = a * d, bc = b * c, bd = b * d;

			te[ 0 ] = c * e;
			te[ 4 ] = - f;
			te[ 8 ] = d * e;

			te[ 1 ] = ac * f + bd;
			te[ 5 ] = a * e;
			te[ 9 ] = ad * f - bc;

			te[ 2 ] = bc * f - ad;
			te[ 6 ] = b * e;
			te[ 10 ] = bd * f + ac;

		}

		// last column
		te[ 3 ] = 0;
		te[ 7 ] = 0;
		te[ 11 ] = 0;

		// bottom row
		te[ 12 ] = 0;
		te[ 13 ] = 0;
		te[ 14 ] = 0;
		te[ 15 ] = 1;

		return this;

	},

	makeRotationFromQuaternion: function ( q ) {

		var te = this.elements;

		var x = q._x, y = q._y, z = q._z, w = q._w;
		var x2 = x + x, y2 = y + y, z2 = z + z;
		var xx = x * x2, xy = x * y2, xz = x * z2;
		var yy = y * y2, yz = y * z2, zz = z * z2;
		var wx = w * x2, wy = w * y2, wz = w * z2;

		te[ 0 ] = 1 - ( yy + zz );
		te[ 4 ] = xy - wz;
		te[ 8 ] = xz + wy;

		te[ 1 ] = xy + wz;
		te[ 5 ] = 1 - ( xx + zz );
		te[ 9 ] = yz - wx;

		te[ 2 ] = xz - wy;
		te[ 6 ] = yz + wx;
		te[ 10 ] = 1 - ( xx + yy );

		// last column
		te[ 3 ] = 0;
		te[ 7 ] = 0;
		te[ 11 ] = 0;

		// bottom row
		te[ 12 ] = 0;
		te[ 13 ] = 0;
		te[ 14 ] = 0;
		te[ 15 ] = 1;

		return this;

	},

	lookAt: function () {

		var x = new Vector3();
		var y = new Vector3();
		var z = new Vector3();

		return function lookAt( eye, target, up ) {

			var te = this.elements;

			z.subVectors( eye, target );

			if ( z.lengthSq() === 0 ) {

				// eye and target are in the same position

				z.z = 1;

			}

			z.normalize();
			x.crossVectors( up, z );

			if ( x.lengthSq() === 0 ) {

				// up and z are parallel

				if ( Math.abs( up.z ) === 1 ) {

					z.x += 0.0001;

				} else {

					z.z += 0.0001;

				}

				z.normalize();
				x.crossVectors( up, z );

			}

			x.normalize();
			y.crossVectors( z, x );

			te[ 0 ] = x.x; te[ 4 ] = y.x; te[ 8 ] = z.x;
			te[ 1 ] = x.y; te[ 5 ] = y.y; te[ 9 ] = z.y;
			te[ 2 ] = x.z; te[ 6 ] = y.z; te[ 10 ] = z.z;

			return this;

		};

	}(),

	multiply: function ( m, n ) {

		if ( n !== undefined ) {

			console.warn( 'THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.' );
			return this.multiplyMatrices( m, n );

		}

		return this.multiplyMatrices( this, m );

	},

	premultiply: function ( m ) {

		return this.multiplyMatrices( m, this );

	},

	multiplyMatrices: function ( a, b ) {

		var ae = a.elements;
		var be = b.elements;
		var te = this.elements;

		var a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];
		var a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];
		var a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];
		var a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];

		var b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];
		var b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];
		var b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];
		var b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];

		te[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
		te[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
		te[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
		te[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;

		te[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
		te[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
		te[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
		te[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;

		te[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
		te[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
		te[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
		te[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;

		te[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
		te[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
		te[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
		te[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;

		return this;

	},

	multiplyScalar: function ( s ) {

		var te = this.elements;

		te[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;
		te[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;
		te[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;
		te[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;

		return this;

	},

	applyToBufferAttribute: function () {

		var v1 = new Vector3();

		return function applyToBufferAttribute( attribute ) {

			for ( var i = 0, l = attribute.count; i < l; i ++ ) {

				v1.x = attribute.getX( i );
				v1.y = attribute.getY( i );
				v1.z = attribute.getZ( i );

				v1.applyMatrix4( this );

				attribute.setXYZ( i, v1.x, v1.y, v1.z );

			}

			return attribute;

		};

	}(),

	determinant: function () {

		var te = this.elements;

		var n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];
		var n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];
		var n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];
		var n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];

		//TODO: make this more efficient
		//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )

		return (
			n41 * (
				+ n14 * n23 * n32
				 - n13 * n24 * n32
				 - n14 * n22 * n33
				 + n12 * n24 * n33
				 + n13 * n22 * n34
				 - n12 * n23 * n34
			) +
			n42 * (
				+ n11 * n23 * n34
				 - n11 * n24 * n33
				 + n14 * n21 * n33
				 - n13 * n21 * n34
				 + n13 * n24 * n31
				 - n14 * n23 * n31
			) +
			n43 * (
				+ n11 * n24 * n32
				 - n11 * n22 * n34
				 - n14 * n21 * n32
				 + n12 * n21 * n34
				 + n14 * n22 * n31
				 - n12 * n24 * n31
			) +
			n44 * (
				- n13 * n22 * n31
				 - n11 * n23 * n32
				 + n11 * n22 * n33
				 + n13 * n21 * n32
				 - n12 * n21 * n33
				 + n12 * n23 * n31
			)

		);

	},

	transpose: function () {

		var te = this.elements;
		var tmp;

		tmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;
		tmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;
		tmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;

		tmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;
		tmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;
		tmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;

		return this;

	},

	setPosition: function ( v ) {

		var te = this.elements;

		te[ 12 ] = v.x;
		te[ 13 ] = v.y;
		te[ 14 ] = v.z;

		return this;

	},

	getInverse: function ( m, throwOnDegenerate ) {

		// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm
		var te = this.elements,
			me = m.elements,

			n11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ], n41 = me[ 3 ],
			n12 = me[ 4 ], n22 = me[ 5 ], n32 = me[ 6 ], n42 = me[ 7 ],
			n13 = me[ 8 ], n23 = me[ 9 ], n33 = me[ 10 ], n43 = me[ 11 ],
			n14 = me[ 12 ], n24 = me[ 13 ], n34 = me[ 14 ], n44 = me[ 15 ],

			t11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,
			t12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,
			t13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,
			t14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;

		var det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;

		if ( det === 0 ) {

			var msg = "THREE.Matrix4: .getInverse() can't invert matrix, determinant is 0";

			if ( throwOnDegenerate === true ) {

				throw new Error( msg );

			} else {

				console.warn( msg );

			}

			return this.identity();

		}

		var detInv = 1 / det;

		te[ 0 ] = t11 * detInv;
		te[ 1 ] = ( n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44 ) * detInv;
		te[ 2 ] = ( n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44 ) * detInv;
		te[ 3 ] = ( n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43 ) * detInv;

		te[ 4 ] = t12 * detInv;
		te[ 5 ] = ( n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44 ) * detInv;
		te[ 6 ] = ( n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44 ) * detInv;
		te[ 7 ] = ( n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43 ) * detInv;

		te[ 8 ] = t13 * detInv;
		te[ 9 ] = ( n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44 ) * detInv;
		te[ 10 ] = ( n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44 ) * detInv;
		te[ 11 ] = ( n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43 ) * detInv;

		te[ 12 ] = t14 * detInv;
		te[ 13 ] = ( n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34 ) * detInv;
		te[ 14 ] = ( n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34 ) * detInv;
		te[ 15 ] = ( n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33 ) * detInv;

		return this;

	},

	scale: function ( v ) {

		var te = this.elements;
		var x = v.x, y = v.y, z = v.z;

		te[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;
		te[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;
		te[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;
		te[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;

		return this;

	},

	getMaxScaleOnAxis: function () {

		var te = this.elements;

		var scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];
		var scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];
		var scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];

		return Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );

	},

	makeTranslation: function ( x, y, z ) {

		this.set(

			1, 0, 0, x,
			0, 1, 0, y,
			0, 0, 1, z,
			0, 0, 0, 1

		);

		return this;

	},

	makeRotationX: function ( theta ) {

		var c = Math.cos( theta ), s = Math.sin( theta );

		this.set(

			1, 0, 0, 0,
			0, c, - s, 0,
			0, s, c, 0,
			0, 0, 0, 1

		);

		return this;

	},

	makeRotationY: function ( theta ) {

		var c = Math.cos( theta ), s = Math.sin( theta );

		this.set(

			 c, 0, s, 0,
			 0, 1, 0, 0,
			- s, 0, c, 0,
			 0, 0, 0, 1

		);

		return this;

	},

	makeRotationZ: function ( theta ) {

		var c = Math.cos( theta ), s = Math.sin( theta );

		this.set(

			c, - s, 0, 0,
			s, c, 0, 0,
			0, 0, 1, 0,
			0, 0, 0, 1

		);

		return this;

	},

	makeRotationAxis: function ( axis, angle ) {

		// Based on http://www.gamedev.net/reference/articles/article1199.asp

		var c = Math.cos( angle );
		var s = Math.sin( angle );
		var t = 1 - c;
		var x = axis.x, y = axis.y, z = axis.z;
		var tx = t * x, ty = t * y;

		this.set(

			tx * x + c, tx * y - s * z, tx * z + s * y, 0,
			tx * y + s * z, ty * y + c, ty * z - s * x, 0,
			tx * z - s * y, ty * z + s * x, t * z * z + c, 0,
			0, 0, 0, 1

		);

		 return this;

	},

	makeScale: function ( x, y, z ) {

		this.set(

			x, 0, 0, 0,
			0, y, 0, 0,
			0, 0, z, 0,
			0, 0, 0, 1

		);

		return this;

	},

	makeShear: function ( x, y, z ) {

		this.set(

			1, y, z, 0,
			x, 1, z, 0,
			x, y, 1, 0,
			0, 0, 0, 1

		);

		return this;

	},

	compose: function ( position, quaternion, scale ) {

		this.makeRotationFromQuaternion( quaternion );
		this.scale( scale );
		this.setPosition( position );

		return this;

	},

	decompose: function () {

		var vector = new Vector3();
		var matrix = new Matrix4();

		return function decompose( position, quaternion, scale ) {

			var te = this.elements;

			var sx = vector.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();
			var sy = vector.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();
			var sz = vector.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();

			// if determine is negative, we need to invert one scale
			var det = this.determinant();
			if ( det < 0 ) sx = - sx;

			position.x = te[ 12 ];
			position.y = te[ 13 ];
			position.z = te[ 14 ];

			// scale the rotation part
			matrix.copy( this );

			var invSX = 1 / sx;
			var invSY = 1 / sy;
			var invSZ = 1 / sz;

			matrix.elements[ 0 ] *= invSX;
			matrix.elements[ 1 ] *= invSX;
			matrix.elements[ 2 ] *= invSX;

			matrix.elements[ 4 ] *= invSY;
			matrix.elements[ 5 ] *= invSY;
			matrix.elements[ 6 ] *= invSY;

			matrix.elements[ 8 ] *= invSZ;
			matrix.elements[ 9 ] *= invSZ;
			matrix.elements[ 10 ] *= invSZ;

			quaternion.setFromRotationMatrix( matrix );

			scale.x = sx;
			scale.y = sy;
			scale.z = sz;

			return this;

		};

	}(),

	makePerspective: function ( left, right, top, bottom, near, far ) {

		if ( far === undefined ) {

			console.warn( 'THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.' );

		}

		var te = this.elements;
		var x = 2 * near / ( right - left );
		var y = 2 * near / ( top - bottom );

		var a = ( right + left ) / ( right - left );
		var b = ( top + bottom ) / ( top - bottom );
		var c = - ( far + near ) / ( far - near );
		var d = - 2 * far * near / ( far - near );

		te[ 0 ] = x;	te[ 4 ] = 0;	te[ 8 ] = a;	te[ 12 ] = 0;
		te[ 1 ] = 0;	te[ 5 ] = y;	te[ 9 ] = b;	te[ 13 ] = 0;
		te[ 2 ] = 0;	te[ 6 ] = 0;	te[ 10 ] = c;	te[ 14 ] = d;
		te[ 3 ] = 0;	te[ 7 ] = 0;	te[ 11 ] = - 1;	te[ 15 ] = 0;

		return this;

	},

	makeOrthographic: function ( left, right, top, bottom, near, far ) {

		var te = this.elements;
		var w = 1.0 / ( right - left );
		var h = 1.0 / ( top - bottom );
		var p = 1.0 / ( far - near );

		var x = ( right + left ) * w;
		var y = ( top + bottom ) * h;
		var z = ( far + near ) * p;

		te[ 0 ] = 2 * w;	te[ 4 ] = 0;	te[ 8 ] = 0;	te[ 12 ] = - x;
		te[ 1 ] = 0;	te[ 5 ] = 2 * h;	te[ 9 ] = 0;	te[ 13 ] = - y;
		te[ 2 ] = 0;	te[ 6 ] = 0;	te[ 10 ] = - 2 * p;	te[ 14 ] = - z;
		te[ 3 ] = 0;	te[ 7 ] = 0;	te[ 11 ] = 0;	te[ 15 ] = 1;

		return this;

	},

	equals: function ( matrix ) {

		var te = this.elements;
		var me = matrix.elements;

		for ( var i = 0; i < 16; i ++ ) {

			if ( te[ i ] !== me[ i ] ) return false;

		}

		return true;

	},

	fromArray: function ( array, offset ) {

		if ( offset === undefined ) offset = 0;

		for ( var i = 0; i < 16; i ++ ) {

			this.elements[ i ] = array[ i + offset ];

		}

		return this;

	},

	toArray: function ( array, offset ) {

		if ( array === undefined ) array = [];
		if ( offset === undefined ) offset = 0;

		var te = this.elements;

		array[ offset ] = te[ 0 ];
		array[ offset + 1 ] = te[ 1 ];
		array[ offset + 2 ] = te[ 2 ];
		array[ offset + 3 ] = te[ 3 ];

		array[ offset + 4 ] = te[ 4 ];
		array[ offset + 5 ] = te[ 5 ];
		array[ offset + 6 ] = te[ 6 ];
		array[ offset + 7 ] = te[ 7 ];

		array[ offset + 8 ] = te[ 8 ];
		array[ offset + 9 ] = te[ 9 ];
		array[ offset + 10 ] = te[ 10 ];
		array[ offset + 11 ] = te[ 11 ];

		array[ offset + 12 ] = te[ 12 ];
		array[ offset + 13 ] = te[ 13 ];
		array[ offset + 14 ] = te[ 14 ];
		array[ offset + 15 ] = te[ 15 ];

		return array;

	}

} );

/**
 * @author mikael emtinger / http://gomo.se/
 * @author alteredq / http://alteredqualia.com/
 * @author WestLangley / http://github.com/WestLangley
 * @author bhouston / http://clara.io
 */

function Quaternion( x, y, z, w ) {

	this._x = x || 0;
	this._y = y || 0;
	this._z = z || 0;
	this._w = ( w !== undefined ) ? w : 1;

}

Object.assign( Quaternion, {

	slerp: function ( qa, qb, qm, t ) {

		return qm.copy( qa ).slerp( qb, t );

	},

	slerpFlat: function ( dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {

		// fuzz-free, array-based Quaternion SLERP operation

		var x0 = src0[ srcOffset0 + 0 ],
			y0 = src0[ srcOffset0 + 1 ],
			z0 = src0[ srcOffset0 + 2 ],
			w0 = src0[ srcOffset0 + 3 ],

			x1 = src1[ srcOffset1 + 0 ],
			y1 = src1[ srcOffset1 + 1 ],
			z1 = src1[ srcOffset1 + 2 ],
			w1 = src1[ srcOffset1 + 3 ];

		if ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {

			var s = 1 - t,

				cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,

				dir = ( cos >= 0 ? 1 : - 1 ),
				sqrSin = 1 - cos * cos;

			// Skip the Slerp for tiny steps to avoid numeric problems:
			if ( sqrSin > Number.EPSILON ) {

				var sin = Math.sqrt( sqrSin ),
					len = Math.atan2( sin, cos * dir );

				s = Math.sin( s * len ) / sin;
				t = Math.sin( t * len ) / sin;

			}

			var tDir = t * dir;

			x0 = x0 * s + x1 * tDir;
			y0 = y0 * s + y1 * tDir;
			z0 = z0 * s + z1 * tDir;
			w0 = w0 * s + w1 * tDir;

			// Normalize in case we just did a lerp:
			if ( s === 1 - t ) {

				var f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );

				x0 *= f;
				y0 *= f;
				z0 *= f;
				w0 *= f;

			}

		}

		dst[ dstOffset ] = x0;
		dst[ dstOffset + 1 ] = y0;
		dst[ dstOffset + 2 ] = z0;
		dst[ dstOffset + 3 ] = w0;

	}

} );

Object.defineProperties( Quaternion.prototype, {

	x: {

		get: function () {

			return this._x;

		},

		set: function ( value ) {

			this._x = value;
			this.onChangeCallback();

		}

	},

	y: {

		get: function () {

			return this._y;

		},

		set: function ( value ) {

			this._y = value;
			this.onChangeCallback();

		}

	},

	z: {

		get: function () {

			return this._z;

		},

		set: function ( value ) {

			this._z = value;
			this.onChangeCallback();

		}

	},

	w: {

		get: function () {

			return this._w;

		},

		set: function ( value ) {

			this._w = value;
			this.onChangeCallback();

		}

	}

} );

Object.assign( Quaternion.prototype, {

	set: function ( x, y, z, w ) {

		this._x = x;
		this._y = y;
		this._z = z;
		this._w = w;

		this.onChangeCallback();

		return this;

	},

	clone: function () {

		return new this.constructor( this._x, this._y, this._z, this._w );

	},

	copy: function ( quaternion ) {

		this._x = quaternion.x;
		this._y = quaternion.y;
		this._z = quaternion.z;
		this._w = quaternion.w;

		this.onChangeCallback();

		return this;

	},

	setFromEuler: function ( euler, update ) {

		if ( ! ( euler && euler.isEuler ) ) {

			throw new Error( 'THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.' );

		}

		var x = euler._x, y = euler._y, z = euler._z, order = euler.order;

		// http://www.mathworks.com/matlabcentral/fileexchange/
		// 	20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/
		//	content/SpinCalc.m

		var cos = Math.cos;
		var sin = Math.sin;

		var c1 = cos( x / 2 );
		var c2 = cos( y / 2 );
		var c3 = cos( z / 2 );

		var s1 = sin( x / 2 );
		var s2 = sin( y / 2 );
		var s3 = sin( z / 2 );

		if ( order === 'XYZ' ) {

			this._x = s1 * c2 * c3 + c1 * s2 * s3;
			this._y = c1 * s2 * c3 - s1 * c2 * s3;
			this._z = c1 * c2 * s3 + s1 * s2 * c3;
			this._w = c1 * c2 * c3 - s1 * s2 * s3;

		} else if ( order === 'YXZ' ) {

			this._x = s1 * c2 * c3 + c1 * s2 * s3;
			this._y = c1 * s2 * c3 - s1 * c2 * s3;
			this._z = c1 * c2 * s3 - s1 * s2 * c3;
			this._w = c1 * c2 * c3 + s1 * s2 * s3;

		} else if ( order === 'ZXY' ) {

			this._x = s1 * c2 * c3 - c1 * s2 * s3;
			this._y = c1 * s2 * c3 + s1 * c2 * s3;
			this._z = c1 * c2 * s3 + s1 * s2 * c3;
			this._w = c1 * c2 * c3 - s1 * s2 * s3;

		} else if ( order === 'ZYX' ) {

			this._x = s1 * c2 * c3 - c1 * s2 * s3;
			this._y = c1 * s2 * c3 + s1 * c2 * s3;
			this._z = c1 * c2 * s3 - s1 * s2 * c3;
			this._w = c1 * c2 * c3 + s1 * s2 * s3;

		} else if ( order === 'YZX' ) {

			this._x = s1 * c2 * c3 + c1 * s2 * s3;
			this._y = c1 * s2 * c3 + s1 * c2 * s3;
			this._z = c1 * c2 * s3 - s1 * s2 * c3;
			this._w = c1 * c2 * c3 - s1 * s2 * s3;

		} else if ( order === 'XZY' ) {

			this._x = s1 * c2 * c3 - c1 * s2 * s3;
			this._y = c1 * s2 * c3 - s1 * c2 * s3;
			this._z = c1 * c2 * s3 + s1 * s2 * c3;
			this._w = c1 * c2 * c3 + s1 * s2 * s3;

		}

		if ( update !== false ) this.onChangeCallback();

		return this;

	},

	setFromAxisAngle: function ( axis, angle ) {

		// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm

		// assumes axis is normalized

		var halfAngle = angle / 2, s = Math.sin( halfAngle );

		this._x = axis.x * s;
		this._y = axis.y * s;
		this._z = axis.z * s;
		this._w = Math.cos( halfAngle );

		this.onChangeCallback();

		return this;

	},

	setFromRotationMatrix: function ( m ) {

		// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm

		// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

		var te = m.elements,

			m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],
			m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],
			m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],

			trace = m11 + m22 + m33,
			s;

		if ( trace > 0 ) {

			s = 0.5 / Math.sqrt( trace + 1.0 );

			this._w = 0.25 / s;
			this._x = ( m32 - m23 ) * s;
			this._y = ( m13 - m31 ) * s;
			this._z = ( m21 - m12 ) * s;

		} else if ( m11 > m22 && m11 > m33 ) {

			s = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );

			this._w = ( m32 - m23 ) / s;
			this._x = 0.25 * s;
			this._y = ( m12 + m21 ) / s;
			this._z = ( m13 + m31 ) / s;

		} else if ( m22 > m33 ) {

			s = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );

			this._w = ( m13 - m31 ) / s;
			this._x = ( m12 + m21 ) / s;
			this._y = 0.25 * s;
			this._z = ( m23 + m32 ) / s;

		} else {

			s = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );

			this._w = ( m21 - m12 ) / s;
			this._x = ( m13 + m31 ) / s;
			this._y = ( m23 + m32 ) / s;
			this._z = 0.25 * s;

		}

		this.onChangeCallback();

		return this;

	},

	setFromUnitVectors: function () {

		// assumes direction vectors vFrom and vTo are normalized

		var v1 = new Vector3();
		var r;

		var EPS = 0.000001;

		return function setFromUnitVectors( vFrom, vTo ) {

			if ( v1 === undefined ) v1 = new Vector3();

			r = vFrom.dot( vTo ) + 1;

			if ( r < EPS ) {

				r = 0;

				if ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {

					v1.set( - vFrom.y, vFrom.x, 0 );

				} else {

					v1.set( 0, - vFrom.z, vFrom.y );

				}

			} else {

				v1.crossVectors( vFrom, vTo );

			}

			this._x = v1.x;
			this._y = v1.y;
			this._z = v1.z;
			this._w = r;

			return this.normalize();

		};

	}(),

	inverse: function () {

		return this.conjugate().normalize();

	},

	conjugate: function () {

		this._x *= - 1;
		this._y *= - 1;
		this._z *= - 1;

		this.onChangeCallback();

		return this;

	},

	dot: function ( v ) {

		return this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;

	},

	lengthSq: function () {

		return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;

	},

	length: function () {

		return Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );

	},

	normalize: function () {

		var l = this.length();

		if ( l === 0 ) {

			this._x = 0;
			this._y = 0;
			this._z = 0;
			this._w = 1;

		} else {

			l = 1 / l;

			this._x = this._x * l;
			this._y = this._y * l;
			this._z = this._z * l;
			this._w = this._w * l;

		}

		this.onChangeCallback();

		return this;

	},

	multiply: function ( q, p ) {

		if ( p !== undefined ) {

			console.warn( 'THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.' );
			return this.multiplyQuaternions( q, p );

		}

		return this.multiplyQuaternions( this, q );

	},

	premultiply: function ( q ) {

		return this.multiplyQuaternions( q, this );

	},

	multiplyQuaternions: function ( a, b ) {

		// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm

		var qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;
		var qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;

		this._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;
		this._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;
		this._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;
		this._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;

		this.onChangeCallback();

		return this;

	},

	slerp: function ( qb, t ) {

		if ( t === 0 ) return this;
		if ( t === 1 ) return this.copy( qb );

		var x = this._x, y = this._y, z = this._z, w = this._w;

		// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/

		var cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;

		if ( cosHalfTheta < 0 ) {

			this._w = - qb._w;
			this._x = - qb._x;
			this._y = - qb._y;
			this._z = - qb._z;

			cosHalfTheta = - cosHalfTheta;

		} else {

			this.copy( qb );

		}

		if ( cosHalfTheta >= 1.0 ) {

			this._w = w;
			this._x = x;
			this._y = y;
			this._z = z;

			return this;

		}

		var sinHalfTheta = Math.sqrt( 1.0 - cosHalfTheta * cosHalfTheta );

		if ( Math.abs( sinHalfTheta ) < 0.001 ) {

			this._w = 0.5 * ( w + this._w );
			this._x = 0.5 * ( x + this._x );
			this._y = 0.5 * ( y + this._y );
			this._z = 0.5 * ( z + this._z );

			return this;

		}

		var halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );
		var ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,
			ratioB = Math.sin( t * halfTheta ) / sinHalfTheta;

		this._w = ( w * ratioA + this._w * ratioB );
		this._x = ( x * ratioA + this._x * ratioB );
		this._y = ( y * ratioA + this._y * ratioB );
		this._z = ( z * ratioA + this._z * ratioB );

		this.onChangeCallback();

		return this;

	},

	equals: function ( quaternion ) {

		return ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );

	},

	fromArray: function ( array, offset ) {

		if ( offset === undefined ) offset = 0;

		this._x = array[ offset ];
		this._y = array[ offset + 1 ];
		this._z = array[ offset + 2 ];
		this._w = array[ offset + 3 ];

		this.onChangeCallback();

		return this;

	},

	toArray: function ( array, offset ) {

		if ( array === undefined ) array = [];
		if ( offset === undefined ) offset = 0;

		array[ offset ] = this._x;
		array[ offset + 1 ] = this._y;
		array[ offset + 2 ] = this._z;
		array[ offset + 3 ] = this._w;

		return array;

	},

	onChange: function ( callback ) {

		this.onChangeCallback = callback;

		return this;

	},

	onChangeCallback: function () {}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 * @author kile / http://kile.stravaganza.org/
 * @author philogb / http://blog.thejit.org/
 * @author mikael emtinger / http://gomo.se/
 * @author egraether / http://egraether.com/
 * @author WestLangley / http://github.com/WestLangley
 */

function Vector3( x, y, z ) {

	this.x = x || 0;
	this.y = y || 0;
	this.z = z || 0;

}

Object.assign( Vector3.prototype, {

	isVector3: true,

	set: function ( x, y, z ) {

		this.x = x;
		this.y = y;
		this.z = z;

		return this;

	},

	setScalar: function ( scalar ) {

		this.x = scalar;
		this.y = scalar;
		this.z = scalar;

		return this;

	},

	setX: function ( x ) {

		this.x = x;

		return this;

	},

	setY: function ( y ) {

		this.y = y;

		return this;

	},

	setZ: function ( z ) {

		this.z = z;

		return this;

	},

	setComponent: function ( index, value ) {

		switch ( index ) {

			case 0: this.x = value; break;
			case 1: this.y = value; break;
			case 2: this.z = value; break;
			default: throw new Error( 'index is out of range: ' + index );

		}

		return this;

	},

	getComponent: function ( index ) {

		switch ( index ) {

			case 0: return this.x;
			case 1: return this.y;
			case 2: return this.z;
			default: throw new Error( 'index is out of range: ' + index );

		}

	},

	clone: function () {

		return new this.constructor( this.x, this.y, this.z );

	},

	copy: function ( v ) {

		this.x = v.x;
		this.y = v.y;
		this.z = v.z;

		return this;

	},

	add: function ( v, w ) {

		if ( w !== undefined ) {

			console.warn( 'THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );
			return this.addVectors( v, w );

		}

		this.x += v.x;
		this.y += v.y;
		this.z += v.z;

		return this;

	},

	addScalar: function ( s ) {

		this.x += s;
		this.y += s;
		this.z += s;

		return this;

	},

	addVectors: function ( a, b ) {

		this.x = a.x + b.x;
		this.y = a.y + b.y;
		this.z = a.z + b.z;

		return this;

	},

	addScaledVector: function ( v, s ) {

		this.x += v.x * s;
		this.y += v.y * s;
		this.z += v.z * s;

		return this;

	},

	sub: function ( v, w ) {

		if ( w !== undefined ) {

			console.warn( 'THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );
			return this.subVectors( v, w );

		}

		this.x -= v.x;
		this.y -= v.y;
		this.z -= v.z;

		return this;

	},

	subScalar: function ( s ) {

		this.x -= s;
		this.y -= s;
		this.z -= s;

		return this;

	},

	subVectors: function ( a, b ) {

		this.x = a.x - b.x;
		this.y = a.y - b.y;
		this.z = a.z - b.z;

		return this;

	},

	multiply: function ( v, w ) {

		if ( w !== undefined ) {

			console.warn( 'THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.' );
			return this.multiplyVectors( v, w );

		}

		this.x *= v.x;
		this.y *= v.y;
		this.z *= v.z;

		return this;

	},

	multiplyScalar: function ( scalar ) {

		this.x *= scalar;
		this.y *= scalar;
		this.z *= scalar;

		return this;

	},

	multiplyVectors: function ( a, b ) {

		this.x = a.x * b.x;
		this.y = a.y * b.y;
		this.z = a.z * b.z;

		return this;

	},

	applyEuler: function () {

		var quaternion = new Quaternion();

		return function applyEuler( euler ) {

			if ( ! ( euler && euler.isEuler ) ) {

				console.error( 'THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.' );

			}

			return this.applyQuaternion( quaternion.setFromEuler( euler ) );

		};

	}(),

	applyAxisAngle: function () {

		var quaternion = new Quaternion();

		return function applyAxisAngle( axis, angle ) {

			return this.applyQuaternion( quaternion.setFromAxisAngle( axis, angle ) );

		};

	}(),

	applyMatrix3: function ( m ) {

		var x = this.x, y = this.y, z = this.z;
		var e = m.elements;

		this.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;
		this.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;
		this.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;

		return this;

	},

	applyMatrix4: function ( m ) {

		var x = this.x, y = this.y, z = this.z;
		var e = m.elements;

		var w = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] );

		this.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] ) * w;
		this.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] ) * w;
		this.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * w;

		return this;

	},

	applyQuaternion: function ( q ) {

		var x = this.x, y = this.y, z = this.z;
		var qx = q.x, qy = q.y, qz = q.z, qw = q.w;

		// calculate quat * vector

		var ix = qw * x + qy * z - qz * y;
		var iy = qw * y + qz * x - qx * z;
		var iz = qw * z + qx * y - qy * x;
		var iw = - qx * x - qy * y - qz * z;

		// calculate result * inverse quat

		this.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;
		this.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;
		this.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;

		return this;

	},

	project: function () {

		var matrix = new Matrix4();

		return function project( camera ) {

			matrix.multiplyMatrices( camera.projectionMatrix, matrix.getInverse( camera.matrixWorld ) );
			return this.applyMatrix4( matrix );

		};

	}(),

	unproject: function () {

		var matrix = new Matrix4();

		return function unproject( camera ) {

			matrix.multiplyMatrices( camera.matrixWorld, matrix.getInverse( camera.projectionMatrix ) );
			return this.applyMatrix4( matrix );

		};

	}(),

	transformDirection: function ( m ) {

		// input: THREE.Matrix4 affine matrix
		// vector interpreted as a direction

		var x = this.x, y = this.y, z = this.z;
		var e = m.elements;

		this.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z;
		this.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z;
		this.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;

		return this.normalize();

	},

	divide: function ( v ) {

		this.x /= v.x;
		this.y /= v.y;
		this.z /= v.z;

		return this;

	},

	divideScalar: function ( scalar ) {

		return this.multiplyScalar( 1 / scalar );

	},

	min: function ( v ) {

		this.x = Math.min( this.x, v.x );
		this.y = Math.min( this.y, v.y );
		this.z = Math.min( this.z, v.z );

		return this;

	},

	max: function ( v ) {

		this.x = Math.max( this.x, v.x );
		this.y = Math.max( this.y, v.y );
		this.z = Math.max( this.z, v.z );

		return this;

	},

	clamp: function ( min, max ) {

		// assumes min < max, componentwise

		this.x = Math.max( min.x, Math.min( max.x, this.x ) );
		this.y = Math.max( min.y, Math.min( max.y, this.y ) );
		this.z = Math.max( min.z, Math.min( max.z, this.z ) );

		return this;

	},

	clampScalar: function () {

		var min = new Vector3();
		var max = new Vector3();

		return function clampScalar( minVal, maxVal ) {

			min.set( minVal, minVal, minVal );
			max.set( maxVal, maxVal, maxVal );

			return this.clamp( min, max );

		};

	}(),

	clampLength: function ( min, max ) {

		var length = this.length();

		return this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );

	},

	floor: function () {

		this.x = Math.floor( this.x );
		this.y = Math.floor( this.y );
		this.z = Math.floor( this.z );

		return this;

	},

	ceil: function () {

		this.x = Math.ceil( this.x );
		this.y = Math.ceil( this.y );
		this.z = Math.ceil( this.z );

		return this;

	},

	round: function () {

		this.x = Math.round( this.x );
		this.y = Math.round( this.y );
		this.z = Math.round( this.z );

		return this;

	},

	roundToZero: function () {

		this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
		this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );
		this.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );

		return this;

	},

	negate: function () {

		this.x = - this.x;
		this.y = - this.y;
		this.z = - this.z;

		return this;

	},

	dot: function ( v ) {

		return this.x * v.x + this.y * v.y + this.z * v.z;

	},

	// TODO lengthSquared?

	lengthSq: function () {

		return this.x * this.x + this.y * this.y + this.z * this.z;

	},

	length: function () {

		return Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );

	},

	manhattanLength: function () {

		return Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );

	},

	normalize: function () {

		return this.divideScalar( this.length() || 1 );

	},

	setLength: function ( length ) {

		return this.normalize().multiplyScalar( length );

	},

	lerp: function ( v, alpha ) {

		this.x += ( v.x - this.x ) * alpha;
		this.y += ( v.y - this.y ) * alpha;
		this.z += ( v.z - this.z ) * alpha;

		return this;

	},

	lerpVectors: function ( v1, v2, alpha ) {

		return this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );

	},

	cross: function ( v, w ) {

		if ( w !== undefined ) {

			console.warn( 'THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.' );
			return this.crossVectors( v, w );

		}

		return this.crossVectors( this, v );

	},

	crossVectors: function ( a, b ) {

		var ax = a.x, ay = a.y, az = a.z;
		var bx = b.x, by = b.y, bz = b.z;

		this.x = ay * bz - az * by;
		this.y = az * bx - ax * bz;
		this.z = ax * by - ay * bx;

		return this;

	},

	projectOnVector: function ( vector ) {

		var scalar = vector.dot( this ) / vector.lengthSq();

		return this.copy( vector ).multiplyScalar( scalar );

	},

	projectOnPlane: function () {

		var v1 = new Vector3();

		return function projectOnPlane( planeNormal ) {

			v1.copy( this ).projectOnVector( planeNormal );

			return this.sub( v1 );

		};

	}(),

	reflect: function () {

		// reflect incident vector off plane orthogonal to normal
		// normal is assumed to have unit length

		var v1 = new Vector3();

		return function reflect( normal ) {

			return this.sub( v1.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );

		};

	}(),

	angleTo: function ( v ) {

		var theta = this.dot( v ) / ( Math.sqrt( this.lengthSq() * v.lengthSq() ) );

		// clamp, to handle numerical problems

		return Math.acos( _Math.clamp( theta, - 1, 1 ) );

	},

	distanceTo: function ( v ) {

		return Math.sqrt( this.distanceToSquared( v ) );

	},

	distanceToSquared: function ( v ) {

		var dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;

		return dx * dx + dy * dy + dz * dz;

	},

	manhattanDistanceTo: function ( v ) {

		return Math.abs( this.x - v.x ) + Math.abs( this.y - v.y ) + Math.abs( this.z - v.z );

	},

	setFromSpherical: function ( s ) {

		var sinPhiRadius = Math.sin( s.phi ) * s.radius;

		this.x = sinPhiRadius * Math.sin( s.theta );
		this.y = Math.cos( s.phi ) * s.radius;
		this.z = sinPhiRadius * Math.cos( s.theta );

		return this;

	},

	setFromCylindrical: function ( c ) {

		this.x = c.radius * Math.sin( c.theta );
		this.y = c.y;
		this.z = c.radius * Math.cos( c.theta );

		return this;

	},

	setFromMatrixPosition: function ( m ) {

		var e = m.elements;

		this.x = e[ 12 ];
		this.y = e[ 13 ];
		this.z = e[ 14 ];

		return this;

	},

	setFromMatrixScale: function ( m ) {

		var sx = this.setFromMatrixColumn( m, 0 ).length();
		var sy = this.setFromMatrixColumn( m, 1 ).length();
		var sz = this.setFromMatrixColumn( m, 2 ).length();

		this.x = sx;
		this.y = sy;
		this.z = sz;

		return this;

	},

	setFromMatrixColumn: function ( m, index ) {

		return this.fromArray( m.elements, index * 4 );

	},

	equals: function ( v ) {

		return ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );

	},

	fromArray: function ( array, offset ) {

		if ( offset === undefined ) offset = 0;

		this.x = array[ offset ];
		this.y = array[ offset + 1 ];
		this.z = array[ offset + 2 ];

		return this;

	},

	toArray: function ( array, offset ) {

		if ( array === undefined ) array = [];
		if ( offset === undefined ) offset = 0;

		array[ offset ] = this.x;
		array[ offset + 1 ] = this.y;
		array[ offset + 2 ] = this.z;

		return array;

	},

	fromBufferAttribute: function ( attribute, index, offset ) {

		if ( offset !== undefined ) {

			console.warn( 'THREE.Vector3: offset has been removed from .fromBufferAttribute().' );

		}

		this.x = attribute.getX( index );
		this.y = attribute.getY( index );
		this.z = attribute.getZ( index );

		return this;

	}

} );

/**
 * @author alteredq / http://alteredqualia.com/
 * @author WestLangley / http://github.com/WestLangley
 * @author bhouston / http://clara.io
 * @author tschw
 */

function Matrix3() {

	this.elements = [

		1, 0, 0,
		0, 1, 0,
		0, 0, 1

	];

	if ( arguments.length > 0 ) {

		console.error( 'THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.' );

	}

}

Object.assign( Matrix3.prototype, {

	isMatrix3: true,

	set: function ( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {

		var te = this.elements;

		te[ 0 ] = n11; te[ 1 ] = n21; te[ 2 ] = n31;
		te[ 3 ] = n12; te[ 4 ] = n22; te[ 5 ] = n32;
		te[ 6 ] = n13; te[ 7 ] = n23; te[ 8 ] = n33;

		return this;

	},

	identity: function () {

		this.set(

			1, 0, 0,
			0, 1, 0,
			0, 0, 1

		);

		return this;

	},

	clone: function () {

		return new this.constructor().fromArray( this.elements );

	},

	copy: function ( m ) {

		var te = this.elements;
		var me = m.elements;

		te[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ];
		te[ 3 ] = me[ 3 ]; te[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ];
		te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ]; te[ 8 ] = me[ 8 ];

		return this;

	},

	setFromMatrix4: function ( m ) {

		var me = m.elements;

		this.set(

			me[ 0 ], me[ 4 ], me[ 8 ],
			me[ 1 ], me[ 5 ], me[ 9 ],
			me[ 2 ], me[ 6 ], me[ 10 ]

		);

		return this;

	},

	applyToBufferAttribute: function () {

		var v1 = new Vector3();

		return function applyToBufferAttribute( attribute ) {

			for ( var i = 0, l = attribute.count; i < l; i ++ ) {

				v1.x = attribute.getX( i );
				v1.y = attribute.getY( i );
				v1.z = attribute.getZ( i );

				v1.applyMatrix3( this );

				attribute.setXYZ( i, v1.x, v1.y, v1.z );

			}

			return attribute;

		};

	}(),

	multiply: function ( m ) {

		return this.multiplyMatrices( this, m );

	},

	premultiply: function ( m ) {

		return this.multiplyMatrices( m, this );

	},

	multiplyMatrices: function ( a, b ) {

		var ae = a.elements;
		var be = b.elements;
		var te = this.elements;

		var a11 = ae[ 0 ], a12 = ae[ 3 ], a13 = ae[ 6 ];
		var a21 = ae[ 1 ], a22 = ae[ 4 ], a23 = ae[ 7 ];
		var a31 = ae[ 2 ], a32 = ae[ 5 ], a33 = ae[ 8 ];

		var b11 = be[ 0 ], b12 = be[ 3 ], b13 = be[ 6 ];
		var b21 = be[ 1 ], b22 = be[ 4 ], b23 = be[ 7 ];
		var b31 = be[ 2 ], b32 = be[ 5 ], b33 = be[ 8 ];

		te[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31;
		te[ 3 ] = a11 * b12 + a12 * b22 + a13 * b32;
		te[ 6 ] = a11 * b13 + a12 * b23 + a13 * b33;

		te[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31;
		te[ 4 ] = a21 * b12 + a22 * b22 + a23 * b32;
		te[ 7 ] = a21 * b13 + a22 * b23 + a23 * b33;

		te[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31;
		te[ 5 ] = a31 * b12 + a32 * b22 + a33 * b32;
		te[ 8 ] = a31 * b13 + a32 * b23 + a33 * b33;

		return this;

	},

	multiplyScalar: function ( s ) {

		var te = this.elements;

		te[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;
		te[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;
		te[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;

		return this;

	},

	determinant: function () {

		var te = this.elements;

		var a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],
			d = te[ 3 ], e = te[ 4 ], f = te[ 5 ],
			g = te[ 6 ], h = te[ 7 ], i = te[ 8 ];

		return a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;

	},

	getInverse: function ( matrix, throwOnDegenerate ) {

		if ( matrix && matrix.isMatrix4 ) {

			console.error( "THREE.Matrix3: .getInverse() no longer takes a Matrix4 argument." );

		}

		var me = matrix.elements,
			te = this.elements,

			n11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ],
			n12 = me[ 3 ], n22 = me[ 4 ], n32 = me[ 5 ],
			n13 = me[ 6 ], n23 = me[ 7 ], n33 = me[ 8 ],

			t11 = n33 * n22 - n32 * n23,
			t12 = n32 * n13 - n33 * n12,
			t13 = n23 * n12 - n22 * n13,

			det = n11 * t11 + n21 * t12 + n31 * t13;

		if ( det === 0 ) {

			var msg = "THREE.Matrix3: .getInverse() can't invert matrix, determinant is 0";

			if ( throwOnDegenerate === true ) {

				throw new Error( msg );

			} else {

				console.warn( msg );

			}

			return this.identity();

		}

		var detInv = 1 / det;

		te[ 0 ] = t11 * detInv;
		te[ 1 ] = ( n31 * n23 - n33 * n21 ) * detInv;
		te[ 2 ] = ( n32 * n21 - n31 * n22 ) * detInv;

		te[ 3 ] = t12 * detInv;
		te[ 4 ] = ( n33 * n11 - n31 * n13 ) * detInv;
		te[ 5 ] = ( n31 * n12 - n32 * n11 ) * detInv;

		te[ 6 ] = t13 * detInv;
		te[ 7 ] = ( n21 * n13 - n23 * n11 ) * detInv;
		te[ 8 ] = ( n22 * n11 - n21 * n12 ) * detInv;

		return this;

	},

	transpose: function () {

		var tmp, m = this.elements;

		tmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;
		tmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;
		tmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;

		return this;

	},

	getNormalMatrix: function ( matrix4 ) {

		return this.setFromMatrix4( matrix4 ).getInverse( this ).transpose();

	},

	transposeIntoArray: function ( r ) {

		var m = this.elements;

		r[ 0 ] = m[ 0 ];
		r[ 1 ] = m[ 3 ];
		r[ 2 ] = m[ 6 ];
		r[ 3 ] = m[ 1 ];
		r[ 4 ] = m[ 4 ];
		r[ 5 ] = m[ 7 ];
		r[ 6 ] = m[ 2 ];
		r[ 7 ] = m[ 5 ];
		r[ 8 ] = m[ 8 ];

		return this;

	},

	setUvTransform: function ( tx, ty, sx, sy, rotation, cx, cy ) {

		var c = Math.cos( rotation );
		var s = Math.sin( rotation );

		this.set(
			sx * c, sx * s, - sx * ( c * cx + s * cy ) + cx + tx,
			- sy * s, sy * c, - sy * ( - s * cx + c * cy ) + cy + ty,
			0, 0, 1
		);

	},

	scale: function ( sx, sy ) {

		var te = this.elements;

		te[ 0 ] *= sx; te[ 3 ] *= sx; te[ 6 ] *= sx;
		te[ 1 ] *= sy; te[ 4 ] *= sy; te[ 7 ] *= sy;

		return this;

	},

	rotate: function ( theta ) {

		var c = Math.cos( theta );
		var s = Math.sin( theta );

		var te = this.elements;

		var a11 = te[ 0 ], a12 = te[ 3 ], a13 = te[ 6 ];
		var a21 = te[ 1 ], a22 = te[ 4 ], a23 = te[ 7 ];

		te[ 0 ] = c * a11 + s * a21;
		te[ 3 ] = c * a12 + s * a22;
		te[ 6 ] = c * a13 + s * a23;

		te[ 1 ] = - s * a11 + c * a21;
		te[ 4 ] = - s * a12 + c * a22;
		te[ 7 ] = - s * a13 + c * a23;

		return this;

	},

	translate: function ( tx, ty ) {

		var te = this.elements;

		te[ 0 ] += tx * te[ 2 ]; te[ 3 ] += tx * te[ 5 ]; te[ 6 ] += tx * te[ 8 ];
		te[ 1 ] += ty * te[ 2 ]; te[ 4 ] += ty * te[ 5 ]; te[ 7 ] += ty * te[ 8 ];

		return this;

	},

	equals: function ( matrix ) {

		var te = this.elements;
		var me = matrix.elements;

		for ( var i = 0; i < 9; i ++ ) {

			if ( te[ i ] !== me[ i ] ) return false;

		}

		return true;

	},

	fromArray: function ( array, offset ) {

		if ( offset === undefined ) offset = 0;

		for ( var i = 0; i < 9; i ++ ) {

			this.elements[ i ] = array[ i + offset ];

		}

		return this;

	},

	toArray: function ( array, offset ) {

		if ( array === undefined ) array = [];
		if ( offset === undefined ) offset = 0;

		var te = this.elements;

		array[ offset ] = te[ 0 ];
		array[ offset + 1 ] = te[ 1 ];
		array[ offset + 2 ] = te[ 2 ];

		array[ offset + 3 ] = te[ 3 ];
		array[ offset + 4 ] = te[ 4 ];
		array[ offset + 5 ] = te[ 5 ];

		array[ offset + 6 ] = te[ 6 ];
		array[ offset + 7 ] = te[ 7 ];
		array[ offset + 8 ] = te[ 8 ];

		return array;

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 * @author szimek / https://github.com/szimek/
 */

var textureId = 0;

function Texture( image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {

	Object.defineProperty( this, 'id', { value: textureId ++ } );

	this.uuid = _Math.generateUUID();

	this.name = '';

	this.image = image !== undefined ? image : Texture.DEFAULT_IMAGE;
	this.mipmaps = [];

	this.mapping = mapping !== undefined ? mapping : Texture.DEFAULT_MAPPING;

	this.wrapS = wrapS !== undefined ? wrapS : ClampToEdgeWrapping;
	this.wrapT = wrapT !== undefined ? wrapT : ClampToEdgeWrapping;

	this.magFilter = magFilter !== undefined ? magFilter : LinearFilter;
	this.minFilter = minFilter !== undefined ? minFilter : LinearMipMapLinearFilter;

	this.anisotropy = anisotropy !== undefined ? anisotropy : 1;

	this.format = format !== undefined ? format : RGBAFormat;
	this.type = type !== undefined ? type : UnsignedByteType;

	this.offset = new Vector2( 0, 0 );
	this.repeat = new Vector2( 1, 1 );
	this.center = new Vector2( 0, 0 );
	this.rotation = 0;

	this.matrixAutoUpdate = true;
	this.matrix = new Matrix3();

	this.generateMipmaps = true;
	this.premultiplyAlpha = false;
	this.flipY = true;
	this.unpackAlignment = 4;	// valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)

	// Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.
	//
	// Also changing the encoding after already used by a Material will not automatically make the Material
	// update.  You need to explicitly call Material.needsUpdate to trigger it to recompile.
	this.encoding = encoding !== undefined ? encoding : LinearEncoding;

	this.version = 0;
	this.onUpdate = null;

}

Texture.DEFAULT_IMAGE = undefined;
Texture.DEFAULT_MAPPING = UVMapping;

Object.defineProperty( Texture.prototype, "needsUpdate", {

	set: function ( value ) {

		if ( value === true ) this.version ++;

	}

} );

Object.assign( Texture.prototype, EventDispatcher.prototype, {

	constructor: Texture,

	isTexture: true,

	clone: function () {

		return new this.constructor().copy( this );

	},

	copy: function ( source ) {

		this.name = source.name;

		this.image = source.image;
		this.mipmaps = source.mipmaps.slice( 0 );

		this.mapping = source.mapping;

		this.wrapS = source.wrapS;
		this.wrapT = source.wrapT;

		this.magFilter = source.magFilter;
		this.minFilter = source.minFilter;

		this.anisotropy = source.anisotropy;

		this.format = source.format;
		this.type = source.type;

		this.offset.copy( source.offset );
		this.repeat.copy( source.repeat );
		this.center.copy( source.center );
		this.rotation = source.rotation;

		this.matrixAutoUpdate = source.matrixAutoUpdate;
		this.matrix.copy( source.matrix );

		this.generateMipmaps = source.generateMipmaps;
		this.premultiplyAlpha = source.premultiplyAlpha;
		this.flipY = source.flipY;
		this.unpackAlignment = source.unpackAlignment;
		this.encoding = source.encoding;

		return this;

	},

	toJSON: function ( meta ) {

		var isRootObject = ( meta === undefined || typeof meta === 'string' );

		if ( ! isRootObject && meta.textures[ this.uuid ] !== undefined ) {

			return meta.textures[ this.uuid ];

		}

		function getDataURL( image ) {

			var canvas;

			if ( image instanceof HTMLCanvasElement ) {

				canvas = image;

			} else {

				canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );
				canvas.width = image.width;
				canvas.height = image.height;

				var context = canvas.getContext( '2d' );

				if ( image instanceof ImageData ) {

					context.putImageData( image, 0, 0 );

				} else {

					context.drawImage( image, 0, 0, image.width, image.height );

				}

			}

			if ( canvas.width > 2048 || canvas.height > 2048 ) {

				return canvas.toDataURL( 'image/jpeg', 0.6 );

			} else {

				return canvas.toDataURL( 'image/png' );

			}

		}

		var output = {
			metadata: {
				version: 4.5,
				type: 'Texture',
				generator: 'Texture.toJSON'
			},

			uuid: this.uuid,
			name: this.name,

			mapping: this.mapping,

			repeat: [ this.repeat.x, this.repeat.y ],
			offset: [ this.offset.x, this.offset.y ],
			center: [ this.center.x, this.center.y ],
			rotation: this.rotation,

			wrap: [ this.wrapS, this.wrapT ],

			minFilter: this.minFilter,
			magFilter: this.magFilter,
			anisotropy: this.anisotropy,

			flipY: this.flipY
		};

		if ( this.image !== undefined ) {

			// TODO: Move to THREE.Image

			var image = this.image;

			if ( image.uuid === undefined ) {

				image.uuid = _Math.generateUUID(); // UGH

			}

			if ( ! isRootObject && meta.images[ image.uuid ] === undefined ) {

				meta.images[ image.uuid ] = {
					uuid: image.uuid,
					url: getDataURL( image )
				};

			}

			output.image = image.uuid;

		}

		if ( ! isRootObject ) {

			meta.textures[ this.uuid ] = output;

		}

		return output;

	},

	dispose: function () {

		this.dispatchEvent( { type: 'dispose' } );

	},

	transformUv: function ( uv ) {

		if ( this.mapping !== UVMapping ) return;

		uv.applyMatrix3( this.matrix );

		if ( uv.x < 0 || uv.x > 1 ) {

			switch ( this.wrapS ) {

				case RepeatWrapping:

					uv.x = uv.x - Math.floor( uv.x );
					break;

				case ClampToEdgeWrapping:

					uv.x = uv.x < 0 ? 0 : 1;
					break;

				case MirroredRepeatWrapping:

					if ( Math.abs( Math.floor( uv.x ) % 2 ) === 1 ) {

						uv.x = Math.ceil( uv.x ) - uv.x;

					} else {

						uv.x = uv.x - Math.floor( uv.x );

					}
					break;

			}

		}

		if ( uv.y < 0 || uv.y > 1 ) {

			switch ( this.wrapT ) {

				case RepeatWrapping:

					uv.y = uv.y - Math.floor( uv.y );
					break;

				case ClampToEdgeWrapping:

					uv.y = uv.y < 0 ? 0 : 1;
					break;

				case MirroredRepeatWrapping:

					if ( Math.abs( Math.floor( uv.y ) % 2 ) === 1 ) {

						uv.y = Math.ceil( uv.y ) - uv.y;

					} else {

						uv.y = uv.y - Math.floor( uv.y );

					}
					break;

			}

		}

		if ( this.flipY ) {

			uv.y = 1 - uv.y;

		}

	}

} );

/**
 * @author supereggbert / http://www.paulbrunt.co.uk/
 * @author philogb / http://blog.thejit.org/
 * @author mikael emtinger / http://gomo.se/
 * @author egraether / http://egraether.com/
 * @author WestLangley / http://github.com/WestLangley
 */

function Vector4( x, y, z, w ) {

	this.x = x || 0;
	this.y = y || 0;
	this.z = z || 0;
	this.w = ( w !== undefined ) ? w : 1;

}

Object.assign( Vector4.prototype, {

	isVector4: true,

	set: function ( x, y, z, w ) {

		this.x = x;
		this.y = y;
		this.z = z;
		this.w = w;

		return this;

	},

	setScalar: function ( scalar ) {

		this.x = scalar;
		this.y = scalar;
		this.z = scalar;
		this.w = scalar;

		return this;

	},

	setX: function ( x ) {

		this.x = x;

		return this;

	},

	setY: function ( y ) {

		this.y = y;

		return this;

	},

	setZ: function ( z ) {

		this.z = z;

		return this;

	},

	setW: function ( w ) {

		this.w = w;

		return this;

	},

	setComponent: function ( index, value ) {

		switch ( index ) {

			case 0: this.x = value; break;
			case 1: this.y = value; break;
			case 2: this.z = value; break;
			case 3: this.w = value; break;
			default: throw new Error( 'index is out of range: ' + index );

		}

		return this;

	},

	getComponent: function ( index ) {

		switch ( index ) {

			case 0: return this.x;
			case 1: return this.y;
			case 2: return this.z;
			case 3: return this.w;
			default: throw new Error( 'index is out of range: ' + index );

		}

	},

	clone: function () {

		return new this.constructor( this.x, this.y, this.z, this.w );

	},

	copy: function ( v ) {

		this.x = v.x;
		this.y = v.y;
		this.z = v.z;
		this.w = ( v.w !== undefined ) ? v.w : 1;

		return this;

	},

	add: function ( v, w ) {

		if ( w !== undefined ) {

			console.warn( 'THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );
			return this.addVectors( v, w );

		}

		this.x += v.x;
		this.y += v.y;
		this.z += v.z;
		this.w += v.w;

		return this;

	},

	addScalar: function ( s ) {

		this.x += s;
		this.y += s;
		this.z += s;
		this.w += s;

		return this;

	},

	addVectors: function ( a, b ) {

		this.x = a.x + b.x;
		this.y = a.y + b.y;
		this.z = a.z + b.z;
		this.w = a.w + b.w;

		return this;

	},

	addScaledVector: function ( v, s ) {

		this.x += v.x * s;
		this.y += v.y * s;
		this.z += v.z * s;
		this.w += v.w * s;

		return this;

	},

	sub: function ( v, w ) {

		if ( w !== undefined ) {

			console.warn( 'THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );
			return this.subVectors( v, w );

		}

		this.x -= v.x;
		this.y -= v.y;
		this.z -= v.z;
		this.w -= v.w;

		return this;

	},

	subScalar: function ( s ) {

		this.x -= s;
		this.y -= s;
		this.z -= s;
		this.w -= s;

		return this;

	},

	subVectors: function ( a, b ) {

		this.x = a.x - b.x;
		this.y = a.y - b.y;
		this.z = a.z - b.z;
		this.w = a.w - b.w;

		return this;

	},

	multiplyScalar: function ( scalar ) {

		this.x *= scalar;
		this.y *= scalar;
		this.z *= scalar;
		this.w *= scalar;

		return this;

	},

	applyMatrix4: function ( m ) {

		var x = this.x, y = this.y, z = this.z, w = this.w;
		var e = m.elements;

		this.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;
		this.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;
		this.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;
		this.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;

		return this;

	},

	divideScalar: function ( scalar ) {

		return this.multiplyScalar( 1 / scalar );

	},

	setAxisAngleFromQuaternion: function ( q ) {

		// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm

		// q is assumed to be normalized

		this.w = 2 * Math.acos( q.w );

		var s = Math.sqrt( 1 - q.w * q.w );

		if ( s < 0.0001 ) {

			this.x = 1;
			this.y = 0;
			this.z = 0;

		} else {

			this.x = q.x / s;
			this.y = q.y / s;
			this.z = q.z / s;

		}

		return this;

	},

	setAxisAngleFromRotationMatrix: function ( m ) {

		// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm

		// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

		var angle, x, y, z,		// variables for result
			epsilon = 0.01,		// margin to allow for rounding errors
			epsilon2 = 0.1,		// margin to distinguish between 0 and 180 degrees

			te = m.elements,

			m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],
			m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],
			m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];

		if ( ( Math.abs( m12 - m21 ) < epsilon ) &&
		     ( Math.abs( m13 - m31 ) < epsilon ) &&
		     ( Math.abs( m23 - m32 ) < epsilon ) ) {

			// singularity found
			// first check for identity matrix which must have +1 for all terms
			// in leading diagonal and zero in other terms

			if ( ( Math.abs( m12 + m21 ) < epsilon2 ) &&
			     ( Math.abs( m13 + m31 ) < epsilon2 ) &&
			     ( Math.abs( m23 + m32 ) < epsilon2 ) &&
			     ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {

				// this singularity is identity matrix so angle = 0

				this.set( 1, 0, 0, 0 );

				return this; // zero angle, arbitrary axis

			}

			// otherwise this singularity is angle = 180

			angle = Math.PI;

			var xx = ( m11 + 1 ) / 2;
			var yy = ( m22 + 1 ) / 2;
			var zz = ( m33 + 1 ) / 2;
			var xy = ( m12 + m21 ) / 4;
			var xz = ( m13 + m31 ) / 4;
			var yz = ( m23 + m32 ) / 4;

			if ( ( xx > yy ) && ( xx > zz ) ) {

				// m11 is the largest diagonal term

				if ( xx < epsilon ) {

					x = 0;
					y = 0.707106781;
					z = 0.707106781;

				} else {

					x = Math.sqrt( xx );
					y = xy / x;
					z = xz / x;

				}

			} else if ( yy > zz ) {

				// m22 is the largest diagonal term

				if ( yy < epsilon ) {

					x = 0.707106781;
					y = 0;
					z = 0.707106781;

				} else {

					y = Math.sqrt( yy );
					x = xy / y;
					z = yz / y;

				}

			} else {

				// m33 is the largest diagonal term so base result on this

				if ( zz < epsilon ) {

					x = 0.707106781;
					y = 0.707106781;
					z = 0;

				} else {

					z = Math.sqrt( zz );
					x = xz / z;
					y = yz / z;

				}

			}

			this.set( x, y, z, angle );

			return this; // return 180 deg rotation

		}

		// as we have reached here there are no singularities so we can handle normally

		var s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 ) +
		                   ( m13 - m31 ) * ( m13 - m31 ) +
		                   ( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize

		if ( Math.abs( s ) < 0.001 ) s = 1;

		// prevent divide by zero, should not happen if matrix is orthogonal and should be
		// caught by singularity test above, but I've left it in just in case

		this.x = ( m32 - m23 ) / s;
		this.y = ( m13 - m31 ) / s;
		this.z = ( m21 - m12 ) / s;
		this.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );

		return this;

	},

	min: function ( v ) {

		this.x = Math.min( this.x, v.x );
		this.y = Math.min( this.y, v.y );
		this.z = Math.min( this.z, v.z );
		this.w = Math.min( this.w, v.w );

		return this;

	},

	max: function ( v ) {

		this.x = Math.max( this.x, v.x );
		this.y = Math.max( this.y, v.y );
		this.z = Math.max( this.z, v.z );
		this.w = Math.max( this.w, v.w );

		return this;

	},

	clamp: function ( min, max ) {

		// assumes min < max, componentwise

		this.x = Math.max( min.x, Math.min( max.x, this.x ) );
		this.y = Math.max( min.y, Math.min( max.y, this.y ) );
		this.z = Math.max( min.z, Math.min( max.z, this.z ) );
		this.w = Math.max( min.w, Math.min( max.w, this.w ) );

		return this;

	},

	clampScalar: function () {

		var min, max;

		return function clampScalar( minVal, maxVal ) {

			if ( min === undefined ) {

				min = new Vector4();
				max = new Vector4();

			}

			min.set( minVal, minVal, minVal, minVal );
			max.set( maxVal, maxVal, maxVal, maxVal );

			return this.clamp( min, max );

		};

	}(),

	clampLength: function ( min, max ) {

		var length = this.length();

		return this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );

	},

	floor: function () {

		this.x = Math.floor( this.x );
		this.y = Math.floor( this.y );
		this.z = Math.floor( this.z );
		this.w = Math.floor( this.w );

		return this;

	},

	ceil: function () {

		this.x = Math.ceil( this.x );
		this.y = Math.ceil( this.y );
		this.z = Math.ceil( this.z );
		this.w = Math.ceil( this.w );

		return this;

	},

	round: function () {

		this.x = Math.round( this.x );
		this.y = Math.round( this.y );
		this.z = Math.round( this.z );
		this.w = Math.round( this.w );

		return this;

	},

	roundToZero: function () {

		this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
		this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );
		this.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );
		this.w = ( this.w < 0 ) ? Math.ceil( this.w ) : Math.floor( this.w );

		return this;

	},

	negate: function () {

		this.x = - this.x;
		this.y = - this.y;
		this.z = - this.z;
		this.w = - this.w;

		return this;

	},

	dot: function ( v ) {

		return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;

	},

	lengthSq: function () {

		return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;

	},

	length: function () {

		return Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );

	},

	manhattanLength: function () {

		return Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );

	},

	normalize: function () {

		return this.divideScalar( this.length() || 1 );

	},

	setLength: function ( length ) {

		return this.normalize().multiplyScalar( length );

	},

	lerp: function ( v, alpha ) {

		this.x += ( v.x - this.x ) * alpha;
		this.y += ( v.y - this.y ) * alpha;
		this.z += ( v.z - this.z ) * alpha;
		this.w += ( v.w - this.w ) * alpha;

		return this;

	},

	lerpVectors: function ( v1, v2, alpha ) {

		return this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );

	},

	equals: function ( v ) {

		return ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );

	},

	fromArray: function ( array, offset ) {

		if ( offset === undefined ) offset = 0;

		this.x = array[ offset ];
		this.y = array[ offset + 1 ];
		this.z = array[ offset + 2 ];
		this.w = array[ offset + 3 ];

		return this;

	},

	toArray: function ( array, offset ) {

		if ( array === undefined ) array = [];
		if ( offset === undefined ) offset = 0;

		array[ offset ] = this.x;
		array[ offset + 1 ] = this.y;
		array[ offset + 2 ] = this.z;
		array[ offset + 3 ] = this.w;

		return array;

	},

	fromBufferAttribute: function ( attribute, index, offset ) {

		if ( offset !== undefined ) {

			console.warn( 'THREE.Vector4: offset has been removed from .fromBufferAttribute().' );

		}

		this.x = attribute.getX( index );
		this.y = attribute.getY( index );
		this.z = attribute.getZ( index );
		this.w = attribute.getW( index );

		return this;

	}

} );

/**
 * @author szimek / https://github.com/szimek/
 * @author alteredq / http://alteredqualia.com/
 * @author Marius Kintel / https://github.com/kintel
 */

/*
 In options, we can specify:
 * Texture parameters for an auto-generated target texture
 * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers
*/
function WebGLRenderTarget( width, height, options ) {

	this.uuid = _Math.generateUUID();

	this.width = width;
	this.height = height;

	this.scissor = new Vector4( 0, 0, width, height );
	this.scissorTest = false;

	this.viewport = new Vector4( 0, 0, width, height );

	options = options || {};

	if ( options.minFilter === undefined ) options.minFilter = LinearFilter;

	this.texture = new Texture( undefined, undefined, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding );

	this.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;
	this.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : true;
	this.depthTexture = options.depthTexture !== undefined ? options.depthTexture : null;

}

Object.assign( WebGLRenderTarget.prototype, EventDispatcher.prototype, {

	isWebGLRenderTarget: true,

	setSize: function ( width, height ) {

		if ( this.width !== width || this.height !== height ) {

			this.width = width;
			this.height = height;

			this.dispose();

		}

		this.viewport.set( 0, 0, width, height );
		this.scissor.set( 0, 0, width, height );

	},

	clone: function () {

		return new this.constructor().copy( this );

	},

	copy: function ( source ) {

		this.width = source.width;
		this.height = source.height;

		this.viewport.copy( source.viewport );

		this.texture = source.texture.clone();

		this.depthBuffer = source.depthBuffer;
		this.stencilBuffer = source.stencilBuffer;
		this.depthTexture = source.depthTexture;

		return this;

	},

	dispose: function () {

		this.dispatchEvent( { type: 'dispose' } );

	}

} );

/**
 * @author alteredq / http://alteredqualia.com
 */

function DataTexture( data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {

	Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );

	this.image = { data: data, width: width, height: height };

	this.magFilter = magFilter !== undefined ? magFilter : NearestFilter;
	this.minFilter = minFilter !== undefined ? minFilter : NearestFilter;

	this.generateMipmaps = false;
	this.flipY = false;
	this.unpackAlignment = 1;

}

DataTexture.prototype = Object.create( Texture.prototype );
DataTexture.prototype.constructor = DataTexture;

DataTexture.prototype.isDataTexture = true;

/**
 * @author mrdoob / http://mrdoob.com/
 */

function CubeTexture( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {

	images = images !== undefined ? images : [];
	mapping = mapping !== undefined ? mapping : CubeReflectionMapping;

	Texture.call( this, images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );

	this.flipY = false;

}

CubeTexture.prototype = Object.create( Texture.prototype );
CubeTexture.prototype.constructor = CubeTexture;

CubeTexture.prototype.isCubeTexture = true;

Object.defineProperty( CubeTexture.prototype, 'images', {

	get: function () {

		return this.image;

	},

	set: function ( value ) {

		this.image = value;

	}

} );

/**
 * @author tschw
 *
 * Uniforms of a program.
 * Those form a tree structure with a special top-level container for the root,
 * which you get by calling 'new WebGLUniforms( gl, program, renderer )'.
 *
 *
 * Properties of inner nodes including the top-level container:
 *
 * .seq - array of nested uniforms
 * .map - nested uniforms by name
 *
 *
 * Methods of all nodes except the top-level container:
 *
 * .setValue( gl, value, [renderer] )
 *
 * 		uploads a uniform value(s)
 *  	the 'renderer' parameter is needed for sampler uniforms
 *
 *
 * Static methods of the top-level container (renderer factorizations):
 *
 * .upload( gl, seq, values, renderer )
 *
 * 		sets uniforms in 'seq' to 'values[id].value'
 *
 * .seqWithValue( seq, values ) : filteredSeq
 *
 * 		filters 'seq' entries with corresponding entry in values
 *
 *
 * Methods of the top-level container (renderer factorizations):
 *
 * .setValue( gl, name, value )
 *
 * 		sets uniform with  name 'name' to 'value'
 *
 * .set( gl, obj, prop )
 *
 * 		sets uniform from object and property with same name than uniform
 *
 * .setOptional( gl, obj, prop )
 *
 * 		like .set for an optional property of the object
 *
 */

var emptyTexture = new Texture();
var emptyCubeTexture = new CubeTexture();

// --- Base for inner nodes (including the root) ---

function UniformContainer() {

	this.seq = [];
	this.map = {};

}

// --- Utilities ---

// Array Caches (provide typed arrays for temporary by size)

var arrayCacheF32 = [];
var arrayCacheI32 = [];

// Float32Array caches used for uploading Matrix uniforms

var mat4array = new Float32Array( 16 );
var mat3array = new Float32Array( 9 );

// Flattening for arrays of vectors and matrices

function flatten( array, nBlocks, blockSize ) {

	var firstElem = array[ 0 ];

	if ( firstElem <= 0 || firstElem > 0 ) return array;
	// unoptimized: ! isNaN( firstElem )
	// see http://jacksondunstan.com/articles/983

	var n = nBlocks * blockSize,
		r = arrayCacheF32[ n ];

	if ( r === undefined ) {

		r = new Float32Array( n );
		arrayCacheF32[ n ] = r;

	}

	if ( nBlocks !== 0 ) {

		firstElem.toArray( r, 0 );

		for ( var i = 1, offset = 0; i !== nBlocks; ++ i ) {

			offset += blockSize;
			array[ i ].toArray( r, offset );

		}

	}

	return r;

}

// Texture unit allocation

function allocTexUnits( renderer, n ) {

	var r = arrayCacheI32[ n ];

	if ( r === undefined ) {

		r = new Int32Array( n );
		arrayCacheI32[ n ] = r;

	}

	for ( var i = 0; i !== n; ++ i )
		r[ i ] = renderer.allocTextureUnit();

	return r;

}

// --- Setters ---

// Note: Defining these methods externally, because they come in a bunch
// and this way their names minify.

// Single scalar

function setValue1f( gl, v ) {

	gl.uniform1f( this.addr, v );

}

function setValue1i( gl, v ) {

	gl.uniform1i( this.addr, v );

}

// Single float vector (from flat array or THREE.VectorN)

function setValue2fv( gl, v ) {

	if ( v.x === undefined ) {

		gl.uniform2fv( this.addr, v );

	} else {

		gl.uniform2f( this.addr, v.x, v.y );

	}

}

function setValue3fv( gl, v ) {

	if ( v.x !== undefined ) {

		gl.uniform3f( this.addr, v.x, v.y, v.z );

	} else if ( v.r !== undefined ) {

		gl.uniform3f( this.addr, v.r, v.g, v.b );

	} else {

		gl.uniform3fv( this.addr, v );

	}

}

function setValue4fv( gl, v ) {

	if ( v.x === undefined ) {

		gl.uniform4fv( this.addr, v );

	} else {

		 gl.uniform4f( this.addr, v.x, v.y, v.z, v.w );

	}

}

// Single matrix (from flat array or MatrixN)

function setValue2fm( gl, v ) {

	gl.uniformMatrix2fv( this.addr, false, v.elements || v );

}

function setValue3fm( gl, v ) {

	if ( v.elements === undefined ) {

		gl.uniformMatrix3fv( this.addr, false, v );

	} else {

		mat3array.set( v.elements );
		gl.uniformMatrix3fv( this.addr, false, mat3array );

	}

}

function setValue4fm( gl, v ) {

	if ( v.elements === undefined ) {

		gl.uniformMatrix4fv( this.addr, false, v );

	} else {

		mat4array.set( v.elements );
		gl.uniformMatrix4fv( this.addr, false, mat4array );

	}

}

// Single texture (2D / Cube)

function setValueT1( gl, v, renderer ) {

	var unit = renderer.allocTextureUnit();
	gl.uniform1i( this.addr, unit );
	renderer.setTexture2D( v || emptyTexture, unit );

}

function setValueT6( gl, v, renderer ) {

	var unit = renderer.allocTextureUnit();
	gl.uniform1i( this.addr, unit );
	renderer.setTextureCube( v || emptyCubeTexture, unit );

}

// Integer / Boolean vectors or arrays thereof (always flat arrays)

function setValue2iv( gl, v ) {

	gl.uniform2iv( this.addr, v );

}

function setValue3iv( gl, v ) {

	gl.uniform3iv( this.addr, v );

}

function setValue4iv( gl, v ) {

	gl.uniform4iv( this.addr, v );

}

// Helper to pick the right setter for the singular case

function getSingularSetter( type ) {

	switch ( type ) {

		case 0x1406: return setValue1f; // FLOAT
		case 0x8b50: return setValue2fv; // _VEC2
		case 0x8b51: return setValue3fv; // _VEC3
		case 0x8b52: return setValue4fv; // _VEC4

		case 0x8b5a: return setValue2fm; // _MAT2
		case 0x8b5b: return setValue3fm; // _MAT3
		case 0x8b5c: return setValue4fm; // _MAT4

		case 0x8b5e: case 0x8d66: return setValueT1; // SAMPLER_2D, SAMPLER_EXTERNAL_OES
		case 0x8b60: return setValueT6; // SAMPLER_CUBE

		case 0x1404: case 0x8b56: return setValue1i; // INT, BOOL
		case 0x8b53: case 0x8b57: return setValue2iv; // _VEC2
		case 0x8b54: case 0x8b58: return setValue3iv; // _VEC3
		case 0x8b55: case 0x8b59: return setValue4iv; // _VEC4

	}

}

// Array of scalars

function setValue1fv( gl, v ) {

	gl.uniform1fv( this.addr, v );

}
function setValue1iv( gl, v ) {

	gl.uniform1iv( this.addr, v );

}

// Array of vectors (flat or from THREE classes)

function setValueV2a( gl, v ) {

	gl.uniform2fv( this.addr, flatten( v, this.size, 2 ) );

}

function setValueV3a( gl, v ) {

	gl.uniform3fv( this.addr, flatten( v, this.size, 3 ) );

}

function setValueV4a( gl, v ) {

	gl.uniform4fv( this.addr, flatten( v, this.size, 4 ) );

}

// Array of matrices (flat or from THREE clases)

function setValueM2a( gl, v ) {

	gl.uniformMatrix2fv( this.addr, false, flatten( v, this.size, 4 ) );

}

function setValueM3a( gl, v ) {

	gl.uniformMatrix3fv( this.addr, false, flatten( v, this.size, 9 ) );

}

function setValueM4a( gl, v ) {

	gl.uniformMatrix4fv( this.addr, false, flatten( v, this.size, 16 ) );

}

// Array of textures (2D / Cube)

function setValueT1a( gl, v, renderer ) {

	var n = v.length,
		units = allocTexUnits( renderer, n );

	gl.uniform1iv( this.addr, units );

	for ( var i = 0; i !== n; ++ i ) {

		renderer.setTexture2D( v[ i ] || emptyTexture, units[ i ] );

	}

}

function setValueT6a( gl, v, renderer ) {

	var n = v.length,
		units = allocTexUnits( renderer, n );

	gl.uniform1iv( this.addr, units );

	for ( var i = 0; i !== n; ++ i ) {

		renderer.setTextureCube( v[ i ] || emptyCubeTexture, units[ i ] );

	}

}

// Helper to pick the right setter for a pure (bottom-level) array

function getPureArraySetter( type ) {

	switch ( type ) {

		case 0x1406: return setValue1fv; // FLOAT
		case 0x8b50: return setValueV2a; // _VEC2
		case 0x8b51: return setValueV3a; // _VEC3
		case 0x8b52: return setValueV4a; // _VEC4

		case 0x8b5a: return setValueM2a; // _MAT2
		case 0x8b5b: return setValueM3a; // _MAT3
		case 0x8b5c: return setValueM4a; // _MAT4

		case 0x8b5e: return setValueT1a; // SAMPLER_2D
		case 0x8b60: return setValueT6a; // SAMPLER_CUBE

		case 0x1404: case 0x8b56: return setValue1iv; // INT, BOOL
		case 0x8b53: case 0x8b57: return setValue2iv; // _VEC2
		case 0x8b54: case 0x8b58: return setValue3iv; // _VEC3
		case 0x8b55: case 0x8b59: return setValue4iv; // _VEC4

	}

}

// --- Uniform Classes ---

function SingleUniform( id, activeInfo, addr ) {

	this.id = id;
	this.addr = addr;
	this.setValue = getSingularSetter( activeInfo.type );

	// this.path = activeInfo.name; // DEBUG

}

function PureArrayUniform( id, activeInfo, addr ) {

	this.id = id;
	this.addr = addr;
	this.size = activeInfo.size;
	this.setValue = getPureArraySetter( activeInfo.type );

	// this.path = activeInfo.name; // DEBUG

}

function StructuredUniform( id ) {

	this.id = id;

	UniformContainer.call( this ); // mix-in

}

StructuredUniform.prototype.setValue = function ( gl, value ) {

	// Note: Don't need an extra 'renderer' parameter, since samplers
	// are not allowed in structured uniforms.

	var seq = this.seq;

	for ( var i = 0, n = seq.length; i !== n; ++ i ) {

		var u = seq[ i ];
		u.setValue( gl, value[ u.id ] );

	}

};

// --- Top-level ---

// Parser - builds up the property tree from the path strings

var RePathPart = /([\w\d_]+)(\])?(\[|\.)?/g;

// extracts
// 	- the identifier (member name or array index)
//  - followed by an optional right bracket (found when array index)
//  - followed by an optional left bracket or dot (type of subscript)
//
// Note: These portions can be read in a non-overlapping fashion and
// allow straightforward parsing of the hierarchy that WebGL encodes
// in the uniform names.

function addUniform( container, uniformObject ) {

	container.seq.push( uniformObject );
	container.map[ uniformObject.id ] = uniformObject;

}

function parseUniform( activeInfo, addr, container ) {

	var path = activeInfo.name,
		pathLength = path.length;

	// reset RegExp object, because of the early exit of a previous run
	RePathPart.lastIndex = 0;

	for ( ; ; ) {

		var match = RePathPart.exec( path ),
			matchEnd = RePathPart.lastIndex,

			id = match[ 1 ],
			idIsIndex = match[ 2 ] === ']',
			subscript = match[ 3 ];

		if ( idIsIndex ) id = id | 0; // convert to integer

		if ( subscript === undefined || subscript === '[' && matchEnd + 2 === pathLength ) {

			// bare name or "pure" bottom-level array "[0]" suffix

			addUniform( container, subscript === undefined ?
				new SingleUniform( id, activeInfo, addr ) :
				new PureArrayUniform( id, activeInfo, addr ) );

			break;

		} else {

			// step into inner node / create it in case it doesn't exist

			var map = container.map, next = map[ id ];

			if ( next === undefined ) {

				next = new StructuredUniform( id );
				addUniform( container, next );

			}

			container = next;

		}

	}

}

// Root Container

function WebGLUniforms( gl, program, renderer ) {

	UniformContainer.call( this );

	this.renderer = renderer;

	var n = gl.getProgramParameter( program, gl.ACTIVE_UNIFORMS );

	for ( var i = 0; i < n; ++ i ) {

		var info = gl.getActiveUniform( program, i ),
			path = info.name,
			addr = gl.getUniformLocation( program, path );

		parseUniform( info, addr, this );

	}

}

WebGLUniforms.prototype.setValue = function ( gl, name, value ) {

	var u = this.map[ name ];

	if ( u !== undefined ) u.setValue( gl, value, this.renderer );

};

WebGLUniforms.prototype.setOptional = function ( gl, object, name ) {

	var v = object[ name ];

	if ( v !== undefined ) this.setValue( gl, name, v );

};


// Static interface

WebGLUniforms.upload = function ( gl, seq, values, renderer ) {

	for ( var i = 0, n = seq.length; i !== n; ++ i ) {

		var u = seq[ i ],
			v = values[ u.id ];

		if ( v.needsUpdate !== false ) {

			// note: always updating when .needsUpdate is undefined
			u.setValue( gl, v.value, renderer );

		}

	}

};

WebGLUniforms.seqWithValue = function ( seq, values ) {

	var r = [];

	for ( var i = 0, n = seq.length; i !== n; ++ i ) {

		var u = seq[ i ];
		if ( u.id in values ) r.push( u );

	}

	return r;

};

/**
 * @author mrdoob / http://mrdoob.com/
 */

var ColorKeywords = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,
	'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,
	'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,
	'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,
	'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,
	'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,
	'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,
	'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,
	'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,
	'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,
	'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,
	'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,
	'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,
	'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,
	'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,
	'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,
	'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,
	'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,
	'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,
	'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'rebeccapurple': 0x663399, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,
	'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,
	'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,
	'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,
	'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };

function Color( r, g, b ) {

	if ( g === undefined && b === undefined ) {

		// r is THREE.Color, hex or string
		return this.set( r );

	}

	return this.setRGB( r, g, b );

}

Object.assign( Color.prototype, {

	isColor: true,

	r: 1, g: 1, b: 1,

	set: function ( value ) {

		if ( value && value.isColor ) {

			this.copy( value );

		} else if ( typeof value === 'number' ) {

			this.setHex( value );

		} else if ( typeof value === 'string' ) {

			this.setStyle( value );

		}

		return this;

	},

	setScalar: function ( scalar ) {

		this.r = scalar;
		this.g = scalar;
		this.b = scalar;

		return this;

	},

	setHex: function ( hex ) {

		hex = Math.floor( hex );

		this.r = ( hex >> 16 & 255 ) / 255;
		this.g = ( hex >> 8 & 255 ) / 255;
		this.b = ( hex & 255 ) / 255;

		return this;

	},

	setRGB: function ( r, g, b ) {

		this.r = r;
		this.g = g;
		this.b = b;

		return this;

	},

	setHSL: function () {

		function hue2rgb( p, q, t ) {

			if ( t < 0 ) t += 1;
			if ( t > 1 ) t -= 1;
			if ( t < 1 / 6 ) return p + ( q - p ) * 6 * t;
			if ( t < 1 / 2 ) return q;
			if ( t < 2 / 3 ) return p + ( q - p ) * 6 * ( 2 / 3 - t );
			return p;

		}

		return function setHSL( h, s, l ) {

			// h,s,l ranges are in 0.0 - 1.0
			h = _Math.euclideanModulo( h, 1 );
			s = _Math.clamp( s, 0, 1 );
			l = _Math.clamp( l, 0, 1 );

			if ( s === 0 ) {

				this.r = this.g = this.b = l;

			} else {

				var p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );
				var q = ( 2 * l ) - p;

				this.r = hue2rgb( q, p, h + 1 / 3 );
				this.g = hue2rgb( q, p, h );
				this.b = hue2rgb( q, p, h - 1 / 3 );

			}

			return this;

		};

	}(),

	setStyle: function ( style ) {

		function handleAlpha( string ) {

			if ( string === undefined ) return;

			if ( parseFloat( string ) < 1 ) {

				console.warn( 'THREE.Color: Alpha component of ' + style + ' will be ignored.' );

			}

		}


		var m;

		if ( m = /^((?:rgb|hsl)a?)\(\s*([^\)]*)\)/.exec( style ) ) {

			// rgb / hsl

			var color;
			var name = m[ 1 ];
			var components = m[ 2 ];

			switch ( name ) {

				case 'rgb':
				case 'rgba':

					if ( color = /^(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec( components ) ) {

						// rgb(255,0,0) rgba(255,0,0,0.5)
						this.r = Math.min( 255, parseInt( color[ 1 ], 10 ) ) / 255;
						this.g = Math.min( 255, parseInt( color[ 2 ], 10 ) ) / 255;
						this.b = Math.min( 255, parseInt( color[ 3 ], 10 ) ) / 255;

						handleAlpha( color[ 5 ] );

						return this;

					}

					if ( color = /^(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec( components ) ) {

						// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)
						this.r = Math.min( 100, parseInt( color[ 1 ], 10 ) ) / 100;
						this.g = Math.min( 100, parseInt( color[ 2 ], 10 ) ) / 100;
						this.b = Math.min( 100, parseInt( color[ 3 ], 10 ) ) / 100;

						handleAlpha( color[ 5 ] );

						return this;

					}

					break;

				case 'hsl':
				case 'hsla':

					if ( color = /^([0-9]*\.?[0-9]+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec( components ) ) {

						// hsl(120,50%,50%) hsla(120,50%,50%,0.5)
						var h = parseFloat( color[ 1 ] ) / 360;
						var s = parseInt( color[ 2 ], 10 ) / 100;
						var l = parseInt( color[ 3 ], 10 ) / 100;

						handleAlpha( color[ 5 ] );

						return this.setHSL( h, s, l );

					}

					break;

			}

		} else if ( m = /^\#([A-Fa-f0-9]+)$/.exec( style ) ) {

			// hex color

			var hex = m[ 1 ];
			var size = hex.length;

			if ( size === 3 ) {

				// #ff0
				this.r = parseInt( hex.charAt( 0 ) + hex.charAt( 0 ), 16 ) / 255;
				this.g = parseInt( hex.charAt( 1 ) + hex.charAt( 1 ), 16 ) / 255;
				this.b = parseInt( hex.charAt( 2 ) + hex.charAt( 2 ), 16 ) / 255;

				return this;

			} else if ( size === 6 ) {

				// #ff0000
				this.r = parseInt( hex.charAt( 0 ) + hex.charAt( 1 ), 16 ) / 255;
				this.g = parseInt( hex.charAt( 2 ) + hex.charAt( 3 ), 16 ) / 255;
				this.b = parseInt( hex.charAt( 4 ) + hex.charAt( 5 ), 16 ) / 255;

				return this;

			}

		}

		if ( style && style.length > 0 ) {

			// color keywords
			var hex = ColorKeywords[ style ];

			if ( hex !== undefined ) {

				// red
				this.setHex( hex );

			} else {

				// unknown color
				console.warn( 'THREE.Color: Unknown color ' + style );

			}

		}

		return this;

	},

	clone: function () {

		return new this.constructor( this.r, this.g, this.b );

	},

	copy: function ( color ) {

		this.r = color.r;
		this.g = color.g;
		this.b = color.b;

		return this;

	},

	copyGammaToLinear: function ( color, gammaFactor ) {

		if ( gammaFactor === undefined ) gammaFactor = 2.0;

		this.r = Math.pow( color.r, gammaFactor );
		this.g = Math.pow( color.g, gammaFactor );
		this.b = Math.pow( color.b, gammaFactor );

		return this;

	},

	copyLinearToGamma: function ( color, gammaFactor ) {

		if ( gammaFactor === undefined ) gammaFactor = 2.0;

		var safeInverse = ( gammaFactor > 0 ) ? ( 1.0 / gammaFactor ) : 1.0;

		this.r = Math.pow( color.r, safeInverse );
		this.g = Math.pow( color.g, safeInverse );
		this.b = Math.pow( color.b, safeInverse );

		return this;

	},

	convertGammaToLinear: function () {

		var r = this.r, g = this.g, b = this.b;

		this.r = r * r;
		this.g = g * g;
		this.b = b * b;

		return this;

	},

	convertLinearToGamma: function () {

		this.r = Math.sqrt( this.r );
		this.g = Math.sqrt( this.g );
		this.b = Math.sqrt( this.b );

		return this;

	},

	getHex: function () {

		return ( this.r * 255 ) << 16 ^ ( this.g * 255 ) << 8 ^ ( this.b * 255 ) << 0;

	},

	getHexString: function () {

		return ( '000000' + this.getHex().toString( 16 ) ).slice( - 6 );

	},

	getHSL: function ( optionalTarget ) {

		// h,s,l ranges are in 0.0 - 1.0

		var hsl = optionalTarget || { h: 0, s: 0, l: 0 };

		var r = this.r, g = this.g, b = this.b;

		var max = Math.max( r, g, b );
		var min = Math.min( r, g, b );

		var hue, saturation;
		var lightness = ( min + max ) / 2.0;

		if ( min === max ) {

			hue = 0;
			saturation = 0;

		} else {

			var delta = max - min;

			saturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );

			switch ( max ) {

				case r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;
				case g: hue = ( b - r ) / delta + 2; break;
				case b: hue = ( r - g ) / delta + 4; break;

			}

			hue /= 6;

		}

		hsl.h = hue;
		hsl.s = saturation;
		hsl.l = lightness;

		return hsl;

	},

	getStyle: function () {

		return 'rgb(' + ( ( this.r * 255 ) | 0 ) + ',' + ( ( this.g * 255 ) | 0 ) + ',' + ( ( this.b * 255 ) | 0 ) + ')';

	},

	offsetHSL: function ( h, s, l ) {

		var hsl = this.getHSL();

		hsl.h += h; hsl.s += s; hsl.l += l;

		this.setHSL( hsl.h, hsl.s, hsl.l );

		return this;

	},

	add: function ( color ) {

		this.r += color.r;
		this.g += color.g;
		this.b += color.b;

		return this;

	},

	addColors: function ( color1, color2 ) {

		this.r = color1.r + color2.r;
		this.g = color1.g + color2.g;
		this.b = color1.b + color2.b;

		return this;

	},

	addScalar: function ( s ) {

		this.r += s;
		this.g += s;
		this.b += s;

		return this;

	},

	sub: function ( color ) {

		this.r = Math.max( 0, this.r - color.r );
		this.g = Math.max( 0, this.g - color.g );
		this.b = Math.max( 0, this.b - color.b );

		return this;

	},

	multiply: function ( color ) {

		this.r *= color.r;
		this.g *= color.g;
		this.b *= color.b;

		return this;

	},

	multiplyScalar: function ( s ) {

		this.r *= s;
		this.g *= s;
		this.b *= s;

		return this;

	},

	lerp: function ( color, alpha ) {

		this.r += ( color.r - this.r ) * alpha;
		this.g += ( color.g - this.g ) * alpha;
		this.b += ( color.b - this.b ) * alpha;

		return this;

	},

	equals: function ( c ) {

		return ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );

	},

	fromArray: function ( array, offset ) {

		if ( offset === undefined ) offset = 0;

		this.r = array[ offset ];
		this.g = array[ offset + 1 ];
		this.b = array[ offset + 2 ];

		return this;

	},

	toArray: function ( array, offset ) {

		if ( array === undefined ) array = [];
		if ( offset === undefined ) offset = 0;

		array[ offset ] = this.r;
		array[ offset + 1 ] = this.g;
		array[ offset + 2 ] = this.b;

		return array;

	},

	toJSON: function () {

		return this.getHex();

	}

} );

/**
 * Uniforms library for shared webgl shaders
 */

var UniformsLib = {

	common: {

		diffuse: { value: new Color( 0xeeeeee ) },
		opacity: { value: 1.0 },

		map: { value: null },
		uvTransform: { value: new Matrix3() },

		alphaMap: { value: null },

	},

	specularmap: {

		specularMap: { value: null },

	},

	envmap: {

		envMap: { value: null },
		flipEnvMap: { value: - 1 },
		reflectivity: { value: 1.0 },
		refractionRatio: { value: 0.98 }

	},

	aomap: {

		aoMap: { value: null },
		aoMapIntensity: { value: 1 }

	},

	lightmap: {

		lightMap: { value: null },
		lightMapIntensity: { value: 1 }

	},

	emissivemap: {

		emissiveMap: { value: null }

	},

	bumpmap: {

		bumpMap: { value: null },
		bumpScale: { value: 1 }

	},

	normalmap: {

		normalMap: { value: null },
		normalScale: { value: new Vector2( 1, 1 ) }

	},

	displacementmap: {

		displacementMap: { value: null },
		displacementScale: { value: 1 },
		displacementBias: { value: 0 }

	},

	roughnessmap: {

		roughnessMap: { value: null }

	},

	metalnessmap: {

		metalnessMap: { value: null }

	},

	gradientmap: {

		gradientMap: { value: null }

	},

	fog: {

		fogDensity: { value: 0.00025 },
		fogNear: { value: 1 },
		fogFar: { value: 2000 },
		fogColor: { value: new Color( 0xffffff ) }

	},

	lights: {

		ambientLightColor: { value: [] },

		directionalLights: { value: [], properties: {
			direction: {},
			color: {},

			shadow: {},
			shadowBias: {},
			shadowRadius: {},
			shadowMapSize: {}
		} },

		directionalShadowMap: { value: [] },
		directionalShadowMatrix: { value: [] },

		spotLights: { value: [], properties: {
			color: {},
			position: {},
			direction: {},
			distance: {},
			coneCos: {},
			penumbraCos: {},
			decay: {},

			shadow: {},
			shadowBias: {},
			shadowRadius: {},
			shadowMapSize: {}
		} },

		spotShadowMap: { value: [] },
		spotShadowMatrix: { value: [] },

		pointLights: { value: [], properties: {
			color: {},
			position: {},
			decay: {},
			distance: {},

			shadow: {},
			shadowBias: {},
			shadowRadius: {},
			shadowMapSize: {},
			shadowCameraNear: {},
			shadowCameraFar: {}
		} },

		pointShadowMap: { value: [] },
		pointShadowMatrix: { value: [] },

		hemisphereLights: { value: [], properties: {
			direction: {},
			skyColor: {},
			groundColor: {}
		} },

		// TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src
		rectAreaLights: { value: [], properties: {
			color: {},
			position: {},
			width: {},
			height: {}
		} }

	},

	points: {

		diffuse: { value: new Color( 0xeeeeee ) },
		opacity: { value: 1.0 },
		size: { value: 1.0 },
		scale: { value: 1.0 },
		map: { value: null },
		uvTransform: { value: new Matrix3() }

	}

};

/**
 * Uniform Utilities
 */

var UniformsUtils = {

	merge: function ( uniforms ) {

		var merged = {};

		for ( var u = 0; u < uniforms.length; u ++ ) {

			var tmp = this.clone( uniforms[ u ] );

			for ( var p in tmp ) {

				merged[ p ] = tmp[ p ];

			}

		}

		return merged;

	},

	clone: function ( uniforms_src ) {

		var uniforms_dst = {};

		for ( var u in uniforms_src ) {

			uniforms_dst[ u ] = {};

			for ( var p in uniforms_src[ u ] ) {

				var parameter_src = uniforms_src[ u ][ p ];

				if ( parameter_src && ( parameter_src.isColor ||
					parameter_src.isMatrix3 || parameter_src.isMatrix4 ||
					parameter_src.isVector2 || parameter_src.isVector3 || parameter_src.isVector4 ||
					parameter_src.isTexture ) ) {

					uniforms_dst[ u ][ p ] = parameter_src.clone();

				} else if ( Array.isArray( parameter_src ) ) {

					uniforms_dst[ u ][ p ] = parameter_src.slice();

				} else {

					uniforms_dst[ u ][ p ] = parameter_src;

				}

			}

		}

		return uniforms_dst;

	}

};

var alphamap_fragment = "#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif\n";

var alphamap_pars_fragment = "#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif\n";

var alphatest_fragment = "#ifdef ALPHATEST\n\tif ( diffuseColor.a < ALPHATEST ) discard;\n#endif\n";

var aomap_fragment = "#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_ENVMAP ) && defined( PHYSICAL )\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\n\t#endif\n#endif\n";

var aomap_pars_fragment = "#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif";

var begin_vertex = "\nvec3 transformed = vec3( position );\n";

var beginnormal_vertex = "\nvec3 objectNormal = vec3( normal );\n";

var bsdfs = "float punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n\tif( decayExponent > 0.0 ) {\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n\t\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\t\tfloat maxDistanceCutoffFactor = pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t\treturn distanceFalloff * maxDistanceCutoffFactor;\n#else\n\t\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\n#endif\n\t}\n\treturn 1.0;\n}\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\n\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\n\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\n}\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\treturn 1.0 / ( gl * gv );\n}\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\tfloat D = D_GGX( alpha, dotNH );\n\treturn F * ( G * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE  = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS  = 0.5 / LUT_SIZE;\n\tfloat theta = acos( dot( N, V ) );\n\tvec2 uv = vec2(\n\t\tsqrt( saturate( roughness ) ),\n\t\tsaturate( theta / ( 0.5 * PI ) ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.86267 + (0.49788 + 0.01436 * y ) * y;\n\tfloat b = 3.45068 + (4.18814 + y) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = (x > 0.0) ? v : 0.5 * inversesqrt( 1.0 - x * x ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tvec3 result = vec3( LTC_ClippedSphereFormFactor( vectorFormFactor ) );\n\treturn result;\n}\nvec3 BRDF_Specular_GGX_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\tvec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\n\treturn specularColor * AB.x + AB.y;\n}\nfloat G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n}\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\n\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\n}\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\n\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\n}\n";

var bumpmap_pars_fragment = "#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\n\t\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\n\t\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 );\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif\n";

var clipping_planes_fragment = "#if NUM_CLIPPING_PLANES > 0\n\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; ++ i ) {\n\t\tvec4 plane = clippingPlanes[ i ];\n\t\tif ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\n\t}\n\t\t\n\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\tbool clipped = true;\n\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; ++ i ) {\n\t\t\tvec4 plane = clippingPlanes[ i ];\n\t\t\tclipped = ( dot( vViewPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t}\n\t\tif ( clipped ) discard;\n\t\n\t#endif\n#endif\n";

var clipping_planes_pars_fragment = "#if NUM_CLIPPING_PLANES > 0\n\t#if ! defined( PHYSICAL ) && ! defined( PHONG )\n\t\tvarying vec3 vViewPosition;\n\t#endif\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif\n";

var clipping_planes_pars_vertex = "#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\n\tvarying vec3 vViewPosition;\n#endif\n";

var clipping_planes_vertex = "#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n";

var color_fragment = "#ifdef USE_COLOR\n\tdiffuseColor.rgb *= vColor;\n#endif";

var color_pars_fragment = "#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif\n";

var color_pars_vertex = "#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif";

var color_vertex = "#ifdef USE_COLOR\n\tvColor.xyz = color.xyz;\n#endif";

var common = "#define PI 3.14159265359\n#define PI2 6.28318530718\n#define PI_HALF 1.5707963267949\n#define RECIPROCAL_PI 0.31830988618\n#define RECIPROCAL_PI2 0.15915494\n#define LOG2 1.442695\n#define EPSILON 1e-6\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract(sin(sn) * c);\n}\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\tfloat distance = dot( planeNormal, point - pointOnPlane );\n\treturn - distance * planeNormal + point;\n}\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn sign( dot( point - pointOnPlane, planeNormal ) );\n}\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\n}\nmat3 transposeMat3( const in mat3 m ) {\n\tmat3 tmp;\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\treturn tmp;\n}\nfloat linearToRelativeLuminance( const in vec3 color ) {\n\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\n\treturn dot( weights, color.rgb );\n}\n";

var cube_uv_reflection_fragment = "#ifdef ENVMAP_TYPE_CUBE_UV\n#define cubeUV_textureSize (1024.0)\nint getFaceFromDirection(vec3 direction) {\n\tvec3 absDirection = abs(direction);\n\tint face = -1;\n\tif( absDirection.x > absDirection.z ) {\n\t\tif(absDirection.x > absDirection.y )\n\t\t\tface = direction.x > 0.0 ? 0 : 3;\n\t\telse\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\n\t}\n\telse {\n\t\tif(absDirection.z > absDirection.y )\n\t\t\tface = direction.z > 0.0 ? 2 : 5;\n\t\telse\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\n\t}\n\treturn face;\n}\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\n\tfloat scale = exp2(cubeUV_maxLods1 - roughnessLevel);\n\tfloat dxRoughness = dFdx(roughness);\n\tfloat dyRoughness = dFdy(roughness);\n\tvec3 dx = dFdx( vec * scale * dxRoughness );\n\tvec3 dy = dFdy( vec * scale * dyRoughness );\n\tfloat d = max( dot( dx, dx ), dot( dy, dy ) );\n\td = clamp(d, 1.0, cubeUV_rangeClamp);\n\tfloat mipLevel = 0.5 * log2(d);\n\treturn vec2(floor(mipLevel), fract(mipLevel));\n}\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\n\tmipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\n\tfloat a = 16.0 * cubeUV_rcpTextureSize;\n\tvec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\n\tvec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\n\tfloat powScale = exp2_packed.x * exp2_packed.y;\n\tfloat scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\n\tfloat mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\n\tbool bRes = mipLevel == 0.0;\n\tscale =  bRes && (scale < a) ? a : scale;\n\tvec3 r;\n\tvec2 offset;\n\tint face = getFaceFromDirection(direction);\n\tfloat rcpPowScale = 1.0 / powScale;\n\tif( face == 0) {\n\t\tr = vec3(direction.x, -direction.z, direction.y);\n\t\toffset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 1) {\n\t\tr = vec3(direction.y, direction.x, direction.z);\n\t\toffset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 2) {\n\t\tr = vec3(direction.z, direction.x, direction.y);\n\t\toffset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 3) {\n\t\tr = vec3(direction.x, direction.z, direction.y);\n\t\toffset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\telse if( face == 4) {\n\t\tr = vec3(direction.y, direction.x, -direction.z);\n\t\toffset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\telse {\n\t\tr = vec3(direction.z, -direction.x, direction.y);\n\t\toffset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\tr = normalize(r);\n\tfloat texelOffset = 0.5 * cubeUV_rcpTextureSize;\n\tvec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\n\tvec2 base = offset + vec2( texelOffset );\n\treturn base + s * ( scale - 2.0 * texelOffset );\n}\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\nvec4 textureCubeUV(vec3 reflectedDirection, float roughness ) {\n\tfloat roughnessVal = roughness* cubeUV_maxLods3;\n\tfloat r1 = floor(roughnessVal);\n\tfloat r2 = r1 + 1.0;\n\tfloat t = fract(roughnessVal);\n\tvec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\n\tfloat s = mipInfo.y;\n\tfloat level0 = mipInfo.x;\n\tfloat level1 = level0 + 1.0;\n\tlevel1 = level1 > 5.0 ? 5.0 : level1;\n\tlevel0 += min( floor( s + 0.5 ), 5.0 );\n\tvec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\n\tvec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\n\tvec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\n\tvec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\n\tvec4 result = mix(color10, color20, t);\n\treturn vec4(result.rgb, 1.0);\n}\n#endif\n";

var defaultnormal_vertex = "vec3 transformedNormal = normalMatrix * objectNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n";

var displacementmap_pars_vertex = "#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif\n";

var displacementmap_vertex = "#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\n#endif\n";

var emissivemap_fragment = "#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif\n";

var emissivemap_pars_fragment = "#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif\n";

var encodings_fragment = "  gl_FragColor = linearToOutputTexel( gl_FragColor );\n";

var encodings_pars_fragment = "\nvec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.xyz, vec3( gammaFactor ) ), value.w );\n}\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.xyz, vec3( 1.0 / gammaFactor ) ), value.w );\n}\nvec4 sRGBToLinear( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.w );\n}\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.w );\n}\nvec4 RGBEToLinear( in vec4 value ) {\n\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\n}\nvec4 LinearToRGBE( in vec4 value ) {\n\tfloat maxComponent = max( max( value.r, value.g ), value.b );\n\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\n\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\n}\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.xyz * value.w * maxRange, 1.0 );\n}\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.x, max( value.g, value.b ) );\n\tfloat M      = clamp( maxRGB / maxRange, 0.0, 1.0 );\n\tM            = ceil( M * 255.0 ) / 255.0;\n\treturn vec4( value.rgb / ( M * maxRange ), M );\n}\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\n}\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.x, max( value.g, value.b ) );\n\tfloat D      = max( maxRange / maxRGB, 1.0 );\n\tD            = min( floor( D ) / 255.0, 1.0 );\n\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\n}\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\nvec4 LinearToLogLuv( in vec4 value )  {\n\tvec3 Xp_Y_XYZp = value.rgb * cLogLuvM;\n\tXp_Y_XYZp = max(Xp_Y_XYZp, vec3(1e-6, 1e-6, 1e-6));\n\tvec4 vResult;\n\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\n\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\n\tvResult.w = fract(Le);\n\tvResult.z = (Le - (floor(vResult.w*255.0))/255.0)/255.0;\n\treturn vResult;\n}\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\nvec4 LogLuvToLinear( in vec4 value ) {\n\tfloat Le = value.z * 255.0 + value.w;\n\tvec3 Xp_Y_XYZp;\n\tXp_Y_XYZp.y = exp2((Le - 127.0) / 2.0);\n\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\n\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\n\tvec3 vRGB = Xp_Y_XYZp.rgb * cLogLuvInverseM;\n\treturn vec4( max(vRGB, 0.0), 1.0 );\n}\n";

var envmap_fragment = "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\tvec2 sampleUV;\n\t\treflectVec = normalize( reflectVec );\n\t\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\t\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\tvec4 envColor = texture2D( envMap, sampleUV );\n\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\treflectVec = normalize( reflectVec );\n\t\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\n\t\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\tenvColor = envMapTexelToLinear( envColor );\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif\n";

var envmap_pars_fragment = "#if defined( USE_ENVMAP ) || defined( PHYSICAL )\n\tuniform float reflectivity;\n\tuniform float envMapIntensity;\n#endif\n#ifdef USE_ENVMAP\n\t#if ! defined( PHYSICAL ) && ( defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) )\n\t\tvarying vec3 vWorldPosition;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\tuniform float flipEnvMap;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( PHYSICAL )\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif\n";

var envmap_pars_vertex = "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif\n";

var envmap_vertex = "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif\n";

var fog_vertex = "\n#ifdef USE_FOG\nfogDepth = -mvPosition.z;\n#endif";

var fog_pars_vertex = "#ifdef USE_FOG\n  varying float fogDepth;\n#endif\n";

var fog_fragment = "#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * fogDepth * fogDepth * LOG2 ) );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif\n";

var fog_pars_fragment = "#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float fogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif\n";

var gradientmap_pars_fragment = "#ifdef TOON\n\tuniform sampler2D gradientMap;\n\tvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\t\tfloat dotNL = dot( normal, lightDirection );\n\t\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t\t#ifdef USE_GRADIENTMAP\n\t\t\treturn texture2D( gradientMap, coord ).rgb;\n\t\t#else\n\t\t\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\n\t\t#endif\n\t}\n#endif\n";

var lightmap_fragment = "#ifdef USE_LIGHTMAP\n\treflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n#endif\n";

var lightmap_pars_fragment = "#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif";

var lights_lambert_vertex = "vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n\tvLightBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\n#if NUM_POINT_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_DIR_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\tvLightFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\n\t\t#endif\n\t}\n#endif\n";

var lights_pars = "uniform vec3 ambientLightColor;\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treturn irradiance;\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tdirectLight.color = directionalLight.color;\n\t\tdirectLight.direction = directionalLight.direction;\n\t\tdirectLight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t\tfloat shadowCameraNear;\n\t\tfloat shadowCameraFar;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tdirectLight.color = pointLight.color;\n\t\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\n\t\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tfloat angleCos = dot( directLight.direction, spotLight.direction );\n\t\tif ( angleCos > spotLight.coneCos ) {\n\t\t\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\t\tdirectLight.color = spotLight.color;\n\t\t\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tdirectLight.visible = true;\n\t\t} else {\n\t\t\tdirectLight.color = vec3( 0.0 );\n\t\t\tdirectLight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltcMat;\tuniform sampler2D ltcMag;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\n\t\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tirradiance *= PI;\n\t\t#endif\n\t\treturn irradiance;\n\t}\n#endif\n#if defined( USE_ENVMAP ) && defined( PHYSICAL )\n\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\n\t\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\tvec4 envMapColor = textureCubeUV( queryVec, 1.0 );\n\t\t#else\n\t\t\tvec4 envMapColor = vec4( 0.0 );\n\t\t#endif\n\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t}\n\tfloat getSpecularMIPLevel( const in float blinnShininessExponent, const in int maxMIPLevel ) {\n\t\tfloat maxMIPLevelScalar = float( maxMIPLevel );\n\t\tfloat desiredMIPLevel = maxMIPLevelScalar + 0.79248 - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\n\t\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\n\t}\n\tvec3 getLightProbeIndirectRadiance( const in GeometricContext geometry, const in float blinnShininessExponent, const in int maxMIPLevel ) {\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( -geometry.viewDir, geometry.normal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( -geometry.viewDir, geometry.normal, refractionRatio );\n\t\t#endif\n\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\tfloat specularMIPLevel = getSpecularMIPLevel( blinnShininessExponent, maxMIPLevel );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\tvec4 envMapColor = textureCubeUV(queryReflectVec, BlinnExponentToGGXRoughness(blinnShininessExponent));\n\t\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\t\tvec2 sampleUV;\n\t\t\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\t\t\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\t\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#endif\n\t\treturn envMapColor.rgb * envMapIntensity;\n\t}\n#endif\n";

var lights_phong_fragment = "BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;\n";

var lights_phong_pars_fragment = "varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\nstruct BlinnPhongMaterial {\n\tvec3\tdiffuseColor;\n\tvec3\tspecularColor;\n\tfloat\tspecularShininess;\n\tfloat\tspecularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\t#ifdef TOON\n\t\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n\t#else\n\t\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\t\tvec3 irradiance = dotNL * directLight.color;\n\t#endif\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )\t(0)\n";

var lights_physical_fragment = "PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\n#ifdef STANDARD\n\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\n\tmaterial.clearCoat = saturate( clearCoat );\tmaterial.clearCoatRoughness = clamp( clearCoatRoughness, 0.04, 1.0 );\n#endif\n";

var lights_physical_pars_fragment = "struct PhysicalMaterial {\n\tvec3\tdiffuseColor;\n\tfloat\tspecularRoughness;\n\tvec3\tspecularColor;\n\t#ifndef STANDARD\n\t\tfloat clearCoat;\n\t\tfloat clearCoatRoughness;\n\t#endif\n};\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\nfloat clearCoatDHRApprox( const in float roughness, const in float dotNL ) {\n\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometry.normal;\n\t\tvec3 viewDir = geometry.viewDir;\n\t\tvec3 position = geometry.position;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.specularRoughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos - halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos + halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos + halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos - halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tfloat norm = texture2D( ltcMag, uv ).a;\n\t\tvec4 t = texture2D( ltcMat, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3(   1,   0, t.y ),\n\t\t\tvec3(   0, t.z,   0 ),\n\t\t\tvec3( t.w,   0, t.x )\n\t\t);\n\t\treflectedLight.directSpecular += lightColor * material.specularColor * norm * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\t#ifndef STANDARD\n\t\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\n\t#else\n\t\tfloat clearCoatDHR = 0.0;\n\t#endif\n\treflectedLight.directSpecular += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry, material.specularColor, material.specularRoughness );\n\treflectedLight.directDiffuse += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\t#ifndef STANDARD\n\t\treflectedLight.directSpecular += irradiance * material.clearCoat * BRDF_Specular_GGX( directLight, geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\n\t#endif\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 clearCoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t#ifndef STANDARD\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\tfloat dotNL = dotNV;\n\t\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\n\t#else\n\t\tfloat clearCoatDHR = 0.0;\n\t#endif\n\treflectedLight.indirectSpecular += ( 1.0 - clearCoatDHR ) * radiance * BRDF_Specular_GGX_Environment( geometry, material.specularColor, material.specularRoughness );\n\t#ifndef STANDARD\n\t\treflectedLight.indirectSpecular += clearCoatRadiance * material.clearCoat * BRDF_Specular_GGX_Environment( geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\n\t#endif\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\n#define Material_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.specularRoughness )\n#define Material_ClearCoat_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.clearCoatRoughness )\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}\n";

var lights_template = "\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = normalize( vViewPosition );\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( pointLight.shadow, directLight.visible ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( spotLight.shadow, directLight.visible ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( directionalLight.shadow, directLight.visible ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\t#ifdef USE_LIGHTMAP\n\t\tvec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tlightMapIrradiance *= PI;\n\t\t#endif\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t}\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( PHYSICAL ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tirradiance += getLightProbeIndirectIrradiance( geometry, 8 );\n\t#endif\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\tvec3 radiance = getLightProbeIndirectRadiance( geometry, Material_BlinnShininessExponent( material ), 8 );\n\t#ifndef STANDARD\n\t\tvec3 clearCoatRadiance = getLightProbeIndirectRadiance( geometry, Material_ClearCoat_BlinnShininessExponent( material ), 8 );\n\t#else\n\t\tvec3 clearCoatRadiance = vec3( 0.0 );\n\t#endif\n\tRE_IndirectSpecular( radiance, clearCoatRadiance, geometry, material, reflectedLight );\n#endif\n";

var logdepthbuf_fragment = "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tgl_FragDepthEXT = log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif";

var logdepthbuf_pars_fragment = "#ifdef USE_LOGDEPTHBUF\n\tuniform float logDepthBufFC;\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t#endif\n#endif\n";

var logdepthbuf_pars_vertex = "#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t#endif\n\tuniform float logDepthBufFC;\n#endif";

var logdepthbuf_vertex = "#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t#else\n\t\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n\t\tgl_Position.z *= gl_Position.w;\n\t#endif\n#endif\n";

var map_fragment = "#ifdef USE_MAP\n\tvec4 texelColor = texture2D( map, vUv );\n\ttexelColor = mapTexelToLinear( texelColor );\n\tdiffuseColor *= texelColor;\n#endif\n";

var map_pars_fragment = "#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n";

var map_particle_fragment = "#ifdef USE_MAP\n\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n\tvec4 mapTexel = texture2D( map, uv );\n\tdiffuseColor *= mapTexelToLinear( mapTexel );\n#endif\n";

var map_particle_pars_fragment = "#ifdef USE_MAP\n\tuniform mat3 uvTransform;\n\tuniform sampler2D map;\n#endif\n";

var metalnessmap_fragment = "float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif\n";

var metalnessmap_pars_fragment = "#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif";

var morphnormal_vertex = "#ifdef USE_MORPHNORMALS\n\tobjectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\n\tobjectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\n\tobjectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\n\tobjectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\n#endif\n";

var morphtarget_pars_vertex = "#ifdef USE_MORPHTARGETS\n\t#ifndef USE_MORPHNORMALS\n\tuniform float morphTargetInfluences[ 8 ];\n\t#else\n\tuniform float morphTargetInfluences[ 4 ];\n\t#endif\n#endif";

var morphtarget_vertex = "#ifdef USE_MORPHTARGETS\n\ttransformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\n\ttransformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\n\ttransformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\n\ttransformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\n\t#ifndef USE_MORPHNORMALS\n\ttransformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\n\ttransformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\n\ttransformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\n\ttransformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\n\t#endif\n#endif\n";

var normal_fragment = "#ifdef FLAT_SHADED\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t#endif\n#endif\n#ifdef USE_NORMALMAP\n\tnormal = perturbNormal2Arb( -vViewPosition, normal );\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n#endif\n";

var normalmap_pars_fragment = "#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\n\t\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n\t\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n\t\tvec2 st0 = dFdx( vUv.st );\n\t\tvec2 st1 = dFdy( vUv.st );\n\t\tvec3 S = normalize( q0 * st1.t - q1 * st0.t );\n\t\tvec3 T = normalize( -q0 * st1.s + q1 * st0.s );\n\t\tvec3 N = normalize( surf_norm );\n\t\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t\tmapN.xy = normalScale * mapN.xy;\n\t\tmat3 tsn = mat3( S, T, N );\n\t\treturn normalize( tsn * mapN );\n\t}\n#endif\n";

var packing = "vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n\treturn linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\n}\n";

var premultiplied_alpha_fragment = "#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif\n";

var project_vertex = "vec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\ngl_Position = projectionMatrix * mvPosition;\n";

var dithering_fragment = "#if defined( DITHERING )\n  gl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif\n";

var dithering_pars_fragment = "#if defined( DITHERING )\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif\n";

var roughnessmap_fragment = "float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\n\troughnessFactor *= texelRoughness.g;\n#endif\n";

var roughnessmap_pars_fragment = "#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif";

var shadowmap_pars_fragment = "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHTS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHTS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHTS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tfloat texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\n\t\tconst vec2 offset = vec2( 0.0, 1.0 );\n\t\tvec2 texelSize = vec2( 1.0 ) / size;\n\t\tvec2 centroidUV = floor( uv * size + 0.5 ) / size;\n\t\tfloat lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\n\t\tfloat lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\n\t\tfloat rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\n\t\tfloat rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\n\t\tvec2 f = fract( uv * size + 0.5 );\n\t\tfloat a = mix( lb, lt, f.y );\n\t\tfloat b = mix( rb, rt, f.y );\n\t\tfloat c = mix( a, b, f.x );\n\t\treturn c;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\t\tbool frustumTest = all( frustumTestVec );\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tshadow = (\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn shadow;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\tdp += shadowBias;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif\n";

var shadowmap_pars_vertex = "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHTS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHTS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHTS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n\t#endif\n#endif\n";

var shadowmap_vertex = "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n#endif\n";

var shadowmask_pars_fragment = "float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\tDirectionalLight directionalLight;\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tshadow *= bool( directionalLight.shadow ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\tSpotLight spotLight;\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tshadow *= bool( spotLight.shadow ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\tPointLight pointLight;\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tshadow *= bool( pointLight.shadow ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#endif\n\t#endif\n\treturn shadow;\n}\n";

var skinbase_vertex = "#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif";

var skinning_pars_vertex = "#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\t#ifdef BONE_TEXTURE\n\t\tuniform sampler2D boneTexture;\n\t\tuniform int boneTextureSize;\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureSize ) );\n\t\t\tfloat y = floor( j / float( boneTextureSize ) );\n\t\t\tfloat dx = 1.0 / float( boneTextureSize );\n\t\t\tfloat dy = 1.0 / float( boneTextureSize );\n\t\t\ty = dy * ( y + 0.5 );\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\t\treturn bone;\n\t\t}\n\t#else\n\t\tuniform mat4 boneMatrices[ MAX_BONES ];\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tmat4 bone = boneMatrices[ int(i) ];\n\t\t\treturn bone;\n\t\t}\n\t#endif\n#endif\n";

var skinning_vertex = "#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif\n";

var skinnormal_vertex = "#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n#endif\n";

var specularmap_fragment = "float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif";

var specularmap_pars_fragment = "#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif";

var tonemapping_fragment = "#if defined( TONE_MAPPING )\n  gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif\n";

var tonemapping_pars_fragment = "#ifndef saturate\n\t#define saturate(a) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nuniform float toneMappingWhitePoint;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\nvec3 Uncharted2ToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\n";

var uv_pars_fragment = "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvarying vec2 vUv;\n#endif";

var uv_pars_vertex = "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvarying vec2 vUv;\n\tuniform mat3 uvTransform;\n#endif\n";

var uv_vertex = "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n#endif";

var uv2_pars_fragment = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvarying vec2 vUv2;\n#endif";

var uv2_pars_vertex = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n#endif";

var uv2_vertex = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvUv2 = uv2;\n#endif";

var worldpos_vertex = "#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )\n\tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\n#endif\n";

var cube_frag = "uniform samplerCube tCube;\nuniform float tFlip;\nuniform float opacity;\nvarying vec3 vWorldPosition;\nvoid main() {\n\tgl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );\n\tgl_FragColor.a *= opacity;\n}\n";

var cube_vert = "varying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n\tvWorldPosition = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}\n";

var depth_frag = "#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <logdepthbuf_fragment>\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( gl_FragCoord.z ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\n\t#endif\n}\n";

var depth_vert = "#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n}\n";

var distanceRGBA_frag = "#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}\n";

var distanceRGBA_vert = "#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}\n";

var equirect_frag = "uniform sampler2D tEquirect;\nvarying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldPosition );\n\tvec2 sampleUV;\n\tsampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\n\tgl_FragColor = texture2D( tEquirect, sampleUV );\n}\n";

var equirect_vert = "varying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n\tvWorldPosition = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}\n";

var linedashed_frag = "uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n";

var linedashed_vert = "uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\tvLineDistance = scale * lineDistance;\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}\n";

var meshbasic_frag = "uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\treflectedLight.indirectDiffuse += texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n";

var meshbasic_vert = "#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_ENVMAP\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}\n";

var meshlambert_frag = "uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <bsdfs>\n#include <lights_pars>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <emissivemap_fragment>\n\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\n\t#include <lightmap_fragment>\n\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n\t#else\n\t\treflectedLight.directDiffuse = vLightFront;\n\t#endif\n\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}\n";

var meshlambert_vert = "#define LAMBERT\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <lights_lambert_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n";

var meshphong_frag = "#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_template>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}\n";

var meshphong_vert = "#define PHONG\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n";

var meshphysical_frag = "#define PHYSICAL\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifndef STANDARD\n\tuniform float clearCoat;\n\tuniform float clearCoatRoughness;\n#endif\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <lights_pars>\n#include <lights_physical_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_template>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}\n";

var meshphysical_vert = "#define PHYSICAL\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n";

var normal_frag = "#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\nvoid main() {\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n}\n";

var normal_vert = "#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}\n";

var points_frag = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n";

var points_vert = "uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\t#ifdef USE_SIZEATTENUATION\n\t\tgl_PointSize = size * ( scale / - mvPosition.z );\n\t#else\n\t\tgl_PointSize = size;\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n";

var shadow_frag = "uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\t#include <fog_fragment>\n}\n";

var shadow_vert = "#include <fog_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n";

var ShaderChunk = {
	alphamap_fragment: alphamap_fragment,
	alphamap_pars_fragment: alphamap_pars_fragment,
	alphatest_fragment: alphatest_fragment,
	aomap_fragment: aomap_fragment,
	aomap_pars_fragment: aomap_pars_fragment,
	begin_vertex: begin_vertex,
	beginnormal_vertex: beginnormal_vertex,
	bsdfs: bsdfs,
	bumpmap_pars_fragment: bumpmap_pars_fragment,
	clipping_planes_fragment: clipping_planes_fragment,
	clipping_planes_pars_fragment: clipping_planes_pars_fragment,
	clipping_planes_pars_vertex: clipping_planes_pars_vertex,
	clipping_planes_vertex: clipping_planes_vertex,
	color_fragment: color_fragment,
	color_pars_fragment: color_pars_fragment,
	color_pars_vertex: color_pars_vertex,
	color_vertex: color_vertex,
	common: common,
	cube_uv_reflection_fragment: cube_uv_reflection_fragment,
	defaultnormal_vertex: defaultnormal_vertex,
	displacementmap_pars_vertex: displacementmap_pars_vertex,
	displacementmap_vertex: displacementmap_vertex,
	emissivemap_fragment: emissivemap_fragment,
	emissivemap_pars_fragment: emissivemap_pars_fragment,
	encodings_fragment: encodings_fragment,
	encodings_pars_fragment: encodings_pars_fragment,
	envmap_fragment: envmap_fragment,
	envmap_pars_fragment: envmap_pars_fragment,
	envmap_pars_vertex: envmap_pars_vertex,
	envmap_vertex: envmap_vertex,
	fog_vertex: fog_vertex,
	fog_pars_vertex: fog_pars_vertex,
	fog_fragment: fog_fragment,
	fog_pars_fragment: fog_pars_fragment,
	gradientmap_pars_fragment: gradientmap_pars_fragment,
	lightmap_fragment: lightmap_fragment,
	lightmap_pars_fragment: lightmap_pars_fragment,
	lights_lambert_vertex: lights_lambert_vertex,
	lights_pars: lights_pars,
	lights_phong_fragment: lights_phong_fragment,
	lights_phong_pars_fragment: lights_phong_pars_fragment,
	lights_physical_fragment: lights_physical_fragment,
	lights_physical_pars_fragment: lights_physical_pars_fragment,
	lights_template: lights_template,
	logdepthbuf_fragment: logdepthbuf_fragment,
	logdepthbuf_pars_fragment: logdepthbuf_pars_fragment,
	logdepthbuf_pars_vertex: logdepthbuf_pars_vertex,
	logdepthbuf_vertex: logdepthbuf_vertex,
	map_fragment: map_fragment,
	map_pars_fragment: map_pars_fragment,
	map_particle_fragment: map_particle_fragment,
	map_particle_pars_fragment: map_particle_pars_fragment,
	metalnessmap_fragment: metalnessmap_fragment,
	metalnessmap_pars_fragment: metalnessmap_pars_fragment,
	morphnormal_vertex: morphnormal_vertex,
	morphtarget_pars_vertex: morphtarget_pars_vertex,
	morphtarget_vertex: morphtarget_vertex,
	normal_fragment: normal_fragment,
	normalmap_pars_fragment: normalmap_pars_fragment,
	packing: packing,
	premultiplied_alpha_fragment: premultiplied_alpha_fragment,
	project_vertex: project_vertex,
	dithering_fragment: dithering_fragment,
	dithering_pars_fragment: dithering_pars_fragment,
	roughnessmap_fragment: roughnessmap_fragment,
	roughnessmap_pars_fragment: roughnessmap_pars_fragment,
	shadowmap_pars_fragment: shadowmap_pars_fragment,
	shadowmap_pars_vertex: shadowmap_pars_vertex,
	shadowmap_vertex: shadowmap_vertex,
	shadowmask_pars_fragment: shadowmask_pars_fragment,
	skinbase_vertex: skinbase_vertex,
	skinning_pars_vertex: skinning_pars_vertex,
	skinning_vertex: skinning_vertex,
	skinnormal_vertex: skinnormal_vertex,
	specularmap_fragment: specularmap_fragment,
	specularmap_pars_fragment: specularmap_pars_fragment,
	tonemapping_fragment: tonemapping_fragment,
	tonemapping_pars_fragment: tonemapping_pars_fragment,
	uv_pars_fragment: uv_pars_fragment,
	uv_pars_vertex: uv_pars_vertex,
	uv_vertex: uv_vertex,
	uv2_pars_fragment: uv2_pars_fragment,
	uv2_pars_vertex: uv2_pars_vertex,
	uv2_vertex: uv2_vertex,
	worldpos_vertex: worldpos_vertex,

	cube_frag: cube_frag,
	cube_vert: cube_vert,
	depth_frag: depth_frag,
	depth_vert: depth_vert,
	distanceRGBA_frag: distanceRGBA_frag,
	distanceRGBA_vert: distanceRGBA_vert,
	equirect_frag: equirect_frag,
	equirect_vert: equirect_vert,
	linedashed_frag: linedashed_frag,
	linedashed_vert: linedashed_vert,
	meshbasic_frag: meshbasic_frag,
	meshbasic_vert: meshbasic_vert,
	meshlambert_frag: meshlambert_frag,
	meshlambert_vert: meshlambert_vert,
	meshphong_frag: meshphong_frag,
	meshphong_vert: meshphong_vert,
	meshphysical_frag: meshphysical_frag,
	meshphysical_vert: meshphysical_vert,
	normal_frag: normal_frag,
	normal_vert: normal_vert,
	points_frag: points_frag,
	points_vert: points_vert,
	shadow_frag: shadow_frag,
	shadow_vert: shadow_vert
};

/**
 * @author alteredq / http://alteredqualia.com/
 * @author mrdoob / http://mrdoob.com/
 * @author mikael emtinger / http://gomo.se/
 */

var ShaderLib = {

	basic: {

		uniforms: UniformsUtils.merge( [
			UniformsLib.common,
			UniformsLib.specularmap,
			UniformsLib.envmap,
			UniformsLib.aomap,
			UniformsLib.lightmap,
			UniformsLib.fog
		] ),

		vertexShader: ShaderChunk.meshbasic_vert,
		fragmentShader: ShaderChunk.meshbasic_frag

	},

	lambert: {

		uniforms: UniformsUtils.merge( [
			UniformsLib.common,
			UniformsLib.specularmap,
			UniformsLib.envmap,
			UniformsLib.aomap,
			UniformsLib.lightmap,
			UniformsLib.emissivemap,
			UniformsLib.fog,
			UniformsLib.lights,
			{
				emissive: { value: new Color( 0x000000 ) }
			}
		] ),

		vertexShader: ShaderChunk.meshlambert_vert,
		fragmentShader: ShaderChunk.meshlambert_frag

	},

	phong: {

		uniforms: UniformsUtils.merge( [
			UniformsLib.common,
			UniformsLib.specularmap,
			UniformsLib.envmap,
			UniformsLib.aomap,
			UniformsLib.lightmap,
			UniformsLib.emissivemap,
			UniformsLib.bumpmap,
			UniformsLib.normalmap,
			UniformsLib.displacementmap,
			UniformsLib.gradientmap,
			UniformsLib.fog,
			UniformsLib.lights,
			{
				emissive: { value: new Color( 0x000000 ) },
				specular: { value: new Color( 0x111111 ) },
				shininess: { value: 30 }
			}
		] ),

		vertexShader: ShaderChunk.meshphong_vert,
		fragmentShader: ShaderChunk.meshphong_frag

	},

	standard: {

		uniforms: UniformsUtils.merge( [
			UniformsLib.common,
			UniformsLib.envmap,
			UniformsLib.aomap,
			UniformsLib.lightmap,
			UniformsLib.emissivemap,
			UniformsLib.bumpmap,
			UniformsLib.normalmap,
			UniformsLib.displacementmap,
			UniformsLib.roughnessmap,
			UniformsLib.metalnessmap,
			UniformsLib.fog,
			UniformsLib.lights,
			{
				emissive: { value: new Color( 0x000000 ) },
				roughness: { value: 0.5 },
				metalness: { value: 0.5 },
				envMapIntensity: { value: 1 } // temporary
			}
		] ),

		vertexShader: ShaderChunk.meshphysical_vert,
		fragmentShader: ShaderChunk.meshphysical_frag

	},

	points: {

		uniforms: UniformsUtils.merge( [
			UniformsLib.points,
			UniformsLib.fog
		] ),

		vertexShader: ShaderChunk.points_vert,
		fragmentShader: ShaderChunk.points_frag

	},

	dashed: {

		uniforms: UniformsUtils.merge( [
			UniformsLib.common,
			UniformsLib.fog,
			{
				scale: { value: 1 },
				dashSize: { value: 1 },
				totalSize: { value: 2 }
			}
		] ),

		vertexShader: ShaderChunk.linedashed_vert,
		fragmentShader: ShaderChunk.linedashed_frag

	},

	depth: {

		uniforms: UniformsUtils.merge( [
			UniformsLib.common,
			UniformsLib.displacementmap
		] ),

		vertexShader: ShaderChunk.depth_vert,
		fragmentShader: ShaderChunk.depth_frag

	},

	normal: {

		uniforms: UniformsUtils.merge( [
			UniformsLib.common,
			UniformsLib.bumpmap,
			UniformsLib.normalmap,
			UniformsLib.displacementmap,
			{
				opacity: { value: 1.0 }
			}
		] ),

		vertexShader: ShaderChunk.normal_vert,
		fragmentShader: ShaderChunk.normal_frag

	},

	/* -------------------------------------------------------------------------
	//	Cube map shader
	 ------------------------------------------------------------------------- */

	cube: {

		uniforms: {
			tCube: { value: null },
			tFlip: { value: - 1 },
			opacity: { value: 1.0 }
		},

		vertexShader: ShaderChunk.cube_vert,
		fragmentShader: ShaderChunk.cube_frag

	},

	equirect: {

		uniforms: {
			tEquirect: { value: null },
		},

		vertexShader: ShaderChunk.equirect_vert,
		fragmentShader: ShaderChunk.equirect_frag

	},

	distanceRGBA: {

		uniforms: UniformsUtils.merge( [
			UniformsLib.common,
			UniformsLib.displacementmap,
			{
				referencePosition: { value: new Vector3() },
				nearDistance: { value: 1 },
				farDistance: { value: 1000 }
			}
		] ),

		vertexShader: ShaderChunk.distanceRGBA_vert,
		fragmentShader: ShaderChunk.distanceRGBA_frag

	},

	shadow: {

		uniforms: UniformsUtils.merge( [
			UniformsLib.lights,
			UniformsLib.fog,
			{
				color: { value: new Color( 0x00000 ) },
				opacity: { value: 1.0 }
			},
		] ),

		vertexShader: ShaderChunk.shadow_vert,
		fragmentShader: ShaderChunk.shadow_frag

	}

};

ShaderLib.physical = {

	uniforms: UniformsUtils.merge( [
		ShaderLib.standard.uniforms,
		{
			clearCoat: { value: 0 },
			clearCoatRoughness: { value: 0 }
		}
	] ),

	vertexShader: ShaderChunk.meshphysical_vert,
	fragmentShader: ShaderChunk.meshphysical_frag

};

/**
 * @author bhouston / http://clara.io
 */

function Box2( min, max ) {

	this.min = ( min !== undefined ) ? min : new Vector2( + Infinity, + Infinity );
	this.max = ( max !== undefined ) ? max : new Vector2( - Infinity, - Infinity );

}

Object.assign( Box2.prototype, {

	set: function ( min, max ) {

		this.min.copy( min );
		this.max.copy( max );

		return this;

	},

	setFromPoints: function ( points ) {

		this.makeEmpty();

		for ( var i = 0, il = points.length; i < il; i ++ ) {

			this.expandByPoint( points[ i ] );

		}

		return this;

	},

	setFromCenterAndSize: function () {

		var v1 = new Vector2();

		return function setFromCenterAndSize( center, size ) {

			var halfSize = v1.copy( size ).multiplyScalar( 0.5 );
			this.min.copy( center ).sub( halfSize );
			this.max.copy( center ).add( halfSize );

			return this;

		};

	}(),

	clone: function () {

		return new this.constructor().copy( this );

	},

	copy: function ( box ) {

		this.min.copy( box.min );
		this.max.copy( box.max );

		return this;

	},

	makeEmpty: function () {

		this.min.x = this.min.y = + Infinity;
		this.max.x = this.max.y = - Infinity;

		return this;

	},

	isEmpty: function () {

		// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes

		return ( this.max.x < this.min.x ) || ( this.max.y < this.min.y );

	},

	getCenter: function ( optionalTarget ) {

		var result = optionalTarget || new Vector2();
		return this.isEmpty() ? result.set( 0, 0 ) : result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );

	},

	getSize: function ( optionalTarget ) {

		var result = optionalTarget || new Vector2();
		return this.isEmpty() ? result.set( 0, 0 ) : result.subVectors( this.max, this.min );

	},

	expandByPoint: function ( point ) {

		this.min.min( point );
		this.max.max( point );

		return this;

	},

	expandByVector: function ( vector ) {

		this.min.sub( vector );
		this.max.add( vector );

		return this;

	},

	expandByScalar: function ( scalar ) {

		this.min.addScalar( - scalar );
		this.max.addScalar( scalar );

		return this;

	},

	containsPoint: function ( point ) {

		return point.x < this.min.x || point.x > this.max.x ||
			point.y < this.min.y || point.y > this.max.y ? false : true;

	},

	containsBox: function ( box ) {

		return this.min.x <= box.min.x && box.max.x <= this.max.x &&
			this.min.y <= box.min.y && box.max.y <= this.max.y;

	},

	getParameter: function ( point, optionalTarget ) {

		// This can potentially have a divide by zero if the box
		// has a size dimension of 0.

		var result = optionalTarget || new Vector2();

		return result.set(
			( point.x - this.min.x ) / ( this.max.x - this.min.x ),
			( point.y - this.min.y ) / ( this.max.y - this.min.y )
		);

	},

	intersectsBox: function ( box ) {

		// using 4 splitting planes to rule out intersections

		return box.max.x < this.min.x || box.min.x > this.max.x ||
			box.max.y < this.min.y || box.min.y > this.max.y ? false : true;

	},

	clampPoint: function ( point, optionalTarget ) {

		var result = optionalTarget || new Vector2();
		return result.copy( point ).clamp( this.min, this.max );

	},

	distanceToPoint: function () {

		var v1 = new Vector2();

		return function distanceToPoint( point ) {

			var clampedPoint = v1.copy( point ).clamp( this.min, this.max );
			return clampedPoint.sub( point ).length();

		};

	}(),

	intersect: function ( box ) {

		this.min.max( box.min );
		this.max.min( box.max );

		return this;

	},

	union: function ( box ) {

		this.min.min( box.min );
		this.max.max( box.max );

		return this;

	},

	translate: function ( offset ) {

		this.min.add( offset );
		this.max.add( offset );

		return this;

	},

	equals: function ( box ) {

		return box.min.equals( this.min ) && box.max.equals( this.max );

	}

} );

/**
 * @author mikael emtinger / http://gomo.se/
 * @author alteredq / http://alteredqualia.com/
 */

function WebGLFlareRenderer( renderer, gl, state, textures, capabilities ) {

	var vertexBuffer, elementBuffer;
	var shader, program, attributes, uniforms;

	var tempTexture, occlusionTexture;

	function init() {

		var vertices = new Float32Array( [
			- 1, - 1, 0, 0,
			  1, - 1, 1, 0,
			  1, 1, 1, 1,
			- 1, 1, 0, 1
		] );

		var faces = new Uint16Array( [
			0, 1, 2,
			0, 2, 3
		] );

		// buffers

		vertexBuffer = gl.createBuffer();
		elementBuffer = gl.createBuffer();

		gl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );
		gl.bufferData( gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW );

		gl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );
		gl.bufferData( gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW );

		// textures

		tempTexture = gl.createTexture();
		occlusionTexture = gl.createTexture();

		state.bindTexture( gl.TEXTURE_2D, tempTexture );
		gl.texImage2D( gl.TEXTURE_2D, 0, gl.RGB, 16, 16, 0, gl.RGB, gl.UNSIGNED_BYTE, null );
		gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE );
		gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE );
		gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST );
		gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST );

		state.bindTexture( gl.TEXTURE_2D, occlusionTexture );
		gl.texImage2D( gl.TEXTURE_2D, 0, gl.RGBA, 16, 16, 0, gl.RGBA, gl.UNSIGNED_BYTE, null );
		gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE );
		gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE );
		gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST );
		gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST );

		shader = {

			vertexShader: [

				'uniform lowp int renderType;',

				'uniform vec3 screenPosition;',
				'uniform vec2 scale;',
				'uniform float rotation;',

				'uniform sampler2D occlusionMap;',

				'attribute vec2 position;',
				'attribute vec2 uv;',

				'varying vec2 vUV;',
				'varying float vVisibility;',

				'void main() {',

				'	vUV = uv;',

				'	vec2 pos = position;',

				'	if ( renderType == 2 ) {',

				'		vec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );',
				'		visibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );',
				'		visibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );',
				'		visibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );',
				'		visibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );',
				'		visibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );',
				'		visibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );',
				'		visibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );',
				'		visibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );',

				'		vVisibility =        visibility.r / 9.0;',
				'		vVisibility *= 1.0 - visibility.g / 9.0;',
				'		vVisibility *=       visibility.b / 9.0;',
				'		vVisibility *= 1.0 - visibility.a / 9.0;',

				'		pos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;',
				'		pos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;',

				'	}',

				'	gl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );',

				'}'

			].join( '\n' ),

			fragmentShader: [

				'uniform lowp int renderType;',

				'uniform sampler2D map;',
				'uniform float opacity;',
				'uniform vec3 color;',

				'varying vec2 vUV;',
				'varying float vVisibility;',

				'void main() {',

				// pink square

				'	if ( renderType == 0 ) {',

				'		gl_FragColor = vec4( 1.0, 0.0, 1.0, 0.0 );',

				// restore

				'	} else if ( renderType == 1 ) {',

				'		gl_FragColor = texture2D( map, vUV );',

				// flare

				'	} else {',

				'		vec4 texture = texture2D( map, vUV );',
				'		texture.a *= opacity * vVisibility;',
				'		gl_FragColor = texture;',
				'		gl_FragColor.rgb *= color;',

				'	}',

				'}'

			].join( '\n' )

		};

		program = createProgram( shader );

		attributes = {
			vertex: gl.getAttribLocation( program, 'position' ),
			uv: gl.getAttribLocation( program, 'uv' )
		};

		uniforms = {
			renderType: gl.getUniformLocation( program, 'renderType' ),
			map: gl.getUniformLocation( program, 'map' ),
			occlusionMap: gl.getUniformLocation( program, 'occlusionMap' ),
			opacity: gl.getUniformLocation( program, 'opacity' ),
			color: gl.getUniformLocation( program, 'color' ),
			scale: gl.getUniformLocation( program, 'scale' ),
			rotation: gl.getUniformLocation( program, 'rotation' ),
			screenPosition: gl.getUniformLocation( program, 'screenPosition' )
		};

	}

	/*
	 * Render lens flares
	 * Method: renders 16x16 0xff00ff-colored points scattered over the light source area,
	 *         reads these back and calculates occlusion.
	 */

	this.render = function ( flares, scene, camera, viewport ) {

		if ( flares.length === 0 ) return;

		var tempPosition = new Vector3();

		var invAspect = viewport.w / viewport.z,
			halfViewportWidth = viewport.z * 0.5,
			halfViewportHeight = viewport.w * 0.5;

		var size = 16 / viewport.w,
			scale = new Vector2( size * invAspect, size );

		var screenPosition = new Vector3( 1, 1, 0 ),
			screenPositionPixels = new Vector2( 1, 1 );

		var validArea = new Box2();

		validArea.min.set( viewport.x, viewport.y );
		validArea.max.set( viewport.x + ( viewport.z - 16 ), viewport.y + ( viewport.w - 16 ) );

		if ( program === undefined ) {

			init();

		}

		state.useProgram( program );

		state.initAttributes();
		state.enableAttribute( attributes.vertex );
		state.enableAttribute( attributes.uv );
		state.disableUnusedAttributes();

		// loop through all lens flares to update their occlusion and positions
		// setup gl and common used attribs/uniforms

		gl.uniform1i( uniforms.occlusionMap, 0 );
		gl.uniform1i( uniforms.map, 1 );

		gl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );
		gl.vertexAttribPointer( attributes.vertex, 2, gl.FLOAT, false, 2 * 8, 0 );
		gl.vertexAttribPointer( attributes.uv, 2, gl.FLOAT, false, 2 * 8, 8 );

		gl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );

		state.disable( gl.CULL_FACE );
		state.buffers.depth.setMask( false );

		for ( var i = 0, l = flares.length; i < l; i ++ ) {

			size = 16 / viewport.w;
			scale.set( size * invAspect, size );

			// calc object screen position

			var flare = flares[ i ];

			tempPosition.set( flare.matrixWorld.elements[ 12 ], flare.matrixWorld.elements[ 13 ], flare.matrixWorld.elements[ 14 ] );

			tempPosition.applyMatrix4( camera.matrixWorldInverse );
			tempPosition.applyMatrix4( camera.projectionMatrix );

			// setup arrays for gl programs

			screenPosition.copy( tempPosition );

			// horizontal and vertical coordinate of the lower left corner of the pixels to copy

			screenPositionPixels.x = viewport.x + ( screenPosition.x * halfViewportWidth ) + halfViewportWidth - 8;
			screenPositionPixels.y = viewport.y + ( screenPosition.y * halfViewportHeight ) + halfViewportHeight - 8;

			// screen cull

			if ( validArea.containsPoint( screenPositionPixels ) === true ) {

				// save current RGB to temp texture

				state.activeTexture( gl.TEXTURE0 );
				state.bindTexture( gl.TEXTURE_2D, null );
				state.activeTexture( gl.TEXTURE1 );
				state.bindTexture( gl.TEXTURE_2D, tempTexture );
				gl.copyTexImage2D( gl.TEXTURE_2D, 0, gl.RGB, screenPositionPixels.x, screenPositionPixels.y, 16, 16, 0 );


				// render pink quad

				gl.uniform1i( uniforms.renderType, 0 );
				gl.uniform2f( uniforms.scale, scale.x, scale.y );
				gl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );

				state.disable( gl.BLEND );
				state.enable( gl.DEPTH_TEST );

				gl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );


				// copy result to occlusionMap

				state.activeTexture( gl.TEXTURE0 );
				state.bindTexture( gl.TEXTURE_2D, occlusionTexture );
				gl.copyTexImage2D( gl.TEXTURE_2D, 0, gl.RGBA, screenPositionPixels.x, screenPositionPixels.y, 16, 16, 0 );


				// restore graphics

				gl.uniform1i( uniforms.renderType, 1 );
				state.disable( gl.DEPTH_TEST );

				state.activeTexture( gl.TEXTURE1 );
				state.bindTexture( gl.TEXTURE_2D, tempTexture );
				gl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );


				// update object positions

				flare.positionScreen.copy( screenPosition );

				if ( flare.customUpdateCallback ) {

					flare.customUpdateCallback( flare );

				} else {

					flare.updateLensFlares();

				}

				// render flares

				gl.uniform1i( uniforms.renderType, 2 );
				state.enable( gl.BLEND );

				for ( var j = 0, jl = flare.lensFlares.length; j < jl; j ++ ) {

					var sprite = flare.lensFlares[ j ];

					if ( sprite.opacity > 0.001 && sprite.scale > 0.001 ) {

						screenPosition.x = sprite.x;
						screenPosition.y = sprite.y;
						screenPosition.z = sprite.z;

						size = sprite.size * sprite.scale / viewport.w;

						scale.x = size * invAspect;
						scale.y = size;

						gl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );
						gl.uniform2f( uniforms.scale, scale.x, scale.y );
						gl.uniform1f( uniforms.rotation, sprite.rotation );

						gl.uniform1f( uniforms.opacity, sprite.opacity );
						gl.uniform3f( uniforms.color, sprite.color.r, sprite.color.g, sprite.color.b );

						state.setBlending( sprite.blending, sprite.blendEquation, sprite.blendSrc, sprite.blendDst );

						textures.setTexture2D( sprite.texture, 1 );

						gl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );

					}

				}

			}

		}

		// restore gl

		state.enable( gl.CULL_FACE );
		state.enable( gl.DEPTH_TEST );
		state.buffers.depth.setMask( true );

		state.reset();

	};

	function createProgram( shader ) {

		var program = gl.createProgram();

		var fragmentShader = gl.createShader( gl.FRAGMENT_SHADER );
		var vertexShader = gl.createShader( gl.VERTEX_SHADER );

		var prefix = 'precision ' + capabilities.precision + ' float;\n';

		gl.shaderSource( fragmentShader, prefix + shader.fragmentShader );
		gl.shaderSource( vertexShader, prefix + shader.vertexShader );

		gl.compileShader( fragmentShader );
		gl.compileShader( vertexShader );

		gl.attachShader( program, fragmentShader );
		gl.attachShader( program, vertexShader );

		gl.linkProgram( program );

		return program;

	}

}

/**
 * @author mrdoob / http://mrdoob.com/
 */

function CanvasTexture( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {

	Texture.call( this, canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );

	this.needsUpdate = true;

}

CanvasTexture.prototype = Object.create( Texture.prototype );
CanvasTexture.prototype.constructor = CanvasTexture;

/**
 * @author mikael emtinger / http://gomo.se/
 * @author alteredq / http://alteredqualia.com/
 */

function WebGLSpriteRenderer( renderer, gl, state, textures, capabilities ) {

	var vertexBuffer, elementBuffer;
	var program, attributes, uniforms;

	var texture;

	// decompose matrixWorld

	var spritePosition = new Vector3();
	var spriteRotation = new Quaternion();
	var spriteScale = new Vector3();

	function init() {

		var vertices = new Float32Array( [
			- 0.5, - 0.5, 0, 0,
			  0.5, - 0.5, 1, 0,
			  0.5, 0.5, 1, 1,
			- 0.5, 0.5, 0, 1
		] );

		var faces = new Uint16Array( [
			0, 1, 2,
			0, 2, 3
		] );

		vertexBuffer = gl.createBuffer();
		elementBuffer = gl.createBuffer();

		gl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );
		gl.bufferData( gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW );

		gl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );
		gl.bufferData( gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW );

		program = createProgram();

		attributes = {
			position: gl.getAttribLocation( program, 'position' ),
			uv: gl.getAttribLocation( program, 'uv' )
		};

		uniforms = {
			uvOffset: gl.getUniformLocation( program, 'uvOffset' ),
			uvScale: gl.getUniformLocation( program, 'uvScale' ),

			rotation: gl.getUniformLocation( program, 'rotation' ),
			scale: gl.getUniformLocation( program, 'scale' ),

			color: gl.getUniformLocation( program, 'color' ),
			map: gl.getUniformLocation( program, 'map' ),
			opacity: gl.getUniformLocation( program, 'opacity' ),

			modelViewMatrix: gl.getUniformLocation( program, 'modelViewMatrix' ),
			projectionMatrix: gl.getUniformLocation( program, 'projectionMatrix' ),

			fogType: gl.getUniformLocation( program, 'fogType' ),
			fogDensity: gl.getUniformLocation( program, 'fogDensity' ),
			fogNear: gl.getUniformLocation( program, 'fogNear' ),
			fogFar: gl.getUniformLocation( program, 'fogFar' ),
			fogColor: gl.getUniformLocation( program, 'fogColor' ),
			fogDepth: gl.getUniformLocation( program, 'fogDepth' ),

			alphaTest: gl.getUniformLocation( program, 'alphaTest' )
		};

		var canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );
		canvas.width = 8;
		canvas.height = 8;

		var context = canvas.getContext( '2d' );
		context.fillStyle = 'white';
		context.fillRect( 0, 0, 8, 8 );

		texture = new CanvasTexture( canvas );

	}

	this.render = function ( sprites, scene, camera ) {

		if ( sprites.length === 0 ) return;

		// setup gl

		if ( program === undefined ) {

			init();

		}

		state.useProgram( program );

		state.initAttributes();
		state.enableAttribute( attributes.position );
		state.enableAttribute( attributes.uv );
		state.disableUnusedAttributes();

		state.disable( gl.CULL_FACE );
		state.enable( gl.BLEND );

		gl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );
		gl.vertexAttribPointer( attributes.position, 2, gl.FLOAT, false, 2 * 8, 0 );
		gl.vertexAttribPointer( attributes.uv, 2, gl.FLOAT, false, 2 * 8, 8 );

		gl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );

		gl.uniformMatrix4fv( uniforms.projectionMatrix, false, camera.projectionMatrix.elements );

		state.activeTexture( gl.TEXTURE0 );
		gl.uniform1i( uniforms.map, 0 );

		var oldFogType = 0;
		var sceneFogType = 0;
		var fog = scene.fog;

		if ( fog ) {

			gl.uniform3f( uniforms.fogColor, fog.color.r, fog.color.g, fog.color.b );

			if ( fog.isFog ) {

				gl.uniform1f( uniforms.fogNear, fog.near );
				gl.uniform1f( uniforms.fogFar, fog.far );

				gl.uniform1i( uniforms.fogType, 1 );
				oldFogType = 1;
				sceneFogType = 1;

			} else if ( fog.isFogExp2 ) {

				gl.uniform1f( uniforms.fogDensity, fog.density );

				gl.uniform1i( uniforms.fogType, 2 );
				oldFogType = 2;
				sceneFogType = 2;

			}

		} else {

			gl.uniform1i( uniforms.fogType, 0 );
			oldFogType = 0;
			sceneFogType = 0;

		}


		// update positions and sort

		for ( var i = 0, l = sprites.length; i < l; i ++ ) {

			var sprite = sprites[ i ];

			sprite.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, sprite.matrixWorld );
			sprite.z = - sprite.modelViewMatrix.elements[ 14 ];

		}

		sprites.sort( painterSortStable );

		// render all sprites

		var scale = [];

		for ( var i = 0, l = sprites.length; i < l; i ++ ) {

			var sprite = sprites[ i ];
			var material = sprite.material;

			if ( material.visible === false ) continue;

			sprite.onBeforeRender( renderer, scene, camera, undefined, material, undefined );

			gl.uniform1f( uniforms.alphaTest, material.alphaTest );
			gl.uniformMatrix4fv( uniforms.modelViewMatrix, false, sprite.modelViewMatrix.elements );

			sprite.matrixWorld.decompose( spritePosition, spriteRotation, spriteScale );

			scale[ 0 ] = spriteScale.x;
			scale[ 1 ] = spriteScale.y;

			var fogType = 0;

			if ( scene.fog && material.fog ) {

				fogType = sceneFogType;

			}

			if ( oldFogType !== fogType ) {

				gl.uniform1i( uniforms.fogType, fogType );
				oldFogType = fogType;

			}

			if ( material.map !== null ) {

				gl.uniform2f( uniforms.uvOffset, material.map.offset.x, material.map.offset.y );
				gl.uniform2f( uniforms.uvScale, material.map.repeat.x, material.map.repeat.y );

			} else {

				gl.uniform2f( uniforms.uvOffset, 0, 0 );
				gl.uniform2f( uniforms.uvScale, 1, 1 );

			}

			gl.uniform1f( uniforms.opacity, material.opacity );
			gl.uniform3f( uniforms.color, material.color.r, material.color.g, material.color.b );

			gl.uniform1f( uniforms.rotation, material.rotation );
			gl.uniform2fv( uniforms.scale, scale );

			state.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha );
			state.buffers.depth.setTest( material.depthTest );
			state.buffers.depth.setMask( material.depthWrite );
			state.buffers.color.setMask( material.colorWrite );

			textures.setTexture2D( material.map || texture, 0 );

			gl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );

			sprite.onAfterRender( renderer, scene, camera, undefined, material, undefined );

		}

		// restore gl

		state.enable( gl.CULL_FACE );

		state.reset();

	};

	function createProgram() {

		var program = gl.createProgram();

		var vertexShader = gl.createShader( gl.VERTEX_SHADER );
		var fragmentShader = gl.createShader( gl.FRAGMENT_SHADER );

		gl.shaderSource( vertexShader, [

			'precision ' + capabilities.precision + ' float;',

			'#define SHADER_NAME ' + 'SpriteMaterial',

			'uniform mat4 modelViewMatrix;',
			'uniform mat4 projectionMatrix;',
			'uniform float rotation;',
			'uniform vec2 scale;',
			'uniform vec2 uvOffset;',
			'uniform vec2 uvScale;',

			'attribute vec2 position;',
			'attribute vec2 uv;',

			'varying vec2 vUV;',
			'varying float fogDepth;',

			'void main() {',

			'	vUV = uvOffset + uv * uvScale;',

			'	vec2 alignedPosition = position * scale;',

			'	vec2 rotatedPosition;',
			'	rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;',
			'	rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;',

			'	vec4 mvPosition;',

			'	mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );',
			'	mvPosition.xy += rotatedPosition;',

			'	gl_Position = projectionMatrix * mvPosition;',

			'	fogDepth = - mvPosition.z;',

			'}'

		].join( '\n' ) );

		gl.shaderSource( fragmentShader, [

			'precision ' + capabilities.precision + ' float;',

			'#define SHADER_NAME ' + 'SpriteMaterial',

			'uniform vec3 color;',
			'uniform sampler2D map;',
			'uniform float opacity;',

			'uniform int fogType;',
			'uniform vec3 fogColor;',
			'uniform float fogDensity;',
			'uniform float fogNear;',
			'uniform float fogFar;',
			'uniform float alphaTest;',

			'varying vec2 vUV;',
			'varying float fogDepth;',

			'void main() {',

			'	vec4 texture = texture2D( map, vUV );',

			'	gl_FragColor = vec4( color * texture.xyz, texture.a * opacity );',

			'	if ( gl_FragColor.a < alphaTest ) discard;',

			'	if ( fogType > 0 ) {',

			'		float fogFactor = 0.0;',

			'		if ( fogType == 1 ) {',

			'			fogFactor = smoothstep( fogNear, fogFar, fogDepth );',

			'		} else {',

			'			const float LOG2 = 1.442695;',
			'			fogFactor = exp2( - fogDensity * fogDensity * fogDepth * fogDepth * LOG2 );',
			'			fogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );',

			'		}',

			'		gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );',

			'	}',

			'}'

		].join( '\n' ) );

		gl.compileShader( vertexShader );
		gl.compileShader( fragmentShader );

		gl.attachShader( program, vertexShader );
		gl.attachShader( program, fragmentShader );

		gl.linkProgram( program );

		return program;

	}

	function painterSortStable( a, b ) {

		if ( a.renderOrder !== b.renderOrder ) {

			return a.renderOrder - b.renderOrder;

		} else if ( a.z !== b.z ) {

			return b.z - a.z;

		} else {

			return b.id - a.id;

		}

	}

}

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 */

var materialId = 0;

function Material() {

	Object.defineProperty( this, 'id', { value: materialId ++ } );

	this.uuid = _Math.generateUUID();

	this.name = '';
	this.type = 'Material';

	this.fog = true;
	this.lights = true;

	this.blending = NormalBlending;
	this.side = FrontSide;
	this.flatShading = false;
	this.vertexColors = NoColors; // THREE.NoColors, THREE.VertexColors, THREE.FaceColors

	this.opacity = 1;
	this.transparent = false;

	this.blendSrc = SrcAlphaFactor;
	this.blendDst = OneMinusSrcAlphaFactor;
	this.blendEquation = AddEquation;
	this.blendSrcAlpha = null;
	this.blendDstAlpha = null;
	this.blendEquationAlpha = null;

	this.depthFunc = LessEqualDepth;
	this.depthTest = true;
	this.depthWrite = true;

	this.clippingPlanes = null;
	this.clipIntersection = false;
	this.clipShadows = false;

	this.colorWrite = true;

	this.precision = null; // override the renderer's default precision for this material

	this.polygonOffset = false;
	this.polygonOffsetFactor = 0;
	this.polygonOffsetUnits = 0;

	this.dithering = false;

	this.alphaTest = 0;
	this.premultipliedAlpha = false;

	this.overdraw = 0; // Overdrawn pixels (typically between 0 and 1) for fixing antialiasing gaps in CanvasRenderer

	this.visible = true;

	this.userData = {};

	this.needsUpdate = true;

}

Object.assign( Material.prototype, EventDispatcher.prototype, {

	isMaterial: true,

	onBeforeCompile: function () {},

	setValues: function ( values ) {

		if ( values === undefined ) return;

		for ( var key in values ) {

			var newValue = values[ key ];

			if ( newValue === undefined ) {

				console.warn( "THREE.Material: '" + key + "' parameter is undefined." );
				continue;

			}

			// for backward compatability if shading is set in the constructor
			if ( key === 'shading' ) {

				console.warn( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );
				this.flatShading = ( newValue === FlatShading ) ? true : false;
				continue;

			}

			var currentValue = this[ key ];

			if ( currentValue === undefined ) {

				console.warn( "THREE." + this.type + ": '" + key + "' is not a property of this material." );
				continue;

			}

			if ( currentValue && currentValue.isColor ) {

				currentValue.set( newValue );

			} else if ( ( currentValue && currentValue.isVector3 ) && ( newValue && newValue.isVector3 ) ) {

				currentValue.copy( newValue );

			} else if ( key === 'overdraw' ) {

				// ensure overdraw is backwards-compatible with legacy boolean type
				this[ key ] = Number( newValue );

			} else {

				this[ key ] = newValue;

			}

		}

	},

	toJSON: function ( meta ) {

		var isRoot = ( meta === undefined || typeof meta === 'string' );

		if ( isRoot ) {

			meta = {
				textures: {},
				images: {}
			};

		}

		var data = {
			metadata: {
				version: 4.5,
				type: 'Material',
				generator: 'Material.toJSON'
			}
		};

		// standard Material serialization
		data.uuid = this.uuid;
		data.type = this.type;

		if ( this.name !== '' ) data.name = this.name;

		if ( this.color && this.color.isColor ) data.color = this.color.getHex();

		if ( this.roughness !== undefined ) data.roughness = this.roughness;
		if ( this.metalness !== undefined ) data.metalness = this.metalness;

		if ( this.emissive && this.emissive.isColor ) data.emissive = this.emissive.getHex();
		if ( this.emissiveIntensity !== 1 ) data.emissiveIntensity = this.emissiveIntensity;

		if ( this.specular && this.specular.isColor ) data.specular = this.specular.getHex();
		if ( this.shininess !== undefined ) data.shininess = this.shininess;
		if ( this.clearCoat !== undefined ) data.clearCoat = this.clearCoat;
		if ( this.clearCoatRoughness !== undefined ) data.clearCoatRoughness = this.clearCoatRoughness;

		if ( this.map && this.map.isTexture ) data.map = this.map.toJSON( meta ).uuid;
		if ( this.alphaMap && this.alphaMap.isTexture ) data.alphaMap = this.alphaMap.toJSON( meta ).uuid;
		if ( this.lightMap && this.lightMap.isTexture ) data.lightMap = this.lightMap.toJSON( meta ).uuid;
		if ( this.bumpMap && this.bumpMap.isTexture ) {

			data.bumpMap = this.bumpMap.toJSON( meta ).uuid;
			data.bumpScale = this.bumpScale;

		}
		if ( this.normalMap && this.normalMap.isTexture ) {

			data.normalMap = this.normalMap.toJSON( meta ).uuid;
			data.normalScale = this.normalScale.toArray();

		}
		if ( this.displacementMap && this.displacementMap.isTexture ) {

			data.displacementMap = this.displacementMap.toJSON( meta ).uuid;
			data.displacementScale = this.displacementScale;
			data.displacementBias = this.displacementBias;

		}
		if ( this.roughnessMap && this.roughnessMap.isTexture ) data.roughnessMap = this.roughnessMap.toJSON( meta ).uuid;
		if ( this.metalnessMap && this.metalnessMap.isTexture ) data.metalnessMap = this.metalnessMap.toJSON( meta ).uuid;

		if ( this.emissiveMap && this.emissiveMap.isTexture ) data.emissiveMap = this.emissiveMap.toJSON( meta ).uuid;
		if ( this.specularMap && this.specularMap.isTexture ) data.specularMap = this.specularMap.toJSON( meta ).uuid;

		if ( this.envMap && this.envMap.isTexture ) {

			data.envMap = this.envMap.toJSON( meta ).uuid;
			data.reflectivity = this.reflectivity; // Scale behind envMap

		}

		if ( this.gradientMap && this.gradientMap.isTexture ) {

			data.gradientMap = this.gradientMap.toJSON( meta ).uuid;

		}

		if ( this.size !== undefined ) data.size = this.size;
		if ( this.sizeAttenuation !== undefined ) data.sizeAttenuation = this.sizeAttenuation;

		if ( this.blending !== NormalBlending ) data.blending = this.blending;
		if ( this.flatShading === true ) data.flatShading = this.flatShading;
		if ( this.side !== FrontSide ) data.side = this.side;
		if ( this.vertexColors !== NoColors ) data.vertexColors = this.vertexColors;

		if ( this.opacity < 1 ) data.opacity = this.opacity;
		if ( this.transparent === true ) data.transparent = this.transparent;

		data.depthFunc = this.depthFunc;
		data.depthTest = this.depthTest;
		data.depthWrite = this.depthWrite;

		// rotation (SpriteMaterial)
		if ( this.rotation !== 0 ) data.rotation = this.rotation;

		if ( this.linewidth !== 1 ) data.linewidth = this.linewidth;
		if ( this.dashSize !== undefined ) data.dashSize = this.dashSize;
		if ( this.gapSize !== undefined ) data.gapSize = this.gapSize;
		if ( this.scale !== undefined ) data.scale = this.scale;

		if ( this.dithering === true ) data.dithering = true;

		if ( this.alphaTest > 0 ) data.alphaTest = this.alphaTest;
		if ( this.premultipliedAlpha === true ) data.premultipliedAlpha = this.premultipliedAlpha;

		if ( this.wireframe === true ) data.wireframe = this.wireframe;
		if ( this.wireframeLinewidth > 1 ) data.wireframeLinewidth = this.wireframeLinewidth;
		if ( this.wireframeLinecap !== 'round' ) data.wireframeLinecap = this.wireframeLinecap;
		if ( this.wireframeLinejoin !== 'round' ) data.wireframeLinejoin = this.wireframeLinejoin;

		if ( this.morphTargets === true ) data.morphTargets = true;
		if ( this.skinning === true ) data.skinning = true;

		if ( this.visible === false ) data.visible = false;
		if ( JSON.stringify( this.userData ) !== '{}' ) data.userData = this.userData;

		// TODO: Copied from Object3D.toJSON

		function extractFromCache( cache ) {

			var values = [];

			for ( var key in cache ) {

				var data = cache[ key ];
				delete data.metadata;
				values.push( data );

			}

			return values;

		}

		if ( isRoot ) {

			var textures = extractFromCache( meta.textures );
			var images = extractFromCache( meta.images );

			if ( textures.length > 0 ) data.textures = textures;
			if ( images.length > 0 ) data.images = images;

		}

		return data;

	},

	clone: function () {

		return new this.constructor().copy( this );

	},

	copy: function ( source ) {

		this.name = source.name;

		this.fog = source.fog;
		this.lights = source.lights;

		this.blending = source.blending;
		this.side = source.side;
		this.flatShading = source.flatShading;
		this.vertexColors = source.vertexColors;

		this.opacity = source.opacity;
		this.transparent = source.transparent;

		this.blendSrc = source.blendSrc;
		this.blendDst = source.blendDst;
		this.blendEquation = source.blendEquation;
		this.blendSrcAlpha = source.blendSrcAlpha;
		this.blendDstAlpha = source.blendDstAlpha;
		this.blendEquationAlpha = source.blendEquationAlpha;

		this.depthFunc = source.depthFunc;
		this.depthTest = source.depthTest;
		this.depthWrite = source.depthWrite;

		this.colorWrite = source.colorWrite;

		this.precision = source.precision;

		this.polygonOffset = source.polygonOffset;
		this.polygonOffsetFactor = source.polygonOffsetFactor;
		this.polygonOffsetUnits = source.polygonOffsetUnits;

		this.dithering = source.dithering;

		this.alphaTest = source.alphaTest;
		this.premultipliedAlpha = source.premultipliedAlpha;

		this.overdraw = source.overdraw;

		this.visible = source.visible;
		this.userData = JSON.parse( JSON.stringify( source.userData ) );

		this.clipShadows = source.clipShadows;
		this.clipIntersection = source.clipIntersection;

		var srcPlanes = source.clippingPlanes,
			dstPlanes = null;

		if ( srcPlanes !== null ) {

			var n = srcPlanes.length;
			dstPlanes = new Array( n );

			for ( var i = 0; i !== n; ++ i )
				dstPlanes[ i ] = srcPlanes[ i ].clone();

		}

		this.clippingPlanes = dstPlanes;

		return this;

	},

	dispose: function () {

		this.dispatchEvent( { type: 'dispose' } );

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 * @author bhouston / https://clara.io
 * @author WestLangley / http://github.com/WestLangley
 *
 * parameters = {
 *
 *  opacity: <float>,
 *
 *  map: new THREE.Texture( <Image> ),
 *
 *  alphaMap: new THREE.Texture( <Image> ),
 *
 *  displacementMap: new THREE.Texture( <Image> ),
 *  displacementScale: <float>,
 *  displacementBias: <float>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>
 * }
 */

function MeshDepthMaterial( parameters ) {

	Material.call( this );

	this.type = 'MeshDepthMaterial';

	this.depthPacking = BasicDepthPacking;

	this.skinning = false;
	this.morphTargets = false;

	this.map = null;

	this.alphaMap = null;

	this.displacementMap = null;
	this.displacementScale = 1;
	this.displacementBias = 0;

	this.wireframe = false;
	this.wireframeLinewidth = 1;

	this.fog = false;
	this.lights = false;

	this.setValues( parameters );

}

MeshDepthMaterial.prototype = Object.create( Material.prototype );
MeshDepthMaterial.prototype.constructor = MeshDepthMaterial;

MeshDepthMaterial.prototype.isMeshDepthMaterial = true;

MeshDepthMaterial.prototype.copy = function ( source ) {

	Material.prototype.copy.call( this, source );

	this.depthPacking = source.depthPacking;

	this.skinning = source.skinning;
	this.morphTargets = source.morphTargets;

	this.map = source.map;

	this.alphaMap = source.alphaMap;

	this.displacementMap = source.displacementMap;
	this.displacementScale = source.displacementScale;
	this.displacementBias = source.displacementBias;

	this.wireframe = source.wireframe;
	this.wireframeLinewidth = source.wireframeLinewidth;

	return this;

};

/**
 * @author WestLangley / http://github.com/WestLangley
 *
 * parameters = {
 *
 *  referencePosition: <float>,
 *  nearDistance: <float>,
 *  farDistance: <float>,
 *
 *  skinning: <bool>,
 *  morphTargets: <bool>,
 *
 *  map: new THREE.Texture( <Image> ),
 *
 *  alphaMap: new THREE.Texture( <Image> ),
 *
 *  displacementMap: new THREE.Texture( <Image> ),
 *  displacementScale: <float>,
 *  displacementBias: <float>
 *
 * }
 */

function MeshDistanceMaterial( parameters ) {

	Material.call( this );

	this.type = 'MeshDistanceMaterial';

	this.referencePosition = new Vector3();
	this.nearDistance = 1;
	this.farDistance = 1000;

	this.skinning = false;
	this.morphTargets = false;

	this.map = null;

	this.alphaMap = null;

	this.displacementMap = null;
	this.displacementScale = 1;
	this.displacementBias = 0;

	this.fog = false;
	this.lights = false;

	this.setValues( parameters );

}

MeshDistanceMaterial.prototype = Object.create( Material.prototype );
MeshDistanceMaterial.prototype.constructor = MeshDistanceMaterial;

MeshDistanceMaterial.prototype.isMeshDistanceMaterial = true;

MeshDistanceMaterial.prototype.copy = function ( source ) {

	Material.prototype.copy.call( this, source );

	this.referencePosition.copy( source.referencePosition );
	this.nearDistance = source.nearDistance;
	this.farDistance = source.farDistance;

	this.skinning = source.skinning;
	this.morphTargets = source.morphTargets;

	this.map = source.map;

	this.alphaMap = source.alphaMap;

	this.displacementMap = source.displacementMap;
	this.displacementScale = source.displacementScale;
	this.displacementBias = source.displacementBias;

	return this;

};

/**
 * @author bhouston / http://clara.io
 * @author WestLangley / http://github.com/WestLangley
 */

function Box3( min, max ) {

	this.min = ( min !== undefined ) ? min : new Vector3( + Infinity, + Infinity, + Infinity );
	this.max = ( max !== undefined ) ? max : new Vector3( - Infinity, - Infinity, - Infinity );

}

Object.assign( Box3.prototype, {

	isBox3: true,

	set: function ( min, max ) {

		this.min.copy( min );
		this.max.copy( max );

		return this;

	},

	setFromArray: function ( array ) {

		var minX = + Infinity;
		var minY = + Infinity;
		var minZ = + Infinity;

		var maxX = - Infinity;
		var maxY = - Infinity;
		var maxZ = - Infinity;

		for ( var i = 0, l = array.length; i < l; i += 3 ) {

			var x = array[ i ];
			var y = array[ i + 1 ];
			var z = array[ i + 2 ];

			if ( x < minX ) minX = x;
			if ( y < minY ) minY = y;
			if ( z < minZ ) minZ = z;

			if ( x > maxX ) maxX = x;
			if ( y > maxY ) maxY = y;
			if ( z > maxZ ) maxZ = z;

		}

		this.min.set( minX, minY, minZ );
		this.max.set( maxX, maxY, maxZ );

		return this;

	},

	setFromBufferAttribute: function ( attribute ) {

		var minX = + Infinity;
		var minY = + Infinity;
		var minZ = + Infinity;

		var maxX = - Infinity;
		var maxY = - Infinity;
		var maxZ = - Infinity;

		for ( var i = 0, l = attribute.count; i < l; i ++ ) {

			var x = attribute.getX( i );
			var y = attribute.getY( i );
			var z = attribute.getZ( i );

			if ( x < minX ) minX = x;
			if ( y < minY ) minY = y;
			if ( z < minZ ) minZ = z;

			if ( x > maxX ) maxX = x;
			if ( y > maxY ) maxY = y;
			if ( z > maxZ ) maxZ = z;

		}

		this.min.set( minX, minY, minZ );
		this.max.set( maxX, maxY, maxZ );

		return this;

	},

	setFromPoints: function ( points ) {

		this.makeEmpty();

		for ( var i = 0, il = points.length; i < il; i ++ ) {

			this.expandByPoint( points[ i ] );

		}

		return this;

	},

	setFromCenterAndSize: function () {

		var v1 = new Vector3();

		return function setFromCenterAndSize( center, size ) {

			var halfSize = v1.copy( size ).multiplyScalar( 0.5 );

			this.min.copy( center ).sub( halfSize );
			this.max.copy( center ).add( halfSize );

			return this;

		};

	}(),

	setFromObject: function ( object ) {

		this.makeEmpty();

		return this.expandByObject( object );

	},

	clone: function () {

		return new this.constructor().copy( this );

	},

	copy: function ( box ) {

		this.min.copy( box.min );
		this.max.copy( box.max );

		return this;

	},

	makeEmpty: function () {

		this.min.x = this.min.y = this.min.z = + Infinity;
		this.max.x = this.max.y = this.max.z = - Infinity;

		return this;

	},

	isEmpty: function () {

		// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes

		return ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );

	},

	getCenter: function ( optionalTarget ) {

		var result = optionalTarget || new Vector3();
		return this.isEmpty() ? result.set( 0, 0, 0 ) : result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );

	},

	getSize: function ( optionalTarget ) {

		var result = optionalTarget || new Vector3();
		return this.isEmpty() ? result.set( 0, 0, 0 ) : result.subVectors( this.max, this.min );

	},

	expandByPoint: function ( point ) {

		this.min.min( point );
		this.max.max( point );

		return this;

	},

	expandByVector: function ( vector ) {

		this.min.sub( vector );
		this.max.add( vector );

		return this;

	},

	expandByScalar: function ( scalar ) {

		this.min.addScalar( - scalar );
		this.max.addScalar( scalar );

		return this;

	},

	expandByObject: function () {

		// Computes the world-axis-aligned bounding box of an object (including its children),
		// accounting for both the object's, and children's, world transforms

		var scope, i, l;

		var v1 = new Vector3();

		function traverse( node ) {

			var geometry = node.geometry;

			if ( geometry !== undefined ) {

				if ( geometry.isGeometry ) {

					var vertices = geometry.vertices;

					for ( i = 0, l = vertices.length; i < l; i ++ ) {

						v1.copy( vertices[ i ] );
						v1.applyMatrix4( node.matrixWorld );

						scope.expandByPoint( v1 );

					}

				} else if ( geometry.isBufferGeometry ) {

					var attribute = geometry.attributes.position;

					if ( attribute !== undefined ) {

						for ( i = 0, l = attribute.count; i < l; i ++ ) {

							v1.fromBufferAttribute( attribute, i ).applyMatrix4( node.matrixWorld );

							scope.expandByPoint( v1 );

						}

					}

				}

			}

		}

		return function expandByObject( object ) {

			scope = this;

			object.updateMatrixWorld( true );

			object.traverse( traverse );

			return this;

		};

	}(),

	containsPoint: function ( point ) {

		return point.x < this.min.x || point.x > this.max.x ||
			point.y < this.min.y || point.y > this.max.y ||
			point.z < this.min.z || point.z > this.max.z ? false : true;

	},

	containsBox: function ( box ) {

		return this.min.x <= box.min.x && box.max.x <= this.max.x &&
			this.min.y <= box.min.y && box.max.y <= this.max.y &&
			this.min.z <= box.min.z && box.max.z <= this.max.z;

	},

	getParameter: function ( point, optionalTarget ) {

		// This can potentially have a divide by zero if the box
		// has a size dimension of 0.

		var result = optionalTarget || new Vector3();

		return result.set(
			( point.x - this.min.x ) / ( this.max.x - this.min.x ),
			( point.y - this.min.y ) / ( this.max.y - this.min.y ),
			( point.z - this.min.z ) / ( this.max.z - this.min.z )
		);

	},

	intersectsBox: function ( box ) {

		// using 6 splitting planes to rule out intersections.
		return box.max.x < this.min.x || box.min.x > this.max.x ||
			box.max.y < this.min.y || box.min.y > this.max.y ||
			box.max.z < this.min.z || box.min.z > this.max.z ? false : true;

	},

	intersectsSphere: ( function () {

		var closestPoint = new Vector3();

		return function intersectsSphere( sphere ) {

			// Find the point on the AABB closest to the sphere center.
			this.clampPoint( sphere.center, closestPoint );

			// If that point is inside the sphere, the AABB and sphere intersect.
			return closestPoint.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );

		};

	} )(),

	intersectsPlane: function ( plane ) {

		// We compute the minimum and maximum dot product values. If those values
		// are on the same side (back or front) of the plane, then there is no intersection.

		var min, max;

		if ( plane.normal.x > 0 ) {

			min = plane.normal.x * this.min.x;
			max = plane.normal.x * this.max.x;

		} else {

			min = plane.normal.x * this.max.x;
			max = plane.normal.x * this.min.x;

		}

		if ( plane.normal.y > 0 ) {

			min += plane.normal.y * this.min.y;
			max += plane.normal.y * this.max.y;

		} else {

			min += plane.normal.y * this.max.y;
			max += plane.normal.y * this.min.y;

		}

		if ( plane.normal.z > 0 ) {

			min += plane.normal.z * this.min.z;
			max += plane.normal.z * this.max.z;

		} else {

			min += plane.normal.z * this.max.z;
			max += plane.normal.z * this.min.z;

		}

		return ( min <= plane.constant && max >= plane.constant );

	},

	clampPoint: function ( point, optionalTarget ) {

		var result = optionalTarget || new Vector3();
		return result.copy( point ).clamp( this.min, this.max );

	},

	distanceToPoint: function () {

		var v1 = new Vector3();

		return function distanceToPoint( point ) {

			var clampedPoint = v1.copy( point ).clamp( this.min, this.max );
			return clampedPoint.sub( point ).length();

		};

	}(),

	getBoundingSphere: function () {

		var v1 = new Vector3();

		return function getBoundingSphere( optionalTarget ) {

			var result = optionalTarget || new Sphere();

			this.getCenter( result.center );

			result.radius = this.getSize( v1 ).length() * 0.5;

			return result;

		};

	}(),

	intersect: function ( box ) {

		this.min.max( box.min );
		this.max.min( box.max );

		// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.
		if ( this.isEmpty() ) this.makeEmpty();

		return this;

	},

	union: function ( box ) {

		this.min.min( box.min );
		this.max.max( box.max );

		return this;

	},

	applyMatrix4: function () {

		var points = [
			new Vector3(),
			new Vector3(),
			new Vector3(),
			new Vector3(),
			new Vector3(),
			new Vector3(),
			new Vector3(),
			new Vector3()
		];

		return function applyMatrix4( matrix ) {

			// transform of empty box is an empty box.
			if ( this.isEmpty() ) return this;

			// NOTE: I am using a binary pattern to specify all 2^3 combinations below
			points[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000
			points[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001
			points[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010
			points[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011
			points[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100
			points[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101
			points[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110
			points[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix );	// 111

			this.setFromPoints( points );

			return this;

		};

	}(),

	translate: function ( offset ) {

		this.min.add( offset );
		this.max.add( offset );

		return this;

	},

	equals: function ( box ) {

		return box.min.equals( this.min ) && box.max.equals( this.max );

	}

} );

/**
 * @author bhouston / http://clara.io
 * @author mrdoob / http://mrdoob.com/
 */

function Sphere( center, radius ) {

	this.center = ( center !== undefined ) ? center : new Vector3();
	this.radius = ( radius !== undefined ) ? radius : 0;

}

Object.assign( Sphere.prototype, {

	set: function ( center, radius ) {

		this.center.copy( center );
		this.radius = radius;

		return this;

	},

	setFromPoints: function () {

		var box = new Box3();

		return function setFromPoints( points, optionalCenter ) {

			var center = this.center;

			if ( optionalCenter !== undefined ) {

				center.copy( optionalCenter );

			} else {

				box.setFromPoints( points ).getCenter( center );

			}

			var maxRadiusSq = 0;

			for ( var i = 0, il = points.length; i < il; i ++ ) {

				maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );

			}

			this.radius = Math.sqrt( maxRadiusSq );

			return this;

		};

	}(),

	clone: function () {

		return new this.constructor().copy( this );

	},

	copy: function ( sphere ) {

		this.center.copy( sphere.center );
		this.radius = sphere.radius;

		return this;

	},

	empty: function () {

		return ( this.radius <= 0 );

	},

	containsPoint: function ( point ) {

		return ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );

	},

	distanceToPoint: function ( point ) {

		return ( point.distanceTo( this.center ) - this.radius );

	},

	intersectsSphere: function ( sphere ) {

		var radiusSum = this.radius + sphere.radius;

		return sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );

	},

	intersectsBox: function ( box ) {

		return box.intersectsSphere( this );

	},

	intersectsPlane: function ( plane ) {

		return Math.abs( plane.distanceToPoint( this.center ) ) <= this.radius;

	},

	clampPoint: function ( point, optionalTarget ) {

		var deltaLengthSq = this.center.distanceToSquared( point );

		var result = optionalTarget || new Vector3();

		result.copy( point );

		if ( deltaLengthSq > ( this.radius * this.radius ) ) {

			result.sub( this.center ).normalize();
			result.multiplyScalar( this.radius ).add( this.center );

		}

		return result;

	},

	getBoundingBox: function ( optionalTarget ) {

		var box = optionalTarget || new Box3();

		box.set( this.center, this.center );
		box.expandByScalar( this.radius );

		return box;

	},

	applyMatrix4: function ( matrix ) {

		this.center.applyMatrix4( matrix );
		this.radius = this.radius * matrix.getMaxScaleOnAxis();

		return this;

	},

	translate: function ( offset ) {

		this.center.add( offset );

		return this;

	},

	equals: function ( sphere ) {

		return sphere.center.equals( this.center ) && ( sphere.radius === this.radius );

	}

} );

/**
 * @author bhouston / http://clara.io
 */

function Plane( normal, constant ) {

	// normal is assumed to be normalized

	this.normal = ( normal !== undefined ) ? normal : new Vector3( 1, 0, 0 );
	this.constant = ( constant !== undefined ) ? constant : 0;

}

Object.assign( Plane.prototype, {

	set: function ( normal, constant ) {

		this.normal.copy( normal );
		this.constant = constant;

		return this;

	},

	setComponents: function ( x, y, z, w ) {

		this.normal.set( x, y, z );
		this.constant = w;

		return this;

	},

	setFromNormalAndCoplanarPoint: function ( normal, point ) {

		this.normal.copy( normal );
		this.constant = - point.dot( this.normal );

		return this;

	},

	setFromCoplanarPoints: function () {

		var v1 = new Vector3();
		var v2 = new Vector3();

		return function setFromCoplanarPoints( a, b, c ) {

			var normal = v1.subVectors( c, b ).cross( v2.subVectors( a, b ) ).normalize();

			// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?

			this.setFromNormalAndCoplanarPoint( normal, a );

			return this;

		};

	}(),

	clone: function () {

		return new this.constructor().copy( this );

	},

	copy: function ( plane ) {

		this.normal.copy( plane.normal );
		this.constant = plane.constant;

		return this;

	},

	normalize: function () {

		// Note: will lead to a divide by zero if the plane is invalid.

		var inverseNormalLength = 1.0 / this.normal.length();
		this.normal.multiplyScalar( inverseNormalLength );
		this.constant *= inverseNormalLength;

		return this;

	},

	negate: function () {

		this.constant *= - 1;
		this.normal.negate();

		return this;

	},

	distanceToPoint: function ( point ) {

		return this.normal.dot( point ) + this.constant;

	},

	distanceToSphere: function ( sphere ) {

		return this.distanceToPoint( sphere.center ) - sphere.radius;

	},

	projectPoint: function ( point, optionalTarget ) {

		var result = optionalTarget || new Vector3();

		return result.copy( this.normal ).multiplyScalar( - this.distanceToPoint( point ) ).add( point );

	},

	intersectLine: function () {

		var v1 = new Vector3();

		return function intersectLine( line, optionalTarget ) {

			var result = optionalTarget || new Vector3();

			var direction = line.delta( v1 );

			var denominator = this.normal.dot( direction );

			if ( denominator === 0 ) {

				// line is coplanar, return origin
				if ( this.distanceToPoint( line.start ) === 0 ) {

					return result.copy( line.start );

				}

				// Unsure if this is the correct method to handle this case.
				return undefined;

			}

			var t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;

			if ( t < 0 || t > 1 ) {

				return undefined;

			}

			return result.copy( direction ).multiplyScalar( t ).add( line.start );

		};

	}(),

	intersectsLine: function ( line ) {

		// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.

		var startSign = this.distanceToPoint( line.start );
		var endSign = this.distanceToPoint( line.end );

		return ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );

	},

	intersectsBox: function ( box ) {

		return box.intersectsPlane( this );

	},

	intersectsSphere: function ( sphere ) {

		return sphere.intersectsPlane( this );

	},

	coplanarPoint: function ( optionalTarget ) {

		var result = optionalTarget || new Vector3();

		return result.copy( this.normal ).multiplyScalar( - this.constant );

	},

	applyMatrix4: function () {

		var v1 = new Vector3();
		var m1 = new Matrix3();

		return function applyMatrix4( matrix, optionalNormalMatrix ) {

			var normalMatrix = optionalNormalMatrix || m1.getNormalMatrix( matrix );

			var referencePoint = this.coplanarPoint( v1 ).applyMatrix4( matrix );

			var normal = this.normal.applyMatrix3( normalMatrix ).normalize();

			this.constant = - referencePoint.dot( normal );

			return this;

		};

	}(),

	translate: function ( offset ) {

		this.constant -= offset.dot( this.normal );

		return this;

	},

	equals: function ( plane ) {

		return plane.normal.equals( this.normal ) && ( plane.constant === this.constant );

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 * @author bhouston / http://clara.io
 */

function Frustum( p0, p1, p2, p3, p4, p5 ) {

	this.planes = [

		( p0 !== undefined ) ? p0 : new Plane(),
		( p1 !== undefined ) ? p1 : new Plane(),
		( p2 !== undefined ) ? p2 : new Plane(),
		( p3 !== undefined ) ? p3 : new Plane(),
		( p4 !== undefined ) ? p4 : new Plane(),
		( p5 !== undefined ) ? p5 : new Plane()

	];

}

Object.assign( Frustum.prototype, {

	set: function ( p0, p1, p2, p3, p4, p5 ) {

		var planes = this.planes;

		planes[ 0 ].copy( p0 );
		planes[ 1 ].copy( p1 );
		planes[ 2 ].copy( p2 );
		planes[ 3 ].copy( p3 );
		planes[ 4 ].copy( p4 );
		planes[ 5 ].copy( p5 );

		return this;

	},

	clone: function () {

		return new this.constructor().copy( this );

	},

	copy: function ( frustum ) {

		var planes = this.planes;

		for ( var i = 0; i < 6; i ++ ) {

			planes[ i ].copy( frustum.planes[ i ] );

		}

		return this;

	},

	setFromMatrix: function ( m ) {

		var planes = this.planes;
		var me = m.elements;
		var me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];
		var me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];
		var me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];
		var me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];

		planes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();
		planes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();
		planes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();
		planes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();
		planes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();
		planes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();

		return this;

	},

	intersectsObject: function () {

		var sphere = new Sphere();

		return function intersectsObject( object ) {

			var geometry = object.geometry;

			if ( geometry.boundingSphere === null )
				geometry.computeBoundingSphere();

			sphere.copy( geometry.boundingSphere )
				.applyMatrix4( object.matrixWorld );

			return this.intersectsSphere( sphere );

		};

	}(),

	intersectsSprite: function () {

		var sphere = new Sphere();

		return function intersectsSprite( sprite ) {

			sphere.center.set( 0, 0, 0 );
			sphere.radius = 0.7071067811865476;
			sphere.applyMatrix4( sprite.matrixWorld );

			return this.intersectsSphere( sphere );

		};

	}(),

	intersectsSphere: function ( sphere ) {

		var planes = this.planes;
		var center = sphere.center;
		var negRadius = - sphere.radius;

		for ( var i = 0; i < 6; i ++ ) {

			var distance = planes[ i ].distanceToPoint( center );

			if ( distance < negRadius ) {

				return false;

			}

		}

		return true;

	},

	intersectsBox: function () {

		var p1 = new Vector3(),
			p2 = new Vector3();

		return function intersectsBox( box ) {

			var planes = this.planes;

			for ( var i = 0; i < 6; i ++ ) {

				var plane = planes[ i ];

				p1.x = plane.normal.x > 0 ? box.min.x : box.max.x;
				p2.x = plane.normal.x > 0 ? box.max.x : box.min.x;
				p1.y = plane.normal.y > 0 ? box.min.y : box.max.y;
				p2.y = plane.normal.y > 0 ? box.max.y : box.min.y;
				p1.z = plane.normal.z > 0 ? box.min.z : box.max.z;
				p2.z = plane.normal.z > 0 ? box.max.z : box.min.z;

				var d1 = plane.distanceToPoint( p1 );
				var d2 = plane.distanceToPoint( p2 );

				// if both outside plane, no intersection

				if ( d1 < 0 && d2 < 0 ) {

					return false;

				}

			}

			return true;

		};

	}(),

	containsPoint: function ( point ) {

		var planes = this.planes;

		for ( var i = 0; i < 6; i ++ ) {

			if ( planes[ i ].distanceToPoint( point ) < 0 ) {

				return false;

			}

		}

		return true;

	}

} );

/**
 * @author alteredq / http://alteredqualia.com/
 * @author mrdoob / http://mrdoob.com/
 */

function WebGLShadowMap( _renderer, _objects, maxTextureSize ) {

	var _frustum = new Frustum(),
		_projScreenMatrix = new Matrix4(),

		_shadowMapSize = new Vector2(),
		_maxShadowMapSize = new Vector2( maxTextureSize, maxTextureSize ),

		_lookTarget = new Vector3(),
		_lightPositionWorld = new Vector3(),

		_MorphingFlag = 1,
		_SkinningFlag = 2,

		_NumberOfMaterialVariants = ( _MorphingFlag | _SkinningFlag ) + 1,

		_depthMaterials = new Array( _NumberOfMaterialVariants ),
		_distanceMaterials = new Array( _NumberOfMaterialVariants ),

		_materialCache = {};

	var cubeDirections = [
		new Vector3( 1, 0, 0 ), new Vector3( - 1, 0, 0 ), new Vector3( 0, 0, 1 ),
		new Vector3( 0, 0, - 1 ), new Vector3( 0, 1, 0 ), new Vector3( 0, - 1, 0 )
	];

	var cubeUps = [
		new Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ),
		new Vector3( 0, 1, 0 ), new Vector3( 0, 0, 1 ),	new Vector3( 0, 0, - 1 )
	];

	var cube2DViewPorts = [
		new Vector4(), new Vector4(), new Vector4(),
		new Vector4(), new Vector4(), new Vector4()
	];

	// init

	for ( var i = 0; i !== _NumberOfMaterialVariants; ++ i ) {

		var useMorphing = ( i & _MorphingFlag ) !== 0;
		var useSkinning = ( i & _SkinningFlag ) !== 0;

		var depthMaterial = new MeshDepthMaterial( {

			depthPacking: RGBADepthPacking,

			morphTargets: useMorphing,
			skinning: useSkinning

		} );

		_depthMaterials[ i ] = depthMaterial;

		//

		var distanceMaterial = new MeshDistanceMaterial( {

			morphTargets: useMorphing,
			skinning: useSkinning

		} );

		_distanceMaterials[ i ] = distanceMaterial;

	}

	//

	var scope = this;

	this.enabled = false;

	this.autoUpdate = true;
	this.needsUpdate = false;

	this.type = PCFShadowMap;

	this.renderReverseSided = true;
	this.renderSingleSided = true;

	this.render = function ( lights, scene, camera ) {

		if ( scope.enabled === false ) return;
		if ( scope.autoUpdate === false && scope.needsUpdate === false ) return;

		if ( lights.length === 0 ) return;

		// TODO Clean up (needed in case of contextlost)
		var _gl = _renderer.context;
		var _state = _renderer.state;

		// Set GL state for depth map.
		_state.disable( _gl.BLEND );
		_state.buffers.color.setClear( 1, 1, 1, 1 );
		_state.buffers.depth.setTest( true );
		_state.setScissorTest( false );

		// render depth map

		var faceCount;

		for ( var i = 0, il = lights.length; i < il; i ++ ) {

			var light = lights[ i ];
			var shadow = light.shadow;
			var isPointLight = light && light.isPointLight;

			if ( shadow === undefined ) {

				console.warn( 'THREE.WebGLShadowMap:', light, 'has no shadow.' );
				continue;

			}

			var shadowCamera = shadow.camera;

			_shadowMapSize.copy( shadow.mapSize );
			_shadowMapSize.min( _maxShadowMapSize );

			if ( isPointLight ) {

				var vpWidth = _shadowMapSize.x;
				var vpHeight = _shadowMapSize.y;

				// These viewports map a cube-map onto a 2D texture with the
				// following orientation:
				//
				//  xzXZ
				//   y Y
				//
				// X - Positive x direction
				// x - Negative x direction
				// Y - Positive y direction
				// y - Negative y direction
				// Z - Positive z direction
				// z - Negative z direction

				// positive X
				cube2DViewPorts[ 0 ].set( vpWidth * 2, vpHeight, vpWidth, vpHeight );
				// negative X
				cube2DViewPorts[ 1 ].set( 0, vpHeight, vpWidth, vpHeight );
				// positive Z
				cube2DViewPorts[ 2 ].set( vpWidth * 3, vpHeight, vpWidth, vpHeight );
				// negative Z
				cube2DViewPorts[ 3 ].set( vpWidth, vpHeight, vpWidth, vpHeight );
				// positive Y
				cube2DViewPorts[ 4 ].set( vpWidth * 3, 0, vpWidth, vpHeight );
				// negative Y
				cube2DViewPorts[ 5 ].set( vpWidth, 0, vpWidth, vpHeight );

				_shadowMapSize.x *= 4.0;
				_shadowMapSize.y *= 2.0;

			}

			if ( shadow.map === null ) {

				var pars = { minFilter: NearestFilter, magFilter: NearestFilter, format: RGBAFormat };

				shadow.map = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );
				shadow.map.texture.name = light.name + ".shadowMap";

				shadowCamera.updateProjectionMatrix();

			}

			if ( shadow.isSpotLightShadow ) {

				shadow.update( light );

			}

			var shadowMap = shadow.map;
			var shadowMatrix = shadow.matrix;

			_lightPositionWorld.setFromMatrixPosition( light.matrixWorld );
			shadowCamera.position.copy( _lightPositionWorld );

			if ( isPointLight ) {

				faceCount = 6;

				// for point lights we set the shadow matrix to be a translation-only matrix
				// equal to inverse of the light's position

				shadowMatrix.makeTranslation( - _lightPositionWorld.x, - _lightPositionWorld.y, - _lightPositionWorld.z );

			} else {

				faceCount = 1;

				_lookTarget.setFromMatrixPosition( light.target.matrixWorld );
				shadowCamera.lookAt( _lookTarget );
				shadowCamera.updateMatrixWorld();

				// compute shadow matrix

				shadowMatrix.set(
					0.5, 0.0, 0.0, 0.5,
					0.0, 0.5, 0.0, 0.5,
					0.0, 0.0, 0.5, 0.5,
					0.0, 0.0, 0.0, 1.0
				);

				shadowMatrix.multiply( shadowCamera.projectionMatrix );
				shadowMatrix.multiply( shadowCamera.matrixWorldInverse );

			}

			_renderer.setRenderTarget( shadowMap );
			_renderer.clear();

			// render shadow map for each cube face (if omni-directional) or
			// run a single pass if not

			for ( var face = 0; face < faceCount; face ++ ) {

				if ( isPointLight ) {

					_lookTarget.copy( shadowCamera.position );
					_lookTarget.add( cubeDirections[ face ] );
					shadowCamera.up.copy( cubeUps[ face ] );
					shadowCamera.lookAt( _lookTarget );
					shadowCamera.updateMatrixWorld();

					var vpDimensions = cube2DViewPorts[ face ];
					_state.viewport( vpDimensions );

				}

				// update camera matrices and frustum

				_projScreenMatrix.multiplyMatrices( shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse );
				_frustum.setFromMatrix( _projScreenMatrix );

				// set object matrices & frustum culling

				renderObject( scene, camera, shadowCamera, isPointLight );

			}

		}

		scope.needsUpdate = false;

	};

	function getDepthMaterial( object, material, isPointLight, lightPositionWorld, shadowCameraNear, shadowCameraFar ) {

		var geometry = object.geometry;

		var result = null;

		var materialVariants = _depthMaterials;
		var customMaterial = object.customDepthMaterial;

		if ( isPointLight ) {

			materialVariants = _distanceMaterials;
			customMaterial = object.customDistanceMaterial;

		}

		if ( ! customMaterial ) {

			var useMorphing = false;

			if ( material.morphTargets ) {

				if ( geometry && geometry.isBufferGeometry ) {

					useMorphing = geometry.morphAttributes && geometry.morphAttributes.position && geometry.morphAttributes.position.length > 0;

				} else if ( geometry && geometry.isGeometry ) {

					useMorphing = geometry.morphTargets && geometry.morphTargets.length > 0;

				}

			}

			if ( object.isSkinnedMesh && material.skinning === false ) {

				console.warn( 'THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:', object );

			}

			var useSkinning = object.isSkinnedMesh && material.skinning;

			var variantIndex = 0;

			if ( useMorphing ) variantIndex |= _MorphingFlag;
			if ( useSkinning ) variantIndex |= _SkinningFlag;

			result = materialVariants[ variantIndex ];

		} else {

			result = customMaterial;

		}

		if ( _renderer.localClippingEnabled &&
				material.clipShadows === true &&
				material.clippingPlanes.length !== 0 ) {

			// in this case we need a unique material instance reflecting the
			// appropriate state

			var keyA = result.uuid, keyB = material.uuid;

			var materialsForVariant = _materialCache[ keyA ];

			if ( materialsForVariant === undefined ) {

				materialsForVariant = {};
				_materialCache[ keyA ] = materialsForVariant;

			}

			var cachedMaterial = materialsForVariant[ keyB ];

			if ( cachedMaterial === undefined ) {

				cachedMaterial = result.clone();
				materialsForVariant[ keyB ] = cachedMaterial;

			}

			result = cachedMaterial;

		}

		result.visible = material.visible;
		result.wireframe = material.wireframe;

		var side = material.side;

		if ( scope.renderSingleSided && side == DoubleSide ) {

			side = FrontSide;

		}

		if ( scope.renderReverseSided ) {

			if ( side === FrontSide ) side = BackSide;
			else if ( side === BackSide ) side = FrontSide;

		}

		result.side = side;

		result.clipShadows = material.clipShadows;
		result.clippingPlanes = material.clippingPlanes;
		result.clipIntersection = material.clipIntersection;

		result.wireframeLinewidth = material.wireframeLinewidth;
		result.linewidth = material.linewidth;

		if ( isPointLight && result.isMeshDistanceMaterial ) {

			result.referencePosition.copy( lightPositionWorld );
			result.nearDistance = shadowCameraNear;
			result.farDistance = shadowCameraFar;

		}

		return result;

	}

	function renderObject( object, camera, shadowCamera, isPointLight ) {

		if ( object.visible === false ) return;

		var visible = object.layers.test( camera.layers );

		if ( visible && ( object.isMesh || object.isLine || object.isPoints ) ) {

			if ( object.castShadow && ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) ) {

				object.modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );

				var geometry = _objects.update( object );
				var material = object.material;

				if ( Array.isArray( material ) ) {

					var groups = geometry.groups;

					for ( var k = 0, kl = groups.length; k < kl; k ++ ) {

						var group = groups[ k ];
						var groupMaterial = material[ group.materialIndex ];

						if ( groupMaterial && groupMaterial.visible ) {

							var depthMaterial = getDepthMaterial( object, groupMaterial, isPointLight, _lightPositionWorld, shadowCamera.near, shadowCamera.far );
							_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, group );

						}

					}

				} else if ( material.visible ) {

					var depthMaterial = getDepthMaterial( object, material, isPointLight, _lightPositionWorld, shadowCamera.near, shadowCamera.far );
					_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, null );

				}

			}

		}

		var children = object.children;

		for ( var i = 0, l = children.length; i < l; i ++ ) {

			renderObject( children[ i ], camera, shadowCamera, isPointLight );

		}

	}

}

/**
 * @author mrdoob / http://mrdoob.com/
 */

function WebGLAttributes( gl ) {

	var buffers = {};

	function createBuffer( attribute, bufferType ) {

		var array = attribute.array;
		var usage = attribute.dynamic ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;

		var buffer = gl.createBuffer();

		gl.bindBuffer( bufferType, buffer );
		gl.bufferData( bufferType, array, usage );

		attribute.onUploadCallback();

		var type = gl.FLOAT;

		if ( array instanceof Float32Array ) {

			type = gl.FLOAT;

		} else if ( array instanceof Float64Array ) {

			console.warn( 'THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.' );

		} else if ( array instanceof Uint16Array ) {

			type = gl.UNSIGNED_SHORT;

		} else if ( array instanceof Int16Array ) {

			type = gl.SHORT;

		} else if ( array instanceof Uint32Array ) {

			type = gl.UNSIGNED_INT;

		} else if ( array instanceof Int32Array ) {

			type = gl.INT;

		} else if ( array instanceof Int8Array ) {

			type = gl.BYTE;

		} else if ( array instanceof Uint8Array ) {

			type = gl.UNSIGNED_BYTE;

		}

		return {
			buffer: buffer,
			type: type,
			bytesPerElement: array.BYTES_PER_ELEMENT,
			version: attribute.version
		};

	}

	function updateBuffer( buffer, attribute, bufferType ) {

		var array = attribute.array;
		var updateRange = attribute.updateRange;

		gl.bindBuffer( bufferType, buffer );

		if ( attribute.dynamic === false ) {

			gl.bufferData( bufferType, array, gl.STATIC_DRAW );

		} else if ( updateRange.count === - 1 ) {

			// Not using update ranges

			gl.bufferSubData( bufferType, 0, array );

		} else if ( updateRange.count === 0 ) {

			console.error( 'THREE.WebGLObjects.updateBuffer: dynamic THREE.BufferAttribute marked as needsUpdate but updateRange.count is 0, ensure you are using set methods or updating manually.' );

		} else {

			gl.bufferSubData( bufferType, updateRange.offset * array.BYTES_PER_ELEMENT,
				array.subarray( updateRange.offset, updateRange.offset + updateRange.count ) );

			updateRange.count = - 1; // reset range

		}

	}

	//

	function get( attribute ) {

		if ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;

		return buffers[ attribute.uuid ];

	}

	function remove( attribute ) {

		if ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;

		var data = buffers[ attribute.uuid ];

		if ( data ) {

			gl.deleteBuffer( data.buffer );

			delete buffers[ attribute.uuid ];

		}

	}

	function update( attribute, bufferType ) {

		if ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;

		var data = buffers[ attribute.uuid ];

		if ( data === undefined ) {

			buffers[ attribute.uuid ] = createBuffer( attribute, bufferType );

		} else if ( data.version < attribute.version ) {

			updateBuffer( data.buffer, attribute, bufferType );

			data.version = attribute.version;

		}

	}

	return {

		get: get,
		remove: remove,
		update: update

	};

}

/**
 * @author mrdoob / http://mrdoob.com/
 * @author WestLangley / http://github.com/WestLangley
 * @author bhouston / http://clara.io
 */

function Euler( x, y, z, order ) {

	this._x = x || 0;
	this._y = y || 0;
	this._z = z || 0;
	this._order = order || Euler.DefaultOrder;

}

Euler.RotationOrders = [ 'XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX' ];

Euler.DefaultOrder = 'XYZ';

Object.defineProperties( Euler.prototype, {

	x: {

		get: function () {

			return this._x;

		},

		set: function ( value ) {

			this._x = value;
			this.onChangeCallback();

		}

	},

	y: {

		get: function () {

			return this._y;

		},

		set: function ( value ) {

			this._y = value;
			this.onChangeCallback();

		}

	},

	z: {

		get: function () {

			return this._z;

		},

		set: function ( value ) {

			this._z = value;
			this.onChangeCallback();

		}

	},

	order: {

		get: function () {

			return this._order;

		},

		set: function ( value ) {

			this._order = value;
			this.onChangeCallback();

		}

	}

} );

Object.assign( Euler.prototype, {

	isEuler: true,

	set: function ( x, y, z, order ) {

		this._x = x;
		this._y = y;
		this._z = z;
		this._order = order || this._order;

		this.onChangeCallback();

		return this;

	},

	clone: function () {

		return new this.constructor( this._x, this._y, this._z, this._order );

	},

	copy: function ( euler ) {

		this._x = euler._x;
		this._y = euler._y;
		this._z = euler._z;
		this._order = euler._order;

		this.onChangeCallback();

		return this;

	},

	setFromRotationMatrix: function ( m, order, update ) {

		var clamp = _Math.clamp;

		// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

		var te = m.elements;
		var m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];
		var m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];
		var m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];

		order = order || this._order;

		if ( order === 'XYZ' ) {

			this._y = Math.asin( clamp( m13, - 1, 1 ) );

			if ( Math.abs( m13 ) < 0.99999 ) {

				this._x = Math.atan2( - m23, m33 );
				this._z = Math.atan2( - m12, m11 );

			} else {

				this._x = Math.atan2( m32, m22 );
				this._z = 0;

			}

		} else if ( order === 'YXZ' ) {

			this._x = Math.asin( - clamp( m23, - 1, 1 ) );

			if ( Math.abs( m23 ) < 0.99999 ) {

				this._y = Math.atan2( m13, m33 );
				this._z = Math.atan2( m21, m22 );

			} else {

				this._y = Math.atan2( - m31, m11 );
				this._z = 0;

			}

		} else if ( order === 'ZXY' ) {

			this._x = Math.asin( clamp( m32, - 1, 1 ) );

			if ( Math.abs( m32 ) < 0.99999 ) {

				this._y = Math.atan2( - m31, m33 );
				this._z = Math.atan2( - m12, m22 );

			} else {

				this._y = 0;
				this._z = Math.atan2( m21, m11 );

			}

		} else if ( order === 'ZYX' ) {

			this._y = Math.asin( - clamp( m31, - 1, 1 ) );

			if ( Math.abs( m31 ) < 0.99999 ) {

				this._x = Math.atan2( m32, m33 );
				this._z = Math.atan2( m21, m11 );

			} else {

				this._x = 0;
				this._z = Math.atan2( - m12, m22 );

			}

		} else if ( order === 'YZX' ) {

			this._z = Math.asin( clamp( m21, - 1, 1 ) );

			if ( Math.abs( m21 ) < 0.99999 ) {

				this._x = Math.atan2( - m23, m22 );
				this._y = Math.atan2( - m31, m11 );

			} else {

				this._x = 0;
				this._y = Math.atan2( m13, m33 );

			}

		} else if ( order === 'XZY' ) {

			this._z = Math.asin( - clamp( m12, - 1, 1 ) );

			if ( Math.abs( m12 ) < 0.99999 ) {

				this._x = Math.atan2( m32, m22 );
				this._y = Math.atan2( m13, m11 );

			} else {

				this._x = Math.atan2( - m23, m33 );
				this._y = 0;

			}

		} else {

			console.warn( 'THREE.Euler: .setFromRotationMatrix() given unsupported order: ' + order );

		}

		this._order = order;

		if ( update !== false ) this.onChangeCallback();

		return this;

	},

	setFromQuaternion: function () {

		var matrix = new Matrix4();

		return function setFromQuaternion( q, order, update ) {

			matrix.makeRotationFromQuaternion( q );

			return this.setFromRotationMatrix( matrix, order, update );

		};

	}(),

	setFromVector3: function ( v, order ) {

		return this.set( v.x, v.y, v.z, order || this._order );

	},

	reorder: function () {

		// WARNING: this discards revolution information -bhouston

		var q = new Quaternion();

		return function reorder( newOrder ) {

			q.setFromEuler( this );

			return this.setFromQuaternion( q, newOrder );

		};

	}(),

	equals: function ( euler ) {

		return ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );

	},

	fromArray: function ( array ) {

		this._x = array[ 0 ];
		this._y = array[ 1 ];
		this._z = array[ 2 ];
		if ( array[ 3 ] !== undefined ) this._order = array[ 3 ];

		this.onChangeCallback();

		return this;

	},

	toArray: function ( array, offset ) {

		if ( array === undefined ) array = [];
		if ( offset === undefined ) offset = 0;

		array[ offset ] = this._x;
		array[ offset + 1 ] = this._y;
		array[ offset + 2 ] = this._z;
		array[ offset + 3 ] = this._order;

		return array;

	},

	toVector3: function ( optionalResult ) {

		if ( optionalResult ) {

			return optionalResult.set( this._x, this._y, this._z );

		} else {

			return new Vector3( this._x, this._y, this._z );

		}

	},

	onChange: function ( callback ) {

		this.onChangeCallback = callback;

		return this;

	},

	onChangeCallback: function () {}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 */

function Layers() {

	this.mask = 1 | 0;

}

Object.assign( Layers.prototype, {

	set: function ( channel ) {

		this.mask = 1 << channel | 0;

	},

	enable: function ( channel ) {

		this.mask |= 1 << channel | 0;

	},

	toggle: function ( channel ) {

		this.mask ^= 1 << channel | 0;

	},

	disable: function ( channel ) {

		this.mask &= ~ ( 1 << channel | 0 );

	},

	test: function ( layers ) {

		return ( this.mask & layers.mask ) !== 0;

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 * @author mikael emtinger / http://gomo.se/
 * @author alteredq / http://alteredqualia.com/
 * @author WestLangley / http://github.com/WestLangley
 * @author elephantatwork / www.elephantatwork.ch
 */

var object3DId = 0;

function Object3D() {

	Object.defineProperty( this, 'id', { value: object3DId ++ } );

	this.uuid = _Math.generateUUID();

	this.name = '';
	this.type = 'Object3D';

	this.parent = null;
	this.children = [];

	this.up = Object3D.DefaultUp.clone();

	var position = new Vector3();
	var rotation = new Euler();
	var quaternion = new Quaternion();
	var scale = new Vector3( 1, 1, 1 );

	function onRotationChange() {

		quaternion.setFromEuler( rotation, false );

	}

	function onQuaternionChange() {

		rotation.setFromQuaternion( quaternion, undefined, false );

	}

	rotation.onChange( onRotationChange );
	quaternion.onChange( onQuaternionChange );

	Object.defineProperties( this, {
		position: {
			enumerable: true,
			value: position
		},
		rotation: {
			enumerable: true,
			value: rotation
		},
		quaternion: {
			enumerable: true,
			value: quaternion
		},
		scale: {
			enumerable: true,
			value: scale
		},
		modelViewMatrix: {
			value: new Matrix4()
		},
		normalMatrix: {
			value: new Matrix3()
		}
	} );

	this.matrix = new Matrix4();
	this.matrixWorld = new Matrix4();

	this.matrixAutoUpdate = Object3D.DefaultMatrixAutoUpdate;
	this.matrixWorldNeedsUpdate = false;

	this.layers = new Layers();
	this.visible = true;

	this.castShadow = false;
	this.receiveShadow = false;

	this.frustumCulled = true;
	this.renderOrder = 0;

	this.userData = {};

}

Object3D.DefaultUp = new Vector3( 0, 1, 0 );
Object3D.DefaultMatrixAutoUpdate = true;

Object.assign( Object3D.prototype, EventDispatcher.prototype, {

	isObject3D: true,

	onBeforeRender: function () {},
	onAfterRender: function () {},

	applyMatrix: function ( matrix ) {

		this.matrix.multiplyMatrices( matrix, this.matrix );

		this.matrix.decompose( this.position, this.quaternion, this.scale );

	},

	applyQuaternion: function ( q ) {

		this.quaternion.premultiply( q );

		return this;

	},

	setRotationFromAxisAngle: function ( axis, angle ) {

		// assumes axis is normalized

		this.quaternion.setFromAxisAngle( axis, angle );

	},

	setRotationFromEuler: function ( euler ) {

		this.quaternion.setFromEuler( euler, true );

	},

	setRotationFromMatrix: function ( m ) {

		// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

		this.quaternion.setFromRotationMatrix( m );

	},

	setRotationFromQuaternion: function ( q ) {

		// assumes q is normalized

		this.quaternion.copy( q );

	},

	rotateOnAxis: function () {

		// rotate object on axis in object space
		// axis is assumed to be normalized

		var q1 = new Quaternion();

		return function rotateOnAxis( axis, angle ) {

			q1.setFromAxisAngle( axis, angle );

			this.quaternion.multiply( q1 );

			return this;

		};

	}(),

	rotateOnWorldAxis: function () {

		// rotate object on axis in world space
		// axis is assumed to be normalized
		// method assumes no rotated parent

		var q1 = new Quaternion();

		return function rotateOnWorldAxis( axis, angle ) {

			q1.setFromAxisAngle( axis, angle );

			this.quaternion.premultiply( q1 );

			return this;

		};

	}(),

	rotateX: function () {

		var v1 = new Vector3( 1, 0, 0 );

		return function rotateX( angle ) {

			return this.rotateOnAxis( v1, angle );

		};

	}(),

	rotateY: function () {

		var v1 = new Vector3( 0, 1, 0 );

		return function rotateY( angle ) {

			return this.rotateOnAxis( v1, angle );

		};

	}(),

	rotateZ: function () {

		var v1 = new Vector3( 0, 0, 1 );

		return function rotateZ( angle ) {

			return this.rotateOnAxis( v1, angle );

		};

	}(),

	translateOnAxis: function () {

		// translate object by distance along axis in object space
		// axis is assumed to be normalized

		var v1 = new Vector3();

		return function translateOnAxis( axis, distance ) {

			v1.copy( axis ).applyQuaternion( this.quaternion );

			this.position.add( v1.multiplyScalar( distance ) );

			return this;

		};

	}(),

	translateX: function () {

		var v1 = new Vector3( 1, 0, 0 );

		return function translateX( distance ) {

			return this.translateOnAxis( v1, distance );

		};

	}(),

	translateY: function () {

		var v1 = new Vector3( 0, 1, 0 );

		return function translateY( distance ) {

			return this.translateOnAxis( v1, distance );

		};

	}(),

	translateZ: function () {

		var v1 = new Vector3( 0, 0, 1 );

		return function translateZ( distance ) {

			return this.translateOnAxis( v1, distance );

		};

	}(),

	localToWorld: function ( vector ) {

		return vector.applyMatrix4( this.matrixWorld );

	},

	worldToLocal: function () {

		var m1 = new Matrix4();

		return function worldToLocal( vector ) {

			return vector.applyMatrix4( m1.getInverse( this.matrixWorld ) );

		};

	}(),

	lookAt: function () {

		// This method does not support objects with rotated and/or translated parent(s)

		var m1 = new Matrix4();
		var vector = new Vector3();

		return function lookAt( x, y, z ) {

			if ( x.isVector3 ) {

				vector.copy( x );

			} else {

				vector.set( x, y, z );

			}

			if ( this.isCamera ) {

				m1.lookAt( this.position, vector, this.up );

			} else {

				m1.lookAt( vector, this.position, this.up );

			}

			this.quaternion.setFromRotationMatrix( m1 );

		};

	}(),

	add: function ( object ) {

		if ( arguments.length > 1 ) {

			for ( var i = 0; i < arguments.length; i ++ ) {

				this.add( arguments[ i ] );

			}

			return this;

		}

		if ( object === this ) {

			console.error( "THREE.Object3D.add: object can't be added as a child of itself.", object );
			return this;

		}

		if ( ( object && object.isObject3D ) ) {

			if ( object.parent !== null ) {

				object.parent.remove( object );

			}

			object.parent = this;
			object.dispatchEvent( { type: 'added' } );

			this.children.push( object );

		} else {

			console.error( "THREE.Object3D.add: object not an instance of THREE.Object3D.", object );

		}

		return this;

	},

	remove: function ( object ) {

		if ( arguments.length > 1 ) {

			for ( var i = 0; i < arguments.length; i ++ ) {

				this.remove( arguments[ i ] );

			}

			return this;

		}

		var index = this.children.indexOf( object );

		if ( index !== - 1 ) {

			object.parent = null;

			object.dispatchEvent( { type: 'removed' } );

			this.children.splice( index, 1 );

		}

		return this;

	},

	getObjectById: function ( id ) {

		return this.getObjectByProperty( 'id', id );

	},

	getObjectByName: function ( name ) {

		return this.getObjectByProperty( 'name', name );

	},

	getObjectByProperty: function ( name, value ) {

		if ( this[ name ] === value ) return this;

		for ( var i = 0, l = this.children.length; i < l; i ++ ) {

			var child = this.children[ i ];
			var object = child.getObjectByProperty( name, value );

			if ( object !== undefined ) {

				return object;

			}

		}

		return undefined;

	},

	getWorldPosition: function ( optionalTarget ) {

		var result = optionalTarget || new Vector3();

		this.updateMatrixWorld( true );

		return result.setFromMatrixPosition( this.matrixWorld );

	},

	getWorldQuaternion: function () {

		var position = new Vector3();
		var scale = new Vector3();

		return function getWorldQuaternion( optionalTarget ) {

			var result = optionalTarget || new Quaternion();

			this.updateMatrixWorld( true );

			this.matrixWorld.decompose( position, result, scale );

			return result;

		};

	}(),

	getWorldRotation: function () {

		var quaternion = new Quaternion();

		return function getWorldRotation( optionalTarget ) {

			var result = optionalTarget || new Euler();

			this.getWorldQuaternion( quaternion );

			return result.setFromQuaternion( quaternion, this.rotation.order, false );

		};

	}(),

	getWorldScale: function () {

		var position = new Vector3();
		var quaternion = new Quaternion();

		return function getWorldScale( optionalTarget ) {

			var result = optionalTarget || new Vector3();

			this.updateMatrixWorld( true );

			this.matrixWorld.decompose( position, quaternion, result );

			return result;

		};

	}(),

	getWorldDirection: function () {

		var quaternion = new Quaternion();

		return function getWorldDirection( optionalTarget ) {

			var result = optionalTarget || new Vector3();

			this.getWorldQuaternion( quaternion );

			return result.set( 0, 0, 1 ).applyQuaternion( quaternion );

		};

	}(),

	raycast: function () {},

	traverse: function ( callback ) {

		callback( this );

		var children = this.children;

		for ( var i = 0, l = children.length; i < l; i ++ ) {

			children[ i ].traverse( callback );

		}

	},

	traverseVisible: function ( callback ) {

		if ( this.visible === false ) return;

		callback( this );

		var children = this.children;

		for ( var i = 0, l = children.length; i < l; i ++ ) {

			children[ i ].traverseVisible( callback );

		}

	},

	traverseAncestors: function ( callback ) {

		var parent = this.parent;

		if ( parent !== null ) {

			callback( parent );

			parent.traverseAncestors( callback );

		}

	},

	updateMatrix: function () {

		this.matrix.compose( this.position, this.quaternion, this.scale );

		this.matrixWorldNeedsUpdate = true;

	},

	updateMatrixWorld: function ( force ) {

		if ( this.matrixAutoUpdate ) this.updateMatrix();

		if ( this.matrixWorldNeedsUpdate || force ) {

			if ( this.parent === null ) {

				this.matrixWorld.copy( this.matrix );

			} else {

				this.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );

			}

			this.matrixWorldNeedsUpdate = false;

			force = true;

		}

		// update children

		var children = this.children;

		for ( var i = 0, l = children.length; i < l; i ++ ) {

			children[ i ].updateMatrixWorld( force );

		}

	},

	toJSON: function ( meta ) {

		// meta is a string when called from JSON.stringify
		var isRootObject = ( meta === undefined || typeof meta === 'string' );

		var output = {};

		// meta is a hash used to collect geometries, materials.
		// not providing it implies that this is the root object
		// being serialized.
		if ( isRootObject ) {

			// initialize meta obj
			meta = {
				geometries: {},
				materials: {},
				textures: {},
				images: {}
			};

			output.metadata = {
				version: 4.5,
				type: 'Object',
				generator: 'Object3D.toJSON'
			};

		}

		// standard Object3D serialization

		var object = {};

		object.uuid = this.uuid;
		object.type = this.type;

		if ( this.name !== '' ) object.name = this.name;
		if ( this.castShadow === true ) object.castShadow = true;
		if ( this.receiveShadow === true ) object.receiveShadow = true;
		if ( this.visible === false ) object.visible = false;
		if ( JSON.stringify( this.userData ) !== '{}' ) object.userData = this.userData;

		object.matrix = this.matrix.toArray();

		//

		function serialize( library, element ) {

			if ( library[ element.uuid ] === undefined ) {

				library[ element.uuid ] = element.toJSON( meta );

			}

			return element.uuid;

		}

		if ( this.geometry !== undefined ) {

			object.geometry = serialize( meta.geometries, this.geometry );

		}

		if ( this.material !== undefined ) {

			if ( Array.isArray( this.material ) ) {

				var uuids = [];

				for ( var i = 0, l = this.material.length; i < l; i ++ ) {

					uuids.push( serialize( meta.materials, this.material[ i ] ) );

				}

				object.material = uuids;

			} else {

				object.material = serialize( meta.materials, this.material );

			}

		}

		//

		if ( this.children.length > 0 ) {

			object.children = [];

			for ( var i = 0; i < this.children.length; i ++ ) {

				object.children.push( this.children[ i ].toJSON( meta ).object );

			}

		}

		if ( isRootObject ) {

			var geometries = extractFromCache( meta.geometries );
			var materials = extractFromCache( meta.materials );
			var textures = extractFromCache( meta.textures );
			var images = extractFromCache( meta.images );

			if ( geometries.length > 0 ) output.geometries = geometries;
			if ( materials.length > 0 ) output.materials = materials;
			if ( textures.length > 0 ) output.textures = textures;
			if ( images.length > 0 ) output.images = images;

		}

		output.object = object;

		return output;

		// extract data from the cache hash
		// remove metadata on each item
		// and return as array
		function extractFromCache( cache ) {

			var values = [];
			for ( var key in cache ) {

				var data = cache[ key ];
				delete data.metadata;
				values.push( data );

			}
			return values;

		}

	},

	clone: function ( recursive ) {

		return new this.constructor().copy( this, recursive );

	},

	copy: function ( source, recursive ) {

		if ( recursive === undefined ) recursive = true;

		this.name = source.name;

		this.up.copy( source.up );

		this.position.copy( source.position );
		this.quaternion.copy( source.quaternion );
		this.scale.copy( source.scale );

		this.matrix.copy( source.matrix );
		this.matrixWorld.copy( source.matrixWorld );

		this.matrixAutoUpdate = source.matrixAutoUpdate;
		this.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;

		this.layers.mask = source.layers.mask;
		this.visible = source.visible;

		this.castShadow = source.castShadow;
		this.receiveShadow = source.receiveShadow;

		this.frustumCulled = source.frustumCulled;
		this.renderOrder = source.renderOrder;

		this.userData = JSON.parse( JSON.stringify( source.userData ) );

		if ( recursive === true ) {

			for ( var i = 0; i < source.children.length; i ++ ) {

				var child = source.children[ i ];
				this.add( child.clone() );

			}

		}

		return this;

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 * @author mikael emtinger / http://gomo.se/
 * @author WestLangley / http://github.com/WestLangley
*/

function Camera() {

	Object3D.call( this );

	this.type = 'Camera';

	this.matrixWorldInverse = new Matrix4();
	this.projectionMatrix = new Matrix4();

}

Camera.prototype = Object.assign( Object.create( Object3D.prototype ), {

	constructor: Camera,

	isCamera: true,

	copy: function ( source, recursive ) {

		Object3D.prototype.copy.call( this, source, recursive );

		this.matrixWorldInverse.copy( source.matrixWorldInverse );
		this.projectionMatrix.copy( source.projectionMatrix );

		return this;

	},

	getWorldDirection: function () {

		var quaternion = new Quaternion();

		return function getWorldDirection( optionalTarget ) {

			var result = optionalTarget || new Vector3();

			this.getWorldQuaternion( quaternion );

			return result.set( 0, 0, - 1 ).applyQuaternion( quaternion );

		};

	}(),

	updateMatrixWorld: function ( force ) {

		Object3D.prototype.updateMatrixWorld.call( this, force );

		this.matrixWorldInverse.getInverse( this.matrixWorld );

	},

	clone: function () {

		return new this.constructor().copy( this );

	}

} );

/**
 * @author alteredq / http://alteredqualia.com/
 * @author arose / http://github.com/arose
 */

function OrthographicCamera( left, right, top, bottom, near, far ) {

	Camera.call( this );

	this.type = 'OrthographicCamera';

	this.zoom = 1;
	this.view = null;

	this.left = left;
	this.right = right;
	this.top = top;
	this.bottom = bottom;

	this.near = ( near !== undefined ) ? near : 0.1;
	this.far = ( far !== undefined ) ? far : 2000;

	this.updateProjectionMatrix();

}

OrthographicCamera.prototype = Object.assign( Object.create( Camera.prototype ), {

	constructor: OrthographicCamera,

	isOrthographicCamera: true,

	copy: function ( source, recursive ) {

		Camera.prototype.copy.call( this, source, recursive );

		this.left = source.left;
		this.right = source.right;
		this.top = source.top;
		this.bottom = source.bottom;
		this.near = source.near;
		this.far = source.far;

		this.zoom = source.zoom;
		this.view = source.view === null ? null : Object.assign( {}, source.view );

		return this;

	},

	setViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {

		if ( this.view === null ) {

			this.view = {
				enabled: true,
				fullWidth: 1,
				fullHeight: 1,
				offsetX: 0,
				offsetY: 0,
				width: 1,
				height: 1
			};

		}

		this.view.enabled = true;
		this.view.fullWidth = fullWidth;
		this.view.fullHeight = fullHeight;
		this.view.offsetX = x;
		this.view.offsetY = y;
		this.view.width = width;
		this.view.height = height;

		this.updateProjectionMatrix();

	},

	clearViewOffset: function () {

		if ( this.view !== null ) {

			this.view.enabled = false;

		}

		this.updateProjectionMatrix();

	},

	updateProjectionMatrix: function () {

		var dx = ( this.right - this.left ) / ( 2 * this.zoom );
		var dy = ( this.top - this.bottom ) / ( 2 * this.zoom );
		var cx = ( this.right + this.left ) / 2;
		var cy = ( this.top + this.bottom ) / 2;

		var left = cx - dx;
		var right = cx + dx;
		var top = cy + dy;
		var bottom = cy - dy;

		if ( this.view !== null && this.view.enabled ) {

			var zoomW = this.zoom / ( this.view.width / this.view.fullWidth );
			var zoomH = this.zoom / ( this.view.height / this.view.fullHeight );
			var scaleW = ( this.right - this.left ) / this.view.width;
			var scaleH = ( this.top - this.bottom ) / this.view.height;

			left += scaleW * ( this.view.offsetX / zoomW );
			right = left + scaleW * ( this.view.width / zoomW );
			top -= scaleH * ( this.view.offsetY / zoomH );
			bottom = top - scaleH * ( this.view.height / zoomH );

		}

		this.projectionMatrix.makeOrthographic( left, right, top, bottom, this.near, this.far );

	},

	toJSON: function ( meta ) {

		var data = Object3D.prototype.toJSON.call( this, meta );

		data.object.zoom = this.zoom;
		data.object.left = this.left;
		data.object.right = this.right;
		data.object.top = this.top;
		data.object.bottom = this.bottom;
		data.object.near = this.near;
		data.object.far = this.far;

		if ( this.view !== null ) data.object.view = Object.assign( {}, this.view );

		return data;

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 */

function Face3( a, b, c, normal, color, materialIndex ) {

	this.a = a;
	this.b = b;
	this.c = c;

	this.normal = ( normal && normal.isVector3 ) ? normal : new Vector3();
	this.vertexNormals = Array.isArray( normal ) ? normal : [];

	this.color = ( color && color.isColor ) ? color : new Color();
	this.vertexColors = Array.isArray( color ) ? color : [];

	this.materialIndex = materialIndex !== undefined ? materialIndex : 0;

}

Object.assign( Face3.prototype, {

	clone: function () {

		return new this.constructor().copy( this );

	},

	copy: function ( source ) {

		this.a = source.a;
		this.b = source.b;
		this.c = source.c;

		this.normal.copy( source.normal );
		this.color.copy( source.color );

		this.materialIndex = source.materialIndex;

		for ( var i = 0, il = source.vertexNormals.length; i < il; i ++ ) {

			this.vertexNormals[ i ] = source.vertexNormals[ i ].clone();

		}

		for ( var i = 0, il = source.vertexColors.length; i < il; i ++ ) {

			this.vertexColors[ i ] = source.vertexColors[ i ].clone();

		}

		return this;

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 * @author kile / http://kile.stravaganza.org/
 * @author alteredq / http://alteredqualia.com/
 * @author mikael emtinger / http://gomo.se/
 * @author zz85 / http://www.lab4games.net/zz85/blog
 * @author bhouston / http://clara.io
 */

var geometryId = 0; // Geometry uses even numbers as Id

function Geometry() {

	Object.defineProperty( this, 'id', { value: geometryId += 2 } );

	this.uuid = _Math.generateUUID();

	this.name = '';
	this.type = 'Geometry';

	this.vertices = [];
	this.colors = [];
	this.faces = [];
	this.faceVertexUvs = [[]];

	this.morphTargets = [];
	this.morphNormals = [];

	this.skinWeights = [];
	this.skinIndices = [];

	this.lineDistances = [];

	this.boundingBox = null;
	this.boundingSphere = null;

	// update flags

	this.elementsNeedUpdate = false;
	this.verticesNeedUpdate = false;
	this.uvsNeedUpdate = false;
	this.normalsNeedUpdate = false;
	this.colorsNeedUpdate = false;
	this.lineDistancesNeedUpdate = false;
	this.groupsNeedUpdate = false;

}

Object.assign( Geometry.prototype, EventDispatcher.prototype, {

	isGeometry: true,

	applyMatrix: function ( matrix ) {

		var normalMatrix = new Matrix3().getNormalMatrix( matrix );

		for ( var i = 0, il = this.vertices.length; i < il; i ++ ) {

			var vertex = this.vertices[ i ];
			vertex.applyMatrix4( matrix );

		}

		for ( var i = 0, il = this.faces.length; i < il; i ++ ) {

			var face = this.faces[ i ];
			face.normal.applyMatrix3( normalMatrix ).normalize();

			for ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {

				face.vertexNormals[ j ].applyMatrix3( normalMatrix ).normalize();

			}

		}

		if ( this.boundingBox !== null ) {

			this.computeBoundingBox();

		}

		if ( this.boundingSphere !== null ) {

			this.computeBoundingSphere();

		}

		this.verticesNeedUpdate = true;
		this.normalsNeedUpdate = true;

		return this;

	},

	rotateX: function () {

		// rotate geometry around world x-axis

		var m1 = new Matrix4();

		return function rotateX( angle ) {

			m1.makeRotationX( angle );

			this.applyMatrix( m1 );

			return this;

		};

	}(),

	rotateY: function () {

		// rotate geometry around world y-axis

		var m1 = new Matrix4();

		return function rotateY( angle ) {

			m1.makeRotationY( angle );

			this.applyMatrix( m1 );

			return this;

		};

	}(),

	rotateZ: function () {

		// rotate geometry around world z-axis

		var m1 = new Matrix4();

		return function rotateZ( angle ) {

			m1.makeRotationZ( angle );

			this.applyMatrix( m1 );

			return this;

		};

	}(),

	translate: function () {

		// translate geometry

		var m1 = new Matrix4();

		return function translate( x, y, z ) {

			m1.makeTranslation( x, y, z );

			this.applyMatrix( m1 );

			return this;

		};

	}(),

	scale: function () {

		// scale geometry

		var m1 = new Matrix4();

		return function scale( x, y, z ) {

			m1.makeScale( x, y, z );

			this.applyMatrix( m1 );

			return this;

		};

	}(),

	lookAt: function () {

		var obj = new Object3D();

		return function lookAt( vector ) {

			obj.lookAt( vector );

			obj.updateMatrix();

			this.applyMatrix( obj.matrix );

		};

	}(),

	fromBufferGeometry: function ( geometry ) {

		var scope = this;

		var indices = geometry.index !== null ? geometry.index.array : undefined;
		var attributes = geometry.attributes;

		var positions = attributes.position.array;
		var normals = attributes.normal !== undefined ? attributes.normal.array : undefined;
		var colors = attributes.color !== undefined ? attributes.color.array : undefined;
		var uvs = attributes.uv !== undefined ? attributes.uv.array : undefined;
		var uvs2 = attributes.uv2 !== undefined ? attributes.uv2.array : undefined;

		if ( uvs2 !== undefined ) this.faceVertexUvs[ 1 ] = [];

		var tempNormals = [];
		var tempUVs = [];
		var tempUVs2 = [];

		for ( var i = 0, j = 0; i < positions.length; i += 3, j += 2 ) {

			scope.vertices.push( new Vector3( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] ) );

			if ( normals !== undefined ) {

				tempNormals.push( new Vector3( normals[ i ], normals[ i + 1 ], normals[ i + 2 ] ) );

			}

			if ( colors !== undefined ) {

				scope.colors.push( new Color( colors[ i ], colors[ i + 1 ], colors[ i + 2 ] ) );

			}

			if ( uvs !== undefined ) {

				tempUVs.push( new Vector2( uvs[ j ], uvs[ j + 1 ] ) );

			}

			if ( uvs2 !== undefined ) {

				tempUVs2.push( new Vector2( uvs2[ j ], uvs2[ j + 1 ] ) );

			}

		}

		function addFace( a, b, c, materialIndex ) {

			var vertexNormals = normals !== undefined ? [ tempNormals[ a ].clone(), tempNormals[ b ].clone(), tempNormals[ c ].clone() ] : [];
			var vertexColors = colors !== undefined ? [ scope.colors[ a ].clone(), scope.colors[ b ].clone(), scope.colors[ c ].clone() ] : [];

			var face = new Face3( a, b, c, vertexNormals, vertexColors, materialIndex );

			scope.faces.push( face );

			if ( uvs !== undefined ) {

				scope.faceVertexUvs[ 0 ].push( [ tempUVs[ a ].clone(), tempUVs[ b ].clone(), tempUVs[ c ].clone() ] );

			}

			if ( uvs2 !== undefined ) {

				scope.faceVertexUvs[ 1 ].push( [ tempUVs2[ a ].clone(), tempUVs2[ b ].clone(), tempUVs2[ c ].clone() ] );

			}

		}

		var groups = geometry.groups;

		if ( groups.length > 0 ) {

			for ( var i = 0; i < groups.length; i ++ ) {

				var group = groups[ i ];

				var start = group.start;
				var count = group.count;

				for ( var j = start, jl = start + count; j < jl; j += 3 ) {

					if ( indices !== undefined ) {

						addFace( indices[ j ], indices[ j + 1 ], indices[ j + 2 ], group.materialIndex );

					} else {

						addFace( j, j + 1, j + 2, group.materialIndex );

					}

				}

			}

		} else {

			if ( indices !== undefined ) {

				for ( var i = 0; i < indices.length; i += 3 ) {

					addFace( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );

				}

			} else {

				for ( var i = 0; i < positions.length / 3; i += 3 ) {

					addFace( i, i + 1, i + 2 );

				}

			}

		}

		this.computeFaceNormals();

		if ( geometry.boundingBox !== null ) {

			this.boundingBox = geometry.boundingBox.clone();

		}

		if ( geometry.boundingSphere !== null ) {

			this.boundingSphere = geometry.boundingSphere.clone();

		}

		return this;

	},

	center: function () {

		this.computeBoundingBox();

		var offset = this.boundingBox.getCenter().negate();

		this.translate( offset.x, offset.y, offset.z );

		return offset;

	},

	normalize: function () {

		this.computeBoundingSphere();

		var center = this.boundingSphere.center;
		var radius = this.boundingSphere.radius;

		var s = radius === 0 ? 1 : 1.0 / radius;

		var matrix = new Matrix4();
		matrix.set(
			s, 0, 0, - s * center.x,
			0, s, 0, - s * center.y,
			0, 0, s, - s * center.z,
			0, 0, 0, 1
		);

		this.applyMatrix( matrix );

		return this;

	},

	computeFaceNormals: function () {

		var cb = new Vector3(), ab = new Vector3();

		for ( var f = 0, fl = this.faces.length; f < fl; f ++ ) {

			var face = this.faces[ f ];

			var vA = this.vertices[ face.a ];
			var vB = this.vertices[ face.b ];
			var vC = this.vertices[ face.c ];

			cb.subVectors( vC, vB );
			ab.subVectors( vA, vB );
			cb.cross( ab );

			cb.normalize();

			face.normal.copy( cb );

		}

	},

	computeVertexNormals: function ( areaWeighted ) {

		if ( areaWeighted === undefined ) areaWeighted = true;

		var v, vl, f, fl, face, vertices;

		vertices = new Array( this.vertices.length );

		for ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {

			vertices[ v ] = new Vector3();

		}

		if ( areaWeighted ) {

			// vertex normals weighted by triangle areas
			// http://www.iquilezles.org/www/articles/normals/normals.htm

			var vA, vB, vC;
			var cb = new Vector3(), ab = new Vector3();

			for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

				face = this.faces[ f ];

				vA = this.vertices[ face.a ];
				vB = this.vertices[ face.b ];
				vC = this.vertices[ face.c ];

				cb.subVectors( vC, vB );
				ab.subVectors( vA, vB );
				cb.cross( ab );

				vertices[ face.a ].add( cb );
				vertices[ face.b ].add( cb );
				vertices[ face.c ].add( cb );

			}

		} else {

			this.computeFaceNormals();

			for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

				face = this.faces[ f ];

				vertices[ face.a ].add( face.normal );
				vertices[ face.b ].add( face.normal );
				vertices[ face.c ].add( face.normal );

			}

		}

		for ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {

			vertices[ v ].normalize();

		}

		for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

			face = this.faces[ f ];

			var vertexNormals = face.vertexNormals;

			if ( vertexNormals.length === 3 ) {

				vertexNormals[ 0 ].copy( vertices[ face.a ] );
				vertexNormals[ 1 ].copy( vertices[ face.b ] );
				vertexNormals[ 2 ].copy( vertices[ face.c ] );

			} else {

				vertexNormals[ 0 ] = vertices[ face.a ].clone();
				vertexNormals[ 1 ] = vertices[ face.b ].clone();
				vertexNormals[ 2 ] = vertices[ face.c ].clone();

			}

		}

		if ( this.faces.length > 0 ) {

			this.normalsNeedUpdate = true;

		}

	},

	computeFlatVertexNormals: function () {

		var f, fl, face;

		this.computeFaceNormals();

		for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

			face = this.faces[ f ];

			var vertexNormals = face.vertexNormals;

			if ( vertexNormals.length === 3 ) {

				vertexNormals[ 0 ].copy( face.normal );
				vertexNormals[ 1 ].copy( face.normal );
				vertexNormals[ 2 ].copy( face.normal );

			} else {

				vertexNormals[ 0 ] = face.normal.clone();
				vertexNormals[ 1 ] = face.normal.clone();
				vertexNormals[ 2 ] = face.normal.clone();

			}

		}

		if ( this.faces.length > 0 ) {

			this.normalsNeedUpdate = true;

		}

	},

	computeMorphNormals: function () {

		var i, il, f, fl, face;

		// save original normals
		// - create temp variables on first access
		//   otherwise just copy (for faster repeated calls)

		for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

			face = this.faces[ f ];

			if ( ! face.__originalFaceNormal ) {

				face.__originalFaceNormal = face.normal.clone();

			} else {

				face.__originalFaceNormal.copy( face.normal );

			}

			if ( ! face.__originalVertexNormals ) face.__originalVertexNormals = [];

			for ( i = 0, il = face.vertexNormals.length; i < il; i ++ ) {

				if ( ! face.__originalVertexNormals[ i ] ) {

					face.__originalVertexNormals[ i ] = face.vertexNormals[ i ].clone();

				} else {

					face.__originalVertexNormals[ i ].copy( face.vertexNormals[ i ] );

				}

			}

		}

		// use temp geometry to compute face and vertex normals for each morph

		var tmpGeo = new Geometry();
		tmpGeo.faces = this.faces;

		for ( i = 0, il = this.morphTargets.length; i < il; i ++ ) {

			// create on first access

			if ( ! this.morphNormals[ i ] ) {

				this.morphNormals[ i ] = {};
				this.morphNormals[ i ].faceNormals = [];
				this.morphNormals[ i ].vertexNormals = [];

				var dstNormalsFace = this.morphNormals[ i ].faceNormals;
				var dstNormalsVertex = this.morphNormals[ i ].vertexNormals;

				var faceNormal, vertexNormals;

				for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

					faceNormal = new Vector3();
					vertexNormals = { a: new Vector3(), b: new Vector3(), c: new Vector3() };

					dstNormalsFace.push( faceNormal );
					dstNormalsVertex.push( vertexNormals );

				}

			}

			var morphNormals = this.morphNormals[ i ];

			// set vertices to morph target

			tmpGeo.vertices = this.morphTargets[ i ].vertices;

			// compute morph normals

			tmpGeo.computeFaceNormals();
			tmpGeo.computeVertexNormals();

			// store morph normals

			var faceNormal, vertexNormals;

			for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

				face = this.faces[ f ];

				faceNormal = morphNormals.faceNormals[ f ];
				vertexNormals = morphNormals.vertexNormals[ f ];

				faceNormal.copy( face.normal );

				vertexNormals.a.copy( face.vertexNormals[ 0 ] );
				vertexNormals.b.copy( face.vertexNormals[ 1 ] );
				vertexNormals.c.copy( face.vertexNormals[ 2 ] );

			}

		}

		// restore original normals

		for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

			face = this.faces[ f ];

			face.normal = face.__originalFaceNormal;
			face.vertexNormals = face.__originalVertexNormals;

		}

	},

	computeLineDistances: function () {

		var d = 0;
		var vertices = this.vertices;

		for ( var i = 0, il = vertices.length; i < il; i ++ ) {

			if ( i > 0 ) {

				d += vertices[ i ].distanceTo( vertices[ i - 1 ] );

			}

			this.lineDistances[ i ] = d;

		}

	},

	computeBoundingBox: function () {

		if ( this.boundingBox === null ) {

			this.boundingBox = new Box3();

		}

		this.boundingBox.setFromPoints( this.vertices );

	},

	computeBoundingSphere: function () {

		if ( this.boundingSphere === null ) {

			this.boundingSphere = new Sphere();

		}

		this.boundingSphere.setFromPoints( this.vertices );

	},

	merge: function ( geometry, matrix, materialIndexOffset ) {

		if ( ! ( geometry && geometry.isGeometry ) ) {

			console.error( 'THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.', geometry );
			return;

		}

		var normalMatrix,
			vertexOffset = this.vertices.length,
			vertices1 = this.vertices,
			vertices2 = geometry.vertices,
			faces1 = this.faces,
			faces2 = geometry.faces,
			uvs1 = this.faceVertexUvs[ 0 ],
			uvs2 = geometry.faceVertexUvs[ 0 ],
			colors1 = this.colors,
			colors2 = geometry.colors;

		if ( materialIndexOffset === undefined ) materialIndexOffset = 0;

		if ( matrix !== undefined ) {

			normalMatrix = new Matrix3().getNormalMatrix( matrix );

		}

		// vertices

		for ( var i = 0, il = vertices2.length; i < il; i ++ ) {

			var vertex = vertices2[ i ];

			var vertexCopy = vertex.clone();

			if ( matrix !== undefined ) vertexCopy.applyMatrix4( matrix );

			vertices1.push( vertexCopy );

		}

		// colors

		for ( var i = 0, il = colors2.length; i < il; i ++ ) {

			colors1.push( colors2[ i ].clone() );

		}

		// faces

		for ( i = 0, il = faces2.length; i < il; i ++ ) {

			var face = faces2[ i ], faceCopy, normal, color,
				faceVertexNormals = face.vertexNormals,
				faceVertexColors = face.vertexColors;

			faceCopy = new Face3( face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset );
			faceCopy.normal.copy( face.normal );

			if ( normalMatrix !== undefined ) {

				faceCopy.normal.applyMatrix3( normalMatrix ).normalize();

			}

			for ( var j = 0, jl = faceVertexNormals.length; j < jl; j ++ ) {

				normal = faceVertexNormals[ j ].clone();

				if ( normalMatrix !== undefined ) {

					normal.applyMatrix3( normalMatrix ).normalize();

				}

				faceCopy.vertexNormals.push( normal );

			}

			faceCopy.color.copy( face.color );

			for ( var j = 0, jl = faceVertexColors.length; j < jl; j ++ ) {

				color = faceVertexColors[ j ];
				faceCopy.vertexColors.push( color.clone() );

			}

			faceCopy.materialIndex = face.materialIndex + materialIndexOffset;

			faces1.push( faceCopy );

		}

		// uvs

		for ( i = 0, il = uvs2.length; i < il; i ++ ) {

			var uv = uvs2[ i ], uvCopy = [];

			if ( uv === undefined ) {

				continue;

			}

			for ( var j = 0, jl = uv.length; j < jl; j ++ ) {

				uvCopy.push( uv[ j ].clone() );

			}

			uvs1.push( uvCopy );

		}

	},

	mergeMesh: function ( mesh ) {

		if ( ! ( mesh && mesh.isMesh ) ) {

			console.error( 'THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.', mesh );
			return;

		}

		mesh.matrixAutoUpdate && mesh.updateMatrix();

		this.merge( mesh.geometry, mesh.matrix );

	},

	/*
	 * Checks for duplicate vertices with hashmap.
	 * Duplicated vertices are removed
	 * and faces' vertices are updated.
	 */

	mergeVertices: function () {

		var verticesMap = {}; // Hashmap for looking up vertices by position coordinates (and making sure they are unique)
		var unique = [], changes = [];

		var v, key;
		var precisionPoints = 4; // number of decimal points, e.g. 4 for epsilon of 0.0001
		var precision = Math.pow( 10, precisionPoints );
		var i, il, face;
		var indices, j, jl;

		for ( i = 0, il = this.vertices.length; i < il; i ++ ) {

			v = this.vertices[ i ];
			key = Math.round( v.x * precision ) + '_' + Math.round( v.y * precision ) + '_' + Math.round( v.z * precision );

			if ( verticesMap[ key ] === undefined ) {

				verticesMap[ key ] = i;
				unique.push( this.vertices[ i ] );
				changes[ i ] = unique.length - 1;

			} else {

				//console.log('Duplicate vertex found. ', i, ' could be using ', verticesMap[key]);
				changes[ i ] = changes[ verticesMap[ key ] ];

			}

		}


		// if faces are completely degenerate after merging vertices, we
		// have to remove them from the geometry.
		var faceIndicesToRemove = [];

		for ( i = 0, il = this.faces.length; i < il; i ++ ) {

			face = this.faces[ i ];

			face.a = changes[ face.a ];
			face.b = changes[ face.b ];
			face.c = changes[ face.c ];

			indices = [ face.a, face.b, face.c ];

			// if any duplicate vertices are found in a Face3
			// we have to remove the face as nothing can be saved
			for ( var n = 0; n < 3; n ++ ) {

				if ( indices[ n ] === indices[ ( n + 1 ) % 3 ] ) {

					faceIndicesToRemove.push( i );
					break;

				}

			}

		}

		for ( i = faceIndicesToRemove.length - 1; i >= 0; i -- ) {

			var idx = faceIndicesToRemove[ i ];

			this.faces.splice( idx, 1 );

			for ( j = 0, jl = this.faceVertexUvs.length; j < jl; j ++ ) {

				this.faceVertexUvs[ j ].splice( idx, 1 );

			}

		}

		// Use unique set of vertices

		var diff = this.vertices.length - unique.length;
		this.vertices = unique;
		return diff;

	},

	setFromPoints: function ( points ) {

		this.vertices = [];

		for ( var i = 0, l = points.length; i < l; i ++ ) {

			var point = points[ i ];
			this.vertices.push( new Vector3( point.x, point.y, point.z || 0 ) );

		}

		return this;

	},

	sortFacesByMaterialIndex: function () {

		var faces = this.faces;
		var length = faces.length;

		// tag faces

		for ( var i = 0; i < length; i ++ ) {

			faces[ i ]._id = i;

		}

		// sort faces

		function materialIndexSort( a, b ) {

			return a.materialIndex - b.materialIndex;

		}

		faces.sort( materialIndexSort );

		// sort uvs

		var uvs1 = this.faceVertexUvs[ 0 ];
		var uvs2 = this.faceVertexUvs[ 1 ];

		var newUvs1, newUvs2;

		if ( uvs1 && uvs1.length === length ) newUvs1 = [];
		if ( uvs2 && uvs2.length === length ) newUvs2 = [];

		for ( var i = 0; i < length; i ++ ) {

			var id = faces[ i ]._id;

			if ( newUvs1 ) newUvs1.push( uvs1[ id ] );
			if ( newUvs2 ) newUvs2.push( uvs2[ id ] );

		}

		if ( newUvs1 ) this.faceVertexUvs[ 0 ] = newUvs1;
		if ( newUvs2 ) this.faceVertexUvs[ 1 ] = newUvs2;

	},

	toJSON: function () {

		var data = {
			metadata: {
				version: 4.5,
				type: 'Geometry',
				generator: 'Geometry.toJSON'
			}
		};

		// standard Geometry serialization

		data.uuid = this.uuid;
		data.type = this.type;
		if ( this.name !== '' ) data.name = this.name;

		if ( this.parameters !== undefined ) {

			var parameters = this.parameters;

			for ( var key in parameters ) {

				if ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];

			}

			return data;

		}

		var vertices = [];

		for ( var i = 0; i < this.vertices.length; i ++ ) {

			var vertex = this.vertices[ i ];
			vertices.push( vertex.x, vertex.y, vertex.z );

		}

		var faces = [];
		var normals = [];
		var normalsHash = {};
		var colors = [];
		var colorsHash = {};
		var uvs = [];
		var uvsHash = {};

		for ( var i = 0; i < this.faces.length; i ++ ) {

			var face = this.faces[ i ];

			var hasMaterial = true;
			var hasFaceUv = false; // deprecated
			var hasFaceVertexUv = this.faceVertexUvs[ 0 ][ i ] !== undefined;
			var hasFaceNormal = face.normal.length() > 0;
			var hasFaceVertexNormal = face.vertexNormals.length > 0;
			var hasFaceColor = face.color.r !== 1 || face.color.g !== 1 || face.color.b !== 1;
			var hasFaceVertexColor = face.vertexColors.length > 0;

			var faceType = 0;

			faceType = setBit( faceType, 0, 0 ); // isQuad
			faceType = setBit( faceType, 1, hasMaterial );
			faceType = setBit( faceType, 2, hasFaceUv );
			faceType = setBit( faceType, 3, hasFaceVertexUv );
			faceType = setBit( faceType, 4, hasFaceNormal );
			faceType = setBit( faceType, 5, hasFaceVertexNormal );
			faceType = setBit( faceType, 6, hasFaceColor );
			faceType = setBit( faceType, 7, hasFaceVertexColor );

			faces.push( faceType );
			faces.push( face.a, face.b, face.c );
			faces.push( face.materialIndex );

			if ( hasFaceVertexUv ) {

				var faceVertexUvs = this.faceVertexUvs[ 0 ][ i ];

				faces.push(
					getUvIndex( faceVertexUvs[ 0 ] ),
					getUvIndex( faceVertexUvs[ 1 ] ),
					getUvIndex( faceVertexUvs[ 2 ] )
				);

			}

			if ( hasFaceNormal ) {

				faces.push( getNormalIndex( face.normal ) );

			}

			if ( hasFaceVertexNormal ) {

				var vertexNormals = face.vertexNormals;

				faces.push(
					getNormalIndex( vertexNormals[ 0 ] ),
					getNormalIndex( vertexNormals[ 1 ] ),
					getNormalIndex( vertexNormals[ 2 ] )
				);

			}

			if ( hasFaceColor ) {

				faces.push( getColorIndex( face.color ) );

			}

			if ( hasFaceVertexColor ) {

				var vertexColors = face.vertexColors;

				faces.push(
					getColorIndex( vertexColors[ 0 ] ),
					getColorIndex( vertexColors[ 1 ] ),
					getColorIndex( vertexColors[ 2 ] )
				);

			}

		}

		function setBit( value, position, enabled ) {

			return enabled ? value | ( 1 << position ) : value & ( ~ ( 1 << position ) );

		}

		function getNormalIndex( normal ) {

			var hash = normal.x.toString() + normal.y.toString() + normal.z.toString();

			if ( normalsHash[ hash ] !== undefined ) {

				return normalsHash[ hash ];

			}

			normalsHash[ hash ] = normals.length / 3;
			normals.push( normal.x, normal.y, normal.z );

			return normalsHash[ hash ];

		}

		function getColorIndex( color ) {

			var hash = color.r.toString() + color.g.toString() + color.b.toString();

			if ( colorsHash[ hash ] !== undefined ) {

				return colorsHash[ hash ];

			}

			colorsHash[ hash ] = colors.length;
			colors.push( color.getHex() );

			return colorsHash[ hash ];

		}

		function getUvIndex( uv ) {

			var hash = uv.x.toString() + uv.y.toString();

			if ( uvsHash[ hash ] !== undefined ) {

				return uvsHash[ hash ];

			}

			uvsHash[ hash ] = uvs.length / 2;
			uvs.push( uv.x, uv.y );

			return uvsHash[ hash ];

		}

		data.data = {};

		data.data.vertices = vertices;
		data.data.normals = normals;
		if ( colors.length > 0 ) data.data.colors = colors;
		if ( uvs.length > 0 ) data.data.uvs = [ uvs ]; // temporal backward compatibility
		data.data.faces = faces;

		return data;

	},

	clone: function () {

		/*
		 // Handle primitives

		 var parameters = this.parameters;

		 if ( parameters !== undefined ) {

		 var values = [];

		 for ( var key in parameters ) {

		 values.push( parameters[ key ] );

		 }

		 var geometry = Object.create( this.constructor.prototype );
		 this.constructor.apply( geometry, values );
		 return geometry;

		 }

		 return new this.constructor().copy( this );
		 */

		return new Geometry().copy( this );

	},

	copy: function ( source ) {

		var i, il, j, jl, k, kl;

		// reset

		this.vertices = [];
		this.colors = [];
		this.faces = [];
		this.faceVertexUvs = [[]];
		this.morphTargets = [];
		this.morphNormals = [];
		this.skinWeights = [];
		this.skinIndices = [];
		this.lineDistances = [];
		this.boundingBox = null;
		this.boundingSphere = null;

		// name

		this.name = source.name;

		// vertices

		var vertices = source.vertices;

		for ( i = 0, il = vertices.length; i < il; i ++ ) {

			this.vertices.push( vertices[ i ].clone() );

		}

		// colors

		var colors = source.colors;

		for ( i = 0, il = colors.length; i < il; i ++ ) {

			this.colors.push( colors[ i ].clone() );

		}

		// faces

		var faces = source.faces;

		for ( i = 0, il = faces.length; i < il; i ++ ) {

			this.faces.push( faces[ i ].clone() );

		}

		// face vertex uvs

		for ( i = 0, il = source.faceVertexUvs.length; i < il; i ++ ) {

			var faceVertexUvs = source.faceVertexUvs[ i ];

			if ( this.faceVertexUvs[ i ] === undefined ) {

				this.faceVertexUvs[ i ] = [];

			}

			for ( j = 0, jl = faceVertexUvs.length; j < jl; j ++ ) {

				var uvs = faceVertexUvs[ j ], uvsCopy = [];

				for ( k = 0, kl = uvs.length; k < kl; k ++ ) {

					var uv = uvs[ k ];

					uvsCopy.push( uv.clone() );

				}

				this.faceVertexUvs[ i ].push( uvsCopy );

			}

		}

		// morph targets

		var morphTargets = source.morphTargets;

		for ( i = 0, il = morphTargets.length; i < il; i ++ ) {

			var morphTarget = {};
			morphTarget.name = morphTargets[ i ].name;

			// vertices

			if ( morphTargets[ i ].vertices !== undefined ) {

				morphTarget.vertices = [];

				for ( j = 0, jl = morphTargets[ i ].vertices.length; j < jl; j ++ ) {

					morphTarget.vertices.push( morphTargets[ i ].vertices[ j ].clone() );

				}

			}

			// normals

			if ( morphTargets[ i ].normals !== undefined ) {

				morphTarget.normals = [];

				for ( j = 0, jl = morphTargets[ i ].normals.length; j < jl; j ++ ) {

					morphTarget.normals.push( morphTargets[ i ].normals[ j ].clone() );

				}

			}

			this.morphTargets.push( morphTarget );

		}

		// morph normals

		var morphNormals = source.morphNormals;

		for ( i = 0, il = morphNormals.length; i < il; i ++ ) {

			var morphNormal = {};

			// vertex normals

			if ( morphNormals[ i ].vertexNormals !== undefined ) {

				morphNormal.vertexNormals = [];

				for ( j = 0, jl = morphNormals[ i ].vertexNormals.length; j < jl; j ++ ) {

					var srcVertexNormal = morphNormals[ i ].vertexNormals[ j ];
					var destVertexNormal = {};

					destVertexNormal.a = srcVertexNormal.a.clone();
					destVertexNormal.b = srcVertexNormal.b.clone();
					destVertexNormal.c = srcVertexNormal.c.clone();

					morphNormal.vertexNormals.push( destVertexNormal );

				}

			}

			// face normals

			if ( morphNormals[ i ].faceNormals !== undefined ) {

				morphNormal.faceNormals = [];

				for ( j = 0, jl = morphNormals[ i ].faceNormals.length; j < jl; j ++ ) {

					morphNormal.faceNormals.push( morphNormals[ i ].faceNormals[ j ].clone() );

				}

			}

			this.morphNormals.push( morphNormal );

		}

		// skin weights

		var skinWeights = source.skinWeights;

		for ( i = 0, il = skinWeights.length; i < il; i ++ ) {

			this.skinWeights.push( skinWeights[ i ].clone() );

		}

		// skin indices

		var skinIndices = source.skinIndices;

		for ( i = 0, il = skinIndices.length; i < il; i ++ ) {

			this.skinIndices.push( skinIndices[ i ].clone() );

		}

		// line distances

		var lineDistances = source.lineDistances;

		for ( i = 0, il = lineDistances.length; i < il; i ++ ) {

			this.lineDistances.push( lineDistances[ i ] );

		}

		// bounding box

		var boundingBox = source.boundingBox;

		if ( boundingBox !== null ) {

			this.boundingBox = boundingBox.clone();

		}

		// bounding sphere

		var boundingSphere = source.boundingSphere;

		if ( boundingSphere !== null ) {

			this.boundingSphere = boundingSphere.clone();

		}

		// update flags

		this.elementsNeedUpdate = source.elementsNeedUpdate;
		this.verticesNeedUpdate = source.verticesNeedUpdate;
		this.uvsNeedUpdate = source.uvsNeedUpdate;
		this.normalsNeedUpdate = source.normalsNeedUpdate;
		this.colorsNeedUpdate = source.colorsNeedUpdate;
		this.lineDistancesNeedUpdate = source.lineDistancesNeedUpdate;
		this.groupsNeedUpdate = source.groupsNeedUpdate;

		return this;

	},

	dispose: function () {

		this.dispatchEvent( { type: 'dispose' } );

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 */

function BufferAttribute( array, itemSize, normalized ) {

	if ( Array.isArray( array ) ) {

		throw new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );

	}

	this.uuid = _Math.generateUUID();
	this.name = '';

	this.array = array;
	this.itemSize = itemSize;
	this.count = array !== undefined ? array.length / itemSize : 0;
	this.normalized = normalized === true;

	this.dynamic = false;
	this.updateRange = { offset: 0, count: - 1 };

	this.onUploadCallback = function () {};

	this.version = 0;

}

Object.defineProperty( BufferAttribute.prototype, 'needsUpdate', {

	set: function ( value ) {

		if ( value === true ) this.version ++;

	}

} );

Object.assign( BufferAttribute.prototype, {

	isBufferAttribute: true,

	setArray: function ( array ) {

		if ( Array.isArray( array ) ) {

			throw new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );

		}

		this.count = array !== undefined ? array.length / this.itemSize : 0;
		this.array = array;

	},

	setDynamic: function ( value ) {

		this.dynamic = value;

		return this;

	},

	copy: function ( source ) {

		this.array = new source.array.constructor( source.array );
		this.itemSize = source.itemSize;
		this.count = source.count;
		this.normalized = source.normalized;

		this.dynamic = source.dynamic;

		return this;

	},

	copyAt: function ( index1, attribute, index2 ) {

		index1 *= this.itemSize;
		index2 *= attribute.itemSize;

		for ( var i = 0, l = this.itemSize; i < l; i ++ ) {

			this.array[ index1 + i ] = attribute.array[ index2 + i ];

		}

		return this;

	},

	copyArray: function ( array ) {

		this.array.set( array );

		return this;

	},

	copyColorsArray: function ( colors ) {

		var array = this.array, offset = 0;

		for ( var i = 0, l = colors.length; i < l; i ++ ) {

			var color = colors[ i ];

			if ( color === undefined ) {

				console.warn( 'THREE.BufferAttribute.copyColorsArray(): color is undefined', i );
				color = new Color();

			}

			array[ offset ++ ] = color.r;
			array[ offset ++ ] = color.g;
			array[ offset ++ ] = color.b;

		}

		return this;

	},

	copyIndicesArray: function ( indices ) {

		var array = this.array, offset = 0;

		for ( var i = 0, l = indices.length; i < l; i ++ ) {

			var index = indices[ i ];

			array[ offset ++ ] = index.a;
			array[ offset ++ ] = index.b;
			array[ offset ++ ] = index.c;

		}

		return this;

	},

	copyVector2sArray: function ( vectors ) {

		var array = this.array, offset = 0;

		for ( var i = 0, l = vectors.length; i < l; i ++ ) {

			var vector = vectors[ i ];

			if ( vector === undefined ) {

				console.warn( 'THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i );
				vector = new Vector2();

			}

			array[ offset ++ ] = vector.x;
			array[ offset ++ ] = vector.y;

		}

		return this;

	},

	copyVector3sArray: function ( vectors ) {

		var array = this.array, offset = 0;

		for ( var i = 0, l = vectors.length; i < l; i ++ ) {

			var vector = vectors[ i ];

			if ( vector === undefined ) {

				console.warn( 'THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i );
				vector = new Vector3();

			}

			array[ offset ++ ] = vector.x;
			array[ offset ++ ] = vector.y;
			array[ offset ++ ] = vector.z;

		}

		return this;

	},

	copyVector4sArray: function ( vectors ) {

		var array = this.array, offset = 0;

		for ( var i = 0, l = vectors.length; i < l; i ++ ) {

			var vector = vectors[ i ];

			if ( vector === undefined ) {

				console.warn( 'THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i );
				vector = new Vector4();

			}

			array[ offset ++ ] = vector.x;
			array[ offset ++ ] = vector.y;
			array[ offset ++ ] = vector.z;
			array[ offset ++ ] = vector.w;

		}

		return this;

	},

	set: function ( value, offset ) {

		if ( offset === undefined ) offset = 0;

		this.array.set( value, offset );

		return this;

	},

	getX: function ( index ) {

		return this.array[ index * this.itemSize ];

	},

	setX: function ( index, x ) {

		this.array[ index * this.itemSize ] = x;

		return this;

	},

	getY: function ( index ) {

		return this.array[ index * this.itemSize + 1 ];

	},

	setY: function ( index, y ) {

		this.array[ index * this.itemSize + 1 ] = y;

		return this;

	},

	getZ: function ( index ) {

		return this.array[ index * this.itemSize + 2 ];

	},

	setZ: function ( index, z ) {

		this.array[ index * this.itemSize + 2 ] = z;

		return this;

	},

	getW: function ( index ) {

		return this.array[ index * this.itemSize + 3 ];

	},

	setW: function ( index, w ) {

		this.array[ index * this.itemSize + 3 ] = w;

		return this;

	},

	setXY: function ( index, x, y ) {

		index *= this.itemSize;

		this.array[ index + 0 ] = x;
		this.array[ index + 1 ] = y;

		return this;

	},

	setXYZ: function ( index, x, y, z ) {

		index *= this.itemSize;

		this.array[ index + 0 ] = x;
		this.array[ index + 1 ] = y;
		this.array[ index + 2 ] = z;

		return this;

	},

	setXYZW: function ( index, x, y, z, w ) {

		index *= this.itemSize;

		this.array[ index + 0 ] = x;
		this.array[ index + 1 ] = y;
		this.array[ index + 2 ] = z;
		this.array[ index + 3 ] = w;

		return this;

	},

	onUpload: function ( callback ) {

		this.onUploadCallback = callback;

		return this;

	},

	clone: function () {

		return new this.constructor( this.array, this.itemSize ).copy( this );

	}

} );

//

function Uint16BufferAttribute( array, itemSize, normalized ) {

	BufferAttribute.call( this, new Uint16Array( array ), itemSize, normalized );

}

Uint16BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
Uint16BufferAttribute.prototype.constructor = Uint16BufferAttribute;


function Uint32BufferAttribute( array, itemSize, normalized ) {

	BufferAttribute.call( this, new Uint32Array( array ), itemSize, normalized );

}

Uint32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
Uint32BufferAttribute.prototype.constructor = Uint32BufferAttribute;


function Float32BufferAttribute( array, itemSize, normalized ) {

	BufferAttribute.call( this, new Float32Array( array ), itemSize, normalized );

}

Float32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
Float32BufferAttribute.prototype.constructor = Float32BufferAttribute;


function DirectGeometry() {

	this.indices = [];
	this.vertices = [];
	this.normals = [];
	this.colors = [];
	this.uvs = [];
	this.uvs2 = [];

	this.groups = [];

	this.morphTargets = {};

	this.skinWeights = [];
	this.skinIndices = [];

	// this.lineDistances = [];

	this.boundingBox = null;
	this.boundingSphere = null;

	// update flags

	this.verticesNeedUpdate = false;
	this.normalsNeedUpdate = false;
	this.colorsNeedUpdate = false;
	this.uvsNeedUpdate = false;
	this.groupsNeedUpdate = false;

}

Object.assign( DirectGeometry.prototype, {

	computeGroups: function ( geometry ) {

		var group;
		var groups = [];
		var materialIndex = undefined;

		var faces = geometry.faces;

		for ( var i = 0; i < faces.length; i ++ ) {

			var face = faces[ i ];

			// materials

			if ( face.materialIndex !== materialIndex ) {

				materialIndex = face.materialIndex;

				if ( group !== undefined ) {

					group.count = ( i * 3 ) - group.start;
					groups.push( group );

				}

				group = {
					start: i * 3,
					materialIndex: materialIndex
				};

			}

		}

		if ( group !== undefined ) {

			group.count = ( i * 3 ) - group.start;
			groups.push( group );

		}

		this.groups = groups;

	},

	fromGeometry: function ( geometry ) {

		var faces = geometry.faces;
		var vertices = geometry.vertices;
		var faceVertexUvs = geometry.faceVertexUvs;

		var hasFaceVertexUv = faceVertexUvs[ 0 ] && faceVertexUvs[ 0 ].length > 0;
		var hasFaceVertexUv2 = faceVertexUvs[ 1 ] && faceVertexUvs[ 1 ].length > 0;

		// morphs

		var morphTargets = geometry.morphTargets;
		var morphTargetsLength = morphTargets.length;

		var morphTargetsPosition;

		if ( morphTargetsLength > 0 ) {

			morphTargetsPosition = [];

			for ( var i = 0; i < morphTargetsLength; i ++ ) {

				morphTargetsPosition[ i ] = [];

			}

			this.morphTargets.position = morphTargetsPosition;

		}

		var morphNormals = geometry.morphNormals;
		var morphNormalsLength = morphNormals.length;

		var morphTargetsNormal;

		if ( morphNormalsLength > 0 ) {

			morphTargetsNormal = [];

			for ( var i = 0; i < morphNormalsLength; i ++ ) {

				morphTargetsNormal[ i ] = [];

			}

			this.morphTargets.normal = morphTargetsNormal;

		}

		// skins

		var skinIndices = geometry.skinIndices;
		var skinWeights = geometry.skinWeights;

		var hasSkinIndices = skinIndices.length === vertices.length;
		var hasSkinWeights = skinWeights.length === vertices.length;

		//

		for ( var i = 0; i < faces.length; i ++ ) {

			var face = faces[ i ];

			this.vertices.push( vertices[ face.a ], vertices[ face.b ], vertices[ face.c ] );

			var vertexNormals = face.vertexNormals;

			if ( vertexNormals.length === 3 ) {

				this.normals.push( vertexNormals[ 0 ], vertexNormals[ 1 ], vertexNormals[ 2 ] );

			} else {

				var normal = face.normal;

				this.normals.push( normal, normal, normal );

			}

			var vertexColors = face.vertexColors;

			if ( vertexColors.length === 3 ) {

				this.colors.push( vertexColors[ 0 ], vertexColors[ 1 ], vertexColors[ 2 ] );

			} else {

				var color = face.color;

				this.colors.push( color, color, color );

			}

			if ( hasFaceVertexUv === true ) {

				var vertexUvs = faceVertexUvs[ 0 ][ i ];

				if ( vertexUvs !== undefined ) {

					this.uvs.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );

				} else {

					console.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ', i );

					this.uvs.push( new Vector2(), new Vector2(), new Vector2() );

				}

			}

			if ( hasFaceVertexUv2 === true ) {

				var vertexUvs = faceVertexUvs[ 1 ][ i ];

				if ( vertexUvs !== undefined ) {

					this.uvs2.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );

				} else {

					console.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ', i );

					this.uvs2.push( new Vector2(), new Vector2(), new Vector2() );

				}

			}

			// morphs

			for ( var j = 0; j < morphTargetsLength; j ++ ) {

				var morphTarget = morphTargets[ j ].vertices;

				morphTargetsPosition[ j ].push( morphTarget[ face.a ], morphTarget[ face.b ], morphTarget[ face.c ] );

			}

			for ( var j = 0; j < morphNormalsLength; j ++ ) {

				var morphNormal = morphNormals[ j ].vertexNormals[ i ];

				morphTargetsNormal[ j ].push( morphNormal.a, morphNormal.b, morphNormal.c );

			}

			// skins

			if ( hasSkinIndices ) {

				this.skinIndices.push( skinIndices[ face.a ], skinIndices[ face.b ], skinIndices[ face.c ] );

			}

			if ( hasSkinWeights ) {

				this.skinWeights.push( skinWeights[ face.a ], skinWeights[ face.b ], skinWeights[ face.c ] );

			}

		}

		this.computeGroups( geometry );

		this.verticesNeedUpdate = geometry.verticesNeedUpdate;
		this.normalsNeedUpdate = geometry.normalsNeedUpdate;
		this.colorsNeedUpdate = geometry.colorsNeedUpdate;
		this.uvsNeedUpdate = geometry.uvsNeedUpdate;
		this.groupsNeedUpdate = geometry.groupsNeedUpdate;

		return this;

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 */

function arrayMax( array ) {

	if ( array.length === 0 ) return - Infinity;

	var max = array[ 0 ];

	for ( var i = 1, l = array.length; i < l; ++ i ) {

		if ( array[ i ] > max ) max = array[ i ];

	}

	return max;

}

/**
 * @author alteredq / http://alteredqualia.com/
 * @author mrdoob / http://mrdoob.com/
 */

var bufferGeometryId = 1; // BufferGeometry uses odd numbers as Id

function BufferGeometry() {

	Object.defineProperty( this, 'id', { value: bufferGeometryId += 2 } );

	this.uuid = _Math.generateUUID();

	this.name = '';
	this.type = 'BufferGeometry';

	this.index = null;
	this.attributes = {};

	this.morphAttributes = {};

	this.groups = [];

	this.boundingBox = null;
	this.boundingSphere = null;

	this.drawRange = { start: 0, count: Infinity };

}

Object.assign( BufferGeometry.prototype, EventDispatcher.prototype, {

	isBufferGeometry: true,

	getIndex: function () {

		return this.index;

	},

	setIndex: function ( index ) {

		if ( Array.isArray( index ) ) {

			this.index = new ( arrayMax( index ) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute )( index, 1 );

		} else {

			this.index = index;

		}

	},

	addAttribute: function ( name, attribute ) {

		if ( ! ( attribute && attribute.isBufferAttribute ) && ! ( attribute && attribute.isInterleavedBufferAttribute ) ) {

			console.warn( 'THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).' );

			this.addAttribute( name, new BufferAttribute( arguments[ 1 ], arguments[ 2 ] ) );

			return;

		}

		if ( name === 'index' ) {

			console.warn( 'THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.' );
			this.setIndex( attribute );

			return;

		}

		this.attributes[ name ] = attribute;

		return this;

	},

	getAttribute: function ( name ) {

		return this.attributes[ name ];

	},

	removeAttribute: function ( name ) {

		delete this.attributes[ name ];

		return this;

	},

	addGroup: function ( start, count, materialIndex ) {

		this.groups.push( {

			start: start,
			count: count,
			materialIndex: materialIndex !== undefined ? materialIndex : 0

		} );

	},

	clearGroups: function () {

		this.groups = [];

	},

	setDrawRange: function ( start, count ) {

		this.drawRange.start = start;
		this.drawRange.count = count;

	},

	applyMatrix: function ( matrix ) {

		var position = this.attributes.position;

		if ( position !== undefined ) {

			matrix.applyToBufferAttribute( position );
			position.needsUpdate = true;

		}

		var normal = this.attributes.normal;

		if ( normal !== undefined ) {

			var normalMatrix = new Matrix3().getNormalMatrix( matrix );

			normalMatrix.applyToBufferAttribute( normal );
			normal.needsUpdate = true;

		}

		if ( this.boundingBox !== null ) {

			this.computeBoundingBox();

		}

		if ( this.boundingSphere !== null ) {

			this.computeBoundingSphere();

		}

		return this;

	},

	rotateX: function () {

		// rotate geometry around world x-axis

		var m1 = new Matrix4();

		return function rotateX( angle ) {

			m1.makeRotationX( angle );

			this.applyMatrix( m1 );

			return this;

		};

	}(),

	rotateY: function () {

		// rotate geometry around world y-axis

		var m1 = new Matrix4();

		return function rotateY( angle ) {

			m1.makeRotationY( angle );

			this.applyMatrix( m1 );

			return this;

		};

	}(),

	rotateZ: function () {

		// rotate geometry around world z-axis

		var m1 = new Matrix4();

		return function rotateZ( angle ) {

			m1.makeRotationZ( angle );

			this.applyMatrix( m1 );

			return this;

		};

	}(),

	translate: function () {

		// translate geometry

		var m1 = new Matrix4();

		return function translate( x, y, z ) {

			m1.makeTranslation( x, y, z );

			this.applyMatrix( m1 );

			return this;

		};

	}(),

	scale: function () {

		// scale geometry

		var m1 = new Matrix4();

		return function scale( x, y, z ) {

			m1.makeScale( x, y, z );

			this.applyMatrix( m1 );

			return this;

		};

	}(),

	lookAt: function () {

		var obj = new Object3D();

		return function lookAt( vector ) {

			obj.lookAt( vector );

			obj.updateMatrix();

			this.applyMatrix( obj.matrix );

		};

	}(),

	center: function () {

		this.computeBoundingBox();

		var offset = this.boundingBox.getCenter().negate();

		this.translate( offset.x, offset.y, offset.z );

		return offset;

	},

	setFromObject: function ( object ) {

		// console.log( 'THREE.BufferGeometry.setFromObject(). Converting', object, this );

		var geometry = object.geometry;

		if ( object.isPoints || object.isLine ) {

			var positions = new Float32BufferAttribute( geometry.vertices.length * 3, 3 );
			var colors = new Float32BufferAttribute( geometry.colors.length * 3, 3 );

			this.addAttribute( 'position', positions.copyVector3sArray( geometry.vertices ) );
			this.addAttribute( 'color', colors.copyColorsArray( geometry.colors ) );

			if ( geometry.lineDistances && geometry.lineDistances.length === geometry.vertices.length ) {

				var lineDistances = new Float32BufferAttribute( geometry.lineDistances.length, 1 );

				this.addAttribute( 'lineDistance', lineDistances.copyArray( geometry.lineDistances ) );

			}

			if ( geometry.boundingSphere !== null ) {

				this.boundingSphere = geometry.boundingSphere.clone();

			}

			if ( geometry.boundingBox !== null ) {

				this.boundingBox = geometry.boundingBox.clone();

			}

		} else if ( object.isMesh ) {

			if ( geometry && geometry.isGeometry ) {

				this.fromGeometry( geometry );

			}

		}

		return this;

	},

	setFromPoints: function ( points ) {

		var position = [];

		for ( var i = 0, l = points.length; i < l; i ++ ) {

			var point = points[ i ];
			position.push( point.x, point.y, point.z || 0 );

		}

		this.addAttribute( 'position', new Float32BufferAttribute( position, 3 ) );

		return this;

	},

	updateFromObject: function ( object ) {

		var geometry = object.geometry;

		if ( object.isMesh ) {

			var direct = geometry.__directGeometry;

			if ( geometry.elementsNeedUpdate === true ) {

				direct = undefined;
				geometry.elementsNeedUpdate = false;

			}

			if ( direct === undefined ) {

				return this.fromGeometry( geometry );

			}

			direct.verticesNeedUpdate = geometry.verticesNeedUpdate;
			direct.normalsNeedUpdate = geometry.normalsNeedUpdate;
			direct.colorsNeedUpdate = geometry.colorsNeedUpdate;
			direct.uvsNeedUpdate = geometry.uvsNeedUpdate;
			direct.groupsNeedUpdate = geometry.groupsNeedUpdate;

			geometry.verticesNeedUpdate = false;
			geometry.normalsNeedUpdate = false;
			geometry.colorsNeedUpdate = false;
			geometry.uvsNeedUpdate = false;
			geometry.groupsNeedUpdate = false;

			geometry = direct;

		}

		var attribute;

		if ( geometry.verticesNeedUpdate === true ) {

			attribute = this.attributes.position;

			if ( attribute !== undefined ) {

				attribute.copyVector3sArray( geometry.vertices );
				attribute.needsUpdate = true;

			}

			geometry.verticesNeedUpdate = false;

		}

		if ( geometry.normalsNeedUpdate === true ) {

			attribute = this.attributes.normal;

			if ( attribute !== undefined ) {

				attribute.copyVector3sArray( geometry.normals );
				attribute.needsUpdate = true;

			}

			geometry.normalsNeedUpdate = false;

		}

		if ( geometry.colorsNeedUpdate === true ) {

			attribute = this.attributes.color;

			if ( attribute !== undefined ) {

				attribute.copyColorsArray( geometry.colors );
				attribute.needsUpdate = true;

			}

			geometry.colorsNeedUpdate = false;

		}

		if ( geometry.uvsNeedUpdate ) {

			attribute = this.attributes.uv;

			if ( attribute !== undefined ) {

				attribute.copyVector2sArray( geometry.uvs );
				attribute.needsUpdate = true;

			}

			geometry.uvsNeedUpdate = false;

		}

		if ( geometry.lineDistancesNeedUpdate ) {

			attribute = this.attributes.lineDistance;

			if ( attribute !== undefined ) {

				attribute.copyArray( geometry.lineDistances );
				attribute.needsUpdate = true;

			}

			geometry.lineDistancesNeedUpdate = false;

		}

		if ( geometry.groupsNeedUpdate ) {

			geometry.computeGroups( object.geometry );
			this.groups = geometry.groups;

			geometry.groupsNeedUpdate = false;

		}

		return this;

	},

	fromGeometry: function ( geometry ) {

		geometry.__directGeometry = new DirectGeometry().fromGeometry( geometry );

		return this.fromDirectGeometry( geometry.__directGeometry );

	},

	fromDirectGeometry: function ( geometry ) {

		var positions = new Float32Array( geometry.vertices.length * 3 );
		this.addAttribute( 'position', new BufferAttribute( positions, 3 ).copyVector3sArray( geometry.vertices ) );

		if ( geometry.normals.length > 0 ) {

			var normals = new Float32Array( geometry.normals.length * 3 );
			this.addAttribute( 'normal', new BufferAttribute( normals, 3 ).copyVector3sArray( geometry.normals ) );

		}

		if ( geometry.colors.length > 0 ) {

			var colors = new Float32Array( geometry.colors.length * 3 );
			this.addAttribute( 'color', new BufferAttribute( colors, 3 ).copyColorsArray( geometry.colors ) );

		}

		if ( geometry.uvs.length > 0 ) {

			var uvs = new Float32Array( geometry.uvs.length * 2 );
			this.addAttribute( 'uv', new BufferAttribute( uvs, 2 ).copyVector2sArray( geometry.uvs ) );

		}

		if ( geometry.uvs2.length > 0 ) {

			var uvs2 = new Float32Array( geometry.uvs2.length * 2 );
			this.addAttribute( 'uv2', new BufferAttribute( uvs2, 2 ).copyVector2sArray( geometry.uvs2 ) );

		}

		if ( geometry.indices.length > 0 ) {

			var TypeArray = arrayMax( geometry.indices ) > 65535 ? Uint32Array : Uint16Array;
			var indices = new TypeArray( geometry.indices.length * 3 );
			this.setIndex( new BufferAttribute( indices, 1 ).copyIndicesArray( geometry.indices ) );

		}

		// groups

		this.groups = geometry.groups;

		// morphs

		for ( var name in geometry.morphTargets ) {

			var array = [];
			var morphTargets = geometry.morphTargets[ name ];

			for ( var i = 0, l = morphTargets.length; i < l; i ++ ) {

				var morphTarget = morphTargets[ i ];

				var attribute = new Float32BufferAttribute( morphTarget.length * 3, 3 );

				array.push( attribute.copyVector3sArray( morphTarget ) );

			}

			this.morphAttributes[ name ] = array;

		}

		// skinning

		if ( geometry.skinIndices.length > 0 ) {

			var skinIndices = new Float32BufferAttribute( geometry.skinIndices.length * 4, 4 );
			this.addAttribute( 'skinIndex', skinIndices.copyVector4sArray( geometry.skinIndices ) );

		}

		if ( geometry.skinWeights.length > 0 ) {

			var skinWeights = new Float32BufferAttribute( geometry.skinWeights.length * 4, 4 );
			this.addAttribute( 'skinWeight', skinWeights.copyVector4sArray( geometry.skinWeights ) );

		}

		//

		if ( geometry.boundingSphere !== null ) {

			this.boundingSphere = geometry.boundingSphere.clone();

		}

		if ( geometry.boundingBox !== null ) {

			this.boundingBox = geometry.boundingBox.clone();

		}

		return this;

	},

	computeBoundingBox: function () {

		if ( this.boundingBox === null ) {

			this.boundingBox = new Box3();

		}

		var position = this.attributes.position;

		if ( position !== undefined ) {

			this.boundingBox.setFromBufferAttribute( position );

		} else {

			this.boundingBox.makeEmpty();

		}

		if ( isNaN( this.boundingBox.min.x ) || isNaN( this.boundingBox.min.y ) || isNaN( this.boundingBox.min.z ) ) {

			console.error( 'THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this );

		}

	},

	computeBoundingSphere: function () {

		var box = new Box3();
		var vector = new Vector3();

		return function computeBoundingSphere() {

			if ( this.boundingSphere === null ) {

				this.boundingSphere = new Sphere();

			}

			var position = this.attributes.position;

			if ( position ) {

				var center = this.boundingSphere.center;

				box.setFromBufferAttribute( position );
				box.getCenter( center );

				// hoping to find a boundingSphere with a radius smaller than the
				// boundingSphere of the boundingBox: sqrt(3) smaller in the best case

				var maxRadiusSq = 0;

				for ( var i = 0, il = position.count; i < il; i ++ ) {

					vector.x = position.getX( i );
					vector.y = position.getY( i );
					vector.z = position.getZ( i );
					maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( vector ) );

				}

				this.boundingSphere.radius = Math.sqrt( maxRadiusSq );

				if ( isNaN( this.boundingSphere.radius ) ) {

					console.error( 'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this );

				}

			}

		};

	}(),

	computeFaceNormals: function () {

		// backwards compatibility

	},

	computeVertexNormals: function () {

		var index = this.index;
		var attributes = this.attributes;
		var groups = this.groups;

		if ( attributes.position ) {

			var positions = attributes.position.array;

			if ( attributes.normal === undefined ) {

				this.addAttribute( 'normal', new BufferAttribute( new Float32Array( positions.length ), 3 ) );

			} else {

				// reset existing normals to zero

				var array = attributes.normal.array;

				for ( var i = 0, il = array.length; i < il; i ++ ) {

					array[ i ] = 0;

				}

			}

			var normals = attributes.normal.array;

			var vA, vB, vC;
			var pA = new Vector3(), pB = new Vector3(), pC = new Vector3();
			var cb = new Vector3(), ab = new Vector3();

			// indexed elements

			if ( index ) {

				var indices = index.array;

				if ( groups.length === 0 ) {

					this.addGroup( 0, indices.length );

				}

				for ( var j = 0, jl = groups.length; j < jl; ++ j ) {

					var group = groups[ j ];

					var start = group.start;
					var count = group.count;

					for ( var i = start, il = start + count; i < il; i += 3 ) {

						vA = indices[ i + 0 ] * 3;
						vB = indices[ i + 1 ] * 3;
						vC = indices[ i + 2 ] * 3;

						pA.fromArray( positions, vA );
						pB.fromArray( positions, vB );
						pC.fromArray( positions, vC );

						cb.subVectors( pC, pB );
						ab.subVectors( pA, pB );
						cb.cross( ab );

						normals[ vA ] += cb.x;
						normals[ vA + 1 ] += cb.y;
						normals[ vA + 2 ] += cb.z;

						normals[ vB ] += cb.x;
						normals[ vB + 1 ] += cb.y;
						normals[ vB + 2 ] += cb.z;

						normals[ vC ] += cb.x;
						normals[ vC + 1 ] += cb.y;
						normals[ vC + 2 ] += cb.z;

					}

				}

			} else {

				// non-indexed elements (unconnected triangle soup)

				for ( var i = 0, il = positions.length; i < il; i += 9 ) {

					pA.fromArray( positions, i );
					pB.fromArray( positions, i + 3 );
					pC.fromArray( positions, i + 6 );

					cb.subVectors( pC, pB );
					ab.subVectors( pA, pB );
					cb.cross( ab );

					normals[ i ] = cb.x;
					normals[ i + 1 ] = cb.y;
					normals[ i + 2 ] = cb.z;

					normals[ i + 3 ] = cb.x;
					normals[ i + 4 ] = cb.y;
					normals[ i + 5 ] = cb.z;

					normals[ i + 6 ] = cb.x;
					normals[ i + 7 ] = cb.y;
					normals[ i + 8 ] = cb.z;

				}

			}

			this.normalizeNormals();

			attributes.normal.needsUpdate = true;

		}

	},

	merge: function ( geometry, offset ) {

		if ( ! ( geometry && geometry.isBufferGeometry ) ) {

			console.error( 'THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry );
			return;

		}

		if ( offset === undefined ) offset = 0;

		var attributes = this.attributes;

		for ( var key in attributes ) {

			if ( geometry.attributes[ key ] === undefined ) continue;

			var attribute1 = attributes[ key ];
			var attributeArray1 = attribute1.array;

			var attribute2 = geometry.attributes[ key ];
			var attributeArray2 = attribute2.array;

			var attributeSize = attribute2.itemSize;

			for ( var i = 0, j = attributeSize * offset; i < attributeArray2.length; i ++, j ++ ) {

				attributeArray1[ j ] = attributeArray2[ i ];

			}

		}

		return this;

	},

	normalizeNormals: function () {

		var vector = new Vector3();

		return function normalizeNormals() {

			var normals = this.attributes.normal;

			for ( var i = 0, il = normals.count; i < il; i ++ ) {

				vector.x = normals.getX( i );
				vector.y = normals.getY( i );
				vector.z = normals.getZ( i );

				vector.normalize();

				normals.setXYZ( i, vector.x, vector.y, vector.z );

			}

		};

	}(),

	toNonIndexed: function () {

		if ( this.index === null ) {

			console.warn( 'THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed.' );
			return this;

		}

		var geometry2 = new BufferGeometry();

		var indices = this.index.array;
		var attributes = this.attributes;

		for ( var name in attributes ) {

			var attribute = attributes[ name ];

			var array = attribute.array;
			var itemSize = attribute.itemSize;

			var array2 = new array.constructor( indices.length * itemSize );

			var index = 0, index2 = 0;

			for ( var i = 0, l = indices.length; i < l; i ++ ) {

				index = indices[ i ] * itemSize;

				for ( var j = 0; j < itemSize; j ++ ) {

					array2[ index2 ++ ] = array[ index ++ ];

				}

			}

			geometry2.addAttribute( name, new BufferAttribute( array2, itemSize ) );

		}

		return geometry2;

	},

	toJSON: function () {

		var data = {
			metadata: {
				version: 4.5,
				type: 'BufferGeometry',
				generator: 'BufferGeometry.toJSON'
			}
		};

		// standard BufferGeometry serialization

		data.uuid = this.uuid;
		data.type = this.type;
		if ( this.name !== '' ) data.name = this.name;

		if ( this.parameters !== undefined ) {

			var parameters = this.parameters;

			for ( var key in parameters ) {

				if ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];

			}

			return data;

		}

		data.data = { attributes: {} };

		var index = this.index;

		if ( index !== null ) {

			var array = Array.prototype.slice.call( index.array );

			data.data.index = {
				type: index.array.constructor.name,
				array: array
			};

		}

		var attributes = this.attributes;

		for ( var key in attributes ) {

			var attribute = attributes[ key ];

			var array = Array.prototype.slice.call( attribute.array );

			data.data.attributes[ key ] = {
				itemSize: attribute.itemSize,
				type: attribute.array.constructor.name,
				array: array,
				normalized: attribute.normalized
			};

		}

		var groups = this.groups;

		if ( groups.length > 0 ) {

			data.data.groups = JSON.parse( JSON.stringify( groups ) );

		}

		var boundingSphere = this.boundingSphere;

		if ( boundingSphere !== null ) {

			data.data.boundingSphere = {
				center: boundingSphere.center.toArray(),
				radius: boundingSphere.radius
			};

		}

		return data;

	},

	clone: function () {

		/*
		 // Handle primitives

		 var parameters = this.parameters;

		 if ( parameters !== undefined ) {

		 var values = [];

		 for ( var key in parameters ) {

		 values.push( parameters[ key ] );

		 }

		 var geometry = Object.create( this.constructor.prototype );
		 this.constructor.apply( geometry, values );
		 return geometry;

		 }

		 return new this.constructor().copy( this );
		 */

		return new BufferGeometry().copy( this );

	},

	copy: function ( source ) {

		var name, i, l;

		// reset

		this.index = null;
		this.attributes = {};
		this.morphAttributes = {};
		this.groups = [];
		this.boundingBox = null;
		this.boundingSphere = null;

		// name

		this.name = source.name;

		// index

		var index = source.index;

		if ( index !== null ) {

			this.setIndex( index.clone() );

		}

		// attributes

		var attributes = source.attributes;

		for ( name in attributes ) {

			var attribute = attributes[ name ];
			this.addAttribute( name, attribute.clone() );

		}

		// morph attributes

		var morphAttributes = source.morphAttributes;

		for ( name in morphAttributes ) {

			var array = [];
			var morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes

			for ( i = 0, l = morphAttribute.length; i < l; i ++ ) {

				array.push( morphAttribute[ i ].clone() );

			}

			this.morphAttributes[ name ] = array;

		}

		// groups

		var groups = source.groups;

		for ( i = 0, l = groups.length; i < l; i ++ ) {

			var group = groups[ i ];
			this.addGroup( group.start, group.count, group.materialIndex );

		}

		// bounding box

		var boundingBox = source.boundingBox;

		if ( boundingBox !== null ) {

			this.boundingBox = boundingBox.clone();

		}

		// bounding sphere

		var boundingSphere = source.boundingSphere;

		if ( boundingSphere !== null ) {

			this.boundingSphere = boundingSphere.clone();

		}

		// draw range

		this.drawRange.start = source.drawRange.start;
		this.drawRange.count = source.drawRange.count;

		return this;

	},

	dispose: function () {

		this.dispatchEvent( { type: 'dispose' } );

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 * @author Mugen87 / https://github.com/Mugen87
 */

// BoxGeometry

function BoxGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {

	Geometry.call( this );

	this.type = 'BoxGeometry';

	this.parameters = {
		width: width,
		height: height,
		depth: depth,
		widthSegments: widthSegments,
		heightSegments: heightSegments,
		depthSegments: depthSegments
	};

	this.fromBufferGeometry( new BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) );
	this.mergeVertices();

}

BoxGeometry.prototype = Object.create( Geometry.prototype );
BoxGeometry.prototype.constructor = BoxGeometry;

// BoxBufferGeometry

function BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {

	BufferGeometry.call( this );

	this.type = 'BoxBufferGeometry';

	this.parameters = {
		width: width,
		height: height,
		depth: depth,
		widthSegments: widthSegments,
		heightSegments: heightSegments,
		depthSegments: depthSegments
	};

	var scope = this;

	width = width || 1;
	height = height || 1;
	depth = depth || 1;

	// segments

	widthSegments = Math.floor( widthSegments ) || 1;
	heightSegments = Math.floor( heightSegments ) || 1;
	depthSegments = Math.floor( depthSegments ) || 1;

	// buffers

	var indices = [];
	var vertices = [];
	var normals = [];
	var uvs = [];

	// helper variables

	var numberOfVertices = 0;
	var groupStart = 0;

	// build each side of the box geometry

	buildPlane( 'z', 'y', 'x', - 1, - 1, depth, height, width, depthSegments, heightSegments, 0 ); // px
	buildPlane( 'z', 'y', 'x', 1, - 1, depth, height, - width, depthSegments, heightSegments, 1 ); // nx
	buildPlane( 'x', 'z', 'y', 1, 1, width, depth, height, widthSegments, depthSegments, 2 ); // py
	buildPlane( 'x', 'z', 'y', 1, - 1, width, depth, - height, widthSegments, depthSegments, 3 ); // ny
	buildPlane( 'x', 'y', 'z', 1, - 1, width, height, depth, widthSegments, heightSegments, 4 ); // pz
	buildPlane( 'x', 'y', 'z', - 1, - 1, width, height, - depth, widthSegments, heightSegments, 5 ); // nz

	// build geometry

	this.setIndex( indices );
	this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
	this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
	this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

	function buildPlane( u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex ) {

		var segmentWidth = width / gridX;
		var segmentHeight = height / gridY;

		var widthHalf = width / 2;
		var heightHalf = height / 2;
		var depthHalf = depth / 2;

		var gridX1 = gridX + 1;
		var gridY1 = gridY + 1;

		var vertexCounter = 0;
		var groupCount = 0;

		var ix, iy;

		var vector = new Vector3();

		// generate vertices, normals and uvs

		for ( iy = 0; iy < gridY1; iy ++ ) {

			var y = iy * segmentHeight - heightHalf;

			for ( ix = 0; ix < gridX1; ix ++ ) {

				var x = ix * segmentWidth - widthHalf;

				// set values to correct vector component

				vector[ u ] = x * udir;
				vector[ v ] = y * vdir;
				vector[ w ] = depthHalf;

				// now apply vector to vertex buffer

				vertices.push( vector.x, vector.y, vector.z );

				// set values to correct vector component

				vector[ u ] = 0;
				vector[ v ] = 0;
				vector[ w ] = depth > 0 ? 1 : - 1;

				// now apply vector to normal buffer

				normals.push( vector.x, vector.y, vector.z );

				// uvs

				uvs.push( ix / gridX );
				uvs.push( 1 - ( iy / gridY ) );

				// counters

				vertexCounter += 1;

			}

		}

		// indices

		// 1. you need three indices to draw a single face
		// 2. a single segment consists of two faces
		// 3. so we need to generate six (2*3) indices per segment

		for ( iy = 0; iy < gridY; iy ++ ) {

			for ( ix = 0; ix < gridX; ix ++ ) {

				var a = numberOfVertices + ix + gridX1 * iy;
				var b = numberOfVertices + ix + gridX1 * ( iy + 1 );
				var c = numberOfVertices + ( ix + 1 ) + gridX1 * ( iy + 1 );
				var d = numberOfVertices + ( ix + 1 ) + gridX1 * iy;

				// faces

				indices.push( a, b, d );
				indices.push( b, c, d );

				// increase counter

				groupCount += 6;

			}

		}

		// add a group to the geometry. this will ensure multi material support

		scope.addGroup( groupStart, groupCount, materialIndex );

		// calculate new start value for groups

		groupStart += groupCount;

		// update total number of vertices

		numberOfVertices += vertexCounter;

	}

}

BoxBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
BoxBufferGeometry.prototype.constructor = BoxBufferGeometry;

/**
 * @author mrdoob / http://mrdoob.com/
 * @author Mugen87 / https://github.com/Mugen87
 */

// PlaneGeometry

function PlaneGeometry( width, height, widthSegments, heightSegments ) {

	Geometry.call( this );

	this.type = 'PlaneGeometry';

	this.parameters = {
		width: width,
		height: height,
		widthSegments: widthSegments,
		heightSegments: heightSegments
	};

	this.fromBufferGeometry( new PlaneBufferGeometry( width, height, widthSegments, heightSegments ) );
	this.mergeVertices();

}

PlaneGeometry.prototype = Object.create( Geometry.prototype );
PlaneGeometry.prototype.constructor = PlaneGeometry;

// PlaneBufferGeometry

function PlaneBufferGeometry( width, height, widthSegments, heightSegments ) {

	BufferGeometry.call( this );

	this.type = 'PlaneBufferGeometry';

	this.parameters = {
		width: width,
		height: height,
		widthSegments: widthSegments,
		heightSegments: heightSegments
	};

	width = width || 1;
	height = height || 1;

	var width_half = width / 2;
	var height_half = height / 2;

	var gridX = Math.floor( widthSegments ) || 1;
	var gridY = Math.floor( heightSegments ) || 1;

	var gridX1 = gridX + 1;
	var gridY1 = gridY + 1;

	var segment_width = width / gridX;
	var segment_height = height / gridY;

	var ix, iy;

	// buffers

	var indices = [];
	var vertices = [];
	var normals = [];
	var uvs = [];

	// generate vertices, normals and uvs

	for ( iy = 0; iy < gridY1; iy ++ ) {

		var y = iy * segment_height - height_half;

		for ( ix = 0; ix < gridX1; ix ++ ) {

			var x = ix * segment_width - width_half;

			vertices.push( x, - y, 0 );

			normals.push( 0, 0, 1 );

			uvs.push( ix / gridX );
			uvs.push( 1 - ( iy / gridY ) );

		}

	}

	// indices

	for ( iy = 0; iy < gridY; iy ++ ) {

		for ( ix = 0; ix < gridX; ix ++ ) {

			var a = ix + gridX1 * iy;
			var b = ix + gridX1 * ( iy + 1 );
			var c = ( ix + 1 ) + gridX1 * ( iy + 1 );
			var d = ( ix + 1 ) + gridX1 * iy;

			// faces

			indices.push( a, b, d );
			indices.push( b, c, d );

		}

	}

	// build geometry

	this.setIndex( indices );
	this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
	this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
	this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

}

PlaneBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
PlaneBufferGeometry.prototype.constructor = PlaneBufferGeometry;

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 *
 * parameters = {
 *  color: <hex>,
 *  opacity: <float>,
 *  map: new THREE.Texture( <Image> ),
 *
 *  lightMap: new THREE.Texture( <Image> ),
 *  lightMapIntensity: <float>
 *
 *  aoMap: new THREE.Texture( <Image> ),
 *  aoMapIntensity: <float>
 *
 *  specularMap: new THREE.Texture( <Image> ),
 *
 *  alphaMap: new THREE.Texture( <Image> ),
 *
 *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),
 *  combine: THREE.Multiply,
 *  reflectivity: <float>,
 *  refractionRatio: <float>,
 *
 *  depthTest: <bool>,
 *  depthWrite: <bool>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>,
 *
 *  skinning: <bool>,
 *  morphTargets: <bool>
 * }
 */

function MeshBasicMaterial( parameters ) {

	Material.call( this );

	this.type = 'MeshBasicMaterial';

	this.color = new Color( 0xffffff ); // emissive

	this.map = null;

	this.lightMap = null;
	this.lightMapIntensity = 1.0;

	this.aoMap = null;
	this.aoMapIntensity = 1.0;

	this.specularMap = null;

	this.alphaMap = null;

	this.envMap = null;
	this.combine = MultiplyOperation;
	this.reflectivity = 1;
	this.refractionRatio = 0.98;

	this.wireframe = false;
	this.wireframeLinewidth = 1;
	this.wireframeLinecap = 'round';
	this.wireframeLinejoin = 'round';

	this.skinning = false;
	this.morphTargets = false;

	this.lights = false;

	this.setValues( parameters );

}

MeshBasicMaterial.prototype = Object.create( Material.prototype );
MeshBasicMaterial.prototype.constructor = MeshBasicMaterial;

MeshBasicMaterial.prototype.isMeshBasicMaterial = true;

MeshBasicMaterial.prototype.copy = function ( source ) {

	Material.prototype.copy.call( this, source );

	this.color.copy( source.color );

	this.map = source.map;

	this.lightMap = source.lightMap;
	this.lightMapIntensity = source.lightMapIntensity;

	this.aoMap = source.aoMap;
	this.aoMapIntensity = source.aoMapIntensity;

	this.specularMap = source.specularMap;

	this.alphaMap = source.alphaMap;

	this.envMap = source.envMap;
	this.combine = source.combine;
	this.reflectivity = source.reflectivity;
	this.refractionRatio = source.refractionRatio;

	this.wireframe = source.wireframe;
	this.wireframeLinewidth = source.wireframeLinewidth;
	this.wireframeLinecap = source.wireframeLinecap;
	this.wireframeLinejoin = source.wireframeLinejoin;

	this.skinning = source.skinning;
	this.morphTargets = source.morphTargets;

	return this;

};

/**
 * @author alteredq / http://alteredqualia.com/
 *
 * parameters = {
 *  defines: { "label" : "value" },
 *  uniforms: { "parameter1": { value: 1.0 }, "parameter2": { value2: 2 } },
 *
 *  fragmentShader: <string>,
 *  vertexShader: <string>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>,
 *
 *  lights: <bool>,
 *
 *  skinning: <bool>,
 *  morphTargets: <bool>,
 *  morphNormals: <bool>
 * }
 */

function ShaderMaterial( parameters ) {

	Material.call( this );

	this.type = 'ShaderMaterial';

	this.defines = {};
	this.uniforms = {};

	this.vertexShader = 'void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}';
	this.fragmentShader = 'void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}';

	this.linewidth = 1;

	this.wireframe = false;
	this.wireframeLinewidth = 1;

	this.fog = false; // set to use scene fog
	this.lights = false; // set to use scene lights
	this.clipping = false; // set to use user-defined clipping planes

	this.skinning = false; // set to use skinning attribute streams
	this.morphTargets = false; // set to use morph targets
	this.morphNormals = false; // set to use morph normals

	this.extensions = {
		derivatives: false, // set to use derivatives
		fragDepth: false, // set to use fragment depth values
		drawBuffers: false, // set to use draw buffers
		shaderTextureLOD: false // set to use shader texture LOD
	};

	// When rendered geometry doesn't include these attributes but the material does,
	// use these default values in WebGL. This avoids errors when buffer data is missing.
	this.defaultAttributeValues = {
		'color': [ 1, 1, 1 ],
		'uv': [ 0, 0 ],
		'uv2': [ 0, 0 ]
	};

	this.index0AttributeName = undefined;

	if ( parameters !== undefined ) {

		if ( parameters.attributes !== undefined ) {

			console.error( 'THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.' );

		}

		this.setValues( parameters );

	}

}

ShaderMaterial.prototype = Object.create( Material.prototype );
ShaderMaterial.prototype.constructor = ShaderMaterial;

ShaderMaterial.prototype.isShaderMaterial = true;

ShaderMaterial.prototype.copy = function ( source ) {

	Material.prototype.copy.call( this, source );

	this.fragmentShader = source.fragmentShader;
	this.vertexShader = source.vertexShader;

	this.uniforms = UniformsUtils.clone( source.uniforms );

	this.defines = source.defines;

	this.wireframe = source.wireframe;
	this.wireframeLinewidth = source.wireframeLinewidth;

	this.lights = source.lights;
	this.clipping = source.clipping;

	this.skinning = source.skinning;

	this.morphTargets = source.morphTargets;
	this.morphNormals = source.morphNormals;

	this.extensions = source.extensions;

	return this;

};

ShaderMaterial.prototype.toJSON = function ( meta ) {

	var data = Material.prototype.toJSON.call( this, meta );

	data.uniforms = this.uniforms;
	data.vertexShader = this.vertexShader;
	data.fragmentShader = this.fragmentShader;

	return data;

};

/**
 * @author bhouston / http://clara.io
 */

function Ray( origin, direction ) {

	this.origin = ( origin !== undefined ) ? origin : new Vector3();
	this.direction = ( direction !== undefined ) ? direction : new Vector3();

}

Object.assign( Ray.prototype, {

	set: function ( origin, direction ) {

		this.origin.copy( origin );
		this.direction.copy( direction );

		return this;

	},

	clone: function () {

		return new this.constructor().copy( this );

	},

	copy: function ( ray ) {

		this.origin.copy( ray.origin );
		this.direction.copy( ray.direction );

		return this;

	},

	at: function ( t, optionalTarget ) {

		var result = optionalTarget || new Vector3();

		return result.copy( this.direction ).multiplyScalar( t ).add( this.origin );

	},

	lookAt: function ( v ) {

		this.direction.copy( v ).sub( this.origin ).normalize();

		return this;

	},

	recast: function () {

		var v1 = new Vector3();

		return function recast( t ) {

			this.origin.copy( this.at( t, v1 ) );

			return this;

		};

	}(),

	closestPointToPoint: function ( point, optionalTarget ) {

		var result = optionalTarget || new Vector3();
		result.subVectors( point, this.origin );
		var directionDistance = result.dot( this.direction );

		if ( directionDistance < 0 ) {

			return result.copy( this.origin );

		}

		return result.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );

	},

	distanceToPoint: function ( point ) {

		return Math.sqrt( this.distanceSqToPoint( point ) );

	},

	distanceSqToPoint: function () {

		var v1 = new Vector3();

		return function distanceSqToPoint( point ) {

			var directionDistance = v1.subVectors( point, this.origin ).dot( this.direction );

			// point behind the ray

			if ( directionDistance < 0 ) {

				return this.origin.distanceToSquared( point );

			}

			v1.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );

			return v1.distanceToSquared( point );

		};

	}(),

	distanceSqToSegment: function () {

		var segCenter = new Vector3();
		var segDir = new Vector3();
		var diff = new Vector3();

		return function distanceSqToSegment( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {

			// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteDistRaySegment.h
			// It returns the min distance between the ray and the segment
			// defined by v0 and v1
			// It can also set two optional targets :
			// - The closest point on the ray
			// - The closest point on the segment

			segCenter.copy( v0 ).add( v1 ).multiplyScalar( 0.5 );
			segDir.copy( v1 ).sub( v0 ).normalize();
			diff.copy( this.origin ).sub( segCenter );

			var segExtent = v0.distanceTo( v1 ) * 0.5;
			var a01 = - this.direction.dot( segDir );
			var b0 = diff.dot( this.direction );
			var b1 = - diff.dot( segDir );
			var c = diff.lengthSq();
			var det = Math.abs( 1 - a01 * a01 );
			var s0, s1, sqrDist, extDet;

			if ( det > 0 ) {

				// The ray and segment are not parallel.

				s0 = a01 * b1 - b0;
				s1 = a01 * b0 - b1;
				extDet = segExtent * det;

				if ( s0 >= 0 ) {

					if ( s1 >= - extDet ) {

						if ( s1 <= extDet ) {

							// region 0
							// Minimum at interior points of ray and segment.

							var invDet = 1 / det;
							s0 *= invDet;
							s1 *= invDet;
							sqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;

						} else {

							// region 1

							s1 = segExtent;
							s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
							sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

						}

					} else {

						// region 5

						s1 = - segExtent;
						s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
						sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

					}

				} else {

					if ( s1 <= - extDet ) {

						// region 4

						s0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );
						s1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );
						sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

					} else if ( s1 <= extDet ) {

						// region 3

						s0 = 0;
						s1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );
						sqrDist = s1 * ( s1 + 2 * b1 ) + c;

					} else {

						// region 2

						s0 = Math.max( 0, - ( a01 * segExtent + b0 ) );
						s1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );
						sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

					}

				}

			} else {

				// Ray and segment are parallel.

				s1 = ( a01 > 0 ) ? - segExtent : segExtent;
				s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
				sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

			}

			if ( optionalPointOnRay ) {

				optionalPointOnRay.copy( this.direction ).multiplyScalar( s0 ).add( this.origin );

			}

			if ( optionalPointOnSegment ) {

				optionalPointOnSegment.copy( segDir ).multiplyScalar( s1 ).add( segCenter );

			}

			return sqrDist;

		};

	}(),

	intersectSphere: function () {

		var v1 = new Vector3();

		return function intersectSphere( sphere, optionalTarget ) {

			v1.subVectors( sphere.center, this.origin );
			var tca = v1.dot( this.direction );
			var d2 = v1.dot( v1 ) - tca * tca;
			var radius2 = sphere.radius * sphere.radius;

			if ( d2 > radius2 ) return null;

			var thc = Math.sqrt( radius2 - d2 );

			// t0 = first intersect point - entrance on front of sphere
			var t0 = tca - thc;

			// t1 = second intersect point - exit point on back of sphere
			var t1 = tca + thc;

			// test to see if both t0 and t1 are behind the ray - if so, return null
			if ( t0 < 0 && t1 < 0 ) return null;

			// test to see if t0 is behind the ray:
			// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,
			// in order to always return an intersect point that is in front of the ray.
			if ( t0 < 0 ) return this.at( t1, optionalTarget );

			// else t0 is in front of the ray, so return the first collision point scaled by t0
			return this.at( t0, optionalTarget );

		};

	}(),

	intersectsSphere: function ( sphere ) {

		return this.distanceToPoint( sphere.center ) <= sphere.radius;

	},

	distanceToPlane: function ( plane ) {

		var denominator = plane.normal.dot( this.direction );

		if ( denominator === 0 ) {

			// line is coplanar, return origin
			if ( plane.distanceToPoint( this.origin ) === 0 ) {

				return 0;

			}

			// Null is preferable to undefined since undefined means.... it is undefined

			return null;

		}

		var t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;

		// Return if the ray never intersects the plane

		return t >= 0 ? t : null;

	},

	intersectPlane: function ( plane, optionalTarget ) {

		var t = this.distanceToPlane( plane );

		if ( t === null ) {

			return null;

		}

		return this.at( t, optionalTarget );

	},

	intersectsPlane: function ( plane ) {

		// check if the ray lies on the plane first

		var distToPoint = plane.distanceToPoint( this.origin );

		if ( distToPoint === 0 ) {

			return true;

		}

		var denominator = plane.normal.dot( this.direction );

		if ( denominator * distToPoint < 0 ) {

			return true;

		}

		// ray origin is behind the plane (and is pointing behind it)

		return false;

	},

	intersectBox: function ( box, optionalTarget ) {

		var tmin, tmax, tymin, tymax, tzmin, tzmax;

		var invdirx = 1 / this.direction.x,
			invdiry = 1 / this.direction.y,
			invdirz = 1 / this.direction.z;

		var origin = this.origin;

		if ( invdirx >= 0 ) {

			tmin = ( box.min.x - origin.x ) * invdirx;
			tmax = ( box.max.x - origin.x ) * invdirx;

		} else {

			tmin = ( box.max.x - origin.x ) * invdirx;
			tmax = ( box.min.x - origin.x ) * invdirx;

		}

		if ( invdiry >= 0 ) {

			tymin = ( box.min.y - origin.y ) * invdiry;
			tymax = ( box.max.y - origin.y ) * invdiry;

		} else {

			tymin = ( box.max.y - origin.y ) * invdiry;
			tymax = ( box.min.y - origin.y ) * invdiry;

		}

		if ( ( tmin > tymax ) || ( tymin > tmax ) ) return null;

		// These lines also handle the case where tmin or tmax is NaN
		// (result of 0 * Infinity). x !== x returns true if x is NaN

		if ( tymin > tmin || tmin !== tmin ) tmin = tymin;

		if ( tymax < tmax || tmax !== tmax ) tmax = tymax;

		if ( invdirz >= 0 ) {

			tzmin = ( box.min.z - origin.z ) * invdirz;
			tzmax = ( box.max.z - origin.z ) * invdirz;

		} else {

			tzmin = ( box.max.z - origin.z ) * invdirz;
			tzmax = ( box.min.z - origin.z ) * invdirz;

		}

		if ( ( tmin > tzmax ) || ( tzmin > tmax ) ) return null;

		if ( tzmin > tmin || tmin !== tmin ) tmin = tzmin;

		if ( tzmax < tmax || tmax !== tmax ) tmax = tzmax;

		//return point closest to the ray (positive side)

		if ( tmax < 0 ) return null;

		return this.at( tmin >= 0 ? tmin : tmax, optionalTarget );

	},

	intersectsBox: ( function () {

		var v = new Vector3();

		return function intersectsBox( box ) {

			return this.intersectBox( box, v ) !== null;

		};

	} )(),

	intersectTriangle: function () {

		// Compute the offset origin, edges, and normal.
		var diff = new Vector3();
		var edge1 = new Vector3();
		var edge2 = new Vector3();
		var normal = new Vector3();

		return function intersectTriangle( a, b, c, backfaceCulling, optionalTarget ) {

			// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h

			edge1.subVectors( b, a );
			edge2.subVectors( c, a );
			normal.crossVectors( edge1, edge2 );

			// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,
			// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by
			//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))
			//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))
			//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)
			var DdN = this.direction.dot( normal );
			var sign;

			if ( DdN > 0 ) {

				if ( backfaceCulling ) return null;
				sign = 1;

			} else if ( DdN < 0 ) {

				sign = - 1;
				DdN = - DdN;

			} else {

				return null;

			}

			diff.subVectors( this.origin, a );
			var DdQxE2 = sign * this.direction.dot( edge2.crossVectors( diff, edge2 ) );

			// b1 < 0, no intersection
			if ( DdQxE2 < 0 ) {

				return null;

			}

			var DdE1xQ = sign * this.direction.dot( edge1.cross( diff ) );

			// b2 < 0, no intersection
			if ( DdE1xQ < 0 ) {

				return null;

			}

			// b1+b2 > 1, no intersection
			if ( DdQxE2 + DdE1xQ > DdN ) {

				return null;

			}

			// Line intersects triangle, check if ray does.
			var QdN = - sign * diff.dot( normal );

			// t < 0, no intersection
			if ( QdN < 0 ) {

				return null;

			}

			// Ray intersects triangle.
			return this.at( QdN / DdN, optionalTarget );

		};

	}(),

	applyMatrix4: function ( matrix4 ) {

		this.origin.applyMatrix4( matrix4 );
		this.direction.transformDirection( matrix4 );

		return this;

	},

	equals: function ( ray ) {

		return ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );

	}

} );

/**
 * @author bhouston / http://clara.io
 */

function Line3( start, end ) {

	this.start = ( start !== undefined ) ? start : new Vector3();
	this.end = ( end !== undefined ) ? end : new Vector3();

}

Object.assign( Line3.prototype, {

	set: function ( start, end ) {

		this.start.copy( start );
		this.end.copy( end );

		return this;

	},

	clone: function () {

		return new this.constructor().copy( this );

	},

	copy: function ( line ) {

		this.start.copy( line.start );
		this.end.copy( line.end );

		return this;

	},

	getCenter: function ( optionalTarget ) {

		var result = optionalTarget || new Vector3();
		return result.addVectors( this.start, this.end ).multiplyScalar( 0.5 );

	},

	delta: function ( optionalTarget ) {

		var result = optionalTarget || new Vector3();
		return result.subVectors( this.end, this.start );

	},

	distanceSq: function () {

		return this.start.distanceToSquared( this.end );

	},

	distance: function () {

		return this.start.distanceTo( this.end );

	},

	at: function ( t, optionalTarget ) {

		var result = optionalTarget || new Vector3();

		return this.delta( result ).multiplyScalar( t ).add( this.start );

	},

	closestPointToPointParameter: function () {

		var startP = new Vector3();
		var startEnd = new Vector3();

		return function closestPointToPointParameter( point, clampToLine ) {

			startP.subVectors( point, this.start );
			startEnd.subVectors( this.end, this.start );

			var startEnd2 = startEnd.dot( startEnd );
			var startEnd_startP = startEnd.dot( startP );

			var t = startEnd_startP / startEnd2;

			if ( clampToLine ) {

				t = _Math.clamp( t, 0, 1 );

			}

			return t;

		};

	}(),

	closestPointToPoint: function ( point, clampToLine, optionalTarget ) {

		var t = this.closestPointToPointParameter( point, clampToLine );

		var result = optionalTarget || new Vector3();

		return this.delta( result ).multiplyScalar( t ).add( this.start );

	},

	applyMatrix4: function ( matrix ) {

		this.start.applyMatrix4( matrix );
		this.end.applyMatrix4( matrix );

		return this;

	},

	equals: function ( line ) {

		return line.start.equals( this.start ) && line.end.equals( this.end );

	}

} );

/**
 * @author bhouston / http://clara.io
 * @author mrdoob / http://mrdoob.com/
 */

function Triangle( a, b, c ) {

	this.a = ( a !== undefined ) ? a : new Vector3();
	this.b = ( b !== undefined ) ? b : new Vector3();
	this.c = ( c !== undefined ) ? c : new Vector3();

}

Object.assign( Triangle, {

	normal: function () {

		var v0 = new Vector3();

		return function normal( a, b, c, optionalTarget ) {

			var result = optionalTarget || new Vector3();

			result.subVectors( c, b );
			v0.subVectors( a, b );
			result.cross( v0 );

			var resultLengthSq = result.lengthSq();
			if ( resultLengthSq > 0 ) {

				return result.multiplyScalar( 1 / Math.sqrt( resultLengthSq ) );

			}

			return result.set( 0, 0, 0 );

		};

	}(),

	// static/instance method to calculate barycentric coordinates
	// based on: http://www.blackpawn.com/texts/pointinpoly/default.html
	barycoordFromPoint: function () {

		var v0 = new Vector3();
		var v1 = new Vector3();
		var v2 = new Vector3();

		return function barycoordFromPoint( point, a, b, c, optionalTarget ) {

			v0.subVectors( c, a );
			v1.subVectors( b, a );
			v2.subVectors( point, a );

			var dot00 = v0.dot( v0 );
			var dot01 = v0.dot( v1 );
			var dot02 = v0.dot( v2 );
			var dot11 = v1.dot( v1 );
			var dot12 = v1.dot( v2 );

			var denom = ( dot00 * dot11 - dot01 * dot01 );

			var result = optionalTarget || new Vector3();

			// collinear or singular triangle
			if ( denom === 0 ) {

				// arbitrary location outside of triangle?
				// not sure if this is the best idea, maybe should be returning undefined
				return result.set( - 2, - 1, - 1 );

			}

			var invDenom = 1 / denom;
			var u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;
			var v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;

			// barycentric coordinates must always sum to 1
			return result.set( 1 - u - v, v, u );

		};

	}(),

	containsPoint: function () {

		var v1 = new Vector3();

		return function containsPoint( point, a, b, c ) {

			var result = Triangle.barycoordFromPoint( point, a, b, c, v1 );

			return ( result.x >= 0 ) && ( result.y >= 0 ) && ( ( result.x + result.y ) <= 1 );

		};

	}()

} );

Object.assign( Triangle.prototype, {

	set: function ( a, b, c ) {

		this.a.copy( a );
		this.b.copy( b );
		this.c.copy( c );

		return this;

	},

	setFromPointsAndIndices: function ( points, i0, i1, i2 ) {

		this.a.copy( points[ i0 ] );
		this.b.copy( points[ i1 ] );
		this.c.copy( points[ i2 ] );

		return this;

	},

	clone: function () {

		return new this.constructor().copy( this );

	},

	copy: function ( triangle ) {

		this.a.copy( triangle.a );
		this.b.copy( triangle.b );
		this.c.copy( triangle.c );

		return this;

	},

	area: function () {

		var v0 = new Vector3();
		var v1 = new Vector3();

		return function area() {

			v0.subVectors( this.c, this.b );
			v1.subVectors( this.a, this.b );

			return v0.cross( v1 ).length() * 0.5;

		};

	}(),

	midpoint: function ( optionalTarget ) {

		var result = optionalTarget || new Vector3();
		return result.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );

	},

	normal: function ( optionalTarget ) {

		return Triangle.normal( this.a, this.b, this.c, optionalTarget );

	},

	plane: function ( optionalTarget ) {

		var result = optionalTarget || new Plane();

		return result.setFromCoplanarPoints( this.a, this.b, this.c );

	},

	barycoordFromPoint: function ( point, optionalTarget ) {

		return Triangle.barycoordFromPoint( point, this.a, this.b, this.c, optionalTarget );

	},

	containsPoint: function ( point ) {

		return Triangle.containsPoint( point, this.a, this.b, this.c );

	},

	closestPointToPoint: function () {

		var plane = new Plane();
		var edgeList = [ new Line3(), new Line3(), new Line3() ];
		var projectedPoint = new Vector3();
		var closestPoint = new Vector3();

		return function closestPointToPoint( point, optionalTarget ) {

			var result = optionalTarget || new Vector3();
			var minDistance = Infinity;

			// project the point onto the plane of the triangle

			plane.setFromCoplanarPoints( this.a, this.b, this.c );
			plane.projectPoint( point, projectedPoint );

			// check if the projection lies within the triangle

			if ( this.containsPoint( projectedPoint ) === true ) {

				// if so, this is the closest point

				result.copy( projectedPoint );

			} else {

				// if not, the point falls outside the triangle. the result is the closest point to the triangle's edges or vertices

				edgeList[ 0 ].set( this.a, this.b );
				edgeList[ 1 ].set( this.b, this.c );
				edgeList[ 2 ].set( this.c, this.a );

				for ( var i = 0; i < edgeList.length; i ++ ) {

					edgeList[ i ].closestPointToPoint( projectedPoint, true, closestPoint );

					var distance = projectedPoint.distanceToSquared( closestPoint );

					if ( distance < minDistance ) {

						minDistance = distance;

						result.copy( closestPoint );

					}

				}

			}

			return result;

		};

	}(),

	equals: function ( triangle ) {

		return triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 * @author mikael emtinger / http://gomo.se/
 * @author jonobr1 / http://jonobr1.com/
 */

function Mesh( geometry, material ) {

	Object3D.call( this );

	this.type = 'Mesh';

	this.geometry = geometry !== undefined ? geometry : new BufferGeometry();
	this.material = material !== undefined ? material : new MeshBasicMaterial( { color: Math.random() * 0xffffff } );

	this.drawMode = TrianglesDrawMode;

	this.updateMorphTargets();

}

Mesh.prototype = Object.assign( Object.create( Object3D.prototype ), {

	constructor: Mesh,

	isMesh: true,

	setDrawMode: function ( value ) {

		this.drawMode = value;

	},

	copy: function ( source ) {

		Object3D.prototype.copy.call( this, source );

		this.drawMode = source.drawMode;

		if ( source.morphTargetInfluences !== undefined ) {

			this.morphTargetInfluences = source.morphTargetInfluences.slice();

		}

		if ( source.morphTargetDictionary !== undefined ) {

			this.morphTargetDictionary = Object.assign( {}, source.morphTargetDictionary );

		}

		return this;

	},

	updateMorphTargets: function () {

		var geometry = this.geometry;
		var m, ml, name;

		if ( geometry.isBufferGeometry ) {

			var morphAttributes = geometry.morphAttributes;
			var keys = Object.keys( morphAttributes );

			if ( keys.length > 0 ) {

				var morphAttribute = morphAttributes[ keys[ 0 ] ];

				if ( morphAttribute !== undefined ) {

					this.morphTargetInfluences = [];
					this.morphTargetDictionary = {};

					for ( m = 0, ml = morphAttribute.length; m < ml; m ++ ) {

						name = morphAttribute[ m ].name || String( m );

						this.morphTargetInfluences.push( 0 );
						this.morphTargetDictionary[ name ] = m;

					}

				}

			}

		} else {

			var morphTargets = geometry.morphTargets;

			if ( morphTargets !== undefined && morphTargets.length > 0 ) {

				this.morphTargetInfluences = [];
				this.morphTargetDictionary = {};

				for ( m = 0, ml = morphTargets.length; m < ml; m ++ ) {

					name = morphTargets[ m ].name || String( m );

					this.morphTargetInfluences.push( 0 );
					this.morphTargetDictionary[ name ] = m;

				}

			}

		}

	},

	raycast: ( function () {

		var inverseMatrix = new Matrix4();
		var ray = new Ray();
		var sphere = new Sphere();

		var vA = new Vector3();
		var vB = new Vector3();
		var vC = new Vector3();

		var tempA = new Vector3();
		var tempB = new Vector3();
		var tempC = new Vector3();

		var uvA = new Vector2();
		var uvB = new Vector2();
		var uvC = new Vector2();

		var barycoord = new Vector3();

		var intersectionPoint = new Vector3();
		var intersectionPointWorld = new Vector3();

		function uvIntersection( point, p1, p2, p3, uv1, uv2, uv3 ) {

			Triangle.barycoordFromPoint( point, p1, p2, p3, barycoord );

			uv1.multiplyScalar( barycoord.x );
			uv2.multiplyScalar( barycoord.y );
			uv3.multiplyScalar( barycoord.z );

			uv1.add( uv2 ).add( uv3 );

			return uv1.clone();

		}

		function checkIntersection( object, material, raycaster, ray, pA, pB, pC, point ) {

			var intersect;

			if ( material.side === BackSide ) {

				intersect = ray.intersectTriangle( pC, pB, pA, true, point );

			} else {

				intersect = ray.intersectTriangle( pA, pB, pC, material.side !== DoubleSide, point );

			}

			if ( intersect === null ) return null;

			intersectionPointWorld.copy( point );
			intersectionPointWorld.applyMatrix4( object.matrixWorld );

			var distance = raycaster.ray.origin.distanceTo( intersectionPointWorld );

			if ( distance < raycaster.near || distance > raycaster.far ) return null;

			return {
				distance: distance,
				point: intersectionPointWorld.clone(),
				object: object
			};

		}

		function checkBufferGeometryIntersection( object, raycaster, ray, position, uv, a, b, c ) {

			vA.fromBufferAttribute( position, a );
			vB.fromBufferAttribute( position, b );
			vC.fromBufferAttribute( position, c );

			var intersection = checkIntersection( object, object.material, raycaster, ray, vA, vB, vC, intersectionPoint );

			if ( intersection ) {

				if ( uv ) {

					uvA.fromBufferAttribute( uv, a );
					uvB.fromBufferAttribute( uv, b );
					uvC.fromBufferAttribute( uv, c );

					intersection.uv = uvIntersection( intersectionPoint, vA, vB, vC, uvA, uvB, uvC );

				}

				intersection.face = new Face3( a, b, c, Triangle.normal( vA, vB, vC ) );
				intersection.faceIndex = a;

			}

			return intersection;

		}

		return function raycast( raycaster, intersects ) {

			var geometry = this.geometry;
			var material = this.material;
			var matrixWorld = this.matrixWorld;

			if ( material === undefined ) return;

			// Checking boundingSphere distance to ray

			if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();

			sphere.copy( geometry.boundingSphere );
			sphere.applyMatrix4( matrixWorld );

			if ( raycaster.ray.intersectsSphere( sphere ) === false ) return;

			//

			inverseMatrix.getInverse( matrixWorld );
			ray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );

			// Check boundingBox before continuing

			if ( geometry.boundingBox !== null ) {

				if ( ray.intersectsBox( geometry.boundingBox ) === false ) return;

			}

			var intersection;

			if ( geometry.isBufferGeometry ) {

				var a, b, c;
				var index = geometry.index;
				var position = geometry.attributes.position;
				var uv = geometry.attributes.uv;
				var i, l;

				if ( index !== null ) {

					// indexed buffer geometry

					for ( i = 0, l = index.count; i < l; i += 3 ) {

						a = index.getX( i );
						b = index.getX( i + 1 );
						c = index.getX( i + 2 );

						intersection = checkBufferGeometryIntersection( this, raycaster, ray, position, uv, a, b, c );

						if ( intersection ) {

							intersection.faceIndex = Math.floor( i / 3 ); // triangle number in indices buffer semantics
							intersects.push( intersection );

						}

					}

				} else if ( position !== undefined ) {

					// non-indexed buffer geometry

					for ( i = 0, l = position.count; i < l; i += 3 ) {

						a = i;
						b = i + 1;
						c = i + 2;

						intersection = checkBufferGeometryIntersection( this, raycaster, ray, position, uv, a, b, c );

						if ( intersection ) {

							intersection.index = a; // triangle number in positions buffer semantics
							intersects.push( intersection );

						}

					}

				}

			} else if ( geometry.isGeometry ) {

				var fvA, fvB, fvC;
				var isMultiMaterial = Array.isArray( material );

				var vertices = geometry.vertices;
				var faces = geometry.faces;
				var uvs;

				var faceVertexUvs = geometry.faceVertexUvs[ 0 ];
				if ( faceVertexUvs.length > 0 ) uvs = faceVertexUvs;

				for ( var f = 0, fl = faces.length; f < fl; f ++ ) {

					var face = faces[ f ];
					var faceMaterial = isMultiMaterial ? material[ face.materialIndex ] : material;

					if ( faceMaterial === undefined ) continue;

					fvA = vertices[ face.a ];
					fvB = vertices[ face.b ];
					fvC = vertices[ face.c ];

					if ( faceMaterial.morphTargets === true ) {

						var morphTargets = geometry.morphTargets;
						var morphInfluences = this.morphTargetInfluences;

						vA.set( 0, 0, 0 );
						vB.set( 0, 0, 0 );
						vC.set( 0, 0, 0 );

						for ( var t = 0, tl = morphTargets.length; t < tl; t ++ ) {

							var influence = morphInfluences[ t ];

							if ( influence === 0 ) continue;

							var targets = morphTargets[ t ].vertices;

							vA.addScaledVector( tempA.subVectors( targets[ face.a ], fvA ), influence );
							vB.addScaledVector( tempB.subVectors( targets[ face.b ], fvB ), influence );
							vC.addScaledVector( tempC.subVectors( targets[ face.c ], fvC ), influence );

						}

						vA.add( fvA );
						vB.add( fvB );
						vC.add( fvC );

						fvA = vA;
						fvB = vB;
						fvC = vC;

					}

					intersection = checkIntersection( this, faceMaterial, raycaster, ray, fvA, fvB, fvC, intersectionPoint );

					if ( intersection ) {

						if ( uvs && uvs[ f ] ) {

							var uvs_f = uvs[ f ];
							uvA.copy( uvs_f[ 0 ] );
							uvB.copy( uvs_f[ 1 ] );
							uvC.copy( uvs_f[ 2 ] );

							intersection.uv = uvIntersection( intersectionPoint, fvA, fvB, fvC, uvA, uvB, uvC );

						}

						intersection.face = face;
						intersection.faceIndex = f;
						intersects.push( intersection );

					}

				}

			}

		};

	}() ),

	clone: function () {

		return new this.constructor( this.geometry, this.material ).copy( this );

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 */

function WebGLBackground( renderer, state, geometries, premultipliedAlpha ) {

	var clearColor = new Color( 0x000000 );
	var clearAlpha = 0;

	var planeCamera, planeMesh;
	var boxMesh;

	function render( renderList, scene, camera, forceClear ) {

		var background = scene.background;

		if ( background === null ) {

			setClear( clearColor, clearAlpha );

		} else if ( background && background.isColor ) {

			setClear( background, 1 );
			forceClear = true;

		}

		if ( renderer.autoClear || forceClear ) {

			renderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );

		}

		if ( background && background.isCubeTexture ) {

			if ( boxMesh === undefined ) {

				boxMesh = new Mesh(
					new BoxBufferGeometry( 1, 1, 1 ),
					new ShaderMaterial( {
						uniforms: ShaderLib.cube.uniforms,
						vertexShader: ShaderLib.cube.vertexShader,
						fragmentShader: ShaderLib.cube.fragmentShader,
						side: BackSide,
						depthTest: true,
						depthWrite: false,
						fog: false
					} )
				);

				boxMesh.geometry.removeAttribute( 'normal' );
				boxMesh.geometry.removeAttribute( 'uv' );

				boxMesh.onBeforeRender = function ( renderer, scene, camera ) {

					this.matrixWorld.copyPosition( camera.matrixWorld );

				};

				geometries.update( boxMesh.geometry );

			}

			boxMesh.material.uniforms.tCube.value = background;

			renderList.push( boxMesh, boxMesh.geometry, boxMesh.material, 0, null );

		} else if ( background && background.isTexture ) {

			if ( planeCamera === undefined ) {

				planeCamera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );

				planeMesh = new Mesh(
					new PlaneBufferGeometry( 2, 2 ),
					new MeshBasicMaterial( { depthTest: false, depthWrite: false, fog: false } )
				);

				geometries.update( planeMesh.geometry );

			}

			planeMesh.material.map = background;

			// TODO Push this to renderList

			renderer.renderBufferDirect( planeCamera, null, planeMesh.geometry, planeMesh.material, planeMesh, null );

		}

	}

	function setClear( color, alpha ) {

		state.buffers.color.setClear( color.r, color.g, color.b, alpha, premultipliedAlpha );

	}

	return {

		getClearColor: function () {

			return clearColor;

		},
		setClearColor: function ( color, alpha ) {

			clearColor.set( color );
			clearAlpha = alpha !== undefined ? alpha : 1;
			setClear( clearColor, clearAlpha );

		},
		getClearAlpha: function () {

			return clearAlpha;

		},
		setClearAlpha: function ( alpha ) {

			clearAlpha = alpha;
			setClear( clearColor, clearAlpha );

		},
		render: render

	};

}

/**
 * @author mrdoob / http://mrdoob.com/
 */

function painterSortStable( a, b ) {

	if ( a.renderOrder !== b.renderOrder ) {

		return a.renderOrder - b.renderOrder;

	} else if ( a.program && b.program && a.program !== b.program ) {

		return a.program.id - b.program.id;

	} else if ( a.material.id !== b.material.id ) {

		return a.material.id - b.material.id;

	} else if ( a.z !== b.z ) {

		return a.z - b.z;

	} else {

		return a.id - b.id;

	}

}

function reversePainterSortStable( a, b ) {

	if ( a.renderOrder !== b.renderOrder ) {

		return a.renderOrder - b.renderOrder;

	} if ( a.z !== b.z ) {

		return b.z - a.z;

	} else {

		return a.id - b.id;

	}

}

function WebGLRenderList() {

	var renderItems = [];
	var renderItemsIndex = 0;

	var opaque = [];
	var transparent = [];

	function init() {

		renderItemsIndex = 0;

		opaque.length = 0;
		transparent.length = 0;

	}

	function push( object, geometry, material, z, group ) {

		var renderItem = renderItems[ renderItemsIndex ];

		if ( renderItem === undefined ) {

			renderItem = {
				id: object.id,
				object: object,
				geometry: geometry,
				material: material,
				program: material.program,
				renderOrder: object.renderOrder,
				z: z,
				group: group
			};

			renderItems[ renderItemsIndex ] = renderItem;

		} else {

			renderItem.id = object.id;
			renderItem.object = object;
			renderItem.geometry = geometry;
			renderItem.material = material;
			renderItem.program = material.program;
			renderItem.renderOrder = object.renderOrder;
			renderItem.z = z;
			renderItem.group = group;

		}

		( material.transparent === true ? transparent : opaque ).push( renderItem );

		renderItemsIndex ++;

	}

	function sort() {

		if ( opaque.length > 1 ) opaque.sort( painterSortStable );
		if ( transparent.length > 1 ) transparent.sort( reversePainterSortStable );

	}

	return {
		opaque: opaque,
		transparent: transparent,

		init: init,
		push: push,

		sort: sort
	};

}

function WebGLRenderLists() {

	var lists = {};

	function get( scene, camera ) {

		var hash = scene.id + ',' + camera.id;
		var list = lists[ hash ];

		if ( list === undefined ) {

			// console.log( 'THREE.WebGLRenderLists:', hash );

			list = new WebGLRenderList();
			lists[ hash ] = list;

		}

		return list;

	}

	function dispose() {

		lists = {};

	}

	return {
		get: get,
		dispose: dispose
	};

}

/**
 * @author mrdoob / http://mrdoob.com/
 */

function absNumericalSort( a, b ) {

	return Math.abs( b[ 1 ] ) - Math.abs( a[ 1 ] );

}

function WebGLMorphtargets( gl ) {

	var influencesList = {};
	var morphInfluences = new Float32Array( 8 );

	function update( object, geometry, material, program ) {

		var objectInfluences = object.morphTargetInfluences;

		var length = objectInfluences.length;

		var influences = influencesList[ geometry.id ];

		if ( influences === undefined ) {

			// initialise list

			influences = [];

			for ( var i = 0; i < length; i ++ ) {

				influences[ i ] = [ i, 0 ];

			}

			influencesList[ geometry.id ] = influences;

		}

		var morphTargets = material.morphTargets && geometry.morphAttributes.position;
		var morphNormals = material.morphNormals && geometry.morphAttributes.normal;

		// Remove current morphAttributes

		for ( var i = 0; i < length; i ++ ) {

			var influence = influences[ i ];

			if ( influence[ 1 ] !== 0 ) {

				if ( morphTargets ) geometry.removeAttribute( 'morphTarget' + i );
				if ( morphNormals ) geometry.removeAttribute( 'morphNormal' + i );

			}

		}

		// Collect influences

		for ( var i = 0; i < length; i ++ ) {

			var influence = influences[ i ];

			influence[ 0 ] = i;
			influence[ 1 ] = objectInfluences[ i ];

		}

		influences.sort( absNumericalSort );

		// Add morphAttributes

		for ( var i = 0; i < 8; i ++ ) {

			var influence = influences[ i ];

			if ( influence ) {

				var index = influence[ 0 ];
				var value = influence[ 1 ];

				if ( value ) {

					if ( morphTargets ) geometry.addAttribute( 'morphTarget' + i, morphTargets[ index ] );
					if ( morphNormals ) geometry.addAttribute( 'morphNormal' + i, morphNormals[ index ] );

					morphInfluences[ i ] = value;
					continue;

				}

			}

			morphInfluences[ i ] = 0;

		}

		program.getUniforms().setValue( gl, 'morphTargetInfluences', morphInfluences );

	}

	return {

		update: update

	};

}

/**
 * @author mrdoob / http://mrdoob.com/
 */

function WebGLIndexedBufferRenderer( gl, extensions, infoRender ) {

	var mode;

	function setMode( value ) {

		mode = value;

	}

	var type, bytesPerElement;

	function setIndex( value ) {

		type = value.type;
		bytesPerElement = value.bytesPerElement;

	}

	function render( start, count ) {

		gl.drawElements( mode, count, type, start * bytesPerElement );

		infoRender.calls ++;
		infoRender.vertices += count;

		if ( mode === gl.TRIANGLES ) infoRender.faces += count / 3;
		else if ( mode === gl.POINTS ) infoRender.points += count;

	}

	function renderInstances( geometry, start, count ) {

		var extension = extensions.get( 'ANGLE_instanced_arrays' );

		if ( extension === null ) {

			console.error( 'THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );
			return;

		}

		extension.drawElementsInstancedANGLE( mode, count, type, start * bytesPerElement, geometry.maxInstancedCount );

		infoRender.calls ++;
		infoRender.vertices += count * geometry.maxInstancedCount;

		if ( mode === gl.TRIANGLES ) infoRender.faces += geometry.maxInstancedCount * count / 3;
		else if ( mode === gl.POINTS ) infoRender.points += geometry.maxInstancedCount * count;

	}

	//

	this.setMode = setMode;
	this.setIndex = setIndex;
	this.render = render;
	this.renderInstances = renderInstances;

}

/**
 * @author mrdoob / http://mrdoob.com/
 */

function WebGLBufferRenderer( gl, extensions, infoRender ) {

	var mode;

	function setMode( value ) {

		mode = value;

	}

	function render( start, count ) {

		gl.drawArrays( mode, start, count );

		infoRender.calls ++;
		infoRender.vertices += count;

		if ( mode === gl.TRIANGLES ) infoRender.faces += count / 3;
		else if ( mode === gl.POINTS ) infoRender.points += count;

	}

	function renderInstances( geometry, start, count ) {

		var extension = extensions.get( 'ANGLE_instanced_arrays' );

		if ( extension === null ) {

			console.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );
			return;

		}

		var position = geometry.attributes.position;

		if ( position.isInterleavedBufferAttribute ) {

			count = position.data.count;

			extension.drawArraysInstancedANGLE( mode, 0, count, geometry.maxInstancedCount );

		} else {

			extension.drawArraysInstancedANGLE( mode, start, count, geometry.maxInstancedCount );

		}

		infoRender.calls ++;
		infoRender.vertices += count * geometry.maxInstancedCount;

		if ( mode === gl.TRIANGLES ) infoRender.faces += geometry.maxInstancedCount * count / 3;
		else if ( mode === gl.POINTS ) infoRender.points += geometry.maxInstancedCount * count;

	}

	//

	this.setMode = setMode;
	this.render = render;
	this.renderInstances = renderInstances;

}

/**
 * @author mrdoob / http://mrdoob.com/
 */

function WebGLGeometries( gl, attributes, infoMemory ) {

	var geometries = {};
	var wireframeAttributes = {};

	function onGeometryDispose( event ) {

		var geometry = event.target;
		var buffergeometry = geometries[ geometry.id ];

		if ( buffergeometry.index !== null ) {

			attributes.remove( buffergeometry.index );

		}

		for ( var name in buffergeometry.attributes ) {

			attributes.remove( buffergeometry.attributes[ name ] );

		}

		geometry.removeEventListener( 'dispose', onGeometryDispose );

		delete geometries[ geometry.id ];

		// TODO Remove duplicate code

		var attribute = wireframeAttributes[ geometry.id ];

		if ( attribute ) {

			attributes.remove( attribute );
			delete wireframeAttributes[ geometry.id ];

		}

		attribute = wireframeAttributes[ buffergeometry.id ];

		if ( attribute ) {

			attributes.remove( attribute );
			delete wireframeAttributes[ buffergeometry.id ];

		}

		//

		infoMemory.geometries --;

	}

	function get( object, geometry ) {

		var buffergeometry = geometries[ geometry.id ];

		if ( buffergeometry ) return buffergeometry;

		geometry.addEventListener( 'dispose', onGeometryDispose );

		if ( geometry.isBufferGeometry ) {

			buffergeometry = geometry;

		} else if ( geometry.isGeometry ) {

			if ( geometry._bufferGeometry === undefined ) {

				geometry._bufferGeometry = new BufferGeometry().setFromObject( object );

			}

			buffergeometry = geometry._bufferGeometry;

		}

		geometries[ geometry.id ] = buffergeometry;

		infoMemory.geometries ++;

		return buffergeometry;

	}

	function update( geometry ) {

		var index = geometry.index;
		var geometryAttributes = geometry.attributes;

		if ( index !== null ) {

			attributes.update( index, gl.ELEMENT_ARRAY_BUFFER );

		}

		for ( var name in geometryAttributes ) {

			attributes.update( geometryAttributes[ name ], gl.ARRAY_BUFFER );

		}

		// morph targets

		var morphAttributes = geometry.morphAttributes;

		for ( var name in morphAttributes ) {

			var array = morphAttributes[ name ];

			for ( var i = 0, l = array.length; i < l; i ++ ) {

				attributes.update( array[ i ], gl.ARRAY_BUFFER );

			}

		}

	}

	function getWireframeAttribute( geometry ) {

		var attribute = wireframeAttributes[ geometry.id ];

		if ( attribute ) return attribute;

		var indices = [];

		var geometryIndex = geometry.index;
		var geometryAttributes = geometry.attributes;

		// console.time( 'wireframe' );

		if ( geometryIndex !== null ) {

			var array = geometryIndex.array;

			for ( var i = 0, l = array.length; i < l; i += 3 ) {

				var a = array[ i + 0 ];
				var b = array[ i + 1 ];
				var c = array[ i + 2 ];

				indices.push( a, b, b, c, c, a );

			}

		} else {

			var array = geometryAttributes.position.array;

			for ( var i = 0, l = ( array.length / 3 ) - 1; i < l; i += 3 ) {

				var a = i + 0;
				var b = i + 1;
				var c = i + 2;

				indices.push( a, b, b, c, c, a );

			}

		}

		// console.timeEnd( 'wireframe' );

		attribute = new ( arrayMax( indices ) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute )( indices, 1 );

		attributes.update( attribute, gl.ELEMENT_ARRAY_BUFFER );

		wireframeAttributes[ geometry.id ] = attribute;

		return attribute;

	}

	return {

		get: get,
		update: update,

		getWireframeAttribute: getWireframeAttribute

	};

}

/**
 * @author mrdoob / http://mrdoob.com/
 */

function UniformsCache() {

	var lights = {};

	return {

		get: function ( light ) {

			if ( lights[ light.id ] !== undefined ) {

				return lights[ light.id ];

			}

			var uniforms;

			switch ( light.type ) {

				case 'DirectionalLight':
					uniforms = {
						direction: new Vector3(),
						color: new Color(),

						shadow: false,
						shadowBias: 0,
						shadowRadius: 1,
						shadowMapSize: new Vector2()
					};
					break;

				case 'SpotLight':
					uniforms = {
						position: new Vector3(),
						direction: new Vector3(),
						color: new Color(),
						distance: 0,
						coneCos: 0,
						penumbraCos: 0,
						decay: 0,

						shadow: false,
						shadowBias: 0,
						shadowRadius: 1,
						shadowMapSize: new Vector2()
					};
					break;

				case 'PointLight':
					uniforms = {
						position: new Vector3(),
						color: new Color(),
						distance: 0,
						decay: 0,

						shadow: false,
						shadowBias: 0,
						shadowRadius: 1,
						shadowMapSize: new Vector2(),
						shadowCameraNear: 1,
						shadowCameraFar: 1000
					};
					break;

				case 'HemisphereLight':
					uniforms = {
						direction: new Vector3(),
						skyColor: new Color(),
						groundColor: new Color()
					};
					break;

				case 'RectAreaLight':
					uniforms = {
						color: new Color(),
						position: new Vector3(),
						halfWidth: new Vector3(),
						halfHeight: new Vector3()
						// TODO (abelnation): set RectAreaLight shadow uniforms
					};
					break;

			}

			lights[ light.id ] = uniforms;

			return uniforms;

		}

	};

}

function WebGLLights() {

	var cache = new UniformsCache();

	var state = {

		hash: '',

		ambient: [ 0, 0, 0 ],
		directional: [],
		directionalShadowMap: [],
		directionalShadowMatrix: [],
		spot: [],
		spotShadowMap: [],
		spotShadowMatrix: [],
		rectArea: [],
		point: [],
		pointShadowMap: [],
		pointShadowMatrix: [],
		hemi: []

	};

	var vector3 = new Vector3();
	var matrix4 = new Matrix4();
	var matrix42 = new Matrix4();

	function setup( lights, shadows, camera ) {

		var r = 0, g = 0, b = 0;

		var directionalLength = 0;
		var pointLength = 0;
		var spotLength = 0;
		var rectAreaLength = 0;
		var hemiLength = 0;

		var viewMatrix = camera.matrixWorldInverse;

		for ( var i = 0, l = lights.length; i < l; i ++ ) {

			var light = lights[ i ];

			var color = light.color;
			var intensity = light.intensity;
			var distance = light.distance;

			var shadowMap = ( light.shadow && light.shadow.map ) ? light.shadow.map.texture : null;

			if ( light.isAmbientLight ) {

				r += color.r * intensity;
				g += color.g * intensity;
				b += color.b * intensity;

			} else if ( light.isDirectionalLight ) {

				var uniforms = cache.get( light );

				uniforms.color.copy( light.color ).multiplyScalar( light.intensity );
				uniforms.direction.setFromMatrixPosition( light.matrixWorld );
				vector3.setFromMatrixPosition( light.target.matrixWorld );
				uniforms.direction.sub( vector3 );
				uniforms.direction.transformDirection( viewMatrix );

				uniforms.shadow = light.castShadow;

				if ( light.castShadow ) {

					var shadow = light.shadow;

					uniforms.shadowBias = shadow.bias;
					uniforms.shadowRadius = shadow.radius;
					uniforms.shadowMapSize = shadow.mapSize;

				}

				state.directionalShadowMap[ directionalLength ] = shadowMap;
				state.directionalShadowMatrix[ directionalLength ] = light.shadow.matrix;
				state.directional[ directionalLength ] = uniforms;

				directionalLength ++;

			} else if ( light.isSpotLight ) {

				var uniforms = cache.get( light );

				uniforms.position.setFromMatrixPosition( light.matrixWorld );
				uniforms.position.applyMatrix4( viewMatrix );

				uniforms.color.copy( color ).multiplyScalar( intensity );
				uniforms.distance = distance;

				uniforms.direction.setFromMatrixPosition( light.matrixWorld );
				vector3.setFromMatrixPosition( light.target.matrixWorld );
				uniforms.direction.sub( vector3 );
				uniforms.direction.transformDirection( viewMatrix );

				uniforms.coneCos = Math.cos( light.angle );
				uniforms.penumbraCos = Math.cos( light.angle * ( 1 - light.penumbra ) );
				uniforms.decay = ( light.distance === 0 ) ? 0.0 : light.decay;

				uniforms.shadow = light.castShadow;

				if ( light.castShadow ) {

					var shadow = light.shadow;

					uniforms.shadowBias = shadow.bias;
					uniforms.shadowRadius = shadow.radius;
					uniforms.shadowMapSize = shadow.mapSize;

				}

				state.spotShadowMap[ spotLength ] = shadowMap;
				state.spotShadowMatrix[ spotLength ] = light.shadow.matrix;
				state.spot[ spotLength ] = uniforms;

				spotLength ++;

			} else if ( light.isRectAreaLight ) {

				var uniforms = cache.get( light );

				// (a) intensity controls irradiance of entire light
				uniforms.color
					.copy( color )
					.multiplyScalar( intensity / ( light.width * light.height ) );

				// (b) intensity controls the radiance per light area
				// uniforms.color.copy( color ).multiplyScalar( intensity );

				uniforms.position.setFromMatrixPosition( light.matrixWorld );
				uniforms.position.applyMatrix4( viewMatrix );

				// extract local rotation of light to derive width/height half vectors
				matrix42.identity();
				matrix4.copy( light.matrixWorld );
				matrix4.premultiply( viewMatrix );
				matrix42.extractRotation( matrix4 );

				uniforms.halfWidth.set( light.width * 0.5, 0.0, 0.0 );
				uniforms.halfHeight.set( 0.0, light.height * 0.5, 0.0 );

				uniforms.halfWidth.applyMatrix4( matrix42 );
				uniforms.halfHeight.applyMatrix4( matrix42 );

				// TODO (abelnation): RectAreaLight distance?
				// uniforms.distance = distance;

				state.rectArea[ rectAreaLength ] = uniforms;

				rectAreaLength ++;

			} else if ( light.isPointLight ) {

				var uniforms = cache.get( light );

				uniforms.position.setFromMatrixPosition( light.matrixWorld );
				uniforms.position.applyMatrix4( viewMatrix );

				uniforms.color.copy( light.color ).multiplyScalar( light.intensity );
				uniforms.distance = light.distance;
				uniforms.decay = ( light.distance === 0 ) ? 0.0 : light.decay;

				uniforms.shadow = light.castShadow;

				if ( light.castShadow ) {

					var shadow = light.shadow;

					uniforms.shadowBias = shadow.bias;
					uniforms.shadowRadius = shadow.radius;
					uniforms.shadowMapSize = shadow.mapSize;
					uniforms.shadowCameraNear = shadow.camera.near;
					uniforms.shadowCameraFar = shadow.camera.far;

				}

				state.pointShadowMap[ pointLength ] = shadowMap;
				state.pointShadowMatrix[ pointLength ] = light.shadow.matrix;
				state.point[ pointLength ] = uniforms;

				pointLength ++;

			} else if ( light.isHemisphereLight ) {

				var uniforms = cache.get( light );

				uniforms.direction.setFromMatrixPosition( light.matrixWorld );
				uniforms.direction.transformDirection( viewMatrix );
				uniforms.direction.normalize();

				uniforms.skyColor.copy( light.color ).multiplyScalar( intensity );
				uniforms.groundColor.copy( light.groundColor ).multiplyScalar( intensity );

				state.hemi[ hemiLength ] = uniforms;

				hemiLength ++;

			}

		}

		state.ambient[ 0 ] = r;
		state.ambient[ 1 ] = g;
		state.ambient[ 2 ] = b;

		state.directional.length = directionalLength;
		state.spot.length = spotLength;
		state.rectArea.length = rectAreaLength;
		state.point.length = pointLength;
		state.hemi.length = hemiLength;

		// TODO (sam-g-steel) why aren't we using join
		state.hash = directionalLength + ',' + pointLength + ',' + spotLength + ',' + rectAreaLength + ',' + hemiLength + ',' + shadows.length;

	}

	return {
		setup: setup,
		state: state
	};

}

/**
 * @author mrdoob / http://mrdoob.com/
 */

function WebGLObjects( geometries, infoRender ) {

	var updateList = {};

	function update( object ) {

		var frame = infoRender.frame;

		var geometry = object.geometry;
		var buffergeometry = geometries.get( object, geometry );

		// Update once per frame

		if ( updateList[ buffergeometry.id ] !== frame ) {

			if ( geometry.isGeometry ) {

				buffergeometry.updateFromObject( object );

			}

			geometries.update( buffergeometry );

			updateList[ buffergeometry.id ] = frame;

		}

		return buffergeometry;

	}

	function clear() {

		updateList = {};

	}

	return {

		update: update,
		clear: clear

	};

}

/**
 * @author mrdoob / http://mrdoob.com/
 */

function addLineNumbers( string ) {

	var lines = string.split( '\n' );

	for ( var i = 0; i < lines.length; i ++ ) {

		lines[ i ] = ( i + 1 ) + ': ' + lines[ i ];

	}

	return lines.join( '\n' );

}

function WebGLShader( gl, type, string ) {

	var shader = gl.createShader( type );

	gl.shaderSource( shader, string );
	gl.compileShader( shader );

	if ( gl.getShaderParameter( shader, gl.COMPILE_STATUS ) === false ) {

		console.error( 'THREE.WebGLShader: Shader couldn\'t compile.' );

	}

	if ( gl.getShaderInfoLog( shader ) !== '' ) {

		console.warn( 'THREE.WebGLShader: gl.getShaderInfoLog()', type === gl.VERTEX_SHADER ? 'vertex' : 'fragment', gl.getShaderInfoLog( shader ), addLineNumbers( string ) );

	}

	// --enable-privileged-webgl-extension
	// console.log( type, gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );

	return shader;

}

/**
 * @author mrdoob / http://mrdoob.com/
 */

var programIdCount = 0;

function getEncodingComponents( encoding ) {

	switch ( encoding ) {

		case LinearEncoding:
			return [ 'Linear', '( value )' ];
		case sRGBEncoding:
			return [ 'sRGB', '( value )' ];
		case RGBEEncoding:
			return [ 'RGBE', '( value )' ];
		case RGBM7Encoding:
			return [ 'RGBM', '( value, 7.0 )' ];
		case RGBM16Encoding:
			return [ 'RGBM', '( value, 16.0 )' ];
		case RGBDEncoding:
			return [ 'RGBD', '( value, 256.0 )' ];
		case GammaEncoding:
			return [ 'Gamma', '( value, float( GAMMA_FACTOR ) )' ];
		default:
			throw new Error( 'unsupported encoding: ' + encoding );

	}

}

function getTexelDecodingFunction( functionName, encoding ) {

	var components = getEncodingComponents( encoding );
	return "vec4 " + functionName + "( vec4 value ) { return " + components[ 0 ] + "ToLinear" + components[ 1 ] + "; }";

}

function getTexelEncodingFunction( functionName, encoding ) {

	var components = getEncodingComponents( encoding );
	return "vec4 " + functionName + "( vec4 value ) { return LinearTo" + components[ 0 ] + components[ 1 ] + "; }";

}

function getToneMappingFunction( functionName, toneMapping ) {

	var toneMappingName;

	switch ( toneMapping ) {

		case LinearToneMapping:
			toneMappingName = "Linear";
			break;

		case ReinhardToneMapping:
			toneMappingName = "Reinhard";
			break;

		case Uncharted2ToneMapping:
			toneMappingName = "Uncharted2";
			break;

		case CineonToneMapping:
			toneMappingName = "OptimizedCineon";
			break;

		default:
			throw new Error( 'unsupported toneMapping: ' + toneMapping );

	}

	return "vec3 " + functionName + "( vec3 color ) { return " + toneMappingName + "ToneMapping( color ); }";

}

function generateExtensions( extensions, parameters, rendererExtensions ) {

	extensions = extensions || {};

	var chunks = [
		( extensions.derivatives || parameters.envMapCubeUV || parameters.bumpMap || parameters.normalMap || parameters.flatShading ) ? '#extension GL_OES_standard_derivatives : enable' : '',
		( extensions.fragDepth || parameters.logarithmicDepthBuffer ) && rendererExtensions.get( 'EXT_frag_depth' ) ? '#extension GL_EXT_frag_depth : enable' : '',
		( extensions.drawBuffers ) && rendererExtensions.get( 'WEBGL_draw_buffers' ) ? '#extension GL_EXT_draw_buffers : require' : '',
		( extensions.shaderTextureLOD || parameters.envMap ) && rendererExtensions.get( 'EXT_shader_texture_lod' ) ? '#extension GL_EXT_shader_texture_lod : enable' : ''
	];

	return chunks.filter( filterEmptyLine ).join( '\n' );

}

function generateDefines( defines ) {

	var chunks = [];

	for ( var name in defines ) {

		var value = defines[ name ];

		if ( value === false ) continue;

		chunks.push( '#define ' + name + ' ' + value );

	}

	return chunks.join( '\n' );

}

function fetchAttributeLocations( gl, program ) {

	var attributes = {};

	var n = gl.getProgramParameter( program, gl.ACTIVE_ATTRIBUTES );

	for ( var i = 0; i < n; i ++ ) {

		var info = gl.getActiveAttrib( program, i );
		var name = info.name;

		// console.log( 'THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:', name, i );

		attributes[ name ] = gl.getAttribLocation( program, name );

	}

	return attributes;

}

function filterEmptyLine( string ) {

	return string !== '';

}

function replaceLightNums( string, parameters ) {

	return string
		.replace( /NUM_DIR_LIGHTS/g, parameters.numDirLights )
		.replace( /NUM_SPOT_LIGHTS/g, parameters.numSpotLights )
		.replace( /NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights )
		.replace( /NUM_POINT_LIGHTS/g, parameters.numPointLights )
		.replace( /NUM_HEMI_LIGHTS/g, parameters.numHemiLights );

}

function parseIncludes( string ) {

	var pattern = /^[ \t]*#include +<([\w\d.]+)>/gm;

	function replace( match, include ) {

		var replace = ShaderChunk[ include ];

		if ( replace === undefined ) {

			throw new Error( 'Can not resolve #include <' + include + '>' );

		}

		return parseIncludes( replace );

	}

	return string.replace( pattern, replace );

}

function unrollLoops( string ) {

	var pattern = /for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g;

	function replace( match, start, end, snippet ) {

		var unroll = '';

		for ( var i = parseInt( start ); i < parseInt( end ); i ++ ) {

			unroll += snippet.replace( /\[ i \]/g, '[ ' + i + ' ]' );

		}

		return unroll;

	}

	return string.replace( pattern, replace );

}

function WebGLProgram( renderer, extensions, code, material, shader, parameters ) {

	var gl = renderer.context;

	var defines = material.defines;

	var vertexShader = shader.vertexShader;
	var fragmentShader = shader.fragmentShader;

	var shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';

	if ( parameters.shadowMapType === PCFShadowMap ) {

		shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';

	} else if ( parameters.shadowMapType === PCFSoftShadowMap ) {

		shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';

	}

	var envMapTypeDefine = 'ENVMAP_TYPE_CUBE';
	var envMapModeDefine = 'ENVMAP_MODE_REFLECTION';
	var envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';

	if ( parameters.envMap ) {

		switch ( material.envMap.mapping ) {

			case CubeReflectionMapping:
			case CubeRefractionMapping:
				envMapTypeDefine = 'ENVMAP_TYPE_CUBE';
				break;

			case CubeUVReflectionMapping:
			case CubeUVRefractionMapping:
				envMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';
				break;

			case EquirectangularReflectionMapping:
			case EquirectangularRefractionMapping:
				envMapTypeDefine = 'ENVMAP_TYPE_EQUIREC';
				break;

			case SphericalReflectionMapping:
				envMapTypeDefine = 'ENVMAP_TYPE_SPHERE';
				break;

		}

		switch ( material.envMap.mapping ) {

			case CubeRefractionMapping:
			case EquirectangularRefractionMapping:
				envMapModeDefine = 'ENVMAP_MODE_REFRACTION';
				break;

		}

		switch ( material.combine ) {

			case MultiplyOperation:
				envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';
				break;

			case MixOperation:
				envMapBlendingDefine = 'ENVMAP_BLENDING_MIX';
				break;

			case AddOperation:
				envMapBlendingDefine = 'ENVMAP_BLENDING_ADD';
				break;

		}

	}

	var gammaFactorDefine = ( renderer.gammaFactor > 0 ) ? renderer.gammaFactor : 1.0;

	// console.log( 'building new program ' );

	//

	var customExtensions = generateExtensions( material.extensions, parameters, extensions );

	var customDefines = generateDefines( defines );

	//

	var program = gl.createProgram();

	var prefixVertex, prefixFragment;

	if ( material.isRawShaderMaterial ) {

		prefixVertex = [

			customDefines

		].filter( filterEmptyLine ).join( '\n' );

		if ( prefixVertex.length > 0 ) {

			prefixVertex += '\n';

		}

		prefixFragment = [

			customExtensions,
			customDefines

		].filter( filterEmptyLine ).join( '\n' );

		if ( prefixFragment.length > 0 ) {

			prefixFragment += '\n';

		}

	} else {

		prefixVertex = [

			'precision ' + parameters.precision + ' float;',
			'precision ' + parameters.precision + ' int;',

			'#define SHADER_NAME ' + shader.name,

			customDefines,

			parameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '',

			'#define GAMMA_FACTOR ' + gammaFactorDefine,

			'#define MAX_BONES ' + parameters.maxBones,
			( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',
			( parameters.useFog && parameters.fogExp ) ? '#define FOG_EXP2' : '',

			parameters.map ? '#define USE_MAP' : '',
			parameters.envMap ? '#define USE_ENVMAP' : '',
			parameters.envMap ? '#define ' + envMapModeDefine : '',
			parameters.lightMap ? '#define USE_LIGHTMAP' : '',
			parameters.aoMap ? '#define USE_AOMAP' : '',
			parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',
			parameters.bumpMap ? '#define USE_BUMPMAP' : '',
			parameters.normalMap ? '#define USE_NORMALMAP' : '',
			parameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '',
			parameters.specularMap ? '#define USE_SPECULARMAP' : '',
			parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',
			parameters.metalnessMap ? '#define USE_METALNESSMAP' : '',
			parameters.alphaMap ? '#define USE_ALPHAMAP' : '',
			parameters.vertexColors ? '#define USE_COLOR' : '',

			parameters.flatShading ? '#define FLAT_SHADED' : '',

			parameters.skinning ? '#define USE_SKINNING' : '',
			parameters.useVertexTexture ? '#define BONE_TEXTURE' : '',

			parameters.morphTargets ? '#define USE_MORPHTARGETS' : '',
			parameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '',
			parameters.doubleSided ? '#define DOUBLE_SIDED' : '',
			parameters.flipSided ? '#define FLIP_SIDED' : '',

			'#define NUM_CLIPPING_PLANES ' + parameters.numClippingPlanes,

			parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',
			parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',

			parameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '',

			parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',
			parameters.logarithmicDepthBuffer && extensions.get( 'EXT_frag_depth' ) ? '#define USE_LOGDEPTHBUF_EXT' : '',

			'uniform mat4 modelMatrix;',
			'uniform mat4 modelViewMatrix;',
			'uniform mat4 projectionMatrix;',
			'uniform mat4 viewMatrix;',
			'uniform mat3 normalMatrix;',
			'uniform vec3 cameraPosition;',

			'attribute vec3 position;',
			'attribute vec3 normal;',
			'attribute vec2 uv;',

			'#ifdef USE_COLOR',

			'	attribute vec3 color;',

			'#endif',

			'#ifdef USE_MORPHTARGETS',

			'	attribute vec3 morphTarget0;',
			'	attribute vec3 morphTarget1;',
			'	attribute vec3 morphTarget2;',
			'	attribute vec3 morphTarget3;',

			'	#ifdef USE_MORPHNORMALS',

			'		attribute vec3 morphNormal0;',
			'		attribute vec3 morphNormal1;',
			'		attribute vec3 morphNormal2;',
			'		attribute vec3 morphNormal3;',

			'	#else',

			'		attribute vec3 morphTarget4;',
			'		attribute vec3 morphTarget5;',
			'		attribute vec3 morphTarget6;',
			'		attribute vec3 morphTarget7;',

			'	#endif',

			'#endif',

			'#ifdef USE_SKINNING',

			'	attribute vec4 skinIndex;',
			'	attribute vec4 skinWeight;',

			'#endif',

			'\n'

		].filter( filterEmptyLine ).join( '\n' );

		prefixFragment = [

			customExtensions,

			'precision ' + parameters.precision + ' float;',
			'precision ' + parameters.precision + ' int;',

			'#define SHADER_NAME ' + shader.name,

			customDefines,

			parameters.alphaTest ? '#define ALPHATEST ' + parameters.alphaTest : '',

			'#define GAMMA_FACTOR ' + gammaFactorDefine,

			( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',
			( parameters.useFog && parameters.fogExp ) ? '#define FOG_EXP2' : '',

			parameters.map ? '#define USE_MAP' : '',
			parameters.envMap ? '#define USE_ENVMAP' : '',
			parameters.envMap ? '#define ' + envMapTypeDefine : '',
			parameters.envMap ? '#define ' + envMapModeDefine : '',
			parameters.envMap ? '#define ' + envMapBlendingDefine : '',
			parameters.lightMap ? '#define USE_LIGHTMAP' : '',
			parameters.aoMap ? '#define USE_AOMAP' : '',
			parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',
			parameters.bumpMap ? '#define USE_BUMPMAP' : '',
			parameters.normalMap ? '#define USE_NORMALMAP' : '',
			parameters.specularMap ? '#define USE_SPECULARMAP' : '',
			parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',
			parameters.metalnessMap ? '#define USE_METALNESSMAP' : '',
			parameters.alphaMap ? '#define USE_ALPHAMAP' : '',
			parameters.vertexColors ? '#define USE_COLOR' : '',

			parameters.gradientMap ? '#define USE_GRADIENTMAP' : '',

			parameters.flatShading ? '#define FLAT_SHADED' : '',

			parameters.doubleSided ? '#define DOUBLE_SIDED' : '',
			parameters.flipSided ? '#define FLIP_SIDED' : '',

			'#define NUM_CLIPPING_PLANES ' + parameters.numClippingPlanes,
			'#define UNION_CLIPPING_PLANES ' + ( parameters.numClippingPlanes - parameters.numClipIntersection ),

			parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',
			parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',

			parameters.premultipliedAlpha ? "#define PREMULTIPLIED_ALPHA" : '',

			parameters.physicallyCorrectLights ? "#define PHYSICALLY_CORRECT_LIGHTS" : '',

			parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',
			parameters.logarithmicDepthBuffer && extensions.get( 'EXT_frag_depth' ) ? '#define USE_LOGDEPTHBUF_EXT' : '',

			parameters.envMap && extensions.get( 'EXT_shader_texture_lod' ) ? '#define TEXTURE_LOD_EXT' : '',

			'uniform mat4 viewMatrix;',
			'uniform vec3 cameraPosition;',

			( parameters.toneMapping !== NoToneMapping ) ? "#define TONE_MAPPING" : '',
			( parameters.toneMapping !== NoToneMapping ) ? ShaderChunk[ 'tonemapping_pars_fragment' ] : '', // this code is required here because it is used by the toneMapping() function defined below
			( parameters.toneMapping !== NoToneMapping ) ? getToneMappingFunction( "toneMapping", parameters.toneMapping ) : '',

			parameters.dithering ? '#define DITHERING' : '',

			( parameters.outputEncoding || parameters.mapEncoding || parameters.envMapEncoding || parameters.emissiveMapEncoding ) ? ShaderChunk[ 'encodings_pars_fragment' ] : '', // this code is required here because it is used by the various encoding/decoding function defined below
			parameters.mapEncoding ? getTexelDecodingFunction( 'mapTexelToLinear', parameters.mapEncoding ) : '',
			parameters.envMapEncoding ? getTexelDecodingFunction( 'envMapTexelToLinear', parameters.envMapEncoding ) : '',
			parameters.emissiveMapEncoding ? getTexelDecodingFunction( 'emissiveMapTexelToLinear', parameters.emissiveMapEncoding ) : '',
			parameters.outputEncoding ? getTexelEncodingFunction( "linearToOutputTexel", parameters.outputEncoding ) : '',

			parameters.depthPacking ? "#define DEPTH_PACKING " + material.depthPacking : '',

			'\n'

		].filter( filterEmptyLine ).join( '\n' );

	}

	vertexShader = parseIncludes( vertexShader );
	vertexShader = replaceLightNums( vertexShader, parameters );

	fragmentShader = parseIncludes( fragmentShader );
	fragmentShader = replaceLightNums( fragmentShader, parameters );

	if ( ! material.isShaderMaterial ) {

		vertexShader = unrollLoops( vertexShader );
		fragmentShader = unrollLoops( fragmentShader );

	}

	var vertexGlsl = prefixVertex + vertexShader;
	var fragmentGlsl = prefixFragment + fragmentShader;

	// console.log( '*VERTEX*', vertexGlsl );
	// console.log( '*FRAGMENT*', fragmentGlsl );

	var glVertexShader = WebGLShader( gl, gl.VERTEX_SHADER, vertexGlsl );
	var glFragmentShader = WebGLShader( gl, gl.FRAGMENT_SHADER, fragmentGlsl );

	gl.attachShader( program, glVertexShader );
	gl.attachShader( program, glFragmentShader );

	// Force a particular attribute to index 0.

	if ( material.index0AttributeName !== undefined ) {

		gl.bindAttribLocation( program, 0, material.index0AttributeName );

	} else if ( parameters.morphTargets === true ) {

		// programs with morphTargets displace position out of attribute 0
		gl.bindAttribLocation( program, 0, 'position' );

	}

	gl.linkProgram( program );

	var programLog = gl.getProgramInfoLog( program );
	var vertexLog = gl.getShaderInfoLog( glVertexShader );
	var fragmentLog = gl.getShaderInfoLog( glFragmentShader );

	var runnable = true;
	var haveDiagnostics = true;

	// console.log( '**VERTEX**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glVertexShader ) );
	// console.log( '**FRAGMENT**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glFragmentShader ) );

	if ( gl.getProgramParameter( program, gl.LINK_STATUS ) === false ) {

		runnable = false;

		console.error( 'THREE.WebGLProgram: shader error: ', gl.getError(), 'gl.VALIDATE_STATUS', gl.getProgramParameter( program, gl.VALIDATE_STATUS ), 'gl.getProgramInfoLog', programLog, vertexLog, fragmentLog );

	} else if ( programLog !== '' ) {

		console.warn( 'THREE.WebGLProgram: gl.getProgramInfoLog()', programLog );

	} else if ( vertexLog === '' || fragmentLog === '' ) {

		haveDiagnostics = false;

	}

	if ( haveDiagnostics ) {

		this.diagnostics = {

			runnable: runnable,
			material: material,

			programLog: programLog,

			vertexShader: {

				log: vertexLog,
				prefix: prefixVertex

			},

			fragmentShader: {

				log: fragmentLog,
				prefix: prefixFragment

			}

		};

	}

	// clean up

	gl.deleteShader( glVertexShader );
	gl.deleteShader( glFragmentShader );

	// set up caching for uniform locations

	var cachedUniforms;

	this.getUniforms = function () {

		if ( cachedUniforms === undefined ) {

			cachedUniforms = new WebGLUniforms( gl, program, renderer );

		}

		return cachedUniforms;

	};

	// set up caching for attribute locations

	var cachedAttributes;

	this.getAttributes = function () {

		if ( cachedAttributes === undefined ) {

			cachedAttributes = fetchAttributeLocations( gl, program );

		}

		return cachedAttributes;

	};

	// free resource

	this.destroy = function () {

		gl.deleteProgram( program );
		this.program = undefined;

	};

	// DEPRECATED

	Object.defineProperties( this, {

		uniforms: {
			get: function () {

				console.warn( 'THREE.WebGLProgram: .uniforms is now .getUniforms().' );
				return this.getUniforms();

			}
		},

		attributes: {
			get: function () {

				console.warn( 'THREE.WebGLProgram: .attributes is now .getAttributes().' );
				return this.getAttributes();

			}
		}

	} );


	//

	this.id = programIdCount ++;
	this.code = code;
	this.usedTimes = 1;
	this.program = program;
	this.vertexShader = glVertexShader;
	this.fragmentShader = glFragmentShader;

	return this;

}

/**
 * @author mrdoob / http://mrdoob.com/
 */

function WebGLPrograms( renderer, extensions, capabilities ) {

	var programs = [];

	var shaderIDs = {
		MeshDepthMaterial: 'depth',
		MeshDistanceMaterial: 'distanceRGBA',
		MeshNormalMaterial: 'normal',
		MeshBasicMaterial: 'basic',
		MeshLambertMaterial: 'lambert',
		MeshPhongMaterial: 'phong',
		MeshToonMaterial: 'phong',
		MeshStandardMaterial: 'physical',
		MeshPhysicalMaterial: 'physical',
		LineBasicMaterial: 'basic',
		LineDashedMaterial: 'dashed',
		PointsMaterial: 'points',
		ShadowMaterial: 'shadow'
	};

	var parameterNames = [
		"precision", "supportsVertexTextures", "map", "mapEncoding", "envMap", "envMapMode", "envMapEncoding",
		"lightMap", "aoMap", "emissiveMap", "emissiveMapEncoding", "bumpMap", "normalMap", "displacementMap", "specularMap",
		"roughnessMap", "metalnessMap", "gradientMap",
		"alphaMap", "combine", "vertexColors", "fog", "useFog", "fogExp",
		"flatShading", "sizeAttenuation", "logarithmicDepthBuffer", "skinning",
		"maxBones", "useVertexTexture", "morphTargets", "morphNormals",
		"maxMorphTargets", "maxMorphNormals", "premultipliedAlpha",
		"numDirLights", "numPointLights", "numSpotLights", "numHemiLights", "numRectAreaLights",
		"shadowMapEnabled", "shadowMapType", "toneMapping", 'physicallyCorrectLights',
		"alphaTest", "doubleSided", "flipSided", "numClippingPlanes", "numClipIntersection", "depthPacking", "dithering"
	];


	function allocateBones( object ) {

		var skeleton = object.skeleton;
		var bones = skeleton.bones;

		if ( capabilities.floatVertexTextures ) {

			return 1024;

		} else {

			// default for when object is not specified
			// ( for example when prebuilding shader to be used with multiple objects )
			//
			//  - leave some extra space for other uniforms
			//  - limit here is ANGLE's 254 max uniform vectors
			//    (up to 54 should be safe)

			var nVertexUniforms = capabilities.maxVertexUniforms;
			var nVertexMatrices = Math.floor( ( nVertexUniforms - 20 ) / 4 );

			var maxBones = Math.min( nVertexMatrices, bones.length );

			if ( maxBones < bones.length ) {

				console.warn( 'THREE.WebGLRenderer: Skeleton has ' + bones.length + ' bones. This GPU supports ' + maxBones + '.' );
				return 0;

			}

			return maxBones;

		}

	}

	function getTextureEncodingFromMap( map, gammaOverrideLinear ) {

		var encoding;

		if ( ! map ) {

			encoding = LinearEncoding;

		} else if ( map.isTexture ) {

			encoding = map.encoding;

		} else if ( map.isWebGLRenderTarget ) {

			console.warn( "THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead." );
			encoding = map.texture.encoding;

		}

		// add backwards compatibility for WebGLRenderer.gammaInput/gammaOutput parameter, should probably be removed at some point.
		if ( encoding === LinearEncoding && gammaOverrideLinear ) {

			encoding = GammaEncoding;

		}

		return encoding;

	}

	this.getParameters = function ( material, lights, shadows, fog, nClipPlanes, nClipIntersection, object ) {

		var shaderID = shaderIDs[ material.type ];

		// heuristics to create shader parameters according to lights in the scene
		// (not to blow over maxLights budget)

		var maxBones = object.isSkinnedMesh ? allocateBones( object ) : 0;
		var precision = capabilities.precision;

		if ( material.precision !== null ) {

			precision = capabilities.getMaxPrecision( material.precision );

			if ( precision !== material.precision ) {

				console.warn( 'THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.' );

			}

		}

		var currentRenderTarget = renderer.getRenderTarget();

		var parameters = {

			shaderID: shaderID,

			precision: precision,
			supportsVertexTextures: capabilities.vertexTextures,
			outputEncoding: getTextureEncodingFromMap( ( ! currentRenderTarget ) ? null : currentRenderTarget.texture, renderer.gammaOutput ),
			map: !! material.map,
			mapEncoding: getTextureEncodingFromMap( material.map, renderer.gammaInput ),
			envMap: !! material.envMap,
			envMapMode: material.envMap && material.envMap.mapping,
			envMapEncoding: getTextureEncodingFromMap( material.envMap, renderer.gammaInput ),
			envMapCubeUV: ( !! material.envMap ) && ( ( material.envMap.mapping === CubeUVReflectionMapping ) || ( material.envMap.mapping === CubeUVRefractionMapping ) ),
			lightMap: !! material.lightMap,
			aoMap: !! material.aoMap,
			emissiveMap: !! material.emissiveMap,
			emissiveMapEncoding: getTextureEncodingFromMap( material.emissiveMap, renderer.gammaInput ),
			bumpMap: !! material.bumpMap,
			normalMap: !! material.normalMap,
			displacementMap: !! material.displacementMap,
			roughnessMap: !! material.roughnessMap,
			metalnessMap: !! material.metalnessMap,
			specularMap: !! material.specularMap,
			alphaMap: !! material.alphaMap,

			gradientMap: !! material.gradientMap,

			combine: material.combine,

			vertexColors: material.vertexColors,

			fog: !! fog,
			useFog: material.fog,
			fogExp: ( fog && fog.isFogExp2 ),

			flatShading: material.flatShading,

			sizeAttenuation: material.sizeAttenuation,
			logarithmicDepthBuffer: capabilities.logarithmicDepthBuffer,

			skinning: material.skinning && maxBones > 0,
			maxBones: maxBones,
			useVertexTexture: capabilities.floatVertexTextures,

			morphTargets: material.morphTargets,
			morphNormals: material.morphNormals,
			maxMorphTargets: renderer.maxMorphTargets,
			maxMorphNormals: renderer.maxMorphNormals,

			numDirLights: lights.directional.length,
			numPointLights: lights.point.length,
			numSpotLights: lights.spot.length,
			numRectAreaLights: lights.rectArea.length,
			numHemiLights: lights.hemi.length,

			numClippingPlanes: nClipPlanes,
			numClipIntersection: nClipIntersection,

			dithering: material.dithering,

			shadowMapEnabled: renderer.shadowMap.enabled && object.receiveShadow && shadows.length > 0,
			shadowMapType: renderer.shadowMap.type,

			toneMapping: renderer.toneMapping,
			physicallyCorrectLights: renderer.physicallyCorrectLights,

			premultipliedAlpha: material.premultipliedAlpha,

			alphaTest: material.alphaTest,
			doubleSided: material.side === DoubleSide,
			flipSided: material.side === BackSide,

			depthPacking: ( material.depthPacking !== undefined ) ? material.depthPacking : false

		};

		return parameters;

	};

	this.getProgramCode = function ( material, parameters ) {

		var array = [];

		if ( parameters.shaderID ) {

			array.push( parameters.shaderID );

		} else {

			array.push( material.fragmentShader );
			array.push( material.vertexShader );

		}

		if ( material.defines !== undefined ) {

			for ( var name in material.defines ) {

				array.push( name );
				array.push( material.defines[ name ] );

			}

		}

		for ( var i = 0; i < parameterNames.length; i ++ ) {

			array.push( parameters[ parameterNames[ i ] ] );

		}

		array.push( material.onBeforeCompile.toString() );

		array.push( renderer.gammaOutput );

		return array.join();

	};

	this.acquireProgram = function ( material, shader, parameters, code ) {

		var program;

		// Check if code has been already compiled
		for ( var p = 0, pl = programs.length; p < pl; p ++ ) {

			var programInfo = programs[ p ];

			if ( programInfo.code === code ) {

				program = programInfo;
				++ program.usedTimes;

				break;

			}

		}

		if ( program === undefined ) {

			program = new WebGLProgram( renderer, extensions, code, material, shader, parameters );
			programs.push( program );

		}

		return program;

	};

	this.releaseProgram = function ( program ) {

		if ( -- program.usedTimes === 0 ) {

			// Remove from unordered set
			var i = programs.indexOf( program );
			programs[ i ] = programs[ programs.length - 1 ];
			programs.pop();

			// Free WebGL resources
			program.destroy();

		}

	};

	// Exposed for resource monitoring & error feedback via renderer.info:
	this.programs = programs;

}

/**
 * @author mrdoob / http://mrdoob.com/
 */

function WebGLTextures( _gl, extensions, state, properties, capabilities, utils, infoMemory ) {

	var _isWebGL2 = ( typeof WebGL2RenderingContext !== 'undefined' && _gl instanceof window.WebGL2RenderingContext );

	//

	function clampToMaxSize( image, maxSize ) {

		if ( image.width > maxSize || image.height > maxSize ) {

			// Warning: Scaling through the canvas will only work with images that use
			// premultiplied alpha.

			var scale = maxSize / Math.max( image.width, image.height );

			var canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );
			canvas.width = Math.floor( image.width * scale );
			canvas.height = Math.floor( image.height * scale );

			var context = canvas.getContext( '2d' );
			context.drawImage( image, 0, 0, image.width, image.height, 0, 0, canvas.width, canvas.height );

			console.warn( 'THREE.WebGLRenderer: image is too big (' + image.width + 'x' + image.height + '). Resized to ' + canvas.width + 'x' + canvas.height, image );

			return canvas;

		}

		return image;

	}

	function isPowerOfTwo( image ) {

		return _Math.isPowerOfTwo( image.width ) && _Math.isPowerOfTwo( image.height );

	}

	function makePowerOfTwo( image ) {

		if ( image instanceof HTMLImageElement || image instanceof HTMLCanvasElement || image instanceof ImageBitmap ) {

			var canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );
			canvas.width = _Math.floorPowerOfTwo( image.width );
			canvas.height = _Math.floorPowerOfTwo( image.height );

			var context = canvas.getContext( '2d' );
			context.drawImage( image, 0, 0, canvas.width, canvas.height );

			console.warn( 'THREE.WebGLRenderer: image is not power of two (' + image.width + 'x' + image.height + '). Resized to ' + canvas.width + 'x' + canvas.height, image );

			return canvas;

		}

		return image;

	}

	function textureNeedsPowerOfTwo( texture ) {

		return ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) ||
			( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter );

	}

	function textureNeedsGenerateMipmaps( texture, isPowerOfTwo ) {

		return texture.generateMipmaps && isPowerOfTwo &&
			texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;

	}

	// Fallback filters for non-power-of-2 textures

	function filterFallback( f ) {

		if ( f === NearestFilter || f === NearestMipMapNearestFilter || f === NearestMipMapLinearFilter ) {

			return _gl.NEAREST;

		}

		return _gl.LINEAR;

	}

	//

	function onTextureDispose( event ) {

		var texture = event.target;

		texture.removeEventListener( 'dispose', onTextureDispose );

		deallocateTexture( texture );

		infoMemory.textures --;


	}

	function onRenderTargetDispose( event ) {

		var renderTarget = event.target;

		renderTarget.removeEventListener( 'dispose', onRenderTargetDispose );

		deallocateRenderTarget( renderTarget );

		infoMemory.textures --;

	}

	//

	function deallocateTexture( texture ) {

		var textureProperties = properties.get( texture );

		if ( texture.image && textureProperties.__image__webglTextureCube ) {

			// cube texture

			_gl.deleteTexture( textureProperties.__image__webglTextureCube );

		} else {

			// 2D texture

			if ( textureProperties.__webglInit === undefined ) return;

			_gl.deleteTexture( textureProperties.__webglTexture );

		}

		// remove all webgl properties
		properties.remove( texture );

	}

	function deallocateRenderTarget( renderTarget ) {

		var renderTargetProperties = properties.get( renderTarget );
		var textureProperties = properties.get( renderTarget.texture );

		if ( ! renderTarget ) return;

		if ( textureProperties.__webglTexture !== undefined ) {

			_gl.deleteTexture( textureProperties.__webglTexture );

		}

		if ( renderTarget.depthTexture ) {

			renderTarget.depthTexture.dispose();

		}

		if ( renderTarget.isWebGLRenderTargetCube ) {

			for ( var i = 0; i < 6; i ++ ) {

				_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ] );
				if ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer[ i ] );

			}

		} else {

			_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer );
			if ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer );

		}

		properties.remove( renderTarget.texture );
		properties.remove( renderTarget );

	}

	//



	function setTexture2D( texture, slot ) {

		var textureProperties = properties.get( texture );

		if ( texture.version > 0 && textureProperties.__version !== texture.version ) {

			var image = texture.image;

			if ( image === undefined ) {

				console.warn( 'THREE.WebGLRenderer: Texture marked for update but image is undefined', texture );

			} else if ( image.complete === false ) {

				console.warn( 'THREE.WebGLRenderer: Texture marked for update but image is incomplete', texture );

			} else {

				uploadTexture( textureProperties, texture, slot );
				return;

			}

		}

		state.activeTexture( _gl.TEXTURE0 + slot );
		state.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );

	}

	function setTextureCube( texture, slot ) {

		var textureProperties = properties.get( texture );

		if ( texture.image.length === 6 ) {

			if ( texture.version > 0 && textureProperties.__version !== texture.version ) {

				if ( ! textureProperties.__image__webglTextureCube ) {

					texture.addEventListener( 'dispose', onTextureDispose );

					textureProperties.__image__webglTextureCube = _gl.createTexture();

					infoMemory.textures ++;

				}

				state.activeTexture( _gl.TEXTURE0 + slot );
				state.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube );

				_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );

				var isCompressed = ( texture && texture.isCompressedTexture );
				var isDataTexture = ( texture.image[ 0 ] && texture.image[ 0 ].isDataTexture );

				var cubeImage = [];

				for ( var i = 0; i < 6; i ++ ) {

					if ( ! isCompressed && ! isDataTexture ) {

						cubeImage[ i ] = clampToMaxSize( texture.image[ i ], capabilities.maxCubemapSize );

					} else {

						cubeImage[ i ] = isDataTexture ? texture.image[ i ].image : texture.image[ i ];

					}

				}

				var image = cubeImage[ 0 ],
					isPowerOfTwoImage = isPowerOfTwo( image ),
					glFormat = utils.convert( texture.format ),
					glType = utils.convert( texture.type );

				setTextureParameters( _gl.TEXTURE_CUBE_MAP, texture, isPowerOfTwoImage );

				for ( var i = 0; i < 6; i ++ ) {

					if ( ! isCompressed ) {

						if ( isDataTexture ) {

							state.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, cubeImage[ i ].width, cubeImage[ i ].height, 0, glFormat, glType, cubeImage[ i ].data );

						} else {

							state.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, glFormat, glType, cubeImage[ i ] );

						}

					} else {

						var mipmap, mipmaps = cubeImage[ i ].mipmaps;

						for ( var j = 0, jl = mipmaps.length; j < jl; j ++ ) {

							mipmap = mipmaps[ j ];

							if ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {

								if ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {

									state.compressedTexImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );

								} else {

									console.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()' );

								}

							} else {

								state.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );

							}

						}

					}

				}

				if ( textureNeedsGenerateMipmaps( texture, isPowerOfTwoImage ) ) {

					_gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );

				}

				textureProperties.__version = texture.version;

				if ( texture.onUpdate ) texture.onUpdate( texture );

			} else {

				state.activeTexture( _gl.TEXTURE0 + slot );
				state.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube );

			}

		}

	}

	function setTextureCubeDynamic( texture, slot ) {

		state.activeTexture( _gl.TEXTURE0 + slot );
		state.bindTexture( _gl.TEXTURE_CUBE_MAP, properties.get( texture ).__webglTexture );

	}

	function setTextureParameters( textureType, texture, isPowerOfTwoImage ) {

		var extension;

		if ( isPowerOfTwoImage ) {

			_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, utils.convert( texture.wrapS ) );
			_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, utils.convert( texture.wrapT ) );

			_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, utils.convert( texture.magFilter ) );
			_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, utils.convert( texture.minFilter ) );

		} else {

			_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE );
			_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE );

			if ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) {

				console.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.', texture );

			}

			_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, filterFallback( texture.magFilter ) );
			_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, filterFallback( texture.minFilter ) );

			if ( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) {

				console.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.', texture );

			}

		}

		extension = extensions.get( 'EXT_texture_filter_anisotropic' );

		if ( extension ) {

			if ( texture.type === FloatType && extensions.get( 'OES_texture_float_linear' ) === null ) return;
			if ( texture.type === HalfFloatType && extensions.get( 'OES_texture_half_float_linear' ) === null ) return;

			if ( texture.anisotropy > 1 || properties.get( texture ).__currentAnisotropy ) {

				_gl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, capabilities.getMaxAnisotropy() ) );
				properties.get( texture ).__currentAnisotropy = texture.anisotropy;

			}

		}

	}

	function uploadTexture( textureProperties, texture, slot ) {

		if ( textureProperties.__webglInit === undefined ) {

			textureProperties.__webglInit = true;

			texture.addEventListener( 'dispose', onTextureDispose );

			textureProperties.__webglTexture = _gl.createTexture();

			infoMemory.textures ++;

		}

		state.activeTexture( _gl.TEXTURE0 + slot );
		state.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );

		_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );
		_gl.pixelStorei( _gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha );
		_gl.pixelStorei( _gl.UNPACK_ALIGNMENT, texture.unpackAlignment );

		var image = clampToMaxSize( texture.image, capabilities.maxTextureSize );

		if ( textureNeedsPowerOfTwo( texture ) && isPowerOfTwo( image ) === false ) {

			image = makePowerOfTwo( image );

		}

		var isPowerOfTwoImage = isPowerOfTwo( image ),
			glFormat = utils.convert( texture.format ),
			glType = utils.convert( texture.type );

		setTextureParameters( _gl.TEXTURE_2D, texture, isPowerOfTwoImage );

		var mipmap, mipmaps = texture.mipmaps;

		if ( texture.isDepthTexture ) {

			// populate depth texture with dummy data

			var internalFormat = _gl.DEPTH_COMPONENT;

			if ( texture.type === FloatType ) {

				if ( ! _isWebGL2 ) throw new Error( 'Float Depth Texture only supported in WebGL2.0' );
				internalFormat = _gl.DEPTH_COMPONENT32F;

			} else if ( _isWebGL2 ) {

				// WebGL 2.0 requires signed internalformat for glTexImage2D
				internalFormat = _gl.DEPTH_COMPONENT16;

			}

			if ( texture.format === DepthFormat && internalFormat === _gl.DEPTH_COMPONENT ) {

				// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are
				// DEPTH_COMPONENT and type is not UNSIGNED_SHORT or UNSIGNED_INT
				// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
				if ( texture.type !== UnsignedShortType && texture.type !== UnsignedIntType ) {

					console.warn( 'THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.' );

					texture.type = UnsignedShortType;
					glType = utils.convert( texture.type );

				}

			}

			// Depth stencil textures need the DEPTH_STENCIL internal format
			// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
			if ( texture.format === DepthStencilFormat ) {

				internalFormat = _gl.DEPTH_STENCIL;

				// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are
				// DEPTH_STENCIL and type is not UNSIGNED_INT_24_8_WEBGL.
				// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
				if ( texture.type !== UnsignedInt248Type ) {

					console.warn( 'THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.' );

					texture.type = UnsignedInt248Type;
					glType = utils.convert( texture.type );

				}

			}

			state.texImage2D( _gl.TEXTURE_2D, 0, internalFormat, image.width, image.height, 0, glFormat, glType, null );

		} else if ( texture.isDataTexture ) {

			// use manually created mipmaps if available
			// if there are no manual mipmaps
			// set 0 level mipmap and then use GL to generate other mipmap levels

			if ( mipmaps.length > 0 && isPowerOfTwoImage ) {

				for ( var i = 0, il = mipmaps.length; i < il; i ++ ) {

					mipmap = mipmaps[ i ];
					state.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );

				}

				texture.generateMipmaps = false;

			} else {

				state.texImage2D( _gl.TEXTURE_2D, 0, glFormat, image.width, image.height, 0, glFormat, glType, image.data );

			}

		} else if ( texture.isCompressedTexture ) {

			for ( var i = 0, il = mipmaps.length; i < il; i ++ ) {

				mipmap = mipmaps[ i ];

				if ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {

					if ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {

						state.compressedTexImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );

					} else {

						console.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()' );

					}

				} else {

					state.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );

				}

			}

		} else {

			// regular Texture (image, video, canvas)

			// use manually created mipmaps if available
			// if there are no manual mipmaps
			// set 0 level mipmap and then use GL to generate other mipmap levels

			if ( mipmaps.length > 0 && isPowerOfTwoImage ) {

				for ( var i = 0, il = mipmaps.length; i < il; i ++ ) {

					mipmap = mipmaps[ i ];
					state.texImage2D( _gl.TEXTURE_2D, i, glFormat, glFormat, glType, mipmap );

				}

				texture.generateMipmaps = false;

			} else {

				state.texImage2D( _gl.TEXTURE_2D, 0, glFormat, glFormat, glType, image );

			}

		}

		if ( textureNeedsGenerateMipmaps( texture, isPowerOfTwoImage ) ) _gl.generateMipmap( _gl.TEXTURE_2D );

		textureProperties.__version = texture.version;

		if ( texture.onUpdate ) texture.onUpdate( texture );

	}

	// Render targets

	// Setup storage for target texture and bind it to correct framebuffer
	function setupFrameBufferTexture( framebuffer, renderTarget, attachment, textureTarget ) {

		var glFormat = utils.convert( renderTarget.texture.format );
		var glType = utils.convert( renderTarget.texture.type );
		state.texImage2D( textureTarget, 0, glFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );
		_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );
		_gl.framebufferTexture2D( _gl.FRAMEBUFFER, attachment, textureTarget, properties.get( renderTarget.texture ).__webglTexture, 0 );
		_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );

	}

	// Setup storage for internal depth/stencil buffers and bind to correct framebuffer
	function setupRenderBufferStorage( renderbuffer, renderTarget ) {

		_gl.bindRenderbuffer( _gl.RENDERBUFFER, renderbuffer );

		if ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {

			_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_COMPONENT16, renderTarget.width, renderTarget.height );
			_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );

		} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {

			_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_STENCIL, renderTarget.width, renderTarget.height );
			_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );

		} else {

			// FIXME: We don't support !depth !stencil
			_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.RGBA4, renderTarget.width, renderTarget.height );

		}

		_gl.bindRenderbuffer( _gl.RENDERBUFFER, null );

	}

	// Setup resources for a Depth Texture for a FBO (needs an extension)
	function setupDepthTexture( framebuffer, renderTarget ) {

		var isCube = ( renderTarget && renderTarget.isWebGLRenderTargetCube );
		if ( isCube ) throw new Error( 'Depth Texture with cube render targets is not supported' );

		_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );

		if ( ! ( renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture ) ) {

			throw new Error( 'renderTarget.depthTexture must be an instance of THREE.DepthTexture' );

		}

		// upload an empty depth texture with framebuffer size
		if ( ! properties.get( renderTarget.depthTexture ).__webglTexture ||
				renderTarget.depthTexture.image.width !== renderTarget.width ||
				renderTarget.depthTexture.image.height !== renderTarget.height ) {

			renderTarget.depthTexture.image.width = renderTarget.width;
			renderTarget.depthTexture.image.height = renderTarget.height;
			renderTarget.depthTexture.needsUpdate = true;

		}

		setTexture2D( renderTarget.depthTexture, 0 );

		var webglDepthTexture = properties.get( renderTarget.depthTexture ).__webglTexture;

		if ( renderTarget.depthTexture.format === DepthFormat ) {

			_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0 );

		} else if ( renderTarget.depthTexture.format === DepthStencilFormat ) {

			_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0 );

		} else {

			throw new Error( 'Unknown depthTexture format' );

		}

	}

	// Setup GL resources for a non-texture depth buffer
	function setupDepthRenderbuffer( renderTarget ) {

		var renderTargetProperties = properties.get( renderTarget );

		var isCube = ( renderTarget.isWebGLRenderTargetCube === true );

		if ( renderTarget.depthTexture ) {

			if ( isCube ) throw new Error( 'target.depthTexture not supported in Cube render targets' );

			setupDepthTexture( renderTargetProperties.__webglFramebuffer, renderTarget );

		} else {

			if ( isCube ) {

				renderTargetProperties.__webglDepthbuffer = [];

				for ( var i = 0; i < 6; i ++ ) {

					_gl.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer[ i ] );
					renderTargetProperties.__webglDepthbuffer[ i ] = _gl.createRenderbuffer();
					setupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer[ i ], renderTarget );

				}

			} else {

				_gl.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer );
				renderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();
				setupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer, renderTarget );

			}

		}

		_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );

	}

	// Set up GL resources for the render target
	function setupRenderTarget( renderTarget ) {

		var renderTargetProperties = properties.get( renderTarget );
		var textureProperties = properties.get( renderTarget.texture );

		renderTarget.addEventListener( 'dispose', onRenderTargetDispose );

		textureProperties.__webglTexture = _gl.createTexture();

		infoMemory.textures ++;

		var isCube = ( renderTarget.isWebGLRenderTargetCube === true );
		var isTargetPowerOfTwo = isPowerOfTwo( renderTarget );

		// Setup framebuffer

		if ( isCube ) {

			renderTargetProperties.__webglFramebuffer = [];

			for ( var i = 0; i < 6; i ++ ) {

				renderTargetProperties.__webglFramebuffer[ i ] = _gl.createFramebuffer();

			}

		} else {

			renderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();

		}

		// Setup color buffer

		if ( isCube ) {

			state.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture );
			setTextureParameters( _gl.TEXTURE_CUBE_MAP, renderTarget.texture, isTargetPowerOfTwo );

			for ( var i = 0; i < 6; i ++ ) {

				setupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ i ], renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i );

			}

			if ( textureNeedsGenerateMipmaps( renderTarget.texture, isTargetPowerOfTwo ) ) _gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );
			state.bindTexture( _gl.TEXTURE_CUBE_MAP, null );

		} else {

			state.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );
			setTextureParameters( _gl.TEXTURE_2D, renderTarget.texture, isTargetPowerOfTwo );
			setupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D );

			if ( textureNeedsGenerateMipmaps( renderTarget.texture, isTargetPowerOfTwo ) ) _gl.generateMipmap( _gl.TEXTURE_2D );
			state.bindTexture( _gl.TEXTURE_2D, null );

		}

		// Setup depth and stencil buffers

		if ( renderTarget.depthBuffer ) {

			setupDepthRenderbuffer( renderTarget );

		}

	}

	function updateRenderTargetMipmap( renderTarget ) {

		var texture = renderTarget.texture;
		var isTargetPowerOfTwo = isPowerOfTwo( renderTarget );

		if ( textureNeedsGenerateMipmaps( texture, isTargetPowerOfTwo ) ) {

			var target = renderTarget.isWebGLRenderTargetCube ? _gl.TEXTURE_CUBE_MAP : _gl.TEXTURE_2D;
			var webglTexture = properties.get( texture ).__webglTexture;

			state.bindTexture( target, webglTexture );
			_gl.generateMipmap( target );
			state.bindTexture( target, null );

		}

	}

	this.setTexture2D = setTexture2D;
	this.setTextureCube = setTextureCube;
	this.setTextureCubeDynamic = setTextureCubeDynamic;
	this.setupRenderTarget = setupRenderTarget;
	this.updateRenderTargetMipmap = updateRenderTargetMipmap;

}

/**
 * @author fordacious / fordacious.github.io
 */

function WebGLProperties() {

	var properties = {};

	function get( object ) {

		var uuid = object.uuid;
		var map = properties[ uuid ];

		if ( map === undefined ) {

			map = {};
			properties[ uuid ] = map;

		}

		return map;

	}

	function remove( object ) {

		delete properties[ object.uuid ];

	}

	function clear() {

		properties = {};

	}

	return {
		get: get,
		remove: remove,
		clear: clear
	};

}

/**
 * @author mrdoob / http://mrdoob.com/
 */

function WebGLState( gl, extensions, utils ) {

	function ColorBuffer() {

		var locked = false;

		var color = new Vector4();
		var currentColorMask = null;
		var currentColorClear = new Vector4( 0, 0, 0, 0 );

		return {

			setMask: function ( colorMask ) {

				if ( currentColorMask !== colorMask && ! locked ) {

					gl.colorMask( colorMask, colorMask, colorMask, colorMask );
					currentColorMask = colorMask;

				}

			},

			setLocked: function ( lock ) {

				locked = lock;

			},

			setClear: function ( r, g, b, a, premultipliedAlpha ) {

				if ( premultipliedAlpha === true ) {

					r *= a; g *= a; b *= a;

				}

				color.set( r, g, b, a );

				if ( currentColorClear.equals( color ) === false ) {

					gl.clearColor( r, g, b, a );
					currentColorClear.copy( color );

				}

			},

			reset: function () {

				locked = false;

				currentColorMask = null;
				currentColorClear.set( - 1, 0, 0, 0 ); // set to invalid state

			}

		};

	}

	function DepthBuffer() {

		var locked = false;

		var currentDepthMask = null;
		var currentDepthFunc = null;
		var currentDepthClear = null;

		return {

			setTest: function ( depthTest ) {

				if ( depthTest ) {

					enable( gl.DEPTH_TEST );

				} else {

					disable( gl.DEPTH_TEST );

				}

			},

			setMask: function ( depthMask ) {

				if ( currentDepthMask !== depthMask && ! locked ) {

					gl.depthMask( depthMask );
					currentDepthMask = depthMask;

				}

			},

			setFunc: function ( depthFunc ) {

				if ( currentDepthFunc !== depthFunc ) {

					if ( depthFunc ) {

						switch ( depthFunc ) {

							case NeverDepth:

								gl.depthFunc( gl.NEVER );
								break;

							case AlwaysDepth:

								gl.depthFunc( gl.ALWAYS );
								break;

							case LessDepth:

								gl.depthFunc( gl.LESS );
								break;

							case LessEqualDepth:

								gl.depthFunc( gl.LEQUAL );
								break;

							case EqualDepth:

								gl.depthFunc( gl.EQUAL );
								break;

							case GreaterEqualDepth:

								gl.depthFunc( gl.GEQUAL );
								break;

							case GreaterDepth:

								gl.depthFunc( gl.GREATER );
								break;

							case NotEqualDepth:

								gl.depthFunc( gl.NOTEQUAL );
								break;

							default:

								gl.depthFunc( gl.LEQUAL );

						}

					} else {

						gl.depthFunc( gl.LEQUAL );

					}

					currentDepthFunc = depthFunc;

				}

			},

			setLocked: function ( lock ) {

				locked = lock;

			},

			setClear: function ( depth ) {

				if ( currentDepthClear !== depth ) {

					gl.clearDepth( depth );
					currentDepthClear = depth;

				}

			},

			reset: function () {

				locked = false;

				currentDepthMask = null;
				currentDepthFunc = null;
				currentDepthClear = null;

			}

		};

	}

	function StencilBuffer() {

		var locked = false;

		var currentStencilMask = null;
		var currentStencilFunc = null;
		var currentStencilRef = null;
		var currentStencilFuncMask = null;
		var currentStencilFail = null;
		var currentStencilZFail = null;
		var currentStencilZPass = null;
		var currentStencilClear = null;

		return {

			setTest: function ( stencilTest ) {

				if ( stencilTest ) {

					enable( gl.STENCIL_TEST );

				} else {

					disable( gl.STENCIL_TEST );

				}

			},

			setMask: function ( stencilMask ) {

				if ( currentStencilMask !== stencilMask && ! locked ) {

					gl.stencilMask( stencilMask );
					currentStencilMask = stencilMask;

				}

			},

			setFunc: function ( stencilFunc, stencilRef, stencilMask ) {

				if ( currentStencilFunc !== stencilFunc ||
				     currentStencilRef 	!== stencilRef 	||
				     currentStencilFuncMask !== stencilMask ) {

					gl.stencilFunc( stencilFunc, stencilRef, stencilMask );

					currentStencilFunc = stencilFunc;
					currentStencilRef = stencilRef;
					currentStencilFuncMask = stencilMask;

				}

			},

			setOp: function ( stencilFail, stencilZFail, stencilZPass ) {

				if ( currentStencilFail	 !== stencilFail 	||
				     currentStencilZFail !== stencilZFail ||
				     currentStencilZPass !== stencilZPass ) {

					gl.stencilOp( stencilFail, stencilZFail, stencilZPass );

					currentStencilFail = stencilFail;
					currentStencilZFail = stencilZFail;
					currentStencilZPass = stencilZPass;

				}

			},

			setLocked: function ( lock ) {

				locked = lock;

			},

			setClear: function ( stencil ) {

				if ( currentStencilClear !== stencil ) {

					gl.clearStencil( stencil );
					currentStencilClear = stencil;

				}

			},

			reset: function () {

				locked = false;

				currentStencilMask = null;
				currentStencilFunc = null;
				currentStencilRef = null;
				currentStencilFuncMask = null;
				currentStencilFail = null;
				currentStencilZFail = null;
				currentStencilZPass = null;
				currentStencilClear = null;

			}

		};

	}

	//

	var colorBuffer = new ColorBuffer();
	var depthBuffer = new DepthBuffer();
	var stencilBuffer = new StencilBuffer();

	var maxVertexAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );
	var newAttributes = new Uint8Array( maxVertexAttributes );
	var enabledAttributes = new Uint8Array( maxVertexAttributes );
	var attributeDivisors = new Uint8Array( maxVertexAttributes );

	var capabilities = {};

	var compressedTextureFormats = null;

	var currentProgram = null;

	var currentBlending = null;
	var currentBlendEquation = null;
	var currentBlendSrc = null;
	var currentBlendDst = null;
	var currentBlendEquationAlpha = null;
	var currentBlendSrcAlpha = null;
	var currentBlendDstAlpha = null;
	var currentPremultipledAlpha = false;

	var currentFlipSided = null;
	var currentCullFace = null;

	var currentLineWidth = null;

	var currentPolygonOffsetFactor = null;
	var currentPolygonOffsetUnits = null;

	var maxTextures = gl.getParameter( gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS );

	var version = parseFloat( /^WebGL\ ([0-9])/.exec( gl.getParameter( gl.VERSION ) )[ 1 ] );
	var lineWidthAvailable = parseFloat( version ) >= 1.0;

	var currentTextureSlot = null;
	var currentBoundTextures = {};

	var currentScissor = new Vector4();
	var currentViewport = new Vector4();

	function createTexture( type, target, count ) {

		var data = new Uint8Array( 4 ); // 4 is required to match default unpack alignment of 4.
		var texture = gl.createTexture();

		gl.bindTexture( type, texture );
		gl.texParameteri( type, gl.TEXTURE_MIN_FILTER, gl.NEAREST );
		gl.texParameteri( type, gl.TEXTURE_MAG_FILTER, gl.NEAREST );

		for ( var i = 0; i < count; i ++ ) {

			gl.texImage2D( target + i, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, data );

		}

		return texture;

	}

	var emptyTextures = {};
	emptyTextures[ gl.TEXTURE_2D ] = createTexture( gl.TEXTURE_2D, gl.TEXTURE_2D, 1 );
	emptyTextures[ gl.TEXTURE_CUBE_MAP ] = createTexture( gl.TEXTURE_CUBE_MAP, gl.TEXTURE_CUBE_MAP_POSITIVE_X, 6 );

	// init

	colorBuffer.setClear( 0, 0, 0, 1 );
	depthBuffer.setClear( 1 );
	stencilBuffer.setClear( 0 );

	enable( gl.DEPTH_TEST );
	depthBuffer.setFunc( LessEqualDepth );

	setFlipSided( false );
	setCullFace( CullFaceBack );
	enable( gl.CULL_FACE );

	enable( gl.BLEND );
	setBlending( NormalBlending );

	//

	function initAttributes() {

		for ( var i = 0, l = newAttributes.length; i < l; i ++ ) {

			newAttributes[ i ] = 0;

		}

	}

	function enableAttribute( attribute ) {

		newAttributes[ attribute ] = 1;

		if ( enabledAttributes[ attribute ] === 0 ) {

			gl.enableVertexAttribArray( attribute );
			enabledAttributes[ attribute ] = 1;

		}

		if ( attributeDivisors[ attribute ] !== 0 ) {

			var extension = extensions.get( 'ANGLE_instanced_arrays' );

			extension.vertexAttribDivisorANGLE( attribute, 0 );
			attributeDivisors[ attribute ] = 0;

		}

	}

	function enableAttributeAndDivisor( attribute, meshPerAttribute ) {

		newAttributes[ attribute ] = 1;

		if ( enabledAttributes[ attribute ] === 0 ) {

			gl.enableVertexAttribArray( attribute );
			enabledAttributes[ attribute ] = 1;

		}

		if ( attributeDivisors[ attribute ] !== meshPerAttribute ) {

			var extension = extensions.get( 'ANGLE_instanced_arrays' );

			extension.vertexAttribDivisorANGLE( attribute, meshPerAttribute );
			attributeDivisors[ attribute ] = meshPerAttribute;

		}

	}

	function disableUnusedAttributes() {

		for ( var i = 0, l = enabledAttributes.length; i !== l; ++ i ) {

			if ( enabledAttributes[ i ] !== newAttributes[ i ] ) {

				gl.disableVertexAttribArray( i );
				enabledAttributes[ i ] = 0;

			}

		}

	}

	function enable( id ) {

		if ( capabilities[ id ] !== true ) {

			gl.enable( id );
			capabilities[ id ] = true;

		}

	}

	function disable( id ) {

		if ( capabilities[ id ] !== false ) {

			gl.disable( id );
			capabilities[ id ] = false;

		}

	}

	function getCompressedTextureFormats() {

		if ( compressedTextureFormats === null ) {

			compressedTextureFormats = [];

			if ( extensions.get( 'WEBGL_compressed_texture_pvrtc' ) ||
			     extensions.get( 'WEBGL_compressed_texture_s3tc' ) ||
			     extensions.get( 'WEBGL_compressed_texture_etc1' ) ) {

				var formats = gl.getParameter( gl.COMPRESSED_TEXTURE_FORMATS );

				for ( var i = 0; i < formats.length; i ++ ) {

					compressedTextureFormats.push( formats[ i ] );

				}

			}

		}

		return compressedTextureFormats;

	}

	function useProgram( program ) {

		if ( currentProgram !== program ) {

			gl.useProgram( program );

			currentProgram = program;

			return true;

		}

		return false;

	}

	function setBlending( blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha ) {

		if ( blending !== NoBlending ) {

			enable( gl.BLEND );

		} else {

			disable( gl.BLEND );

		}

		if ( blending !== CustomBlending ) {

			if ( blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha ) {

				switch ( blending ) {

					case AdditiveBlending:

						if ( premultipliedAlpha ) {

							gl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );
							gl.blendFuncSeparate( gl.ONE, gl.ONE, gl.ONE, gl.ONE );

						} else {

							gl.blendEquation( gl.FUNC_ADD );
							gl.blendFunc( gl.SRC_ALPHA, gl.ONE );

						}
						break;

					case SubtractiveBlending:

						if ( premultipliedAlpha ) {

							gl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );
							gl.blendFuncSeparate( gl.ZERO, gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ONE_MINUS_SRC_ALPHA );

						} else {

							gl.blendEquation( gl.FUNC_ADD );
							gl.blendFunc( gl.ZERO, gl.ONE_MINUS_SRC_COLOR );

						}
						break;

					case MultiplyBlending:

						if ( premultipliedAlpha ) {

							gl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );
							gl.blendFuncSeparate( gl.ZERO, gl.SRC_COLOR, gl.ZERO, gl.SRC_ALPHA );

						} else {

							gl.blendEquation( gl.FUNC_ADD );
							gl.blendFunc( gl.ZERO, gl.SRC_COLOR );

						}
						break;

					default:

						if ( premultipliedAlpha ) {

							gl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );
							gl.blendFuncSeparate( gl.ONE, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );

						} else {

							gl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );
							gl.blendFuncSeparate( gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );

						}

				}

			}

			currentBlendEquation = null;
			currentBlendSrc = null;
			currentBlendDst = null;
			currentBlendEquationAlpha = null;
			currentBlendSrcAlpha = null;
			currentBlendDstAlpha = null;

		} else {

			blendEquationAlpha = blendEquationAlpha || blendEquation;
			blendSrcAlpha = blendSrcAlpha || blendSrc;
			blendDstAlpha = blendDstAlpha || blendDst;

			if ( blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha ) {

				gl.blendEquationSeparate( utils.convert( blendEquation ), utils.convert( blendEquationAlpha ) );

				currentBlendEquation = blendEquation;
				currentBlendEquationAlpha = blendEquationAlpha;

			}

			if ( blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha ) {

				gl.blendFuncSeparate( utils.convert( blendSrc ), utils.convert( blendDst ), utils.convert( blendSrcAlpha ), utils.convert( blendDstAlpha ) );

				currentBlendSrc = blendSrc;
				currentBlendDst = blendDst;
				currentBlendSrcAlpha = blendSrcAlpha;
				currentBlendDstAlpha = blendDstAlpha;

			}

		}

		currentBlending = blending;
		currentPremultipledAlpha = premultipliedAlpha;

	}

	function setMaterial( material ) {

		material.side === DoubleSide
			? disable( gl.CULL_FACE )
			: enable( gl.CULL_FACE );

		setFlipSided( material.side === BackSide );

		material.transparent === true
			? setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha )
			: setBlending( NoBlending );

		depthBuffer.setFunc( material.depthFunc );
		depthBuffer.setTest( material.depthTest );
		depthBuffer.setMask( material.depthWrite );
		colorBuffer.setMask( material.colorWrite );

		setPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );

	}

	//

	function setFlipSided( flipSided ) {

		if ( currentFlipSided !== flipSided ) {

			if ( flipSided ) {

				gl.frontFace( gl.CW );

			} else {

				gl.frontFace( gl.CCW );

			}

			currentFlipSided = flipSided;

		}

	}

	function setCullFace( cullFace ) {

		if ( cullFace !== CullFaceNone ) {

			enable( gl.CULL_FACE );

			if ( cullFace !== currentCullFace ) {

				if ( cullFace === CullFaceBack ) {

					gl.cullFace( gl.BACK );

				} else if ( cullFace === CullFaceFront ) {

					gl.cullFace( gl.FRONT );

				} else {

					gl.cullFace( gl.FRONT_AND_BACK );

				}

			}

		} else {

			disable( gl.CULL_FACE );

		}

		currentCullFace = cullFace;

	}

	function setLineWidth( width ) {

		if ( width !== currentLineWidth ) {

			if ( lineWidthAvailable ) gl.lineWidth( width );

			currentLineWidth = width;

		}

	}

	function setPolygonOffset( polygonOffset, factor, units ) {

		if ( polygonOffset ) {

			enable( gl.POLYGON_OFFSET_FILL );

			if ( currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units ) {

				gl.polygonOffset( factor, units );

				currentPolygonOffsetFactor = factor;
				currentPolygonOffsetUnits = units;

			}

		} else {

			disable( gl.POLYGON_OFFSET_FILL );

		}

	}

	function setScissorTest( scissorTest ) {

		if ( scissorTest ) {

			enable( gl.SCISSOR_TEST );

		} else {

			disable( gl.SCISSOR_TEST );

		}

	}

	// texture

	function activeTexture( webglSlot ) {

		if ( webglSlot === undefined ) webglSlot = gl.TEXTURE0 + maxTextures - 1;

		if ( currentTextureSlot !== webglSlot ) {

			gl.activeTexture( webglSlot );
			currentTextureSlot = webglSlot;

		}

	}

	function bindTexture( webglType, webglTexture ) {

		if ( currentTextureSlot === null ) {

			activeTexture();

		}

		var boundTexture = currentBoundTextures[ currentTextureSlot ];

		if ( boundTexture === undefined ) {

			boundTexture = { type: undefined, texture: undefined };
			currentBoundTextures[ currentTextureSlot ] = boundTexture;

		}

		if ( boundTexture.type !== webglType || boundTexture.texture !== webglTexture ) {

			gl.bindTexture( webglType, webglTexture || emptyTextures[ webglType ] );

			boundTexture.type = webglType;
			boundTexture.texture = webglTexture;

		}

	}

	function compressedTexImage2D() {

		try {

			gl.compressedTexImage2D.apply( gl, arguments );

		} catch ( error ) {

			console.error( 'THREE.WebGLState:', error );

		}

	}

	function texImage2D() {

		try {

			gl.texImage2D.apply( gl, arguments );

		} catch ( error ) {

			console.error( 'THREE.WebGLState:', error );

		}

	}

	//

	function scissor( scissor ) {

		if ( currentScissor.equals( scissor ) === false ) {

			gl.scissor( scissor.x, scissor.y, scissor.z, scissor.w );
			currentScissor.copy( scissor );

		}

	}

	function viewport( viewport ) {

		if ( currentViewport.equals( viewport ) === false ) {

			gl.viewport( viewport.x, viewport.y, viewport.z, viewport.w );
			currentViewport.copy( viewport );

		}

	}

	//

	function reset() {

		for ( var i = 0; i < enabledAttributes.length; i ++ ) {

			if ( enabledAttributes[ i ] === 1 ) {

				gl.disableVertexAttribArray( i );
				enabledAttributes[ i ] = 0;

			}

		}

		capabilities = {};

		compressedTextureFormats = null;

		currentTextureSlot = null;
		currentBoundTextures = {};

		currentProgram = null;

		currentBlending = null;

		currentFlipSided = null;
		currentCullFace = null;

		colorBuffer.reset();
		depthBuffer.reset();
		stencilBuffer.reset();

	}

	return {

		buffers: {
			color: colorBuffer,
			depth: depthBuffer,
			stencil: stencilBuffer
		},

		initAttributes: initAttributes,
		enableAttribute: enableAttribute,
		enableAttributeAndDivisor: enableAttributeAndDivisor,
		disableUnusedAttributes: disableUnusedAttributes,
		enable: enable,
		disable: disable,
		getCompressedTextureFormats: getCompressedTextureFormats,

		useProgram: useProgram,

		setBlending: setBlending,
		setMaterial: setMaterial,

		setFlipSided: setFlipSided,
		setCullFace: setCullFace,

		setLineWidth: setLineWidth,
		setPolygonOffset: setPolygonOffset,

		setScissorTest: setScissorTest,

		activeTexture: activeTexture,
		bindTexture: bindTexture,
		compressedTexImage2D: compressedTexImage2D,
		texImage2D: texImage2D,

		scissor: scissor,
		viewport: viewport,

		reset: reset

	};

}

/**
 * @author mrdoob / http://mrdoob.com/
 */

function WebGLCapabilities( gl, extensions, parameters ) {

	var maxAnisotropy;

	function getMaxAnisotropy() {

		if ( maxAnisotropy !== undefined ) return maxAnisotropy;

		var extension = extensions.get( 'EXT_texture_filter_anisotropic' );

		if ( extension !== null ) {

			maxAnisotropy = gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );

		} else {

			maxAnisotropy = 0;

		}

		return maxAnisotropy;

	}

	function getMaxPrecision( precision ) {

		if ( precision === 'highp' ) {

			if ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.HIGH_FLOAT ).precision > 0 &&
			     gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.HIGH_FLOAT ).precision > 0 ) {

				return 'highp';

			}

			precision = 'mediump';

		}

		if ( precision === 'mediump' ) {

			if ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.MEDIUM_FLOAT ).precision > 0 &&
			     gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT ).precision > 0 ) {

				return 'mediump';

			}

		}

		return 'lowp';

	}

	var precision = parameters.precision !== undefined ? parameters.precision : 'highp';
	var maxPrecision = getMaxPrecision( precision );

	if ( maxPrecision !== precision ) {

		console.warn( 'THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.' );
		precision = maxPrecision;

	}

	var logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;

	var maxTextures = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );
	var maxVertexTextures = gl.getParameter( gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS );
	var maxTextureSize = gl.getParameter( gl.MAX_TEXTURE_SIZE );
	var maxCubemapSize = gl.getParameter( gl.MAX_CUBE_MAP_TEXTURE_SIZE );

	var maxAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );
	var maxVertexUniforms = gl.getParameter( gl.MAX_VERTEX_UNIFORM_VECTORS );
	var maxVaryings = gl.getParameter( gl.MAX_VARYING_VECTORS );
	var maxFragmentUniforms = gl.getParameter( gl.MAX_FRAGMENT_UNIFORM_VECTORS );

	var vertexTextures = maxVertexTextures > 0;
	var floatFragmentTextures = !! extensions.get( 'OES_texture_float' );
	var floatVertexTextures = vertexTextures && floatFragmentTextures;

	return {

		getMaxAnisotropy: getMaxAnisotropy,
		getMaxPrecision: getMaxPrecision,

		precision: precision,
		logarithmicDepthBuffer: logarithmicDepthBuffer,

		maxTextures: maxTextures,
		maxVertexTextures: maxVertexTextures,
		maxTextureSize: maxTextureSize,
		maxCubemapSize: maxCubemapSize,

		maxAttributes: maxAttributes,
		maxVertexUniforms: maxVertexUniforms,
		maxVaryings: maxVaryings,
		maxFragmentUniforms: maxFragmentUniforms,

		vertexTextures: vertexTextures,
		floatFragmentTextures: floatFragmentTextures,
		floatVertexTextures: floatVertexTextures

	};

}

/**
 * @author mrdoob / http://mrdoob.com/
 * @author greggman / http://games.greggman.com/
 * @author zz85 / http://www.lab4games.net/zz85/blog
 * @author tschw
 */

function PerspectiveCamera( fov, aspect, near, far ) {

	Camera.call( this );

	this.type = 'PerspectiveCamera';

	this.fov = fov !== undefined ? fov : 50;
	this.zoom = 1;

	this.near = near !== undefined ? near : 0.1;
	this.far = far !== undefined ? far : 2000;
	this.focus = 10;

	this.aspect = aspect !== undefined ? aspect : 1;
	this.view = null;

	this.filmGauge = 35;	// width of the film (default in millimeters)
	this.filmOffset = 0;	// horizontal film offset (same unit as gauge)

	this.updateProjectionMatrix();

}

PerspectiveCamera.prototype = Object.assign( Object.create( Camera.prototype ), {

	constructor: PerspectiveCamera,

	isPerspectiveCamera: true,

	copy: function ( source, recursive ) {

		Camera.prototype.copy.call( this, source, recursive );

		this.fov = source.fov;
		this.zoom = source.zoom;

		this.near = source.near;
		this.far = source.far;
		this.focus = source.focus;

		this.aspect = source.aspect;
		this.view = source.view === null ? null : Object.assign( {}, source.view );

		this.filmGauge = source.filmGauge;
		this.filmOffset = source.filmOffset;

		return this;

	},

	/**
	 * Sets the FOV by focal length in respect to the current .filmGauge.
	 *
	 * The default film gauge is 35, so that the focal length can be specified for
	 * a 35mm (full frame) camera.
	 *
	 * Values for focal length and film gauge must have the same unit.
	 */
	setFocalLength: function ( focalLength ) {

		// see http://www.bobatkins.com/photography/technical/field_of_view.html
		var vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;

		this.fov = _Math.RAD2DEG * 2 * Math.atan( vExtentSlope );
		this.updateProjectionMatrix();

	},

	/**
	 * Calculates the focal length from the current .fov and .filmGauge.
	 */
	getFocalLength: function () {

		var vExtentSlope = Math.tan( _Math.DEG2RAD * 0.5 * this.fov );

		return 0.5 * this.getFilmHeight() / vExtentSlope;

	},

	getEffectiveFOV: function () {

		return _Math.RAD2DEG * 2 * Math.atan(
			Math.tan( _Math.DEG2RAD * 0.5 * this.fov ) / this.zoom );

	},

	getFilmWidth: function () {

		// film not completely covered in portrait format (aspect < 1)
		return this.filmGauge * Math.min( this.aspect, 1 );

	},

	getFilmHeight: function () {

		// film not completely covered in landscape format (aspect > 1)
		return this.filmGauge / Math.max( this.aspect, 1 );

	},

	/**
	 * Sets an offset in a larger frustum. This is useful for multi-window or
	 * multi-monitor/multi-machine setups.
	 *
	 * For example, if you have 3x2 monitors and each monitor is 1920x1080 and
	 * the monitors are in grid like this
	 *
	 *   +---+---+---+
	 *   | A | B | C |
	 *   +---+---+---+
	 *   | D | E | F |
	 *   +---+---+---+
	 *
	 * then for each monitor you would call it like this
	 *
	 *   var w = 1920;
	 *   var h = 1080;
	 *   var fullWidth = w * 3;
	 *   var fullHeight = h * 2;
	 *
	 *   --A--
	 *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );
	 *   --B--
	 *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );
	 *   --C--
	 *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );
	 *   --D--
	 *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );
	 *   --E--
	 *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );
	 *   --F--
	 *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );
	 *
	 *   Note there is no reason monitors have to be the same size or in a grid.
	 */
	setViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {

		this.aspect = fullWidth / fullHeight;

		if ( this.view === null ) {

			this.view = {
				enabled: true,
				fullWidth: 1,
				fullHeight: 1,
				offsetX: 0,
				offsetY: 0,
				width: 1,
				height: 1
			};

		}

		this.view.enabled = true;
		this.view.fullWidth = fullWidth;
		this.view.fullHeight = fullHeight;
		this.view.offsetX = x;
		this.view.offsetY = y;
		this.view.width = width;
		this.view.height = height;

		this.updateProjectionMatrix();

	},

	clearViewOffset: function () {

		if ( this.view !== null ) {

			this.view.enabled = false;

		}

		this.updateProjectionMatrix();

	},

	updateProjectionMatrix: function () {

		var near = this.near,
			top = near * Math.tan(
				_Math.DEG2RAD * 0.5 * this.fov ) / this.zoom,
			height = 2 * top,
			width = this.aspect * height,
			left = - 0.5 * width,
			view = this.view;

		if ( this.view !== null && this.view.enabled ) {

			var fullWidth = view.fullWidth,
				fullHeight = view.fullHeight;

			left += view.offsetX * width / fullWidth;
			top -= view.offsetY * height / fullHeight;
			width *= view.width / fullWidth;
			height *= view.height / fullHeight;

		}

		var skew = this.filmOffset;
		if ( skew !== 0 ) left += near * skew / this.getFilmWidth();

		this.projectionMatrix.makePerspective( left, left + width, top, top - height, near, this.far );

	},

	toJSON: function ( meta ) {

		var data = Object3D.prototype.toJSON.call( this, meta );

		data.object.fov = this.fov;
		data.object.zoom = this.zoom;

		data.object.near = this.near;
		data.object.far = this.far;
		data.object.focus = this.focus;

		data.object.aspect = this.aspect;

		if ( this.view !== null ) data.object.view = Object.assign( {}, this.view );

		data.object.filmGauge = this.filmGauge;
		data.object.filmOffset = this.filmOffset;

		return data;

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 */

function ArrayCamera( array ) {

	PerspectiveCamera.call( this );

	this.cameras = array || [];

}

ArrayCamera.prototype = Object.assign( Object.create( PerspectiveCamera.prototype ), {

	constructor: ArrayCamera,

	isArrayCamera: true

} );

/**
 * @author mrdoob / http://mrdoob.com/
 */

function WebVRManager( renderer ) {

	var scope = this;

	var device = null;
	var frameData = null;

	if ( typeof window !== 'undefined' && 'VRFrameData' in window ) {

		frameData = new window.VRFrameData();

	}

	var matrixWorldInverse = new Matrix4();

	var standingMatrix = new Matrix4();
	var standingMatrixInverse = new Matrix4();

	var cameraL = new PerspectiveCamera();
	cameraL.bounds = new Vector4( 0.0, 0.0, 0.5, 1.0 );
	cameraL.layers.enable( 1 );

	var cameraR = new PerspectiveCamera();
	cameraR.bounds = new Vector4( 0.5, 0.0, 0.5, 1.0 );
	cameraR.layers.enable( 2 );

	var cameraVR = new ArrayCamera( [ cameraL, cameraR ] );
	cameraVR.layers.enable( 1 );
	cameraVR.layers.enable( 2 );

	//

	var currentSize, currentPixelRatio;

	function onVRDisplayPresentChange() {

		if ( device !== null && device.isPresenting ) {

			var eyeParameters = device.getEyeParameters( 'left' );
			var renderWidth = eyeParameters.renderWidth;
			var renderHeight = eyeParameters.renderHeight;

			currentPixelRatio = renderer.getPixelRatio();
			currentSize = renderer.getSize();

			renderer.setDrawingBufferSize( renderWidth * 2, renderHeight, 1 );

		} else if ( scope.enabled ) {

			renderer.setDrawingBufferSize( currentSize.width, currentSize.height, currentPixelRatio );

		}

	}

	if ( typeof window !== 'undefined' ) {

		window.addEventListener( 'vrdisplaypresentchange', onVRDisplayPresentChange, false );

	}

	//

	this.enabled = false;
	this.standing = false;

	this.getDevice = function () {

		return device;

	};

	this.setDevice = function ( value ) {

		if ( value !== undefined ) device = value;

	};

	this.getCamera = function ( camera ) {

		if ( device === null ) return camera;

		device.depthNear = camera.near;
		device.depthFar = camera.far;

		device.getFrameData( frameData );

		//

		var pose = frameData.pose;

		if ( pose.position !== null ) {

			camera.position.fromArray( pose.position );

		} else {

			camera.position.set( 0, 0, 0 );

		}

		if ( pose.orientation !== null ) {

			camera.quaternion.fromArray( pose.orientation );

		}

		camera.updateMatrixWorld();

		var stageParameters = device.stageParameters;

		if ( this.standing && stageParameters ) {

			standingMatrix.fromArray( stageParameters.sittingToStandingTransform );
			standingMatrixInverse.getInverse( standingMatrix );

			camera.matrixWorld.multiply( standingMatrix );
			camera.matrixWorldInverse.multiply( standingMatrixInverse );

		}

		if ( device.isPresenting === false ) return camera;

		//

		cameraL.near = camera.near;
		cameraR.near = camera.near;

		cameraL.far = camera.far;
		cameraR.far = camera.far;

		cameraVR.matrixWorld.copy( camera.matrixWorld );
		cameraVR.matrixWorldInverse.copy( camera.matrixWorldInverse );

		cameraL.matrixWorldInverse.fromArray( frameData.leftViewMatrix );
		cameraR.matrixWorldInverse.fromArray( frameData.rightViewMatrix );

		if ( this.standing && stageParameters ) {

			cameraL.matrixWorldInverse.multiply( standingMatrixInverse );
			cameraR.matrixWorldInverse.multiply( standingMatrixInverse );

		}

		var parent = camera.parent;

		if ( parent !== null ) {

			matrixWorldInverse.getInverse( parent.matrixWorld );

			cameraL.matrixWorldInverse.multiply( matrixWorldInverse );
			cameraR.matrixWorldInverse.multiply( matrixWorldInverse );

		}

		// envMap and Mirror needs camera.matrixWorld

		cameraL.matrixWorld.getInverse( cameraL.matrixWorldInverse );
		cameraR.matrixWorld.getInverse( cameraR.matrixWorldInverse );

		cameraL.projectionMatrix.fromArray( frameData.leftProjectionMatrix );
		cameraR.projectionMatrix.fromArray( frameData.rightProjectionMatrix );

		// HACK @mrdoob
		// https://github.com/w3c/webvr/issues/203

		cameraVR.projectionMatrix.copy( cameraL.projectionMatrix );

		//

		var layers = device.getLayers();

		if ( layers.length ) {

			var layer = layers[ 0 ];

			if ( layer.leftBounds !== null && layer.leftBounds.length === 4 ) {

				cameraL.bounds.fromArray( layer.leftBounds );

			}

			if ( layer.rightBounds !== null && layer.rightBounds.length === 4 ) {

				cameraR.bounds.fromArray( layer.rightBounds );

			}

		}

		return cameraVR;

	};

	this.getStandingMatrix = function () {

		return standingMatrix;

	};

	this.submitFrame = function () {

		if ( device && device.isPresenting ) device.submitFrame();

	};

	this.dispose = function () {

		if ( typeof window !== 'undefined' ) {

			window.removeEventListener( 'vrdisplaypresentchange', onVRDisplayPresentChange );

		}

	};

}

/**
 * @author mrdoob / http://mrdoob.com/
 */

function WebGLExtensions( gl ) {

	var extensions = {};

	return {

		get: function ( name ) {

			if ( extensions[ name ] !== undefined ) {

				return extensions[ name ];

			}

			var extension;

			switch ( name ) {

				case 'WEBGL_depth_texture':
					extension = gl.getExtension( 'WEBGL_depth_texture' ) || gl.getExtension( 'MOZ_WEBGL_depth_texture' ) || gl.getExtension( 'WEBKIT_WEBGL_depth_texture' );
					break;

				case 'EXT_texture_filter_anisotropic':
					extension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) || gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) || gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );
					break;

				case 'WEBGL_compressed_texture_s3tc':
					extension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );
					break;

				case 'WEBGL_compressed_texture_pvrtc':
					extension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );
					break;

				case 'WEBGL_compressed_texture_etc1':
					extension = gl.getExtension( 'WEBGL_compressed_texture_etc1' );
					break;

				default:
					extension = gl.getExtension( name );

			}

			if ( extension === null ) {

				console.warn( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );

			}

			extensions[ name ] = extension;

			return extension;

		}

	};

}

/**
 * @author tschw
 */

function WebGLClipping() {

	var scope = this,

		globalState = null,
		numGlobalPlanes = 0,
		localClippingEnabled = false,
		renderingShadows = false,

		plane = new Plane(),
		viewNormalMatrix = new Matrix3(),

		uniform = { value: null, needsUpdate: false };

	this.uniform = uniform;
	this.numPlanes = 0;
	this.numIntersection = 0;

	this.init = function ( planes, enableLocalClipping, camera ) {

		var enabled =
			planes.length !== 0 ||
			enableLocalClipping ||
			// enable state of previous frame - the clipping code has to
			// run another frame in order to reset the state:
			numGlobalPlanes !== 0 ||
			localClippingEnabled;

		localClippingEnabled = enableLocalClipping;

		globalState = projectPlanes( planes, camera, 0 );
		numGlobalPlanes = planes.length;

		return enabled;

	};

	this.beginShadows = function () {

		renderingShadows = true;
		projectPlanes( null );

	};

	this.endShadows = function () {

		renderingShadows = false;
		resetGlobalState();

	};

	this.setState = function ( planes, clipIntersection, clipShadows, camera, cache, fromCache ) {

		if ( ! localClippingEnabled || planes === null || planes.length === 0 || renderingShadows && ! clipShadows ) {

			// there's no local clipping

			if ( renderingShadows ) {

				// there's no global clipping

				projectPlanes( null );

			} else {

				resetGlobalState();

			}

		} else {

			var nGlobal = renderingShadows ? 0 : numGlobalPlanes,
				lGlobal = nGlobal * 4,

				dstArray = cache.clippingState || null;

			uniform.value = dstArray; // ensure unique state

			dstArray = projectPlanes( planes, camera, lGlobal, fromCache );

			for ( var i = 0; i !== lGlobal; ++ i ) {

				dstArray[ i ] = globalState[ i ];

			}

			cache.clippingState = dstArray;
			this.numIntersection = clipIntersection ? this.numPlanes : 0;
			this.numPlanes += nGlobal;

		}


	};

	function resetGlobalState() {

		if ( uniform.value !== globalState ) {

			uniform.value = globalState;
			uniform.needsUpdate = numGlobalPlanes > 0;

		}

		scope.numPlanes = numGlobalPlanes;
		scope.numIntersection = 0;

	}

	function projectPlanes( planes, camera, dstOffset, skipTransform ) {

		var nPlanes = planes !== null ? planes.length : 0,
			dstArray = null;

		if ( nPlanes !== 0 ) {

			dstArray = uniform.value;

			if ( skipTransform !== true || dstArray === null ) {

				var flatSize = dstOffset + nPlanes * 4,
					viewMatrix = camera.matrixWorldInverse;

				viewNormalMatrix.getNormalMatrix( viewMatrix );

				if ( dstArray === null || dstArray.length < flatSize ) {

					dstArray = new Float32Array( flatSize );

				}

				for ( var i = 0, i4 = dstOffset; i !== nPlanes; ++ i, i4 += 4 ) {

					plane.copy( planes[ i ] ).applyMatrix4( viewMatrix, viewNormalMatrix );

					plane.normal.toArray( dstArray, i4 );
					dstArray[ i4 + 3 ] = plane.constant;

				}

			}

			uniform.value = dstArray;
			uniform.needsUpdate = true;

		}

		scope.numPlanes = nPlanes;

		return dstArray;

	}

}

/**
 * @author thespite / http://www.twitter.com/thespite
 */

function WebGLUtils( gl, extensions ) {

	function convert( p ) {

		var extension;

		if ( p === RepeatWrapping ) return gl.REPEAT;
		if ( p === ClampToEdgeWrapping ) return gl.CLAMP_TO_EDGE;
		if ( p === MirroredRepeatWrapping ) return gl.MIRRORED_REPEAT;

		if ( p === NearestFilter ) return gl.NEAREST;
		if ( p === NearestMipMapNearestFilter ) return gl.NEAREST_MIPMAP_NEAREST;
		if ( p === NearestMipMapLinearFilter ) return gl.NEAREST_MIPMAP_LINEAR;

		if ( p === LinearFilter ) return gl.LINEAR;
		if ( p === LinearMipMapNearestFilter ) return gl.LINEAR_MIPMAP_NEAREST;
		if ( p === LinearMipMapLinearFilter ) return gl.LINEAR_MIPMAP_LINEAR;

		if ( p === UnsignedByteType ) return gl.UNSIGNED_BYTE;
		if ( p === UnsignedShort4444Type ) return gl.UNSIGNED_SHORT_4_4_4_4;
		if ( p === UnsignedShort5551Type ) return gl.UNSIGNED_SHORT_5_5_5_1;
		if ( p === UnsignedShort565Type ) return gl.UNSIGNED_SHORT_5_6_5;

		if ( p === ByteType ) return gl.BYTE;
		if ( p === ShortType ) return gl.SHORT;
		if ( p === UnsignedShortType ) return gl.UNSIGNED_SHORT;
		if ( p === IntType ) return gl.INT;
		if ( p === UnsignedIntType ) return gl.UNSIGNED_INT;
		if ( p === FloatType ) return gl.FLOAT;

		if ( p === HalfFloatType ) {

			extension = extensions.get( 'OES_texture_half_float' );

			if ( extension !== null ) return extension.HALF_FLOAT_OES;

		}

		if ( p === AlphaFormat ) return gl.ALPHA;
		if ( p === RGBFormat ) return gl.RGB;
		if ( p === RGBAFormat ) return gl.RGBA;
		if ( p === LuminanceFormat ) return gl.LUMINANCE;
		if ( p === LuminanceAlphaFormat ) return gl.LUMINANCE_ALPHA;
		if ( p === DepthFormat ) return gl.DEPTH_COMPONENT;
		if ( p === DepthStencilFormat ) return gl.DEPTH_STENCIL;

		if ( p === AddEquation ) return gl.FUNC_ADD;
		if ( p === SubtractEquation ) return gl.FUNC_SUBTRACT;
		if ( p === ReverseSubtractEquation ) return gl.FUNC_REVERSE_SUBTRACT;

		if ( p === ZeroFactor ) return gl.ZERO;
		if ( p === OneFactor ) return gl.ONE;
		if ( p === SrcColorFactor ) return gl.SRC_COLOR;
		if ( p === OneMinusSrcColorFactor ) return gl.ONE_MINUS_SRC_COLOR;
		if ( p === SrcAlphaFactor ) return gl.SRC_ALPHA;
		if ( p === OneMinusSrcAlphaFactor ) return gl.ONE_MINUS_SRC_ALPHA;
		if ( p === DstAlphaFactor ) return gl.DST_ALPHA;
		if ( p === OneMinusDstAlphaFactor ) return gl.ONE_MINUS_DST_ALPHA;

		if ( p === DstColorFactor ) return gl.DST_COLOR;
		if ( p === OneMinusDstColorFactor ) return gl.ONE_MINUS_DST_COLOR;
		if ( p === SrcAlphaSaturateFactor ) return gl.SRC_ALPHA_SATURATE;

		if ( p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format ||
			p === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format ) {

			extension = extensions.get( 'WEBGL_compressed_texture_s3tc' );

			if ( extension !== null ) {

				if ( p === RGB_S3TC_DXT1_Format ) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;
				if ( p === RGBA_S3TC_DXT1_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;
				if ( p === RGBA_S3TC_DXT3_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;
				if ( p === RGBA_S3TC_DXT5_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;

			}

		}

		if ( p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format ||
			p === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format ) {

			extension = extensions.get( 'WEBGL_compressed_texture_pvrtc' );

			if ( extension !== null ) {

				if ( p === RGB_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
				if ( p === RGB_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
				if ( p === RGBA_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
				if ( p === RGBA_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;

			}

		}

		if ( p === RGB_ETC1_Format ) {

			extension = extensions.get( 'WEBGL_compressed_texture_etc1' );

			if ( extension !== null ) return extension.COMPRESSED_RGB_ETC1_WEBGL;

		}

		if ( p === MinEquation || p === MaxEquation ) {

			extension = extensions.get( 'EXT_blend_minmax' );

			if ( extension !== null ) {

				if ( p === MinEquation ) return extension.MIN_EXT;
				if ( p === MaxEquation ) return extension.MAX_EXT;

			}

		}

		if ( p === UnsignedInt248Type ) {

			extension = extensions.get( 'WEBGL_depth_texture' );

			if ( extension !== null ) return extension.UNSIGNED_INT_24_8_WEBGL;

		}

		return 0;

	}

	return { convert: convert };

}

/**
 * @author supereggbert / http://www.paulbrunt.co.uk/
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 * @author szimek / https://github.com/szimek/
 * @author tschw
 */

function WebGLRenderer( parameters ) {

	console.log( 'THREE.WebGLRenderer', REVISION );

	parameters = parameters || {};

	var _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' ),
		_context = parameters.context !== undefined ? parameters.context : null,

		_alpha = parameters.alpha !== undefined ? parameters.alpha : false,
		_depth = parameters.depth !== undefined ? parameters.depth : true,
		_stencil = parameters.stencil !== undefined ? parameters.stencil : true,
		_antialias = parameters.antialias !== undefined ? parameters.antialias : false,
		_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,
		_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false;

	var lightsArray = [];
	var shadowsArray = [];

	var currentRenderList = null;

	var spritesArray = [];
	var flaresArray = [];

	// public properties

	this.domElement = _canvas;
	this.context = null;

	// clearing

	this.autoClear = true;
	this.autoClearColor = true;
	this.autoClearDepth = true;
	this.autoClearStencil = true;

	// scene graph

	this.sortObjects = true;

	// user-defined clipping

	this.clippingPlanes = [];
	this.localClippingEnabled = false;

	// physically based shading

	this.gammaFactor = 2.0;	// for backwards compatibility
	this.gammaInput = false;
	this.gammaOutput = false;

	// physical lights

	this.physicallyCorrectLights = false;

	// tone mapping

	this.toneMapping = LinearToneMapping;
	this.toneMappingExposure = 1.0;
	this.toneMappingWhitePoint = 1.0;

	// morphs

	this.maxMorphTargets = 8;
	this.maxMorphNormals = 4;

	// internal properties

	var _this = this,

		_isContextLost = false,

		// internal state cache

		_currentRenderTarget = null,
		_currentFramebuffer = null,
		_currentMaterialId = - 1,
		_currentGeometryProgram = '',

		_currentCamera = null,
		_currentArrayCamera = null,

		_currentViewport = new Vector4(),
		_currentScissor = new Vector4(),
		_currentScissorTest = null,

		//

		_usedTextureUnits = 0,

		//

		_width = _canvas.width,
		_height = _canvas.height,

		_pixelRatio = 1,

		_viewport = new Vector4( 0, 0, _width, _height ),
		_scissor = new Vector4( 0, 0, _width, _height ),
		_scissorTest = false,

		// frustum

		_frustum = new Frustum(),

		// clipping

		_clipping = new WebGLClipping(),
		_clippingEnabled = false,
		_localClippingEnabled = false,

		// camera matrices cache

		_projScreenMatrix = new Matrix4(),

		_vector3 = new Vector3(),

		// info

		_infoMemory = {
			geometries: 0,
			textures: 0
		},

		_infoRender = {

			frame: 0,
			calls: 0,
			vertices: 0,
			faces: 0,
			points: 0

		};

	this.info = {

		render: _infoRender,
		memory: _infoMemory,
		programs: null

	};

	function getTargetPixelRatio() {

		return _currentRenderTarget === null ? _pixelRatio : 1;

	}

	// initialize

	var _gl;

	try {

		var contextAttributes = {
			alpha: _alpha,
			depth: _depth,
			stencil: _stencil,
			antialias: _antialias,
			premultipliedAlpha: _premultipliedAlpha,
			preserveDrawingBuffer: _preserveDrawingBuffer
		};

		_gl = _context || _canvas.getContext( 'webgl', contextAttributes ) || _canvas.getContext( 'experimental-webgl', contextAttributes );

		if ( _gl === null ) {

			if ( _canvas.getContext( 'webgl' ) !== null ) {

				throw 'Error creating WebGL context with your selected attributes.';

			} else {

				throw 'Error creating WebGL context.';

			}

		}

		// Some experimental-webgl implementations do not have getShaderPrecisionFormat

		if ( _gl.getShaderPrecisionFormat === undefined ) {

			_gl.getShaderPrecisionFormat = function () {

				return { 'rangeMin': 1, 'rangeMax': 1, 'precision': 1 };

			};

		}

		_canvas.addEventListener( 'webglcontextlost', onContextLost, false );
		_canvas.addEventListener( 'webglcontextrestored', onContextRestore, false );

	} catch ( error ) {

		console.error( 'THREE.WebGLRenderer: ' + error );

	}

	var extensions, capabilities, state;
	var properties, textures, attributes, geometries, objects, lights;
	var programCache, renderLists;

	var background, morphtargets, bufferRenderer, indexedBufferRenderer;
	var flareRenderer, spriteRenderer;

	var utils;

	function initGLContext() {

		extensions = new WebGLExtensions( _gl );
		extensions.get( 'WEBGL_depth_texture' );
		extensions.get( 'OES_texture_float' );
		extensions.get( 'OES_texture_float_linear' );
		extensions.get( 'OES_texture_half_float' );
		extensions.get( 'OES_texture_half_float_linear' );
		extensions.get( 'OES_standard_derivatives' );
		extensions.get( 'OES_element_index_uint' );
		extensions.get( 'ANGLE_instanced_arrays' );

		utils = new WebGLUtils( _gl, extensions );

		capabilities = new WebGLCapabilities( _gl, extensions, parameters );

		state = new WebGLState( _gl, extensions, utils );
		state.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ) );
		state.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ) );

		properties = new WebGLProperties();
		textures = new WebGLTextures( _gl, extensions, state, properties, capabilities, utils, _infoMemory );
		attributes = new WebGLAttributes( _gl );
		geometries = new WebGLGeometries( _gl, attributes, _infoMemory );
		objects = new WebGLObjects( geometries, _infoRender );
		morphtargets = new WebGLMorphtargets( _gl );
		programCache = new WebGLPrograms( _this, extensions, capabilities );
		lights = new WebGLLights();
		renderLists = new WebGLRenderLists();

		background = new WebGLBackground( _this, state, geometries, _premultipliedAlpha );

		bufferRenderer = new WebGLBufferRenderer( _gl, extensions, _infoRender );
		indexedBufferRenderer = new WebGLIndexedBufferRenderer( _gl, extensions, _infoRender );

		flareRenderer = new WebGLFlareRenderer( _this, _gl, state, textures, capabilities );
		spriteRenderer = new WebGLSpriteRenderer( _this, _gl, state, textures, capabilities );

		_this.info.programs = programCache.programs;

		_this.context = _gl;
		_this.capabilities = capabilities;
		_this.extensions = extensions;
		_this.properties = properties;
		_this.renderLists = renderLists;
		_this.state = state;

	}

	initGLContext();

	// vr

	var vr = new WebVRManager( _this );

	this.vr = vr;

	// shadow map

	var shadowMap = new WebGLShadowMap( _this, objects, capabilities.maxTextureSize );

	this.shadowMap = shadowMap;

	// API

	this.getContext = function () {

		return _gl;

	};

	this.getContextAttributes = function () {

		return _gl.getContextAttributes();

	};

	this.forceContextLoss = function () {

		var extension = extensions.get( 'WEBGL_lose_context' );
		if ( extension ) extension.loseContext();

	};

	this.forceContextRestore = function () {

		var extension = extensions.get( 'WEBGL_lose_context' );
		if ( extension ) extension.restoreContext();

	};

	this.getPixelRatio = function () {

		return _pixelRatio;

	};

	this.setPixelRatio = function ( value ) {

		if ( value === undefined ) return;

		_pixelRatio = value;

		this.setSize( _width, _height, false );

	};

	this.getSize = function () {

		return {
			width: _width,
			height: _height
		};

	};

	this.setSize = function ( width, height, updateStyle ) {

		var device = vr.getDevice();

		if ( device && device.isPresenting ) {

			console.warn( 'THREE.WebGLRenderer: Can\'t change size while VR device is presenting.' );
			return;

		}

		_width = width;
		_height = height;

		_canvas.width = width * _pixelRatio;
		_canvas.height = height * _pixelRatio;

		if ( updateStyle !== false ) {

			_canvas.style.width = width + 'px';
			_canvas.style.height = height + 'px';

		}

		this.setViewport( 0, 0, width, height );

	};

	this.getDrawingBufferSize = function () {

		return {
			width: _width * _pixelRatio,
			height: _height * _pixelRatio
		};

	};

	this.setDrawingBufferSize = function ( width, height, pixelRatio ) {

		_width = width;
		_height = height;

		_pixelRatio = pixelRatio;

		_canvas.width = width * pixelRatio;
		_canvas.height = height * pixelRatio;

		this.setViewport( 0, 0, width, height );

	};

	this.setViewport = function ( x, y, width, height ) {

		_viewport.set( x, _height - y - height, width, height );
		state.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ) );

	};

	this.setScissor = function ( x, y, width, height ) {

		_scissor.set( x, _height - y - height, width, height );
		state.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ) );

	};

	this.setScissorTest = function ( boolean ) {

		state.setScissorTest( _scissorTest = boolean );

	};

	// Clearing

	this.getClearColor = function () {

		return background.getClearColor();

	};

	this.setClearColor = function () {

		background.setClearColor.apply( background, arguments );

	};

	this.getClearAlpha = function () {

		return background.getClearAlpha();

	};

	this.setClearAlpha = function () {

		background.setClearAlpha.apply( background, arguments );

	};

	this.clear = function ( color, depth, stencil ) {

		var bits = 0;

		if ( color === undefined || color ) bits |= _gl.COLOR_BUFFER_BIT;
		if ( depth === undefined || depth ) bits |= _gl.DEPTH_BUFFER_BIT;
		if ( stencil === undefined || stencil ) bits |= _gl.STENCIL_BUFFER_BIT;

		_gl.clear( bits );

	};

	this.clearColor = function () {

		this.clear( true, false, false );

	};

	this.clearDepth = function () {

		this.clear( false, true, false );

	};

	this.clearStencil = function () {

		this.clear( false, false, true );

	};

	this.clearTarget = function ( renderTarget, color, depth, stencil ) {

		this.setRenderTarget( renderTarget );
		this.clear( color, depth, stencil );

	};

	//

	this.dispose = function () {

		_canvas.removeEventListener( 'webglcontextlost', onContextLost, false );
		_canvas.removeEventListener( 'webglcontextrestored', onContextRestore, false );

		renderLists.dispose();

		vr.dispose();

	};

	// Events

	function onContextLost( event ) {

		event.preventDefault();

		console.log( 'THREE.WebGLRenderer: Context Lost.' );

		_isContextLost = true;

	}

	function onContextRestore( /* event */ ) {

		console.log( 'THREE.WebGLRenderer: Context Restored.' );

		_isContextLost = false;

		initGLContext();

	}

	function onMaterialDispose( event ) {

		var material = event.target;

		material.removeEventListener( 'dispose', onMaterialDispose );

		deallocateMaterial( material );

	}

	// Buffer deallocation

	function deallocateMaterial( material ) {

		releaseMaterialProgramReference( material );

		properties.remove( material );

	}


	function releaseMaterialProgramReference( material ) {

		var programInfo = properties.get( material ).program;

		material.program = undefined;

		if ( programInfo !== undefined ) {

			programCache.releaseProgram( programInfo );

		}

	}

	// Buffer rendering

	function renderObjectImmediate( object, program, material ) {

		object.render( function ( object ) {

			_this.renderBufferImmediate( object, program, material );

		} );

	}

	this.renderBufferImmediate = function ( object, program, material ) {

		state.initAttributes();

		var buffers = properties.get( object );

		if ( object.hasPositions && ! buffers.position ) buffers.position = _gl.createBuffer();
		if ( object.hasNormals && ! buffers.normal ) buffers.normal = _gl.createBuffer();
		if ( object.hasUvs && ! buffers.uv ) buffers.uv = _gl.createBuffer();
		if ( object.hasColors && ! buffers.color ) buffers.color = _gl.createBuffer();

		var programAttributes = program.getAttributes();

		if ( object.hasPositions ) {

			_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.position );
			_gl.bufferData( _gl.ARRAY_BUFFER, object.positionArray, _gl.DYNAMIC_DRAW );

			state.enableAttribute( programAttributes.position );
			_gl.vertexAttribPointer( programAttributes.position, 3, _gl.FLOAT, false, 0, 0 );

		}

		if ( object.hasNormals ) {

			_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.normal );

			if ( ! material.isMeshPhongMaterial &&
				! material.isMeshStandardMaterial &&
				! material.isMeshNormalMaterial &&
				material.flatShading === true ) {

				for ( var i = 0, l = object.count * 3; i < l; i += 9 ) {

					var array = object.normalArray;

					var nx = ( array[ i + 0 ] + array[ i + 3 ] + array[ i + 6 ] ) / 3;
					var ny = ( array[ i + 1 ] + array[ i + 4 ] + array[ i + 7 ] ) / 3;
					var nz = ( array[ i + 2 ] + array[ i + 5 ] + array[ i + 8 ] ) / 3;

					array[ i + 0 ] = nx;
					array[ i + 1 ] = ny;
					array[ i + 2 ] = nz;

					array[ i + 3 ] = nx;
					array[ i + 4 ] = ny;
					array[ i + 5 ] = nz;

					array[ i + 6 ] = nx;
					array[ i + 7 ] = ny;
					array[ i + 8 ] = nz;

				}

			}

			_gl.bufferData( _gl.ARRAY_BUFFER, object.normalArray, _gl.DYNAMIC_DRAW );

			state.enableAttribute( programAttributes.normal );

			_gl.vertexAttribPointer( programAttributes.normal, 3, _gl.FLOAT, false, 0, 0 );

		}

		if ( object.hasUvs && material.map ) {

			_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.uv );
			_gl.bufferData( _gl.ARRAY_BUFFER, object.uvArray, _gl.DYNAMIC_DRAW );

			state.enableAttribute( programAttributes.uv );

			_gl.vertexAttribPointer( programAttributes.uv, 2, _gl.FLOAT, false, 0, 0 );

		}

		if ( object.hasColors && material.vertexColors !== NoColors ) {

			_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.color );
			_gl.bufferData( _gl.ARRAY_BUFFER, object.colorArray, _gl.DYNAMIC_DRAW );

			state.enableAttribute( programAttributes.color );

			_gl.vertexAttribPointer( programAttributes.color, 3, _gl.FLOAT, false, 0, 0 );

		}

		state.disableUnusedAttributes();

		_gl.drawArrays( _gl.TRIANGLES, 0, object.count );

		object.count = 0;

	};

	this.renderBufferDirect = function ( camera, fog, geometry, material, object, group ) {

		state.setMaterial( material );

		var program = setProgram( camera, fog, material, object );
		var geometryProgram = geometry.id + '_' + program.id + '_' + ( material.wireframe === true );

		var updateBuffers = false;

		if ( geometryProgram !== _currentGeometryProgram ) {

			_currentGeometryProgram = geometryProgram;
			updateBuffers = true;

		}

		if ( object.morphTargetInfluences ) {

			morphtargets.update( object, geometry, material, program );

			updateBuffers = true;

		}

		//

		var index = geometry.index;
		var position = geometry.attributes.position;
		var rangeFactor = 1;

		if ( material.wireframe === true ) {

			index = geometries.getWireframeAttribute( geometry );
			rangeFactor = 2;

		}

		var attribute;
		var renderer = bufferRenderer;

		if ( index !== null ) {

			attribute = attributes.get( index );

			renderer = indexedBufferRenderer;
			renderer.setIndex( attribute );

		}

		if ( updateBuffers ) {

			setupVertexAttributes( material, program, geometry );

			if ( index !== null ) {

				_gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, attribute.buffer );

			}

		}

		//

		var dataCount = 0;

		if ( index !== null ) {

			dataCount = index.count;

		} else if ( position !== undefined ) {

			dataCount = position.count;

		}

		var rangeStart = geometry.drawRange.start * rangeFactor;
		var rangeCount = geometry.drawRange.count * rangeFactor;

		var groupStart = group !== null ? group.start * rangeFactor : 0;
		var groupCount = group !== null ? group.count * rangeFactor : Infinity;

		var drawStart = Math.max( rangeStart, groupStart );
		var drawEnd = Math.min( dataCount, rangeStart + rangeCount, groupStart + groupCount ) - 1;

		var drawCount = Math.max( 0, drawEnd - drawStart + 1 );

		if ( drawCount === 0 ) return;

		//

		if ( object.isMesh ) {

			if ( material.wireframe === true ) {

				state.setLineWidth( material.wireframeLinewidth * getTargetPixelRatio() );
				renderer.setMode( _gl.LINES );

			} else {

				switch ( object.drawMode ) {

					case TrianglesDrawMode:
						renderer.setMode( _gl.TRIANGLES );
						break;

					case TriangleStripDrawMode:
						renderer.setMode( _gl.TRIANGLE_STRIP );
						break;

					case TriangleFanDrawMode:
						renderer.setMode( _gl.TRIANGLE_FAN );
						break;

				}

			}


		} else if ( object.isLine ) {

			var lineWidth = material.linewidth;

			if ( lineWidth === undefined ) lineWidth = 1; // Not using Line*Material

			state.setLineWidth( lineWidth * getTargetPixelRatio() );

			if ( object.isLineSegments ) {

				renderer.setMode( _gl.LINES );

			} else if ( object.isLineLoop ) {

				renderer.setMode( _gl.LINE_LOOP );

			} else {

				renderer.setMode( _gl.LINE_STRIP );

			}

		} else if ( object.isPoints ) {

			renderer.setMode( _gl.POINTS );

		}

		if ( geometry && geometry.isInstancedBufferGeometry ) {

			if ( geometry.maxInstancedCount > 0 ) {

				renderer.renderInstances( geometry, drawStart, drawCount );

			}

		} else {

			renderer.render( drawStart, drawCount );

		}

	};

	function setupVertexAttributes( material, program, geometry, startIndex ) {

		if ( geometry && geometry.isInstancedBufferGeometry ) {

			if ( extensions.get( 'ANGLE_instanced_arrays' ) === null ) {

				console.error( 'THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );
				return;

			}

		}

		if ( startIndex === undefined ) startIndex = 0;

		state.initAttributes();

		var geometryAttributes = geometry.attributes;

		var programAttributes = program.getAttributes();

		var materialDefaultAttributeValues = material.defaultAttributeValues;

		for ( var name in programAttributes ) {

			var programAttribute = programAttributes[ name ];

			if ( programAttribute >= 0 ) {

				var geometryAttribute = geometryAttributes[ name ];

				if ( geometryAttribute !== undefined ) {

					var normalized = geometryAttribute.normalized;
					var size = geometryAttribute.itemSize;

					var attribute = attributes.get( geometryAttribute );

					// TODO Attribute may not be available on context restore

					if ( attribute === undefined ) continue;

					var buffer = attribute.buffer;
					var type = attribute.type;
					var bytesPerElement = attribute.bytesPerElement;

					if ( geometryAttribute.isInterleavedBufferAttribute ) {

						var data = geometryAttribute.data;
						var stride = data.stride;
						var offset = geometryAttribute.offset;

						if ( data && data.isInstancedInterleavedBuffer ) {

							state.enableAttributeAndDivisor( programAttribute, data.meshPerAttribute );

							if ( geometry.maxInstancedCount === undefined ) {

								geometry.maxInstancedCount = data.meshPerAttribute * data.count;

							}

						} else {

							state.enableAttribute( programAttribute );

						}

						_gl.bindBuffer( _gl.ARRAY_BUFFER, buffer );
						_gl.vertexAttribPointer( programAttribute, size, type, normalized, stride * bytesPerElement, ( startIndex * stride + offset ) * bytesPerElement );

					} else {

						if ( geometryAttribute.isInstancedBufferAttribute ) {

							state.enableAttributeAndDivisor( programAttribute, geometryAttribute.meshPerAttribute );

							if ( geometry.maxInstancedCount === undefined ) {

								geometry.maxInstancedCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;

							}

						} else {

							state.enableAttribute( programAttribute );

						}

						_gl.bindBuffer( _gl.ARRAY_BUFFER, buffer );
						_gl.vertexAttribPointer( programAttribute, size, type, normalized, 0, startIndex * size * bytesPerElement );

					}

				} else if ( materialDefaultAttributeValues !== undefined ) {

					var value = materialDefaultAttributeValues[ name ];

					if ( value !== undefined ) {

						switch ( value.length ) {

							case 2:
								_gl.vertexAttrib2fv( programAttribute, value );
								break;

							case 3:
								_gl.vertexAttrib3fv( programAttribute, value );
								break;

							case 4:
								_gl.vertexAttrib4fv( programAttribute, value );
								break;

							default:
								_gl.vertexAttrib1fv( programAttribute, value );

						}

					}

				}

			}

		}

		state.disableUnusedAttributes();

	}

	// Compile

	this.compile = function ( scene, camera ) {

		lightsArray.length = 0;
		shadowsArray.length = 0;

		scene.traverse( function ( object ) {

			if ( object.isLight ) {

				lightsArray.push( object );

				if ( object.castShadow ) {

					shadowsArray.push( object );

				}

			}

		} );

		lights.setup( lightsArray, shadowsArray, camera );

		scene.traverse( function ( object ) {

			if ( object.material ) {

				if ( Array.isArray( object.material ) ) {

					for ( var i = 0; i < object.material.length; i ++ ) {

						initMaterial( object.material[ i ], scene.fog, object );

					}

				} else {

					initMaterial( object.material, scene.fog, object );

				}

			}

		} );

	};

	// Animation Loop

	var isAnimating = false;
	var onAnimationFrame = null;

	function start() {

		if ( isAnimating ) return;

		var device = vr.getDevice();
		
		if ( device && device.isPresenting ) {

			device.requestAnimationFrame( loop );

		} else {

			window.requestAnimationFrame( loop );

		}

		isAnimating = true;

	}

	function loop( time ) {

		if ( onAnimationFrame !== null ) onAnimationFrame( time );

		var device = vr.getDevice();
		
		if ( device && device.isPresenting ) {

			device.requestAnimationFrame( loop );

		} else {

			window.requestAnimationFrame( loop );

		}

	}

	this.animate = function ( callback ) {

		onAnimationFrame = callback;
		start();

	};

	// Rendering

	this.render = function ( scene, camera, renderTarget, forceClear ) {

		if ( ! ( camera && camera.isCamera ) ) {

			console.error( 'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.' );
			return;

		}

		if ( _isContextLost ) return;

		// reset caching for this frame

		_currentGeometryProgram = '';
		_currentMaterialId = - 1;
		_currentCamera = null;

		// update scene graph

		if ( scene.autoUpdate === true ) scene.updateMatrixWorld();

		// update camera matrices and frustum

		if ( camera.parent === null ) camera.updateMatrixWorld();

		if ( vr.enabled ) {

			camera = vr.getCamera( camera );

		}

		_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );
		_frustum.setFromMatrix( _projScreenMatrix );

		lightsArray.length = 0;
		shadowsArray.length = 0;

		spritesArray.length = 0;
		flaresArray.length = 0;

		_localClippingEnabled = this.localClippingEnabled;
		_clippingEnabled = _clipping.init( this.clippingPlanes, _localClippingEnabled, camera );

		currentRenderList = renderLists.get( scene, camera );
		currentRenderList.init();

		projectObject( scene, camera, _this.sortObjects );

		if ( _this.sortObjects === true ) {

			currentRenderList.sort();

		}

		//

		if ( _clippingEnabled ) _clipping.beginShadows();

		shadowMap.render( shadowsArray, scene, camera );

		lights.setup( lightsArray, shadowsArray, camera );

		if ( _clippingEnabled ) _clipping.endShadows();

		//

		_infoRender.frame ++;
		_infoRender.calls = 0;
		_infoRender.vertices = 0;
		_infoRender.faces = 0;
		_infoRender.points = 0;

		if ( renderTarget === undefined ) {

			renderTarget = null;

		}

		this.setRenderTarget( renderTarget );

		//

		background.render( currentRenderList, scene, camera, forceClear );

		// render scene

		var opaqueObjects = currentRenderList.opaque;
		var transparentObjects = currentRenderList.transparent;

		if ( scene.overrideMaterial ) {

			var overrideMaterial = scene.overrideMaterial;

			if ( opaqueObjects.length ) renderObjects( opaqueObjects, scene, camera, overrideMaterial );
			if ( transparentObjects.length ) renderObjects( transparentObjects, scene, camera, overrideMaterial );

		} else {

			// opaque pass (front-to-back order)

			if ( opaqueObjects.length ) renderObjects( opaqueObjects, scene, camera );

			// transparent pass (back-to-front order)

			if ( transparentObjects.length ) renderObjects( transparentObjects, scene, camera );

		}

		// custom renderers

		spriteRenderer.render( spritesArray, scene, camera );
		flareRenderer.render( flaresArray, scene, camera, _currentViewport );

		// Generate mipmap if we're using any kind of mipmap filtering

		if ( renderTarget ) {

			textures.updateRenderTargetMipmap( renderTarget );

		}

		// Ensure depth buffer writing is enabled so it can be cleared on next render

		state.buffers.depth.setTest( true );
		state.buffers.depth.setMask( true );
		state.buffers.color.setMask( true );

		state.setPolygonOffset( false );

		if ( vr.enabled ) {

			vr.submitFrame();

		}

		// _gl.finish();

	};

	/*
	// TODO Duplicated code (Frustum)

	var _sphere = new Sphere();

	function isObjectViewable( object ) {

		var geometry = object.geometry;

		if ( geometry.boundingSphere === null )
			geometry.computeBoundingSphere();

		_sphere.copy( geometry.boundingSphere ).
		applyMatrix4( object.matrixWorld );

		return isSphereViewable( _sphere );

	}

	function isSpriteViewable( sprite ) {

		_sphere.center.set( 0, 0, 0 );
		_sphere.radius = 0.7071067811865476;
		_sphere.applyMatrix4( sprite.matrixWorld );

		return isSphereViewable( _sphere );

	}

	function isSphereViewable( sphere ) {

		if ( ! _frustum.intersectsSphere( sphere ) ) return false;

		var numPlanes = _clipping.numPlanes;

		if ( numPlanes === 0 ) return true;

		var planes = _this.clippingPlanes,

			center = sphere.center,
			negRad = - sphere.radius,
			i = 0;

		do {

			// out when deeper than radius in the negative halfspace
			if ( planes[ i ].distanceToPoint( center ) < negRad ) return false;

		} while ( ++ i !== numPlanes );

		return true;

	}
	*/

	function projectObject( object, camera, sortObjects ) {

		if ( object.visible === false ) return;

		var visible = object.layers.test( camera.layers );

		if ( visible ) {

			if ( object.isLight ) {

				lightsArray.push( object );

				if ( object.castShadow ) {

					shadowsArray.push( object );

				}

			} else if ( object.isSprite ) {

				if ( ! object.frustumCulled || _frustum.intersectsSprite( object ) ) {

					spritesArray.push( object );

				}

			} else if ( object.isLensFlare ) {

				flaresArray.push( object );

			} else if ( object.isImmediateRenderObject ) {

				if ( sortObjects ) {

					_vector3.setFromMatrixPosition( object.matrixWorld )
						.applyMatrix4( _projScreenMatrix );

				}

				currentRenderList.push( object, null, object.material, _vector3.z, null );

			} else if ( object.isMesh || object.isLine || object.isPoints ) {

				if ( object.isSkinnedMesh ) {

					object.skeleton.update();

				}

				if ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) {

					if ( sortObjects ) {

						_vector3.setFromMatrixPosition( object.matrixWorld )
							.applyMatrix4( _projScreenMatrix );

					}

					var geometry = objects.update( object );
					var material = object.material;

					if ( Array.isArray( material ) ) {

						var groups = geometry.groups;

						for ( var i = 0, l = groups.length; i < l; i ++ ) {

							var group = groups[ i ];
							var groupMaterial = material[ group.materialIndex ];

							if ( groupMaterial && groupMaterial.visible ) {

								currentRenderList.push( object, geometry, groupMaterial, _vector3.z, group );

							}

						}

					} else if ( material.visible ) {

						currentRenderList.push( object, geometry, material, _vector3.z, null );

					}

				}

			}

		}

		var children = object.children;

		for ( var i = 0, l = children.length; i < l; i ++ ) {

			projectObject( children[ i ], camera, sortObjects );

		}

	}

	function renderObjects( renderList, scene, camera, overrideMaterial ) {

		for ( var i = 0, l = renderList.length; i < l; i ++ ) {

			var renderItem = renderList[ i ];

			var object = renderItem.object;
			var geometry = renderItem.geometry;
			var material = overrideMaterial === undefined ? renderItem.material : overrideMaterial;
			var group = renderItem.group;

			if ( camera.isArrayCamera ) {

				_currentArrayCamera = camera;

				var cameras = camera.cameras;

				for ( var j = 0, jl = cameras.length; j < jl; j ++ ) {

					var camera2 = cameras[ j ];

					if ( object.layers.test( camera2.layers ) ) {

						var bounds = camera2.bounds;

						var x = bounds.x * _width;
						var y = bounds.y * _height;
						var width = bounds.z * _width;
						var height = bounds.w * _height;

						state.viewport( _currentViewport.set( x, y, width, height ).multiplyScalar( _pixelRatio ) );

						renderObject( object, scene, camera2, geometry, material, group );

					}

				}

			} else {

				_currentArrayCamera = null;

				renderObject( object, scene, camera, geometry, material, group );

			}

		}

	}

	function renderObject( object, scene, camera, geometry, material, group ) {

		object.onBeforeRender( _this, scene, camera, geometry, material, group );

		object.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );
		object.normalMatrix.getNormalMatrix( object.modelViewMatrix );

		if ( object.isImmediateRenderObject ) {

			state.setMaterial( material );

			var program = setProgram( camera, scene.fog, material, object );

			_currentGeometryProgram = '';

			renderObjectImmediate( object, program, material );

		} else {

			_this.renderBufferDirect( camera, scene.fog, geometry, material, object, group );

		}

		object.onAfterRender( _this, scene, camera, geometry, material, group );

	}

	function initMaterial( material, fog, object ) {

		var materialProperties = properties.get( material );

		var parameters = programCache.getParameters(
			material, lights.state, shadowsArray, fog, _clipping.numPlanes, _clipping.numIntersection, object );

		var code = programCache.getProgramCode( material, parameters );

		var program = materialProperties.program;
		var programChange = true;

		if ( program === undefined ) {

			// new material
			material.addEventListener( 'dispose', onMaterialDispose );

		} else if ( program.code !== code ) {

			// changed glsl or parameters
			releaseMaterialProgramReference( material );

		} else if ( parameters.shaderID !== undefined ) {

			// same glsl and uniform list
			return;

		} else {

			// only rebuild uniform list
			programChange = false;

		}

		if ( programChange ) {

			if ( parameters.shaderID ) {

				var shader = ShaderLib[ parameters.shaderID ];

				materialProperties.shader = {
					name: material.type,
					uniforms: UniformsUtils.clone( shader.uniforms ),
					vertexShader: shader.vertexShader,
					fragmentShader: shader.fragmentShader
				};

			} else {

				materialProperties.shader = {
					name: material.type,
					uniforms: material.uniforms,
					vertexShader: material.vertexShader,
					fragmentShader: material.fragmentShader
				};

			}

			material.onBeforeCompile( materialProperties.shader );

			program = programCache.acquireProgram( material, materialProperties.shader, parameters, code );

			materialProperties.program = program;
			material.program = program;

		}

		var programAttributes = program.getAttributes();

		if ( material.morphTargets ) {

			material.numSupportedMorphTargets = 0;

			for ( var i = 0; i < _this.maxMorphTargets; i ++ ) {

				if ( programAttributes[ 'morphTarget' + i ] >= 0 ) {

					material.numSupportedMorphTargets ++;

				}

			}

		}

		if ( material.morphNormals ) {

			material.numSupportedMorphNormals = 0;

			for ( var i = 0; i < _this.maxMorphNormals; i ++ ) {

				if ( programAttributes[ 'morphNormal' + i ] >= 0 ) {

					material.numSupportedMorphNormals ++;

				}

			}

		}

		var uniforms = materialProperties.shader.uniforms;

		if ( ! material.isShaderMaterial &&
			! material.isRawShaderMaterial ||
			material.clipping === true ) {

			materialProperties.numClippingPlanes = _clipping.numPlanes;
			materialProperties.numIntersection = _clipping.numIntersection;
			uniforms.clippingPlanes = _clipping.uniform;

		}

		materialProperties.fog = fog;

		// store the light setup it was created for

		materialProperties.lightsHash = lights.state.hash;

		if ( material.lights ) {

			// wire up the material to this renderer's lighting state

			uniforms.ambientLightColor.value = lights.state.ambient;
			uniforms.directionalLights.value = lights.state.directional;
			uniforms.spotLights.value = lights.state.spot;
			uniforms.rectAreaLights.value = lights.state.rectArea;
			uniforms.pointLights.value = lights.state.point;
			uniforms.hemisphereLights.value = lights.state.hemi;

			uniforms.directionalShadowMap.value = lights.state.directionalShadowMap;
			uniforms.directionalShadowMatrix.value = lights.state.directionalShadowMatrix;
			uniforms.spotShadowMap.value = lights.state.spotShadowMap;
			uniforms.spotShadowMatrix.value = lights.state.spotShadowMatrix;
			uniforms.pointShadowMap.value = lights.state.pointShadowMap;
			uniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix;
			// TODO (abelnation): add area lights shadow info to uniforms

		}

		var progUniforms = materialProperties.program.getUniforms(),
			uniformsList =
				WebGLUniforms.seqWithValue( progUniforms.seq, uniforms );

		materialProperties.uniformsList = uniformsList;

	}

	function setProgram( camera, fog, material, object ) {

		_usedTextureUnits = 0;

		var materialProperties = properties.get( material );

		if ( _clippingEnabled ) {

			if ( _localClippingEnabled || camera !== _currentCamera ) {

				var useCache =
					camera === _currentCamera &&
					material.id === _currentMaterialId;

				// we might want to call this function with some ClippingGroup
				// object instead of the material, once it becomes feasible
				// (#8465, #8379)
				_clipping.setState(
					material.clippingPlanes, material.clipIntersection, material.clipShadows,
					camera, materialProperties, useCache );

			}

		}

		if ( material.needsUpdate === false ) {

			if ( materialProperties.program === undefined ) {

				material.needsUpdate = true;

			} else if ( material.fog && materialProperties.fog !== fog ) {

				material.needsUpdate = true;

			} else if ( material.lights && materialProperties.lightsHash !== lights.state.hash ) {

				material.needsUpdate = true;

			} else if ( materialProperties.numClippingPlanes !== undefined &&
				( materialProperties.numClippingPlanes !== _clipping.numPlanes ||
				materialProperties.numIntersection !== _clipping.numIntersection ) ) {

				material.needsUpdate = true;

			}

		}

		if ( material.needsUpdate ) {

			initMaterial( material, fog, object );
			material.needsUpdate = false;

		}

		var refreshProgram = false;
		var refreshMaterial = false;
		var refreshLights = false;

		var program = materialProperties.program,
			p_uniforms = program.getUniforms(),
			m_uniforms = materialProperties.shader.uniforms;

		if ( state.useProgram( program.program ) ) {

			refreshProgram = true;
			refreshMaterial = true;
			refreshLights = true;

		}

		if ( material.id !== _currentMaterialId ) {

			_currentMaterialId = material.id;

			refreshMaterial = true;

		}

		if ( refreshProgram || camera !== _currentCamera ) {

			p_uniforms.setValue( _gl, 'projectionMatrix', camera.projectionMatrix );

			if ( capabilities.logarithmicDepthBuffer ) {

				p_uniforms.setValue( _gl, 'logDepthBufFC',
					2.0 / ( Math.log( camera.far + 1.0 ) / Math.LN2 ) );

			}

			// Avoid unneeded uniform updates per ArrayCamera's sub-camera

			if ( _currentCamera !== ( _currentArrayCamera || camera ) ) {

				_currentCamera = ( _currentArrayCamera || camera );

				// lighting uniforms depend on the camera so enforce an update
				// now, in case this material supports lights - or later, when
				// the next material that does gets activated:

				refreshMaterial = true;		// set to true on material change
				refreshLights = true;		// remains set until update done

			}

			// load material specific uniforms
			// (shader material also gets them for the sake of genericity)

			if ( material.isShaderMaterial ||
				material.isMeshPhongMaterial ||
				material.isMeshStandardMaterial ||
				material.envMap ) {

				var uCamPos = p_uniforms.map.cameraPosition;

				if ( uCamPos !== undefined ) {

					uCamPos.setValue( _gl,
						_vector3.setFromMatrixPosition( camera.matrixWorld ) );

				}

			}

			if ( material.isMeshPhongMaterial ||
				material.isMeshLambertMaterial ||
				material.isMeshBasicMaterial ||
				material.isMeshStandardMaterial ||
				material.isShaderMaterial ||
				material.skinning ) {

				p_uniforms.setValue( _gl, 'viewMatrix', camera.matrixWorldInverse );

			}

		}

		// skinning uniforms must be set even if material didn't change
		// auto-setting of texture unit for bone texture must go before other textures
		// not sure why, but otherwise weird things happen

		if ( material.skinning ) {

			p_uniforms.setOptional( _gl, object, 'bindMatrix' );
			p_uniforms.setOptional( _gl, object, 'bindMatrixInverse' );

			var skeleton = object.skeleton;

			if ( skeleton ) {

				var bones = skeleton.bones;

				if ( capabilities.floatVertexTextures ) {

					if ( skeleton.boneTexture === undefined ) {

						// layout (1 matrix = 4 pixels)
						//      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)
						//  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)
						//       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)
						//       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)
						//       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)


						var size = Math.sqrt( bones.length * 4 ); // 4 pixels needed for 1 matrix
						size = _Math.ceilPowerOfTwo( size );
						size = Math.max( size, 4 );

						var boneMatrices = new Float32Array( size * size * 4 ); // 4 floats per RGBA pixel
						boneMatrices.set( skeleton.boneMatrices ); // copy current values

						var boneTexture = new DataTexture( boneMatrices, size, size, RGBAFormat, FloatType );

						skeleton.boneMatrices = boneMatrices;
						skeleton.boneTexture = boneTexture;
						skeleton.boneTextureSize = size;

					}

					p_uniforms.setValue( _gl, 'boneTexture', skeleton.boneTexture );
					p_uniforms.setValue( _gl, 'boneTextureSize', skeleton.boneTextureSize );

				} else {

					p_uniforms.setOptional( _gl, skeleton, 'boneMatrices' );

				}

			}

		}

		if ( refreshMaterial ) {

			p_uniforms.setValue( _gl, 'toneMappingExposure', _this.toneMappingExposure );
			p_uniforms.setValue( _gl, 'toneMappingWhitePoint', _this.toneMappingWhitePoint );

			if ( material.lights ) {

				// the current material requires lighting info

				// note: all lighting uniforms are always set correctly
				// they simply reference the renderer's state for their
				// values
				//
				// use the current material's .needsUpdate flags to set
				// the GL state when required

				markUniformsLightsNeedsUpdate( m_uniforms, refreshLights );

			}

			// refresh uniforms common to several materials

			if ( fog && material.fog ) {

				refreshUniformsFog( m_uniforms, fog );

			}

			if ( material.isMeshBasicMaterial ) {

				refreshUniformsCommon( m_uniforms, material );

			} else if ( material.isMeshLambertMaterial ) {

				refreshUniformsCommon( m_uniforms, material );
				refreshUniformsLambert( m_uniforms, material );

			} else if ( material.isMeshPhongMaterial ) {

				refreshUniformsCommon( m_uniforms, material );

				if ( material.isMeshToonMaterial ) {

					refreshUniformsToon( m_uniforms, material );

				} else {

					refreshUniformsPhong( m_uniforms, material );

				}

			} else if ( material.isMeshStandardMaterial ) {

				refreshUniformsCommon( m_uniforms, material );

				if ( material.isMeshPhysicalMaterial ) {

					refreshUniformsPhysical( m_uniforms, material );

				} else {

					refreshUniformsStandard( m_uniforms, material );

				}

			} else if ( material.isMeshDepthMaterial ) {

				refreshUniformsCommon( m_uniforms, material );
				refreshUniformsDepth( m_uniforms, material );

			} else if ( material.isMeshDistanceMaterial ) {

				refreshUniformsCommon( m_uniforms, material );
				refreshUniformsDistance( m_uniforms, material );

			} else if ( material.isMeshNormalMaterial ) {

				refreshUniformsCommon( m_uniforms, material );
				refreshUniformsNormal( m_uniforms, material );

			} else if ( material.isLineBasicMaterial ) {

				refreshUniformsLine( m_uniforms, material );

				if ( material.isLineDashedMaterial ) {

					refreshUniformsDash( m_uniforms, material );

				}

			} else if ( material.isPointsMaterial ) {

				refreshUniformsPoints( m_uniforms, material );

			} else if ( material.isShadowMaterial ) {

				m_uniforms.color.value = material.color;
				m_uniforms.opacity.value = material.opacity;

			}

			// RectAreaLight Texture
			// TODO (mrdoob): Find a nicer implementation

			if ( m_uniforms.ltcMat !== undefined ) m_uniforms.ltcMat.value = UniformsLib.LTC_MAT_TEXTURE;
			if ( m_uniforms.ltcMag !== undefined ) m_uniforms.ltcMag.value = UniformsLib.LTC_MAG_TEXTURE;

			WebGLUniforms.upload(
				_gl, materialProperties.uniformsList, m_uniforms, _this );

		}


		// common matrices

		p_uniforms.setValue( _gl, 'modelViewMatrix', object.modelViewMatrix );
		p_uniforms.setValue( _gl, 'normalMatrix', object.normalMatrix );
		p_uniforms.setValue( _gl, 'modelMatrix', object.matrixWorld );

		return program;

	}

	// Uniforms (refresh uniforms objects)

	function refreshUniformsCommon( uniforms, material ) {

		uniforms.opacity.value = material.opacity;

		if ( material.color ) {

			uniforms.diffuse.value = material.color;

		}

		if ( material.emissive ) {

			uniforms.emissive.value.copy( material.emissive ).multiplyScalar( material.emissiveIntensity );

		}

		if ( material.map ) {

			uniforms.map.value = material.map;

		}

		if ( material.alphaMap ) {

			uniforms.alphaMap.value = material.alphaMap;

		}

		if ( material.specularMap ) {

			uniforms.specularMap.value = material.specularMap;

		}

		if ( material.envMap ) {

			uniforms.envMap.value = material.envMap;

			// don't flip CubeTexture envMaps, flip everything else:
			//  WebGLRenderTargetCube will be flipped for backwards compatibility
			//  WebGLRenderTargetCube.texture will be flipped because it's a Texture and NOT a CubeTexture
			// this check must be handled differently, or removed entirely, if WebGLRenderTargetCube uses a CubeTexture in the future
			uniforms.flipEnvMap.value = ( ! ( material.envMap && material.envMap.isCubeTexture ) ) ? 1 : - 1;

			uniforms.reflectivity.value = material.reflectivity;
			uniforms.refractionRatio.value = material.refractionRatio;

		}

		if ( material.lightMap ) {

			uniforms.lightMap.value = material.lightMap;
			uniforms.lightMapIntensity.value = material.lightMapIntensity;

		}

		if ( material.aoMap ) {

			uniforms.aoMap.value = material.aoMap;
			uniforms.aoMapIntensity.value = material.aoMapIntensity;

		}

		// uv repeat and offset setting priorities
		// 1. color map
		// 2. specular map
		// 3. normal map
		// 4. bump map
		// 5. alpha map
		// 6. emissive map

		var uvScaleMap;

		if ( material.map ) {

			uvScaleMap = material.map;

		} else if ( material.specularMap ) {

			uvScaleMap = material.specularMap;

		} else if ( material.displacementMap ) {

			uvScaleMap = material.displacementMap;

		} else if ( material.normalMap ) {

			uvScaleMap = material.normalMap;

		} else if ( material.bumpMap ) {

			uvScaleMap = material.bumpMap;

		} else if ( material.roughnessMap ) {

			uvScaleMap = material.roughnessMap;

		} else if ( material.metalnessMap ) {

			uvScaleMap = material.metalnessMap;

		} else if ( material.alphaMap ) {

			uvScaleMap = material.alphaMap;

		} else if ( material.emissiveMap ) {

			uvScaleMap = material.emissiveMap;

		}

		if ( uvScaleMap !== undefined ) {

			// backwards compatibility
			if ( uvScaleMap.isWebGLRenderTarget ) {

				uvScaleMap = uvScaleMap.texture;

			}

			if ( uvScaleMap.matrixAutoUpdate === true ) {

				var offset = uvScaleMap.offset;
				var repeat = uvScaleMap.repeat;
				var rotation = uvScaleMap.rotation;
				var center = uvScaleMap.center;

				uvScaleMap.matrix.setUvTransform( offset.x, offset.y, repeat.x, repeat.y, rotation, center.x, center.y );

			}

			uniforms.uvTransform.value.copy( uvScaleMap.matrix );

		}

	}

	function refreshUniformsLine( uniforms, material ) {

		uniforms.diffuse.value = material.color;
		uniforms.opacity.value = material.opacity;

	}

	function refreshUniformsDash( uniforms, material ) {

		uniforms.dashSize.value = material.dashSize;
		uniforms.totalSize.value = material.dashSize + material.gapSize;
		uniforms.scale.value = material.scale;

	}

	function refreshUniformsPoints( uniforms, material ) {

		uniforms.diffuse.value = material.color;
		uniforms.opacity.value = material.opacity;
		uniforms.size.value = material.size * _pixelRatio;
		uniforms.scale.value = _height * 0.5;

		uniforms.map.value = material.map;

		if ( material.map !== null ) {

			if ( material.map.matrixAutoUpdate === true ) {

				var offset = material.map.offset;
				var repeat = material.map.repeat;
				var rotation = material.map.rotation;
				var center = material.map.center;

				material.map.matrix.setUvTransform( offset.x, offset.y, repeat.x, repeat.y, rotation, center.x, center.y );

			}

			uniforms.uvTransform.value.copy( material.map.matrix );

		}

	}

	function refreshUniformsFog( uniforms, fog ) {

		uniforms.fogColor.value = fog.color;

		if ( fog.isFog ) {

			uniforms.fogNear.value = fog.near;
			uniforms.fogFar.value = fog.far;

		} else if ( fog.isFogExp2 ) {

			uniforms.fogDensity.value = fog.density;

		}

	}

	function refreshUniformsLambert( uniforms, material ) {

		if ( material.emissiveMap ) {

			uniforms.emissiveMap.value = material.emissiveMap;

		}

	}

	function refreshUniformsPhong( uniforms, material ) {

		uniforms.specular.value = material.specular;
		uniforms.shininess.value = Math.max( material.shininess, 1e-4 ); // to prevent pow( 0.0, 0.0 )

		if ( material.emissiveMap ) {

			uniforms.emissiveMap.value = material.emissiveMap;

		}

		if ( material.bumpMap ) {

			uniforms.bumpMap.value = material.bumpMap;
			uniforms.bumpScale.value = material.bumpScale;

		}

		if ( material.normalMap ) {

			uniforms.normalMap.value = material.normalMap;
			uniforms.normalScale.value.copy( material.normalScale );

		}

		if ( material.displacementMap ) {

			uniforms.displacementMap.value = material.displacementMap;
			uniforms.displacementScale.value = material.displacementScale;
			uniforms.displacementBias.value = material.displacementBias;

		}

	}

	function refreshUniformsToon( uniforms, material ) {

		refreshUniformsPhong( uniforms, material );

		if ( material.gradientMap ) {

			uniforms.gradientMap.value = material.gradientMap;

		}

	}

	function refreshUniformsStandard( uniforms, material ) {

		uniforms.roughness.value = material.roughness;
		uniforms.metalness.value = material.metalness;

		if ( material.roughnessMap ) {

			uniforms.roughnessMap.value = material.roughnessMap;

		}

		if ( material.metalnessMap ) {

			uniforms.metalnessMap.value = material.metalnessMap;

		}

		if ( material.emissiveMap ) {

			uniforms.emissiveMap.value = material.emissiveMap;

		}

		if ( material.bumpMap ) {

			uniforms.bumpMap.value = material.bumpMap;
			uniforms.bumpScale.value = material.bumpScale;

		}

		if ( material.normalMap ) {

			uniforms.normalMap.value = material.normalMap;
			uniforms.normalScale.value.copy( material.normalScale );

		}

		if ( material.displacementMap ) {

			uniforms.displacementMap.value = material.displacementMap;
			uniforms.displacementScale.value = material.displacementScale;
			uniforms.displacementBias.value = material.displacementBias;

		}

		if ( material.envMap ) {

			//uniforms.envMap.value = material.envMap; // part of uniforms common
			uniforms.envMapIntensity.value = material.envMapIntensity;

		}

	}

	function refreshUniformsPhysical( uniforms, material ) {

		uniforms.clearCoat.value = material.clearCoat;
		uniforms.clearCoatRoughness.value = material.clearCoatRoughness;

		refreshUniformsStandard( uniforms, material );

	}

	function refreshUniformsDepth( uniforms, material ) {

		if ( material.displacementMap ) {

			uniforms.displacementMap.value = material.displacementMap;
			uniforms.displacementScale.value = material.displacementScale;
			uniforms.displacementBias.value = material.displacementBias;

		}

	}

	function refreshUniformsDistance( uniforms, material ) {

		if ( material.displacementMap ) {

			uniforms.displacementMap.value = material.displacementMap;
			uniforms.displacementScale.value = material.displacementScale;
			uniforms.displacementBias.value = material.displacementBias;

		}

		uniforms.referencePosition.value.copy( material.referencePosition );
		uniforms.nearDistance.value = material.nearDistance;
		uniforms.farDistance.value = material.farDistance;

	}

	function refreshUniformsNormal( uniforms, material ) {

		if ( material.bumpMap ) {

			uniforms.bumpMap.value = material.bumpMap;
			uniforms.bumpScale.value = material.bumpScale;

		}

		if ( material.normalMap ) {

			uniforms.normalMap.value = material.normalMap;
			uniforms.normalScale.value.copy( material.normalScale );

		}

		if ( material.displacementMap ) {

			uniforms.displacementMap.value = material.displacementMap;
			uniforms.displacementScale.value = material.displacementScale;
			uniforms.displacementBias.value = material.displacementBias;

		}

	}

	// If uniforms are marked as clean, they don't need to be loaded to the GPU.

	function markUniformsLightsNeedsUpdate( uniforms, value ) {

		uniforms.ambientLightColor.needsUpdate = value;

		uniforms.directionalLights.needsUpdate = value;
		uniforms.pointLights.needsUpdate = value;
		uniforms.spotLights.needsUpdate = value;
		uniforms.rectAreaLights.needsUpdate = value;
		uniforms.hemisphereLights.needsUpdate = value;

	}

	// GL state setting

	this.setFaceCulling = function ( cullFace, frontFaceDirection ) {

		state.setCullFace( cullFace );
		state.setFlipSided( frontFaceDirection === FrontFaceDirectionCW );

	};

	// Textures

	function allocTextureUnit() {

		var textureUnit = _usedTextureUnits;

		if ( textureUnit >= capabilities.maxTextures ) {

			console.warn( 'THREE.WebGLRenderer: Trying to use ' + textureUnit + ' texture units while this GPU supports only ' + capabilities.maxTextures );

		}

		_usedTextureUnits += 1;

		return textureUnit;

	}

	this.allocTextureUnit = allocTextureUnit;

	// this.setTexture2D = setTexture2D;
	this.setTexture2D = ( function () {

		var warned = false;

		// backwards compatibility: peel texture.texture
		return function setTexture2D( texture, slot ) {

			if ( texture && texture.isWebGLRenderTarget ) {

				if ( ! warned ) {

					console.warn( "THREE.WebGLRenderer.setTexture2D: don't use render targets as textures. Use their .texture property instead." );
					warned = true;

				}

				texture = texture.texture;

			}

			textures.setTexture2D( texture, slot );

		};

	}() );

	this.setTexture = ( function () {

		var warned = false;

		return function setTexture( texture, slot ) {

			if ( ! warned ) {

				console.warn( "THREE.WebGLRenderer: .setTexture is deprecated, use setTexture2D instead." );
				warned = true;

			}

			textures.setTexture2D( texture, slot );

		};

	}() );

	this.setTextureCube = ( function () {

		var warned = false;

		return function setTextureCube( texture, slot ) {

			// backwards compatibility: peel texture.texture
			if ( texture && texture.isWebGLRenderTargetCube ) {

				if ( ! warned ) {

					console.warn( "THREE.WebGLRenderer.setTextureCube: don't use cube render targets as textures. Use their .texture property instead." );
					warned = true;

				}

				texture = texture.texture;

			}

			// currently relying on the fact that WebGLRenderTargetCube.texture is a Texture and NOT a CubeTexture
			// TODO: unify these code paths
			if ( ( texture && texture.isCubeTexture ) ||
				( Array.isArray( texture.image ) && texture.image.length === 6 ) ) {

				// CompressedTexture can have Array in image :/

				// this function alone should take care of cube textures
				textures.setTextureCube( texture, slot );

			} else {

				// assumed: texture property of THREE.WebGLRenderTargetCube

				textures.setTextureCubeDynamic( texture, slot );

			}

		};

	}() );

	this.getRenderTarget = function () {

		return _currentRenderTarget;

	};

	this.setRenderTarget = function ( renderTarget ) {

		_currentRenderTarget = renderTarget;

		if ( renderTarget && properties.get( renderTarget ).__webglFramebuffer === undefined ) {

			textures.setupRenderTarget( renderTarget );

		}

		var framebuffer = null;
		var isCube = false;

		if ( renderTarget ) {

			var __webglFramebuffer = properties.get( renderTarget ).__webglFramebuffer;

			if ( renderTarget.isWebGLRenderTargetCube ) {

				framebuffer = __webglFramebuffer[ renderTarget.activeCubeFace ];
				isCube = true;

			} else {

				framebuffer = __webglFramebuffer;

			}

			_currentViewport.copy( renderTarget.viewport );
			_currentScissor.copy( renderTarget.scissor );
			_currentScissorTest = renderTarget.scissorTest;

		} else {

			_currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio );
			_currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio );
			_currentScissorTest = _scissorTest;

		}

		if ( _currentFramebuffer !== framebuffer ) {

			_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );
			_currentFramebuffer = framebuffer;

		}

		state.viewport( _currentViewport );
		state.scissor( _currentScissor );
		state.setScissorTest( _currentScissorTest );

		if ( isCube ) {

			var textureProperties = properties.get( renderTarget.texture );
			_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + renderTarget.activeCubeFace, textureProperties.__webglTexture, renderTarget.activeMipMapLevel );

		}

	};

	this.readRenderTargetPixels = function ( renderTarget, x, y, width, height, buffer ) {

		if ( ! ( renderTarget && renderTarget.isWebGLRenderTarget ) ) {

			console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.' );
			return;

		}

		var framebuffer = properties.get( renderTarget ).__webglFramebuffer;

		if ( framebuffer ) {

			var restore = false;

			if ( framebuffer !== _currentFramebuffer ) {

				_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );

				restore = true;

			}

			try {

				var texture = renderTarget.texture;
				var textureFormat = texture.format;
				var textureType = texture.type;

				if ( textureFormat !== RGBAFormat && utils.convert( textureFormat ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_FORMAT ) ) {

					console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.' );
					return;

				}

				if ( textureType !== UnsignedByteType && utils.convert( textureType ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_TYPE ) && // IE11, Edge and Chrome Mac < 52 (#9513)
					! ( textureType === FloatType && ( extensions.get( 'OES_texture_float' ) || extensions.get( 'WEBGL_color_buffer_float' ) ) ) && // Chrome Mac >= 52 and Firefox
					! ( textureType === HalfFloatType && extensions.get( 'EXT_color_buffer_half_float' ) ) ) {

					console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.' );
					return;

				}

				if ( _gl.checkFramebufferStatus( _gl.FRAMEBUFFER ) === _gl.FRAMEBUFFER_COMPLETE ) {

					// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)

					if ( ( x >= 0 && x <= ( renderTarget.width - width ) ) && ( y >= 0 && y <= ( renderTarget.height - height ) ) ) {

						_gl.readPixels( x, y, width, height, utils.convert( textureFormat ), utils.convert( textureType ), buffer );

					}

				} else {

					console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.' );

				}

			} finally {

				if ( restore ) {

					_gl.bindFramebuffer( _gl.FRAMEBUFFER, _currentFramebuffer );

				}

			}

		}

	};

}

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 */

function FogExp2( color, density ) {

	this.name = '';

	this.color = new Color( color );
	this.density = ( density !== undefined ) ? density : 0.00025;

}

FogExp2.prototype.isFogExp2 = true;

FogExp2.prototype.clone = function () {

	return new FogExp2( this.color.getHex(), this.density );

};

FogExp2.prototype.toJSON = function ( /* meta */ ) {

	return {
		type: 'FogExp2',
		color: this.color.getHex(),
		density: this.density
	};

};

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 */

function Fog( color, near, far ) {

	this.name = '';

	this.color = new Color( color );

	this.near = ( near !== undefined ) ? near : 1;
	this.far = ( far !== undefined ) ? far : 1000;

}

Fog.prototype.isFog = true;

Fog.prototype.clone = function () {

	return new Fog( this.color.getHex(), this.near, this.far );

};

Fog.prototype.toJSON = function ( /* meta */ ) {

	return {
		type: 'Fog',
		color: this.color.getHex(),
		near: this.near,
		far: this.far
	};

};

/**
 * @author mrdoob / http://mrdoob.com/
 */

function Scene() {

	Object3D.call( this );

	this.type = 'Scene';

	this.background = null;
	this.fog = null;
	this.overrideMaterial = null;

	this.autoUpdate = true; // checked by the renderer

}

Scene.prototype = Object.assign( Object.create( Object3D.prototype ), {

	constructor: Scene,

	copy: function ( source, recursive ) {

		Object3D.prototype.copy.call( this, source, recursive );

		if ( source.background !== null ) this.background = source.background.clone();
		if ( source.fog !== null ) this.fog = source.fog.clone();
		if ( source.overrideMaterial !== null ) this.overrideMaterial = source.overrideMaterial.clone();

		this.autoUpdate = source.autoUpdate;
		this.matrixAutoUpdate = source.matrixAutoUpdate;

		return this;

	},

	toJSON: function ( meta ) {

		var data = Object3D.prototype.toJSON.call( this, meta );

		if ( this.background !== null ) data.object.background = this.background.toJSON( meta );
		if ( this.fog !== null ) data.object.fog = this.fog.toJSON();

		return data;

	}

} );

/**
 * @author mikael emtinger / http://gomo.se/
 * @author alteredq / http://alteredqualia.com/
 */

function LensFlare( texture, size, distance, blending, color ) {

	Object3D.call( this );

	this.lensFlares = [];

	this.positionScreen = new Vector3();
	this.customUpdateCallback = undefined;

	if ( texture !== undefined ) {

		this.add( texture, size, distance, blending, color );

	}

}

LensFlare.prototype = Object.assign( Object.create( Object3D.prototype ), {

	constructor: LensFlare,

	isLensFlare: true,

	copy: function ( source ) {

		Object3D.prototype.copy.call( this, source );

		this.positionScreen.copy( source.positionScreen );
		this.customUpdateCallback = source.customUpdateCallback;

		for ( var i = 0, l = source.lensFlares.length; i < l; i ++ ) {

			this.lensFlares.push( source.lensFlares[ i ] );

		}

		return this;

	},

	add: function ( texture, size, distance, blending, color, opacity ) {

		if ( size === undefined ) size = - 1;
		if ( distance === undefined ) distance = 0;
		if ( opacity === undefined ) opacity = 1;
		if ( color === undefined ) color = new Color( 0xffffff );
		if ( blending === undefined ) blending = NormalBlending;

		distance = Math.min( distance, Math.max( 0, distance ) );

		this.lensFlares.push( {
			texture: texture,	// THREE.Texture
			size: size, 		// size in pixels (-1 = use texture.width)
			distance: distance, 	// distance (0-1) from light source (0=at light source)
			x: 0, y: 0, z: 0,	// screen position (-1 => 1) z = 0 is in front z = 1 is back
			scale: 1, 		// scale
			rotation: 0, 		// rotation
			opacity: opacity,	// opacity
			color: color,		// color
			blending: blending	// blending
		} );

	},

	/*
	 * Update lens flares update positions on all flares based on the screen position
	 * Set myLensFlare.customUpdateCallback to alter the flares in your project specific way.
	 */

	updateLensFlares: function () {

		var f, fl = this.lensFlares.length;
		var flare;
		var vecX = - this.positionScreen.x * 2;
		var vecY = - this.positionScreen.y * 2;

		for ( f = 0; f < fl; f ++ ) {

			flare = this.lensFlares[ f ];

			flare.x = this.positionScreen.x + vecX * flare.distance;
			flare.y = this.positionScreen.y + vecY * flare.distance;

			flare.wantedRotation = flare.x * Math.PI * 0.25;
			flare.rotation += ( flare.wantedRotation - flare.rotation ) * 0.25;

		}

	}

} );

/**
 * @author alteredq / http://alteredqualia.com/
 *
 * parameters = {
 *  color: <hex>,
 *  opacity: <float>,
 *  map: new THREE.Texture( <Image> ),
 *
 *	uvOffset: new THREE.Vector2(),
 *	uvScale: new THREE.Vector2()
 * }
 */

function SpriteMaterial( parameters ) {

	Material.call( this );

	this.type = 'SpriteMaterial';

	this.color = new Color( 0xffffff );
	this.map = null;

	this.rotation = 0;

	this.fog = false;
	this.lights = false;

	this.setValues( parameters );

}

SpriteMaterial.prototype = Object.create( Material.prototype );
SpriteMaterial.prototype.constructor = SpriteMaterial;
SpriteMaterial.prototype.isSpriteMaterial = true;

SpriteMaterial.prototype.copy = function ( source ) {

	Material.prototype.copy.call( this, source );

	this.color.copy( source.color );
	this.map = source.map;

	this.rotation = source.rotation;

	return this;

};

/**
 * @author mikael emtinger / http://gomo.se/
 * @author alteredq / http://alteredqualia.com/
 */

function Sprite( material ) {

	Object3D.call( this );

	this.type = 'Sprite';

	this.material = ( material !== undefined ) ? material : new SpriteMaterial();

}

Sprite.prototype = Object.assign( Object.create( Object3D.prototype ), {

	constructor: Sprite,

	isSprite: true,

	raycast: ( function () {

		var intersectPoint = new Vector3();
		var worldPosition = new Vector3();
		var worldScale = new Vector3();

		return function raycast( raycaster, intersects ) {

			worldPosition.setFromMatrixPosition( this.matrixWorld );
			raycaster.ray.closestPointToPoint( worldPosition, intersectPoint );

			worldScale.setFromMatrixScale( this.matrixWorld );
			var guessSizeSq = worldScale.x * worldScale.y / 4;

			if ( worldPosition.distanceToSquared( intersectPoint ) > guessSizeSq ) return;

			var distance = raycaster.ray.origin.distanceTo( intersectPoint );

			if ( distance < raycaster.near || distance > raycaster.far ) return;

			intersects.push( {

				distance: distance,
				point: intersectPoint.clone(),
				face: null,
				object: this

			} );

		};

	}() ),

	clone: function () {

		return new this.constructor( this.material ).copy( this );

	}

} );

/**
 * @author mikael emtinger / http://gomo.se/
 * @author alteredq / http://alteredqualia.com/
 * @author mrdoob / http://mrdoob.com/
 */

function LOD() {

	Object3D.call( this );

	this.type = 'LOD';

	Object.defineProperties( this, {
		levels: {
			enumerable: true,
			value: []
		}
	} );

}

LOD.prototype = Object.assign( Object.create( Object3D.prototype ), {

	constructor: LOD,

	copy: function ( source ) {

		Object3D.prototype.copy.call( this, source, false );

		var levels = source.levels;

		for ( var i = 0, l = levels.length; i < l; i ++ ) {

			var level = levels[ i ];

			this.addLevel( level.object.clone(), level.distance );

		}

		return this;

	},

	addLevel: function ( object, distance ) {

		if ( distance === undefined ) distance = 0;

		distance = Math.abs( distance );

		var levels = this.levels;

		for ( var l = 0; l < levels.length; l ++ ) {

			if ( distance < levels[ l ].distance ) {

				break;

			}

		}

		levels.splice( l, 0, { distance: distance, object: object } );

		this.add( object );

	},

	getObjectForDistance: function ( distance ) {

		var levels = this.levels;

		for ( var i = 1, l = levels.length; i < l; i ++ ) {

			if ( distance < levels[ i ].distance ) {

				break;

			}

		}

		return levels[ i - 1 ].object;

	},

	raycast: ( function () {

		var matrixPosition = new Vector3();

		return function raycast( raycaster, intersects ) {

			matrixPosition.setFromMatrixPosition( this.matrixWorld );

			var distance = raycaster.ray.origin.distanceTo( matrixPosition );

			this.getObjectForDistance( distance ).raycast( raycaster, intersects );

		};

	}() ),

	update: function () {

		var v1 = new Vector3();
		var v2 = new Vector3();

		return function update( camera ) {

			var levels = this.levels;

			if ( levels.length > 1 ) {

				v1.setFromMatrixPosition( camera.matrixWorld );
				v2.setFromMatrixPosition( this.matrixWorld );

				var distance = v1.distanceTo( v2 );

				levels[ 0 ].object.visible = true;

				for ( var i = 1, l = levels.length; i < l; i ++ ) {

					if ( distance >= levels[ i ].distance ) {

						levels[ i - 1 ].object.visible = false;
						levels[ i ].object.visible = true;

					} else {

						break;

					}

				}

				for ( ; i < l; i ++ ) {

					levels[ i ].object.visible = false;

				}

			}

		};

	}(),

	toJSON: function ( meta ) {

		var data = Object3D.prototype.toJSON.call( this, meta );

		data.object.levels = [];

		var levels = this.levels;

		for ( var i = 0, l = levels.length; i < l; i ++ ) {

			var level = levels[ i ];

			data.object.levels.push( {
				object: level.object.uuid,
				distance: level.distance
			} );

		}

		return data;

	}

} );

/**
 * @author mikael emtinger / http://gomo.se/
 * @author alteredq / http://alteredqualia.com/
 * @author michael guerrero / http://realitymeltdown.com
 * @author ikerr / http://verold.com
 */

function Skeleton( bones, boneInverses ) {

	// copy the bone array

	bones = bones || [];

	this.bones = bones.slice( 0 );
	this.boneMatrices = new Float32Array( this.bones.length * 16 );

	// use the supplied bone inverses or calculate the inverses

	if ( boneInverses === undefined ) {

		this.calculateInverses();

	} else {

		if ( this.bones.length === boneInverses.length ) {

			this.boneInverses = boneInverses.slice( 0 );

		} else {

			console.warn( 'THREE.Skeleton boneInverses is the wrong length.' );

			this.boneInverses = [];

			for ( var i = 0, il = this.bones.length; i < il; i ++ ) {

				this.boneInverses.push( new Matrix4() );

			}

		}

	}

}

Object.assign( Skeleton.prototype, {

	calculateInverses: function () {

		this.boneInverses = [];

		for ( var i = 0, il = this.bones.length; i < il; i ++ ) {

			var inverse = new Matrix4();

			if ( this.bones[ i ] ) {

				inverse.getInverse( this.bones[ i ].matrixWorld );

			}

			this.boneInverses.push( inverse );

		}

	},

	pose: function () {

		var bone, i, il;

		// recover the bind-time world matrices

		for ( i = 0, il = this.bones.length; i < il; i ++ ) {

			bone = this.bones[ i ];

			if ( bone ) {

				bone.matrixWorld.getInverse( this.boneInverses[ i ] );

			}

		}

		// compute the local matrices, positions, rotations and scales

		for ( i = 0, il = this.bones.length; i < il; i ++ ) {

			bone = this.bones[ i ];

			if ( bone ) {

				if ( bone.parent && bone.parent.isBone ) {

					bone.matrix.getInverse( bone.parent.matrixWorld );
					bone.matrix.multiply( bone.matrixWorld );

				} else {

					bone.matrix.copy( bone.matrixWorld );

				}

				bone.matrix.decompose( bone.position, bone.quaternion, bone.scale );

			}

		}

	},

	update: ( function () {

		var offsetMatrix = new Matrix4();
		var identityMatrix = new Matrix4();

		return function update() {

			var bones = this.bones;
			var boneInverses = this.boneInverses;
			var boneMatrices = this.boneMatrices;
			var boneTexture = this.boneTexture;

			// flatten bone matrices to array

			for ( var i = 0, il = bones.length; i < il; i ++ ) {

				// compute the offset between the current and the original transform

				var matrix = bones[ i ] ? bones[ i ].matrixWorld : identityMatrix;

				offsetMatrix.multiplyMatrices( matrix, boneInverses[ i ] );
				offsetMatrix.toArray( boneMatrices, i * 16 );

			}

			if ( boneTexture !== undefined ) {

				boneTexture.needsUpdate = true;

			}

		};

	} )(),

	clone: function () {

		return new Skeleton( this.bones, this.boneInverses );

	}

} );

/**
 * @author mikael emtinger / http://gomo.se/
 * @author alteredq / http://alteredqualia.com/
 * @author ikerr / http://verold.com
 */

function Bone() {

	Object3D.call( this );

	this.type = 'Bone';

}

Bone.prototype = Object.assign( Object.create( Object3D.prototype ), {

	constructor: Bone,

	isBone: true

} );

/**
 * @author mikael emtinger / http://gomo.se/
 * @author alteredq / http://alteredqualia.com/
 * @author ikerr / http://verold.com
 */

function SkinnedMesh( geometry, material ) {

	Mesh.call( this, geometry, material );

	this.type = 'SkinnedMesh';

	this.bindMode = 'attached';
	this.bindMatrix = new Matrix4();
	this.bindMatrixInverse = new Matrix4();

	var bones = this.initBones();
	var skeleton = new Skeleton( bones );

	this.bind( skeleton, this.matrixWorld );

	this.normalizeSkinWeights();

}

SkinnedMesh.prototype = Object.assign( Object.create( Mesh.prototype ), {

	constructor: SkinnedMesh,

	isSkinnedMesh: true,

	initBones: function () {

		var bones = [], bone, gbone;
		var i, il;

		if ( this.geometry && this.geometry.bones !== undefined ) {

			// first, create array of 'Bone' objects from geometry data

			for ( i = 0, il = this.geometry.bones.length; i < il; i ++ ) {

				gbone = this.geometry.bones[ i ];

				// create new 'Bone' object

				bone = new Bone();
				bones.push( bone );

				// apply values

				bone.name = gbone.name;
				bone.position.fromArray( gbone.pos );
				bone.quaternion.fromArray( gbone.rotq );
				if ( gbone.scl !== undefined ) bone.scale.fromArray( gbone.scl );

			}

			// second, create bone hierarchy

			for ( i = 0, il = this.geometry.bones.length; i < il; i ++ ) {

				gbone = this.geometry.bones[ i ];

				if ( ( gbone.parent !== - 1 ) && ( gbone.parent !== null ) && ( bones[ gbone.parent ] !== undefined ) ) {

					// subsequent bones in the hierarchy

					bones[ gbone.parent ].add( bones[ i ] );

				} else {

					// topmost bone, immediate child of the skinned mesh

					this.add( bones[ i ] );

				}

			}

		}

		// now the bones are part of the scene graph and children of the skinned mesh.
		// let's update the corresponding matrices

		this.updateMatrixWorld( true );

		return bones;

	},

	bind: function ( skeleton, bindMatrix ) {

		this.skeleton = skeleton;

		if ( bindMatrix === undefined ) {

			this.updateMatrixWorld( true );

			this.skeleton.calculateInverses();

			bindMatrix = this.matrixWorld;

		}

		this.bindMatrix.copy( bindMatrix );
		this.bindMatrixInverse.getInverse( bindMatrix );

	},

	pose: function () {

		this.skeleton.pose();

	},

	normalizeSkinWeights: function () {

		var scale, i;

		if ( this.geometry && this.geometry.isGeometry ) {

			for ( i = 0; i < this.geometry.skinWeights.length; i ++ ) {

				var sw = this.geometry.skinWeights[ i ];

				scale = 1.0 / sw.manhattanLength();

				if ( scale !== Infinity ) {

					sw.multiplyScalar( scale );

				} else {

					sw.set( 1, 0, 0, 0 ); // do something reasonable

				}

			}

		} else if ( this.geometry && this.geometry.isBufferGeometry ) {

			var vec = new Vector4();

			var skinWeight = this.geometry.attributes.skinWeight;

			for ( i = 0; i < skinWeight.count; i ++ ) {

				vec.x = skinWeight.getX( i );
				vec.y = skinWeight.getY( i );
				vec.z = skinWeight.getZ( i );
				vec.w = skinWeight.getW( i );

				scale = 1.0 / vec.manhattanLength();

				if ( scale !== Infinity ) {

					vec.multiplyScalar( scale );

				} else {

					vec.set( 1, 0, 0, 0 ); // do something reasonable

				}

				skinWeight.setXYZW( i, vec.x, vec.y, vec.z, vec.w );

			}

		}

	},

	updateMatrixWorld: function ( force ) {

		Mesh.prototype.updateMatrixWorld.call( this, force );

		if ( this.bindMode === 'attached' ) {

			this.bindMatrixInverse.getInverse( this.matrixWorld );

		} else if ( this.bindMode === 'detached' ) {

			this.bindMatrixInverse.getInverse( this.bindMatrix );

		} else {

			console.warn( 'THREE.SkinnedMesh: Unrecognized bindMode: ' + this.bindMode );

		}

	},

	clone: function () {

		return new this.constructor( this.geometry, this.material ).copy( this );

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 *
 * parameters = {
 *  color: <hex>,
 *  opacity: <float>,
 *
 *  linewidth: <float>,
 *  linecap: "round",
 *  linejoin: "round"
 * }
 */

function LineBasicMaterial( parameters ) {

	Material.call( this );

	this.type = 'LineBasicMaterial';

	this.color = new Color( 0xffffff );

	this.linewidth = 1;
	this.linecap = 'round';
	this.linejoin = 'round';

	this.lights = false;

	this.setValues( parameters );

}

LineBasicMaterial.prototype = Object.create( Material.prototype );
LineBasicMaterial.prototype.constructor = LineBasicMaterial;

LineBasicMaterial.prototype.isLineBasicMaterial = true;

LineBasicMaterial.prototype.copy = function ( source ) {

	Material.prototype.copy.call( this, source );

	this.color.copy( source.color );

	this.linewidth = source.linewidth;
	this.linecap = source.linecap;
	this.linejoin = source.linejoin;

	return this;

};

/**
 * @author mrdoob / http://mrdoob.com/
 */

function Line( geometry, material, mode ) {

	if ( mode === 1 ) {

		console.warn( 'THREE.Line: parameter THREE.LinePieces no longer supported. Created THREE.LineSegments instead.' );
		return new LineSegments( geometry, material );

	}

	Object3D.call( this );

	this.type = 'Line';

	this.geometry = geometry !== undefined ? geometry : new BufferGeometry();
	this.material = material !== undefined ? material : new LineBasicMaterial( { color: Math.random() * 0xffffff } );

}

Line.prototype = Object.assign( Object.create( Object3D.prototype ), {

	constructor: Line,

	isLine: true,

	raycast: ( function () {

		var inverseMatrix = new Matrix4();
		var ray = new Ray();
		var sphere = new Sphere();

		return function raycast( raycaster, intersects ) {

			var precision = raycaster.linePrecision;
			var precisionSq = precision * precision;

			var geometry = this.geometry;
			var matrixWorld = this.matrixWorld;

			// Checking boundingSphere distance to ray

			if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();

			sphere.copy( geometry.boundingSphere );
			sphere.applyMatrix4( matrixWorld );

			if ( raycaster.ray.intersectsSphere( sphere ) === false ) return;

			//

			inverseMatrix.getInverse( matrixWorld );
			ray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );

			var vStart = new Vector3();
			var vEnd = new Vector3();
			var interSegment = new Vector3();
			var interRay = new Vector3();
			var step = ( this && this.isLineSegments ) ? 2 : 1;

			if ( geometry.isBufferGeometry ) {

				var index = geometry.index;
				var attributes = geometry.attributes;
				var positions = attributes.position.array;

				if ( index !== null ) {

					var indices = index.array;

					for ( var i = 0, l = indices.length - 1; i < l; i += step ) {

						var a = indices[ i ];
						var b = indices[ i + 1 ];

						vStart.fromArray( positions, a * 3 );
						vEnd.fromArray( positions, b * 3 );

						var distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );

						if ( distSq > precisionSq ) continue;

						interRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation

						var distance = raycaster.ray.origin.distanceTo( interRay );

						if ( distance < raycaster.near || distance > raycaster.far ) continue;

						intersects.push( {

							distance: distance,
							// What do we want? intersection point on the ray or on the segment??
							// point: raycaster.ray.at( distance ),
							point: interSegment.clone().applyMatrix4( this.matrixWorld ),
							index: i,
							face: null,
							faceIndex: null,
							object: this

						} );

					}

				} else {

					for ( var i = 0, l = positions.length / 3 - 1; i < l; i += step ) {

						vStart.fromArray( positions, 3 * i );
						vEnd.fromArray( positions, 3 * i + 3 );

						var distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );

						if ( distSq > precisionSq ) continue;

						interRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation

						var distance = raycaster.ray.origin.distanceTo( interRay );

						if ( distance < raycaster.near || distance > raycaster.far ) continue;

						intersects.push( {

							distance: distance,
							// What do we want? intersection point on the ray or on the segment??
							// point: raycaster.ray.at( distance ),
							point: interSegment.clone().applyMatrix4( this.matrixWorld ),
							index: i,
							face: null,
							faceIndex: null,
							object: this

						} );

					}

				}

			} else if ( geometry.isGeometry ) {

				var vertices = geometry.vertices;
				var nbVertices = vertices.length;

				for ( var i = 0; i < nbVertices - 1; i += step ) {

					var distSq = ray.distanceSqToSegment( vertices[ i ], vertices[ i + 1 ], interRay, interSegment );

					if ( distSq > precisionSq ) continue;

					interRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation

					var distance = raycaster.ray.origin.distanceTo( interRay );

					if ( distance < raycaster.near || distance > raycaster.far ) continue;

					intersects.push( {

						distance: distance,
						// What do we want? intersection point on the ray or on the segment??
						// point: raycaster.ray.at( distance ),
						point: interSegment.clone().applyMatrix4( this.matrixWorld ),
						index: i,
						face: null,
						faceIndex: null,
						object: this

					} );

				}

			}

		};

	}() ),

	clone: function () {

		return new this.constructor( this.geometry, this.material ).copy( this );

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 */

function LineSegments( geometry, material ) {

	Line.call( this, geometry, material );

	this.type = 'LineSegments';

}

LineSegments.prototype = Object.assign( Object.create( Line.prototype ), {

	constructor: LineSegments,

	isLineSegments: true

} );

/**
 * @author mgreter / http://github.com/mgreter
 */

function LineLoop( geometry, material ) {

	Line.call( this, geometry, material );

	this.type = 'LineLoop';

}

LineLoop.prototype = Object.assign( Object.create( Line.prototype ), {

	constructor: LineLoop,

	isLineLoop: true,

} );

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 *
 * parameters = {
 *  color: <hex>,
 *  opacity: <float>,
 *  map: new THREE.Texture( <Image> ),
 *
 *  size: <float>,
 *  sizeAttenuation: <bool>
 * }
 */

function PointsMaterial( parameters ) {

	Material.call( this );

	this.type = 'PointsMaterial';

	this.color = new Color( 0xffffff );

	this.map = null;

	this.size = 1;
	this.sizeAttenuation = true;

	this.lights = false;

	this.setValues( parameters );

}

PointsMaterial.prototype = Object.create( Material.prototype );
PointsMaterial.prototype.constructor = PointsMaterial;

PointsMaterial.prototype.isPointsMaterial = true;

PointsMaterial.prototype.copy = function ( source ) {

	Material.prototype.copy.call( this, source );

	this.color.copy( source.color );

	this.map = source.map;

	this.size = source.size;
	this.sizeAttenuation = source.sizeAttenuation;

	return this;

};

/**
 * @author alteredq / http://alteredqualia.com/
 */

function Points( geometry, material ) {

	Object3D.call( this );

	this.type = 'Points';

	this.geometry = geometry !== undefined ? geometry : new BufferGeometry();
	this.material = material !== undefined ? material : new PointsMaterial( { color: Math.random() * 0xffffff } );

}

Points.prototype = Object.assign( Object.create( Object3D.prototype ), {

	constructor: Points,

	isPoints: true,

	raycast: ( function () {

		var inverseMatrix = new Matrix4();
		var ray = new Ray();
		var sphere = new Sphere();

		return function raycast( raycaster, intersects ) {

			var object = this;
			var geometry = this.geometry;
			var matrixWorld = this.matrixWorld;
			var threshold = raycaster.params.Points.threshold;

			// Checking boundingSphere distance to ray

			if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();

			sphere.copy( geometry.boundingSphere );
			sphere.applyMatrix4( matrixWorld );
			sphere.radius += threshold;

			if ( raycaster.ray.intersectsSphere( sphere ) === false ) return;

			//

			inverseMatrix.getInverse( matrixWorld );
			ray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );

			var localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );
			var localThresholdSq = localThreshold * localThreshold;
			var position = new Vector3();

			function testPoint( point, index ) {

				var rayPointDistanceSq = ray.distanceSqToPoint( point );

				if ( rayPointDistanceSq < localThresholdSq ) {

					var intersectPoint = ray.closestPointToPoint( point );
					intersectPoint.applyMatrix4( matrixWorld );

					var distance = raycaster.ray.origin.distanceTo( intersectPoint );

					if ( distance < raycaster.near || distance > raycaster.far ) return;

					intersects.push( {

						distance: distance,
						distanceToRay: Math.sqrt( rayPointDistanceSq ),
						point: intersectPoint.clone(),
						index: index,
						face: null,
						object: object

					} );

				}

			}

			if ( geometry.isBufferGeometry ) {

				var index = geometry.index;
				var attributes = geometry.attributes;
				var positions = attributes.position.array;

				if ( index !== null ) {

					var indices = index.array;

					for ( var i = 0, il = indices.length; i < il; i ++ ) {

						var a = indices[ i ];

						position.fromArray( positions, a * 3 );

						testPoint( position, a );

					}

				} else {

					for ( var i = 0, l = positions.length / 3; i < l; i ++ ) {

						position.fromArray( positions, i * 3 );

						testPoint( position, i );

					}

				}

			} else {

				var vertices = geometry.vertices;

				for ( var i = 0, l = vertices.length; i < l; i ++ ) {

					testPoint( vertices[ i ], i );

				}

			}

		};

	}() ),

	clone: function () {

		return new this.constructor( this.geometry, this.material ).copy( this );

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 */

function Group() {

	Object3D.call( this );

	this.type = 'Group';

}

Group.prototype = Object.assign( Object.create( Object3D.prototype ), {

	constructor: Group

} );

/**
 * @author mrdoob / http://mrdoob.com/
 */

function CompressedTexture( mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {

	Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );

	this.image = { width: width, height: height };
	this.mipmaps = mipmaps;

	// no flipping for cube textures
	// (also flipping doesn't work for compressed textures )

	this.flipY = false;

	// can't generate mipmaps for compressed textures
	// mips must be embedded in DDS files

	this.generateMipmaps = false;

}

CompressedTexture.prototype = Object.create( Texture.prototype );
CompressedTexture.prototype.constructor = CompressedTexture;

CompressedTexture.prototype.isCompressedTexture = true;

/**
 * @author Matt DesLauriers / @mattdesl
 * @author atix / arthursilber.de
 */

function WireframeGeometry( geometry ) {

	BufferGeometry.call( this );

	this.type = 'WireframeGeometry';

	// buffer

	var vertices = [];

	// helper variables

	var i, j, l, o, ol;
	var edge = [ 0, 0 ], edges = {}, e, edge1, edge2;
	var key, keys = [ 'a', 'b', 'c' ];
	var vertex;

	// different logic for Geometry and BufferGeometry

	if ( geometry && geometry.isGeometry ) {

		// create a data structure that contains all edges without duplicates

		var faces = geometry.faces;

		for ( i = 0, l = faces.length; i < l; i ++ ) {

			var face = faces[ i ];

			for ( j = 0; j < 3; j ++ ) {

				edge1 = face[ keys[ j ] ];
				edge2 = face[ keys[ ( j + 1 ) % 3 ] ];
				edge[ 0 ] = Math.min( edge1, edge2 ); // sorting prevents duplicates
				edge[ 1 ] = Math.max( edge1, edge2 );

				key = edge[ 0 ] + ',' + edge[ 1 ];

				if ( edges[ key ] === undefined ) {

					edges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ] };

				}

			}

		}

		// generate vertices

		for ( key in edges ) {

			e = edges[ key ];

			vertex = geometry.vertices[ e.index1 ];
			vertices.push( vertex.x, vertex.y, vertex.z );

			vertex = geometry.vertices[ e.index2 ];
			vertices.push( vertex.x, vertex.y, vertex.z );

		}

	} else if ( geometry && geometry.isBufferGeometry ) {

		var position, indices, groups;
		var group, start, count;
		var index1, index2;

		vertex = new Vector3();

		if ( geometry.index !== null ) {

			// indexed BufferGeometry

			position = geometry.attributes.position;
			indices = geometry.index;
			groups = geometry.groups;

			if ( groups.length === 0 ) {

				groups = [ { start: 0, count: indices.count, materialIndex: 0 } ];

			}

			// create a data structure that contains all eges without duplicates

			for ( o = 0, ol = groups.length; o < ol; ++ o ) {

				group = groups[ o ];

				start = group.start;
				count = group.count;

				for ( i = start, l = ( start + count ); i < l; i += 3 ) {

					for ( j = 0; j < 3; j ++ ) {

						edge1 = indices.getX( i + j );
						edge2 = indices.getX( i + ( j + 1 ) % 3 );
						edge[ 0 ] = Math.min( edge1, edge2 ); // sorting prevents duplicates
						edge[ 1 ] = Math.max( edge1, edge2 );

						key = edge[ 0 ] + ',' + edge[ 1 ];

						if ( edges[ key ] === undefined ) {

							edges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ] };

						}

					}

				}

			}

			// generate vertices

			for ( key in edges ) {

				e = edges[ key ];

				vertex.fromBufferAttribute( position, e.index1 );
				vertices.push( vertex.x, vertex.y, vertex.z );

				vertex.fromBufferAttribute( position, e.index2 );
				vertices.push( vertex.x, vertex.y, vertex.z );

			}

		} else {

			// non-indexed BufferGeometry

			position = geometry.attributes.position;

			for ( i = 0, l = ( position.count / 3 ); i < l; i ++ ) {

				for ( j = 0; j < 3; j ++ ) {

					// three edges per triangle, an edge is represented as (index1, index2)
					// e.g. the first triangle has the following edges: (0,1),(1,2),(2,0)

					index1 = 3 * i + j;
					vertex.fromBufferAttribute( position, index1 );
					vertices.push( vertex.x, vertex.y, vertex.z );

					index2 = 3 * i + ( ( j + 1 ) % 3 );
					vertex.fromBufferAttribute( position, index2 );
					vertices.push( vertex.x, vertex.y, vertex.z );

				}

			}

		}

	}

	// build geometry

	this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );

}

WireframeGeometry.prototype = Object.create( BufferGeometry.prototype );
WireframeGeometry.prototype.constructor = WireframeGeometry;

/**
 * @author zz85 / https://github.com/zz85
 * @author Mugen87 / https://github.com/Mugen87
 *
 * Parametric Surfaces Geometry
 * based on the brilliant article by @prideout http://prideout.net/blog/?p=44
 */

// ParametricGeometry

function ParametricGeometry( func, slices, stacks ) {

	Geometry.call( this );

	this.type = 'ParametricGeometry';

	this.parameters = {
		func: func,
		slices: slices,
		stacks: stacks
	};

	this.fromBufferGeometry( new ParametricBufferGeometry( func, slices, stacks ) );
	this.mergeVertices();

}

ParametricGeometry.prototype = Object.create( Geometry.prototype );
ParametricGeometry.prototype.constructor = ParametricGeometry;

// ParametricBufferGeometry

function ParametricBufferGeometry( func, slices, stacks ) {

	BufferGeometry.call( this );

	this.type = 'ParametricBufferGeometry';

	this.parameters = {
		func: func,
		slices: slices,
		stacks: stacks
	};

	// buffers

	var indices = [];
	var vertices = [];
	var normals = [];
	var uvs = [];

	var EPS = 0.00001;

	var normal = new Vector3();

	var p0 = new Vector3(), p1 = new Vector3();
	var pu = new Vector3(), pv = new Vector3();

	var i, j;

	// generate vertices, normals and uvs

	var sliceCount = slices + 1;

	for ( i = 0; i <= stacks; i ++ ) {

		var v = i / stacks;

		for ( j = 0; j <= slices; j ++ ) {

			var u = j / slices;

			// vertex

			p0 = func( u, v, p0 );
			vertices.push( p0.x, p0.y, p0.z );

			// normal

			// approximate tangent vectors via finite differences

			if ( u - EPS >= 0 ) {

				p1 = func( u - EPS, v, p1 );
				pu.subVectors( p0, p1 );

			} else {

				p1 = func( u + EPS, v, p1 );
				pu.subVectors( p1, p0 );

			}

			if ( v - EPS >= 0 ) {

				p1 = func( u, v - EPS, p1 );
				pv.subVectors( p0, p1 );

			} else {

				p1 = func( u, v + EPS, p1 );
				pv.subVectors( p1, p0 );

			}

			// cross product of tangent vectors returns surface normal

			normal.crossVectors( pu, pv ).normalize();
			normals.push( normal.x, normal.y, normal.z );

			// uv

			uvs.push( u, v );

		}

	}

	// generate indices

	for ( i = 0; i < stacks; i ++ ) {

		for ( j = 0; j < slices; j ++ ) {

			var a = i * sliceCount + j;
			var b = i * sliceCount + j + 1;
			var c = ( i + 1 ) * sliceCount + j + 1;
			var d = ( i + 1 ) * sliceCount + j;

			// faces one and two

			indices.push( a, b, d );
			indices.push( b, c, d );

		}

	}

	// build geometry

	this.setIndex( indices );
	this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
	this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
	this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

}

ParametricBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
ParametricBufferGeometry.prototype.constructor = ParametricBufferGeometry;

/**
 * @author clockworkgeek / https://github.com/clockworkgeek
 * @author timothypratley / https://github.com/timothypratley
 * @author WestLangley / http://github.com/WestLangley
 * @author Mugen87 / https://github.com/Mugen87
 */

// PolyhedronGeometry

function PolyhedronGeometry( vertices, indices, radius, detail ) {

	Geometry.call( this );

	this.type = 'PolyhedronGeometry';

	this.parameters = {
		vertices: vertices,
		indices: indices,
		radius: radius,
		detail: detail
	};

	this.fromBufferGeometry( new PolyhedronBufferGeometry( vertices, indices, radius, detail ) );
	this.mergeVertices();

}

PolyhedronGeometry.prototype = Object.create( Geometry.prototype );
PolyhedronGeometry.prototype.constructor = PolyhedronGeometry;

// PolyhedronBufferGeometry

function PolyhedronBufferGeometry( vertices, indices, radius, detail ) {

	BufferGeometry.call( this );

	this.type = 'PolyhedronBufferGeometry';

	this.parameters = {
		vertices: vertices,
		indices: indices,
		radius: radius,
		detail: detail
	};

	radius = radius || 1;
	detail = detail || 0;

	// default buffer data

	var vertexBuffer = [];
	var uvBuffer = [];

	// the subdivision creates the vertex buffer data

	subdivide( detail );

	// all vertices should lie on a conceptual sphere with a given radius

	appplyRadius( radius );

	// finally, create the uv data

	generateUVs();

	// build non-indexed geometry

	this.addAttribute( 'position', new Float32BufferAttribute( vertexBuffer, 3 ) );
	this.addAttribute( 'normal', new Float32BufferAttribute( vertexBuffer.slice(), 3 ) );
	this.addAttribute( 'uv', new Float32BufferAttribute( uvBuffer, 2 ) );

	if ( detail === 0 ) {

		this.computeVertexNormals(); // flat normals

	} else {

		this.normalizeNormals(); // smooth normals

	}

	// helper functions

	function subdivide( detail ) {

		var a = new Vector3();
		var b = new Vector3();
		var c = new Vector3();

		// iterate over all faces and apply a subdivison with the given detail value

		for ( var i = 0; i < indices.length; i += 3 ) {

			// get the vertices of the face

			getVertexByIndex( indices[ i + 0 ], a );
			getVertexByIndex( indices[ i + 1 ], b );
			getVertexByIndex( indices[ i + 2 ], c );

			// perform subdivision

			subdivideFace( a, b, c, detail );

		}

	}

	function subdivideFace( a, b, c, detail ) {

		var cols = Math.pow( 2, detail );

		// we use this multidimensional array as a data structure for creating the subdivision

		var v = [];

		var i, j;

		// construct all of the vertices for this subdivision

		for ( i = 0; i <= cols; i ++ ) {

			v[ i ] = [];

			var aj = a.clone().lerp( c, i / cols );
			var bj = b.clone().lerp( c, i / cols );

			var rows = cols - i;

			for ( j = 0; j <= rows; j ++ ) {

				if ( j === 0 && i === cols ) {

					v[ i ][ j ] = aj;

				} else {

					v[ i ][ j ] = aj.clone().lerp( bj, j / rows );

				}

			}

		}

		// construct all of the faces

		for ( i = 0; i < cols; i ++ ) {

			for ( j = 0; j < 2 * ( cols - i ) - 1; j ++ ) {

				var k = Math.floor( j / 2 );

				if ( j % 2 === 0 ) {

					pushVertex( v[ i ][ k + 1 ] );
					pushVertex( v[ i + 1 ][ k ] );
					pushVertex( v[ i ][ k ] );

				} else {

					pushVertex( v[ i ][ k + 1 ] );
					pushVertex( v[ i + 1 ][ k + 1 ] );
					pushVertex( v[ i + 1 ][ k ] );

				}

			}

		}

	}

	function appplyRadius( radius ) {

		var vertex = new Vector3();

		// iterate over the entire buffer and apply the radius to each vertex

		for ( var i = 0; i < vertexBuffer.length; i += 3 ) {

			vertex.x = vertexBuffer[ i + 0 ];
			vertex.y = vertexBuffer[ i + 1 ];
			vertex.z = vertexBuffer[ i + 2 ];

			vertex.normalize().multiplyScalar( radius );

			vertexBuffer[ i + 0 ] = vertex.x;
			vertexBuffer[ i + 1 ] = vertex.y;
			vertexBuffer[ i + 2 ] = vertex.z;

		}

	}

	function generateUVs() {

		var vertex = new Vector3();

		for ( var i = 0; i < vertexBuffer.length; i += 3 ) {

			vertex.x = vertexBuffer[ i + 0 ];
			vertex.y = vertexBuffer[ i + 1 ];
			vertex.z = vertexBuffer[ i + 2 ];

			var u = azimuth( vertex ) / 2 / Math.PI + 0.5;
			var v = inclination( vertex ) / Math.PI + 0.5;
			uvBuffer.push( u, 1 - v );

		}

		correctUVs();

		correctSeam();

	}

	function correctSeam() {

		// handle case when face straddles the seam, see #3269

		for ( var i = 0; i < uvBuffer.length; i += 6 ) {

			// uv data of a single face

			var x0 = uvBuffer[ i + 0 ];
			var x1 = uvBuffer[ i + 2 ];
			var x2 = uvBuffer[ i + 4 ];

			var max = Math.max( x0, x1, x2 );
			var min = Math.min( x0, x1, x2 );

			// 0.9 is somewhat arbitrary

			if ( max > 0.9 && min < 0.1 ) {

				if ( x0 < 0.2 ) uvBuffer[ i + 0 ] += 1;
				if ( x1 < 0.2 ) uvBuffer[ i + 2 ] += 1;
				if ( x2 < 0.2 ) uvBuffer[ i + 4 ] += 1;

			}

		}

	}

	function pushVertex( vertex ) {

		vertexBuffer.push( vertex.x, vertex.y, vertex.z );

	}

	function getVertexByIndex( index, vertex ) {

		var stride = index * 3;

		vertex.x = vertices[ stride + 0 ];
		vertex.y = vertices[ stride + 1 ];
		vertex.z = vertices[ stride + 2 ];

	}

	function correctUVs() {

		var a = new Vector3();
		var b = new Vector3();
		var c = new Vector3();

		var centroid = new Vector3();

		var uvA = new Vector2();
		var uvB = new Vector2();
		var uvC = new Vector2();

		for ( var i = 0, j = 0; i < vertexBuffer.length; i += 9, j += 6 ) {

			a.set( vertexBuffer[ i + 0 ], vertexBuffer[ i + 1 ], vertexBuffer[ i + 2 ] );
			b.set( vertexBuffer[ i + 3 ], vertexBuffer[ i + 4 ], vertexBuffer[ i + 5 ] );
			c.set( vertexBuffer[ i + 6 ], vertexBuffer[ i + 7 ], vertexBuffer[ i + 8 ] );

			uvA.set( uvBuffer[ j + 0 ], uvBuffer[ j + 1 ] );
			uvB.set( uvBuffer[ j + 2 ], uvBuffer[ j + 3 ] );
			uvC.set( uvBuffer[ j + 4 ], uvBuffer[ j + 5 ] );

			centroid.copy( a ).add( b ).add( c ).divideScalar( 3 );

			var azi = azimuth( centroid );

			correctUV( uvA, j + 0, a, azi );
			correctUV( uvB, j + 2, b, azi );
			correctUV( uvC, j + 4, c, azi );

		}

	}

	function correctUV( uv, stride, vector, azimuth ) {

		if ( ( azimuth < 0 ) && ( uv.x === 1 ) ) {

			uvBuffer[ stride ] = uv.x - 1;

		}

		if ( ( vector.x === 0 ) && ( vector.z === 0 ) ) {

			uvBuffer[ stride ] = azimuth / 2 / Math.PI + 0.5;

		}

	}

	// Angle around the Y axis, counter-clockwise when looking from above.

	function azimuth( vector ) {

		return Math.atan2( vector.z, - vector.x );

	}


	// Angle above the XZ plane.

	function inclination( vector ) {

		return Math.atan2( - vector.y, Math.sqrt( ( vector.x * vector.x ) + ( vector.z * vector.z ) ) );

	}

}

PolyhedronBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
PolyhedronBufferGeometry.prototype.constructor = PolyhedronBufferGeometry;

/**
 * @author timothypratley / https://github.com/timothypratley
 * @author Mugen87 / https://github.com/Mugen87
 */

// TetrahedronGeometry

function TetrahedronGeometry( radius, detail ) {

	Geometry.call( this );

	this.type = 'TetrahedronGeometry';

	this.parameters = {
		radius: radius,
		detail: detail
	};

	this.fromBufferGeometry( new TetrahedronBufferGeometry( radius, detail ) );
	this.mergeVertices();

}

TetrahedronGeometry.prototype = Object.create( Geometry.prototype );
TetrahedronGeometry.prototype.constructor = TetrahedronGeometry;

// TetrahedronBufferGeometry

function TetrahedronBufferGeometry( radius, detail ) {

	var vertices = [
		1, 1, 1, 	- 1, - 1, 1, 	- 1, 1, - 1, 	1, - 1, - 1
	];

	var indices = [
		2, 1, 0, 	0, 3, 2,	1, 3, 0,	2, 3, 1
	];

	PolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );

	this.type = 'TetrahedronBufferGeometry';

	this.parameters = {
		radius: radius,
		detail: detail
	};

}

TetrahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );
TetrahedronBufferGeometry.prototype.constructor = TetrahedronBufferGeometry;

/**
 * @author timothypratley / https://github.com/timothypratley
 * @author Mugen87 / https://github.com/Mugen87
 */

// OctahedronGeometry

function OctahedronGeometry( radius, detail ) {

	Geometry.call( this );

	this.type = 'OctahedronGeometry';

	this.parameters = {
		radius: radius,
		detail: detail
	};

	this.fromBufferGeometry( new OctahedronBufferGeometry( radius, detail ) );
	this.mergeVertices();

}

OctahedronGeometry.prototype = Object.create( Geometry.prototype );
OctahedronGeometry.prototype.constructor = OctahedronGeometry;

// OctahedronBufferGeometry

function OctahedronBufferGeometry( radius, detail ) {

	var vertices = [
		1, 0, 0, 	- 1, 0, 0,	0, 1, 0,
		0, - 1, 0, 	0, 0, 1,	0, 0, - 1
	];

	var indices = [
		0, 2, 4,	0, 4, 3,	0, 3, 5,
		0, 5, 2,	1, 2, 5,	1, 5, 3,
		1, 3, 4,	1, 4, 2
	];

	PolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );

	this.type = 'OctahedronBufferGeometry';

	this.parameters = {
		radius: radius,
		detail: detail
	};

}

OctahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );
OctahedronBufferGeometry.prototype.constructor = OctahedronBufferGeometry;

/**
 * @author timothypratley / https://github.com/timothypratley
 * @author Mugen87 / https://github.com/Mugen87
 */

// IcosahedronGeometry

function IcosahedronGeometry( radius, detail ) {

	Geometry.call( this );

	this.type = 'IcosahedronGeometry';

	this.parameters = {
		radius: radius,
		detail: detail
	};

	this.fromBufferGeometry( new IcosahedronBufferGeometry( radius, detail ) );
	this.mergeVertices();

}

IcosahedronGeometry.prototype = Object.create( Geometry.prototype );
IcosahedronGeometry.prototype.constructor = IcosahedronGeometry;

// IcosahedronBufferGeometry

function IcosahedronBufferGeometry( radius, detail ) {

	var t = ( 1 + Math.sqrt( 5 ) ) / 2;

	var vertices = [
		- 1, t, 0, 	1, t, 0, 	- 1, - t, 0, 	1, - t, 0,
		 0, - 1, t, 	0, 1, t,	0, - 1, - t, 	0, 1, - t,
		 t, 0, - 1, 	t, 0, 1, 	- t, 0, - 1, 	- t, 0, 1
	];

	var indices = [
		 0, 11, 5, 	0, 5, 1, 	0, 1, 7, 	0, 7, 10, 	0, 10, 11,
		 1, 5, 9, 	5, 11, 4,	11, 10, 2,	10, 7, 6,	7, 1, 8,
		 3, 9, 4, 	3, 4, 2,	3, 2, 6,	3, 6, 8,	3, 8, 9,
		 4, 9, 5, 	2, 4, 11,	6, 2, 10,	8, 6, 7,	9, 8, 1
	];

	PolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );

	this.type = 'IcosahedronBufferGeometry';

	this.parameters = {
		radius: radius,
		detail: detail
	};

}

IcosahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );
IcosahedronBufferGeometry.prototype.constructor = IcosahedronBufferGeometry;

/**
 * @author Abe Pazos / https://hamoid.com
 * @author Mugen87 / https://github.com/Mugen87
 */

// DodecahedronGeometry

function DodecahedronGeometry( radius, detail ) {

	Geometry.call( this );

	this.type = 'DodecahedronGeometry';

	this.parameters = {
		radius: radius,
		detail: detail
	};

	this.fromBufferGeometry( new DodecahedronBufferGeometry( radius, detail ) );
	this.mergeVertices();

}

DodecahedronGeometry.prototype = Object.create( Geometry.prototype );
DodecahedronGeometry.prototype.constructor = DodecahedronGeometry;

// DodecahedronBufferGeometry

function DodecahedronBufferGeometry( radius, detail ) {

	var t = ( 1 + Math.sqrt( 5 ) ) / 2;
	var r = 1 / t;

	var vertices = [

		// (±1, ±1, ±1)
		- 1, - 1, - 1,	- 1, - 1, 1,
		- 1, 1, - 1, - 1, 1, 1,
		1, - 1, - 1, 1, - 1, 1,
		1, 1, - 1, 1, 1, 1,

		// (0, ±1/φ, ±φ)
		 0, - r, - t, 0, - r, t,
		 0, r, - t, 0, r, t,

		// (±1/φ, ±φ, 0)
		- r, - t, 0, - r, t, 0,
		 r, - t, 0, r, t, 0,

		// (±φ, 0, ±1/φ)
		- t, 0, - r, t, 0, - r,
		- t, 0, r, t, 0, r
	];

	var indices = [
		3, 11, 7, 	3, 7, 15, 	3, 15, 13,
		7, 19, 17, 	7, 17, 6, 	7, 6, 15,
		17, 4, 8, 	17, 8, 10, 	17, 10, 6,
		8, 0, 16, 	8, 16, 2, 	8, 2, 10,
		0, 12, 1, 	0, 1, 18, 	0, 18, 16,
		6, 10, 2, 	6, 2, 13, 	6, 13, 15,
		2, 16, 18, 	2, 18, 3, 	2, 3, 13,
		18, 1, 9, 	18, 9, 11, 	18, 11, 3,
		4, 14, 12, 	4, 12, 0, 	4, 0, 8,
		11, 9, 5, 	11, 5, 19, 	11, 19, 7,
		19, 5, 14, 	19, 14, 4, 	19, 4, 17,
		1, 12, 14, 	1, 14, 5, 	1, 5, 9
	];

	PolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );

	this.type = 'DodecahedronBufferGeometry';

	this.parameters = {
		radius: radius,
		detail: detail
	};

}

DodecahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );
DodecahedronBufferGeometry.prototype.constructor = DodecahedronBufferGeometry;

/**
 * @author oosmoxiecode / https://github.com/oosmoxiecode
 * @author WestLangley / https://github.com/WestLangley
 * @author zz85 / https://github.com/zz85
 * @author miningold / https://github.com/miningold
 * @author jonobr1 / https://github.com/jonobr1
 * @author Mugen87 / https://github.com/Mugen87
 *
 */

// TubeGeometry

function TubeGeometry( path, tubularSegments, radius, radialSegments, closed, taper ) {

	Geometry.call( this );

	this.type = 'TubeGeometry';

	this.parameters = {
		path: path,
		tubularSegments: tubularSegments,
		radius: radius,
		radialSegments: radialSegments,
		closed: closed
	};

	if ( taper !== undefined ) console.warn( 'THREE.TubeGeometry: taper has been removed.' );

	var bufferGeometry = new TubeBufferGeometry( path, tubularSegments, radius, radialSegments, closed );

	// expose internals

	this.tangents = bufferGeometry.tangents;
	this.normals = bufferGeometry.normals;
	this.binormals = bufferGeometry.binormals;

	// create geometry

	this.fromBufferGeometry( bufferGeometry );
	this.mergeVertices();

}

TubeGeometry.prototype = Object.create( Geometry.prototype );
TubeGeometry.prototype.constructor = TubeGeometry;

// TubeBufferGeometry

function TubeBufferGeometry( path, tubularSegments, radius, radialSegments, closed ) {

	BufferGeometry.call( this );

	this.type = 'TubeBufferGeometry';

	this.parameters = {
		path: path,
		tubularSegments: tubularSegments,
		radius: radius,
		radialSegments: radialSegments,
		closed: closed
	};

	tubularSegments = tubularSegments || 64;
	radius = radius || 1;
	radialSegments = radialSegments || 8;
	closed = closed || false;

	var frames = path.computeFrenetFrames( tubularSegments, closed );

	// expose internals

	this.tangents = frames.tangents;
	this.normals = frames.normals;
	this.binormals = frames.binormals;

	// helper variables

	var vertex = new Vector3();
	var normal = new Vector3();
	var uv = new Vector2();
	var P = new Vector3();

	var i, j;

	// buffer

	var vertices = [];
	var normals = [];
	var uvs = [];
	var indices = [];

	// create buffer data

	generateBufferData();

	// build geometry

	this.setIndex( indices );
	this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
	this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
	this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

	// functions

	function generateBufferData() {

		for ( i = 0; i < tubularSegments; i ++ ) {

			generateSegment( i );

		}

		// if the geometry is not closed, generate the last row of vertices and normals
		// at the regular position on the given path
		//
		// if the geometry is closed, duplicate the first row of vertices and normals (uvs will differ)

		generateSegment( ( closed === false ) ? tubularSegments : 0 );

		// uvs are generated in a separate function.
		// this makes it easy compute correct values for closed geometries

		generateUVs();

		// finally create faces

		generateIndices();

	}

	function generateSegment( i ) {

		// we use getPointAt to sample evenly distributed points from the given path

		P = path.getPointAt( i / tubularSegments, P );

		// retrieve corresponding normal and binormal

		var N = frames.normals[ i ];
		var B = frames.binormals[ i ];

		// generate normals and vertices for the current segment

		for ( j = 0; j <= radialSegments; j ++ ) {

			var v = j / radialSegments * Math.PI * 2;

			var sin = Math.sin( v );
			var cos = - Math.cos( v );

			// normal

			normal.x = ( cos * N.x + sin * B.x );
			normal.y = ( cos * N.y + sin * B.y );
			normal.z = ( cos * N.z + sin * B.z );
			normal.normalize();

			normals.push( normal.x, normal.y, normal.z );

			// vertex

			vertex.x = P.x + radius * normal.x;
			vertex.y = P.y + radius * normal.y;
			vertex.z = P.z + radius * normal.z;

			vertices.push( vertex.x, vertex.y, vertex.z );

		}

	}

	function generateIndices() {

		for ( j = 1; j <= tubularSegments; j ++ ) {

			for ( i = 1; i <= radialSegments; i ++ ) {

				var a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );
				var b = ( radialSegments + 1 ) * j + ( i - 1 );
				var c = ( radialSegments + 1 ) * j + i;
				var d = ( radialSegments + 1 ) * ( j - 1 ) + i;

				// faces

				indices.push( a, b, d );
				indices.push( b, c, d );

			}

		}

	}

	function generateUVs() {

		for ( i = 0; i <= tubularSegments; i ++ ) {

			for ( j = 0; j <= radialSegments; j ++ ) {

				uv.x = i / tubularSegments;
				uv.y = j / radialSegments;

				uvs.push( uv.x, uv.y );

			}

		}

	}

}

TubeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
TubeBufferGeometry.prototype.constructor = TubeBufferGeometry;

/**
 * @author oosmoxiecode
 * @author Mugen87 / https://github.com/Mugen87
 *
 * based on http://www.blackpawn.com/texts/pqtorus/
 */

// TorusKnotGeometry

function TorusKnotGeometry( radius, tube, tubularSegments, radialSegments, p, q, heightScale ) {

	Geometry.call( this );

	this.type = 'TorusKnotGeometry';

	this.parameters = {
		radius: radius,
		tube: tube,
		tubularSegments: tubularSegments,
		radialSegments: radialSegments,
		p: p,
		q: q
	};

	if ( heightScale !== undefined ) console.warn( 'THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead.' );

	this.fromBufferGeometry( new TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) );
	this.mergeVertices();

}

TorusKnotGeometry.prototype = Object.create( Geometry.prototype );
TorusKnotGeometry.prototype.constructor = TorusKnotGeometry;

// TorusKnotBufferGeometry

function TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) {

	BufferGeometry.call( this );

	this.type = 'TorusKnotBufferGeometry';

	this.parameters = {
		radius: radius,
		tube: tube,
		tubularSegments: tubularSegments,
		radialSegments: radialSegments,
		p: p,
		q: q
	};

	radius = radius || 1;
	tube = tube || 0.4;
	tubularSegments = Math.floor( tubularSegments ) || 64;
	radialSegments = Math.floor( radialSegments ) || 8;
	p = p || 2;
	q = q || 3;

	// buffers

	var indices = [];
	var vertices = [];
	var normals = [];
	var uvs = [];

	// helper variables

	var i, j;

	var vertex = new Vector3();
	var normal = new Vector3();

	var P1 = new Vector3();
	var P2 = new Vector3();

	var B = new Vector3();
	var T = new Vector3();
	var N = new Vector3();

	// generate vertices, normals and uvs

	for ( i = 0; i <= tubularSegments; ++ i ) {

		// the radian "u" is used to calculate the position on the torus curve of the current tubular segement

		var u = i / tubularSegments * p * Math.PI * 2;

		// now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.
		// these points are used to create a special "coordinate space", which is necessary to calculate the correct vertex positions

		calculatePositionOnCurve( u, p, q, radius, P1 );
		calculatePositionOnCurve( u + 0.01, p, q, radius, P2 );

		// calculate orthonormal basis

		T.subVectors( P2, P1 );
		N.addVectors( P2, P1 );
		B.crossVectors( T, N );
		N.crossVectors( B, T );

		// normalize B, N. T can be ignored, we don't use it

		B.normalize();
		N.normalize();

		for ( j = 0; j <= radialSegments; ++ j ) {

			// now calculate the vertices. they are nothing more than an extrusion of the torus curve.
			// because we extrude a shape in the xy-plane, there is no need to calculate a z-value.

			var v = j / radialSegments * Math.PI * 2;
			var cx = - tube * Math.cos( v );
			var cy = tube * Math.sin( v );

			// now calculate the final vertex position.
			// first we orient the extrusion with our basis vectos, then we add it to the current position on the curve

			vertex.x = P1.x + ( cx * N.x + cy * B.x );
			vertex.y = P1.y + ( cx * N.y + cy * B.y );
			vertex.z = P1.z + ( cx * N.z + cy * B.z );

			vertices.push( vertex.x, vertex.y, vertex.z );

			// normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)

			normal.subVectors( vertex, P1 ).normalize();

			normals.push( normal.x, normal.y, normal.z );

			// uv

			uvs.push( i / tubularSegments );
			uvs.push( j / radialSegments );

		}

	}

	// generate indices

	for ( j = 1; j <= tubularSegments; j ++ ) {

		for ( i = 1; i <= radialSegments; i ++ ) {

			// indices

			var a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );
			var b = ( radialSegments + 1 ) * j + ( i - 1 );
			var c = ( radialSegments + 1 ) * j + i;
			var d = ( radialSegments + 1 ) * ( j - 1 ) + i;

			// faces

			indices.push( a, b, d );
			indices.push( b, c, d );

		}

	}

	// build geometry

	this.setIndex( indices );
	this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
	this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
	this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

	// this function calculates the current position on the torus curve

	function calculatePositionOnCurve( u, p, q, radius, position ) {

		var cu = Math.cos( u );
		var su = Math.sin( u );
		var quOverP = q / p * u;
		var cs = Math.cos( quOverP );

		position.x = radius * ( 2 + cs ) * 0.5 * cu;
		position.y = radius * ( 2 + cs ) * su * 0.5;
		position.z = radius * Math.sin( quOverP ) * 0.5;

	}

}

TorusKnotBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
TorusKnotBufferGeometry.prototype.constructor = TorusKnotBufferGeometry;

/**
 * @author oosmoxiecode
 * @author mrdoob / http://mrdoob.com/
 * @author Mugen87 / https://github.com/Mugen87
 */

// TorusGeometry

function TorusGeometry( radius, tube, radialSegments, tubularSegments, arc ) {

	Geometry.call( this );

	this.type = 'TorusGeometry';

	this.parameters = {
		radius: radius,
		tube: tube,
		radialSegments: radialSegments,
		tubularSegments: tubularSegments,
		arc: arc
	};

	this.fromBufferGeometry( new TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) );
	this.mergeVertices();

}

TorusGeometry.prototype = Object.create( Geometry.prototype );
TorusGeometry.prototype.constructor = TorusGeometry;

// TorusBufferGeometry

function TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) {

	BufferGeometry.call( this );

	this.type = 'TorusBufferGeometry';

	this.parameters = {
		radius: radius,
		tube: tube,
		radialSegments: radialSegments,
		tubularSegments: tubularSegments,
		arc: arc
	};

	radius = radius || 1;
	tube = tube || 0.4;
	radialSegments = Math.floor( radialSegments ) || 8;
	tubularSegments = Math.floor( tubularSegments ) || 6;
	arc = arc || Math.PI * 2;

	// buffers

	var indices = [];
	var vertices = [];
	var normals = [];
	var uvs = [];

	// helper variables

	var center = new Vector3();
	var vertex = new Vector3();
	var normal = new Vector3();

	var j, i;

	// generate vertices, normals and uvs

	for ( j = 0; j <= radialSegments; j ++ ) {

		for ( i = 0; i <= tubularSegments; i ++ ) {

			var u = i / tubularSegments * arc;
			var v = j / radialSegments * Math.PI * 2;

			// vertex

			vertex.x = ( radius + tube * Math.cos( v ) ) * Math.cos( u );
			vertex.y = ( radius + tube * Math.cos( v ) ) * Math.sin( u );
			vertex.z = tube * Math.sin( v );

			vertices.push( vertex.x, vertex.y, vertex.z );

			// normal

			center.x = radius * Math.cos( u );
			center.y = radius * Math.sin( u );
			normal.subVectors( vertex, center ).normalize();

			normals.push( normal.x, normal.y, normal.z );

			// uv

			uvs.push( i / tubularSegments );
			uvs.push( j / radialSegments );

		}

	}

	// generate indices

	for ( j = 1; j <= radialSegments; j ++ ) {

		for ( i = 1; i <= tubularSegments; i ++ ) {

			// indices

			var a = ( tubularSegments + 1 ) * j + i - 1;
			var b = ( tubularSegments + 1 ) * ( j - 1 ) + i - 1;
			var c = ( tubularSegments + 1 ) * ( j - 1 ) + i;
			var d = ( tubularSegments + 1 ) * j + i;

			// faces

			indices.push( a, b, d );
			indices.push( b, c, d );

		}

	}

	// build geometry

	this.setIndex( indices );
	this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
	this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
	this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

}

TorusBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
TorusBufferGeometry.prototype.constructor = TorusBufferGeometry;

/**
 * @author zz85 / http://www.lab4games.net/zz85/blog
 */

var ShapeUtils = {

	// calculate area of the contour polygon

	area: function ( contour ) {

		var n = contour.length;
		var a = 0.0;

		for ( var p = n - 1, q = 0; q < n; p = q ++ ) {

			a += contour[ p ].x * contour[ q ].y - contour[ q ].x * contour[ p ].y;

		}

		return a * 0.5;

	},

	triangulate: ( function () {

		/**
		 * This code is a quick port of code written in C++ which was submitted to
		 * flipcode.com by John W. Ratcliff  // July 22, 2000
		 * See original code and more information here:
		 * http://www.flipcode.com/archives/Efficient_Polygon_Triangulation.shtml
		 *
		 * ported to actionscript by Zevan Rosser
		 * www.actionsnippet.com
		 *
		 * ported to javascript by Joshua Koo
		 * http://www.lab4games.net/zz85/blog
		 *
		 */

		function snip( contour, u, v, w, n, verts ) {

			var p;
			var ax, ay, bx, by;
			var cx, cy, px, py;

			ax = contour[ verts[ u ] ].x;
			ay = contour[ verts[ u ] ].y;

			bx = contour[ verts[ v ] ].x;
			by = contour[ verts[ v ] ].y;

			cx = contour[ verts[ w ] ].x;
			cy = contour[ verts[ w ] ].y;

			if ( ( bx - ax ) * ( cy - ay ) - ( by - ay ) * ( cx - ax ) <= 0 ) return false;

			var aX, aY, bX, bY, cX, cY;
			var apx, apy, bpx, bpy, cpx, cpy;
			var cCROSSap, bCROSScp, aCROSSbp;

			aX = cx - bx; aY = cy - by;
			bX = ax - cx; bY = ay - cy;
			cX = bx - ax; cY = by - ay;

			for ( p = 0; p < n; p ++ ) {

				px = contour[ verts[ p ] ].x;
				py = contour[ verts[ p ] ].y;

				if ( ( ( px === ax ) && ( py === ay ) ) ||
					 ( ( px === bx ) && ( py === by ) ) ||
					 ( ( px === cx ) && ( py === cy ) ) )	continue;

				apx = px - ax; apy = py - ay;
				bpx = px - bx; bpy = py - by;
				cpx = px - cx; cpy = py - cy;

				// see if p is inside triangle abc

				aCROSSbp = aX * bpy - aY * bpx;
				cCROSSap = cX * apy - cY * apx;
				bCROSScp = bX * cpy - bY * cpx;

				if ( ( aCROSSbp >= - Number.EPSILON ) && ( bCROSScp >= - Number.EPSILON ) && ( cCROSSap >= - Number.EPSILON ) ) return false;

			}

			return true;

		}

		// takes in an contour array and returns

		return function triangulate( contour, indices ) {

			var n = contour.length;

			if ( n < 3 ) return null;

			var result = [],
				verts = [],
				vertIndices = [];

			/* we want a counter-clockwise polygon in verts */

			var u, v, w;

			if ( ShapeUtils.area( contour ) > 0.0 ) {

				for ( v = 0; v < n; v ++ ) verts[ v ] = v;

			} else {

				for ( v = 0; v < n; v ++ ) verts[ v ] = ( n - 1 ) - v;

			}

			var nv = n;

			/*  remove nv - 2 vertices, creating 1 triangle every time */

			var count = 2 * nv; /* error detection */

			for ( v = nv - 1; nv > 2; ) {

				/* if we loop, it is probably a non-simple polygon */

				if ( ( count -- ) <= 0 ) {

					//** Triangulate: ERROR - probable bad polygon!

					//throw ( "Warning, unable to triangulate polygon!" );
					//return null;
					// Sometimes warning is fine, especially polygons are triangulated in reverse.
					console.warn( 'THREE.ShapeUtils: Unable to triangulate polygon! in triangulate()' );

					if ( indices ) return vertIndices;
					return result;

				}

				/* three consecutive vertices in current polygon, <u,v,w> */

				u = v; if ( nv <= u ) u = 0; /* previous */
				v = u + 1; if ( nv <= v ) v = 0; /* new v    */
				w = v + 1; if ( nv <= w ) w = 0; /* next     */

				if ( snip( contour, u, v, w, nv, verts ) ) {

					var a, b, c, s, t;

					/* true names of the vertices */

					a = verts[ u ];
					b = verts[ v ];
					c = verts[ w ];

					/* output Triangle */

					result.push( [ contour[ a ],
						contour[ b ],
						contour[ c ] ] );


					vertIndices.push( [ verts[ u ], verts[ v ], verts[ w ] ] );

					/* remove v from the remaining polygon */

					for ( s = v, t = v + 1; t < nv; s ++, t ++ ) {

						verts[ s ] = verts[ t ];

					}

					nv --;

					/* reset error detection counter */

					count = 2 * nv;

				}

			}

			if ( indices ) return vertIndices;
			return result;

		};

	} )(),

	triangulateShape: function ( contour, holes ) {

		function removeDupEndPts( points ) {

			var l = points.length;

			if ( l > 2 && points[ l - 1 ].equals( points[ 0 ] ) ) {

				points.pop();

			}

		}

		removeDupEndPts( contour );
		holes.forEach( removeDupEndPts );

		function point_in_segment_2D_colin( inSegPt1, inSegPt2, inOtherPt ) {

			// inOtherPt needs to be collinear to the inSegment
			if ( inSegPt1.x !== inSegPt2.x ) {

				if ( inSegPt1.x < inSegPt2.x ) {

					return	( ( inSegPt1.x <= inOtherPt.x ) && ( inOtherPt.x <= inSegPt2.x ) );

				} else {

					return	( ( inSegPt2.x <= inOtherPt.x ) && ( inOtherPt.x <= inSegPt1.x ) );

				}

			} else {

				if ( inSegPt1.y < inSegPt2.y ) {

					return	( ( inSegPt1.y <= inOtherPt.y ) && ( inOtherPt.y <= inSegPt2.y ) );

				} else {

					return	( ( inSegPt2.y <= inOtherPt.y ) && ( inOtherPt.y <= inSegPt1.y ) );

				}

			}

		}

		function intersect_segments_2D( inSeg1Pt1, inSeg1Pt2, inSeg2Pt1, inSeg2Pt2, inExcludeAdjacentSegs ) {

			var seg1dx = inSeg1Pt2.x - inSeg1Pt1.x, seg1dy = inSeg1Pt2.y - inSeg1Pt1.y;
			var seg2dx = inSeg2Pt2.x - inSeg2Pt1.x, seg2dy = inSeg2Pt2.y - inSeg2Pt1.y;

			var seg1seg2dx = inSeg1Pt1.x - inSeg2Pt1.x;
			var seg1seg2dy = inSeg1Pt1.y - inSeg2Pt1.y;

			var limit		= seg1dy * seg2dx - seg1dx * seg2dy;
			var perpSeg1	= seg1dy * seg1seg2dx - seg1dx * seg1seg2dy;

			if ( Math.abs( limit ) > Number.EPSILON ) {

				// not parallel

				var perpSeg2;
				if ( limit > 0 ) {

					if ( ( perpSeg1 < 0 ) || ( perpSeg1 > limit ) ) 		return [];
					perpSeg2 = seg2dy * seg1seg2dx - seg2dx * seg1seg2dy;
					if ( ( perpSeg2 < 0 ) || ( perpSeg2 > limit ) ) 		return [];

				} else {

					if ( ( perpSeg1 > 0 ) || ( perpSeg1 < limit ) ) 		return [];
					perpSeg2 = seg2dy * seg1seg2dx - seg2dx * seg1seg2dy;
					if ( ( perpSeg2 > 0 ) || ( perpSeg2 < limit ) ) 		return [];

				}

				// i.e. to reduce rounding errors
				// intersection at endpoint of segment#1?
				if ( perpSeg2 === 0 ) {

					if ( ( inExcludeAdjacentSegs ) &&
						 ( ( perpSeg1 === 0 ) || ( perpSeg1 === limit ) ) )		return [];
					return [ inSeg1Pt1 ];

				}
				if ( perpSeg2 === limit ) {

					if ( ( inExcludeAdjacentSegs ) &&
						 ( ( perpSeg1 === 0 ) || ( perpSeg1 === limit ) ) )		return [];
					return [ inSeg1Pt2 ];

				}
				// intersection at endpoint of segment#2?
				if ( perpSeg1 === 0 )		return [ inSeg2Pt1 ];
				if ( perpSeg1 === limit )	return [ inSeg2Pt2 ];

				// return real intersection point
				var factorSeg1 = perpSeg2 / limit;
				return	[ { x: inSeg1Pt1.x + factorSeg1 * seg1dx, y: inSeg1Pt1.y + factorSeg1 * seg1dy } ];

			} else {

				// parallel or collinear
				if ( ( perpSeg1 !== 0 ) ||
					 ( seg2dy * seg1seg2dx !== seg2dx * seg1seg2dy ) ) 			return [];

				// they are collinear or degenerate
				var seg1Pt = ( ( seg1dx === 0 ) && ( seg1dy === 0 ) );	// segment1 is just a point?
				var seg2Pt = ( ( seg2dx === 0 ) && ( seg2dy === 0 ) );	// segment2 is just a point?
				// both segments are points
				if ( seg1Pt && seg2Pt ) {

					if ( ( inSeg1Pt1.x !== inSeg2Pt1.x ) ||
						 ( inSeg1Pt1.y !== inSeg2Pt1.y ) )		return [];	// they are distinct  points
					return [ inSeg1Pt1 ];	// they are the same point

				}
				// segment#1  is a single point
				if ( seg1Pt ) {

					if ( ! point_in_segment_2D_colin( inSeg2Pt1, inSeg2Pt2, inSeg1Pt1 ) )		return [];		// but not in segment#2
					return [ inSeg1Pt1 ];

				}
				// segment#2  is a single point
				if ( seg2Pt ) {

					if ( ! point_in_segment_2D_colin( inSeg1Pt1, inSeg1Pt2, inSeg2Pt1 ) )		return [];		// but not in segment#1
					return [ inSeg2Pt1 ];

				}

				// they are collinear segments, which might overlap
				var seg1min, seg1max, seg1minVal, seg1maxVal;
				var seg2min, seg2max, seg2minVal, seg2maxVal;
				if ( seg1dx !== 0 ) {

					// the segments are NOT on a vertical line
					if ( inSeg1Pt1.x < inSeg1Pt2.x ) {

						seg1min = inSeg1Pt1; seg1minVal = inSeg1Pt1.x;
						seg1max = inSeg1Pt2; seg1maxVal = inSeg1Pt2.x;

					} else {

						seg1min = inSeg1Pt2; seg1minVal = inSeg1Pt2.x;
						seg1max = inSeg1Pt1; seg1maxVal = inSeg1Pt1.x;

					}
					if ( inSeg2Pt1.x < inSeg2Pt2.x ) {

						seg2min = inSeg2Pt1; seg2minVal = inSeg2Pt1.x;
						seg2max = inSeg2Pt2; seg2maxVal = inSeg2Pt2.x;

					} else {

						seg2min = inSeg2Pt2; seg2minVal = inSeg2Pt2.x;
						seg2max = inSeg2Pt1; seg2maxVal = inSeg2Pt1.x;

					}

				} else {

					// the segments are on a vertical line
					if ( inSeg1Pt1.y < inSeg1Pt2.y ) {

						seg1min = inSeg1Pt1; seg1minVal = inSeg1Pt1.y;
						seg1max = inSeg1Pt2; seg1maxVal = inSeg1Pt2.y;

					} else {

						seg1min = inSeg1Pt2; seg1minVal = inSeg1Pt2.y;
						seg1max = inSeg1Pt1; seg1maxVal = inSeg1Pt1.y;

					}
					if ( inSeg2Pt1.y < inSeg2Pt2.y ) {

						seg2min = inSeg2Pt1; seg2minVal = inSeg2Pt1.y;
						seg2max = inSeg2Pt2; seg2maxVal = inSeg2Pt2.y;

					} else {

						seg2min = inSeg2Pt2; seg2minVal = inSeg2Pt2.y;
						seg2max = inSeg2Pt1; seg2maxVal = inSeg2Pt1.y;

					}

				}
				if ( seg1minVal <= seg2minVal ) {

					if ( seg1maxVal < seg2minVal )	return [];
					if ( seg1maxVal === seg2minVal )	{

						if ( inExcludeAdjacentSegs )		return [];
						return [ seg2min ];

					}
					if ( seg1maxVal <= seg2maxVal )	return [ seg2min, seg1max ];
					return	[ seg2min, seg2max ];

				} else {

					if ( seg1minVal > seg2maxVal )	return [];
					if ( seg1minVal === seg2maxVal )	{

						if ( inExcludeAdjacentSegs )		return [];
						return [ seg1min ];

					}
					if ( seg1maxVal <= seg2maxVal )	return [ seg1min, seg1max ];
					return	[ seg1min, seg2max ];

				}

			}

		}

		function isPointInsideAngle( inVertex, inLegFromPt, inLegToPt, inOtherPt ) {

			// The order of legs is important

			// translation of all points, so that Vertex is at (0,0)
			var legFromPtX	= inLegFromPt.x - inVertex.x, legFromPtY = inLegFromPt.y - inVertex.y;
			var legToPtX	= inLegToPt.x	- inVertex.x, legToPtY = inLegToPt.y	- inVertex.y;
			var otherPtX	= inOtherPt.x	- inVertex.x, otherPtY = inOtherPt.y	- inVertex.y;

			// main angle >0: < 180 deg.; 0: 180 deg.; <0: > 180 deg.
			var from2toAngle	= legFromPtX * legToPtY - legFromPtY * legToPtX;
			var from2otherAngle	= legFromPtX * otherPtY - legFromPtY * otherPtX;

			if ( Math.abs( from2toAngle ) > Number.EPSILON ) {

				// angle != 180 deg.

				var other2toAngle		= otherPtX * legToPtY - otherPtY * legToPtX;
				// console.log( "from2to: " + from2toAngle + ", from2other: " + from2otherAngle + ", other2to: " + other2toAngle );

				if ( from2toAngle > 0 ) {

					// main angle < 180 deg.
					return	( ( from2otherAngle >= 0 ) && ( other2toAngle >= 0 ) );

				} else {

					// main angle > 180 deg.
					return	( ( from2otherAngle >= 0 ) || ( other2toAngle >= 0 ) );

				}

			} else {

				// angle == 180 deg.
				// console.log( "from2to: 180 deg., from2other: " + from2otherAngle  );
				return	( from2otherAngle > 0 );

			}

		}


		function removeHoles( contour, holes ) {

			var shape = contour.concat(); // work on this shape
			var hole;

			function isCutLineInsideAngles( inShapeIdx, inHoleIdx ) {

				// Check if hole point lies within angle around shape point
				var lastShapeIdx = shape.length - 1;

				var prevShapeIdx = inShapeIdx - 1;
				if ( prevShapeIdx < 0 )			prevShapeIdx = lastShapeIdx;

				var nextShapeIdx = inShapeIdx + 1;
				if ( nextShapeIdx > lastShapeIdx )	nextShapeIdx = 0;

				var insideAngle = isPointInsideAngle( shape[ inShapeIdx ], shape[ prevShapeIdx ], shape[ nextShapeIdx ], hole[ inHoleIdx ] );
				if ( ! insideAngle ) {

					// console.log( "Vertex (Shape): " + inShapeIdx + ", Point: " + hole[inHoleIdx].x + "/" + hole[inHoleIdx].y );
					return	false;

				}

				// Check if shape point lies within angle around hole point
				var lastHoleIdx = hole.length - 1;

				var prevHoleIdx = inHoleIdx - 1;
				if ( prevHoleIdx < 0 )			prevHoleIdx = lastHoleIdx;

				var nextHoleIdx = inHoleIdx + 1;
				if ( nextHoleIdx > lastHoleIdx )	nextHoleIdx = 0;

				insideAngle = isPointInsideAngle( hole[ inHoleIdx ], hole[ prevHoleIdx ], hole[ nextHoleIdx ], shape[ inShapeIdx ] );
				if ( ! insideAngle ) {

					// console.log( "Vertex (Hole): " + inHoleIdx + ", Point: " + shape[inShapeIdx].x + "/" + shape[inShapeIdx].y );
					return	false;

				}

				return	true;

			}

			function intersectsShapeEdge( inShapePt, inHolePt ) {

				// checks for intersections with shape edges
				var sIdx, nextIdx, intersection;
				for ( sIdx = 0; sIdx < shape.length; sIdx ++ ) {

					nextIdx = sIdx + 1; nextIdx %= shape.length;
					intersection = intersect_segments_2D( inShapePt, inHolePt, shape[ sIdx ], shape[ nextIdx ], true );
					if ( intersection.length > 0 )		return	true;

				}

				return	false;

			}

			var indepHoles = [];

			function intersectsHoleEdge( inShapePt, inHolePt ) {

				// checks for intersections with hole edges
				var ihIdx, chkHole,
					hIdx, nextIdx, intersection;
				for ( ihIdx = 0; ihIdx < indepHoles.length; ihIdx ++ ) {

					chkHole = holes[ indepHoles[ ihIdx ] ];
					for ( hIdx = 0; hIdx < chkHole.length; hIdx ++ ) {

						nextIdx = hIdx + 1; nextIdx %= chkHole.length;
						intersection = intersect_segments_2D( inShapePt, inHolePt, chkHole[ hIdx ], chkHole[ nextIdx ], true );
						if ( intersection.length > 0 )		return	true;

					}

				}
				return	false;

			}

			var holeIndex, shapeIndex,
				shapePt, holePt,
				holeIdx, cutKey, failedCuts = [],
				tmpShape1, tmpShape2,
				tmpHole1, tmpHole2;

			for ( var h = 0, hl = holes.length; h < hl; h ++ ) {

				indepHoles.push( h );

			}

			var minShapeIndex = 0;
			var counter = indepHoles.length * 2;
			while ( indepHoles.length > 0 ) {

				counter --;
				if ( counter < 0 ) {

					console.log( 'THREE.ShapeUtils: Infinite Loop! Holes left:" + indepHoles.length + ", Probably Hole outside Shape!' );
					break;

				}

				// search for shape-vertex and hole-vertex,
				// which can be connected without intersections
				for ( shapeIndex = minShapeIndex; shapeIndex < shape.length; shapeIndex ++ ) {

					shapePt = shape[ shapeIndex ];
					holeIndex	= - 1;

					// search for hole which can be reached without intersections
					for ( var h = 0; h < indepHoles.length; h ++ ) {

						holeIdx = indepHoles[ h ];

						// prevent multiple checks
						cutKey = shapePt.x + ':' + shapePt.y + ':' + holeIdx;
						if ( failedCuts[ cutKey ] !== undefined )			continue;

						hole = holes[ holeIdx ];
						for ( var h2 = 0; h2 < hole.length; h2 ++ ) {

							holePt = hole[ h2 ];
							if ( ! isCutLineInsideAngles( shapeIndex, h2 ) )		continue;
							if ( intersectsShapeEdge( shapePt, holePt ) )		continue;
							if ( intersectsHoleEdge( shapePt, holePt ) )		continue;

							holeIndex = h2;
							indepHoles.splice( h, 1 );

							tmpShape1 = shape.slice( 0, shapeIndex + 1 );
							tmpShape2 = shape.slice( shapeIndex );
							tmpHole1 = hole.slice( holeIndex );
							tmpHole2 = hole.slice( 0, holeIndex + 1 );

							shape = tmpShape1.concat( tmpHole1 ).concat( tmpHole2 ).concat( tmpShape2 );

							minShapeIndex = shapeIndex;

							// Debug only, to show the selected cuts
							// glob_CutLines.push( [ shapePt, holePt ] );

							break;

						}
						if ( holeIndex >= 0 )	break;		// hole-vertex found

						failedCuts[ cutKey ] = true;			// remember failure

					}
					if ( holeIndex >= 0 )	break;		// hole-vertex found

				}

			}

			return shape; 			/* shape with no holes */

		}


		var i, il, f, face,
			key, index,
			allPointsMap = {};

		// To maintain reference to old shape, one must match coordinates, or offset the indices from original arrays. It's probably easier to do the first.

		var allpoints = contour.concat();

		for ( var h = 0, hl = holes.length; h < hl; h ++ ) {

			Array.prototype.push.apply( allpoints, holes[ h ] );

		}

		//console.log( "allpoints",allpoints, allpoints.length );

		// prepare all points map

		for ( i = 0, il = allpoints.length; i < il; i ++ ) {

			key = allpoints[ i ].x + ':' + allpoints[ i ].y;

			if ( allPointsMap[ key ] !== undefined ) {

				console.warn( 'THREE.ShapeUtils: Duplicate point', key, i );

			}

			allPointsMap[ key ] = i;

		}

		// remove holes by cutting paths to holes and adding them to the shape
		var shapeWithoutHoles = removeHoles( contour, holes );

		var triangles = ShapeUtils.triangulate( shapeWithoutHoles, false ); // True returns indices for points of spooled shape
		//console.log( "triangles",triangles, triangles.length );

		// check all face vertices against all points map

		for ( i = 0, il = triangles.length; i < il; i ++ ) {

			face = triangles[ i ];

			for ( f = 0; f < 3; f ++ ) {

				key = face[ f ].x + ':' + face[ f ].y;

				index = allPointsMap[ key ];

				if ( index !== undefined ) {

					face[ f ] = index;

				}

			}

		}

		return triangles.concat();

	},

	isClockWise: function ( pts ) {

		return ShapeUtils.area( pts ) < 0;

	}

};

/**
 * @author zz85 / http://www.lab4games.net/zz85/blog
 *
 * Creates extruded geometry from a path shape.
 *
 * parameters = {
 *
 *  curveSegments: <int>, // number of points on the curves
 *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too
 *  amount: <int>, // Depth to extrude the shape
 *
 *  bevelEnabled: <bool>, // turn on bevel
 *  bevelThickness: <float>, // how deep into the original shape bevel goes
 *  bevelSize: <float>, // how far from shape outline is bevel
 *  bevelSegments: <int>, // number of bevel layers
 *
 *  extrudePath: <THREE.Curve> // curve to extrude shape along
 *  frames: <Object> // containing arrays of tangents, normals, binormals
 *
 *  UVGenerator: <Object> // object that provides UV generator functions
 *
 * }
 */

// ExtrudeGeometry

function ExtrudeGeometry( shapes, options ) {

	Geometry.call( this );

	this.type = 'ExtrudeGeometry';

	this.parameters = {
		shapes: shapes,
		options: options
	};

	this.fromBufferGeometry( new ExtrudeBufferGeometry( shapes, options ) );
	this.mergeVertices();

}

ExtrudeGeometry.prototype = Object.create( Geometry.prototype );
ExtrudeGeometry.prototype.constructor = ExtrudeGeometry;

// ExtrudeBufferGeometry

function ExtrudeBufferGeometry( shapes, options ) {

	if ( typeof ( shapes ) === "undefined" ) {

		return;

	}

	BufferGeometry.call( this );

	this.type = 'ExtrudeBufferGeometry';

	shapes = Array.isArray( shapes ) ? shapes : [ shapes ];

	this.addShapeList( shapes, options );

	this.computeVertexNormals();

	// can't really use automatic vertex normals
	// as then front and back sides get smoothed too
	// should do separate smoothing just for sides

	//this.computeVertexNormals();

	//console.log( "took", ( Date.now() - startTime ) );

}

ExtrudeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
ExtrudeBufferGeometry.prototype.constructor = ExtrudeBufferGeometry;

ExtrudeBufferGeometry.prototype.getArrays = function () {

	var positionAttribute = this.getAttribute( "position" );
	var verticesArray = positionAttribute ? Array.prototype.slice.call( positionAttribute.array ) : [];

	var uvAttribute = this.getAttribute( "uv" );
	var uvArray = uvAttribute ? Array.prototype.slice.call( uvAttribute.array ) : [];

	var IndexAttribute = this.index;
	var indicesArray = IndexAttribute ? Array.prototype.slice.call( IndexAttribute.array ) : [];

	return {
		position: verticesArray,
		uv: uvArray,
		index: indicesArray
	};

};

ExtrudeBufferGeometry.prototype.addShapeList = function ( shapes, options ) {

	var sl = shapes.length;
	options.arrays = this.getArrays();

	for ( var s = 0; s < sl; s ++ ) {

		var shape = shapes[ s ];
		this.addShape( shape, options );

	}

	this.setIndex( options.arrays.index );
	this.addAttribute( 'position', new Float32BufferAttribute( options.arrays.position, 3 ) );
	this.addAttribute( 'uv', new Float32BufferAttribute( options.arrays.uv, 2 ) );

};

ExtrudeBufferGeometry.prototype.addShape = function ( shape, options ) {

	var arrays = options.arrays ? options.arrays : this.getArrays();
	var verticesArray = arrays.position;
	var indicesArray = arrays.index;
	var uvArray = arrays.uv;

	var placeholder = [];


	var amount = options.amount !== undefined ? options.amount : 100;

	var bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 6; // 10
	var bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 2; // 8
	var bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;

	var bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true; // false

	var curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;

	var steps = options.steps !== undefined ? options.steps : 1;

	var extrudePath = options.extrudePath;
	var extrudePts, extrudeByPath = false;

	// Use default WorldUVGenerator if no UV generators are specified.
	var uvgen = options.UVGenerator !== undefined ? options.UVGenerator : ExtrudeGeometry.WorldUVGenerator;

	var splineTube, binormal, normal, position2;
	if ( extrudePath ) {

		extrudePts = extrudePath.getSpacedPoints( steps );

		extrudeByPath = true;
		bevelEnabled = false; // bevels not supported for path extrusion

		// SETUP TNB variables

		// TODO1 - have a .isClosed in spline?

		splineTube = options.frames !== undefined ? options.frames : extrudePath.computeFrenetFrames( steps, false );

		// console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);

		binormal = new Vector3();
		normal = new Vector3();
		position2 = new Vector3();

	}

	// Safeguards if bevels are not enabled

	if ( ! bevelEnabled ) {

		bevelSegments = 0;
		bevelThickness = 0;
		bevelSize = 0;

	}

	// Variables initialization

	var ahole, h, hl; // looping of holes
	var scope = this;

	var shapePoints = shape.extractPoints( curveSegments );

	var vertices = shapePoints.shape;
	var holes = shapePoints.holes;

	var reverse = ! ShapeUtils.isClockWise( vertices );

	if ( reverse ) {

		vertices = vertices.reverse();

		// Maybe we should also check if holes are in the opposite direction, just to be safe ...

		for ( h = 0, hl = holes.length; h < hl; h ++ ) {

			ahole = holes[ h ];

			if ( ShapeUtils.isClockWise( ahole ) ) {

				holes[ h ] = ahole.reverse();

			}

		}

	}


	var faces = ShapeUtils.triangulateShape( vertices, holes );

	/* Vertices */

	var contour = vertices; // vertices has all points but contour has only points of circumference

	for ( h = 0, hl = holes.length; h < hl; h ++ ) {

		ahole = holes[ h ];

		vertices = vertices.concat( ahole );

	}


	function scalePt2( pt, vec, size ) {

		if ( ! vec ) console.error( "THREE.ExtrudeGeometry: vec does not exist" );

		return vec.clone().multiplyScalar( size ).add( pt );

	}

	var b, bs, t, z,
		vert, vlen = vertices.length,
		face, flen = faces.length;


	// Find directions for point movement


	function getBevelVec( inPt, inPrev, inNext ) {

		// computes for inPt the corresponding point inPt' on a new contour
		//   shifted by 1 unit (length of normalized vector) to the left
		// if we walk along contour clockwise, this new contour is outside the old one
		//
		// inPt' is the intersection of the two lines parallel to the two
		//  adjacent edges of inPt at a distance of 1 unit on the left side.

		var v_trans_x, v_trans_y, shrink_by; // resulting translation vector for inPt

		// good reading for geometry algorithms (here: line-line intersection)
		// http://geomalgorithms.com/a05-_intersect-1.html

		var v_prev_x = inPt.x - inPrev.x,
			v_prev_y = inPt.y - inPrev.y;
		var v_next_x = inNext.x - inPt.x,
			v_next_y = inNext.y - inPt.y;

		var v_prev_lensq = ( v_prev_x * v_prev_x + v_prev_y * v_prev_y );

		// check for collinear edges
		var collinear0 = ( v_prev_x * v_next_y - v_prev_y * v_next_x );

		if ( Math.abs( collinear0 ) > Number.EPSILON ) {

			// not collinear

			// length of vectors for normalizing

			var v_prev_len = Math.sqrt( v_prev_lensq );
			var v_next_len = Math.sqrt( v_next_x * v_next_x + v_next_y * v_next_y );

			// shift adjacent points by unit vectors to the left

			var ptPrevShift_x = ( inPrev.x - v_prev_y / v_prev_len );
			var ptPrevShift_y = ( inPrev.y + v_prev_x / v_prev_len );

			var ptNextShift_x = ( inNext.x - v_next_y / v_next_len );
			var ptNextShift_y = ( inNext.y + v_next_x / v_next_len );

			// scaling factor for v_prev to intersection point

			var sf = ( ( ptNextShift_x - ptPrevShift_x ) * v_next_y -
					( ptNextShift_y - ptPrevShift_y ) * v_next_x ) /
				( v_prev_x * v_next_y - v_prev_y * v_next_x );

			// vector from inPt to intersection point

			v_trans_x = ( ptPrevShift_x + v_prev_x * sf - inPt.x );
			v_trans_y = ( ptPrevShift_y + v_prev_y * sf - inPt.y );

			// Don't normalize!, otherwise sharp corners become ugly
			//  but prevent crazy spikes
			var v_trans_lensq = ( v_trans_x * v_trans_x + v_trans_y * v_trans_y );
			if ( v_trans_lensq <= 2 ) {

				return new Vector2( v_trans_x, v_trans_y );

			} else {

				shrink_by = Math.sqrt( v_trans_lensq / 2 );

			}

		} else {

			// handle special case of collinear edges

			var direction_eq = false; // assumes: opposite
			if ( v_prev_x > Number.EPSILON ) {

				if ( v_next_x > Number.EPSILON ) {

					direction_eq = true;

				}

			} else {

				if ( v_prev_x < - Number.EPSILON ) {

					if ( v_next_x < - Number.EPSILON ) {

						direction_eq = true;

					}

				} else {

					if ( Math.sign( v_prev_y ) === Math.sign( v_next_y ) ) {

						direction_eq = true;

					}

				}

			}

			if ( direction_eq ) {

				// console.log("Warning: lines are a straight sequence");
				v_trans_x = - v_prev_y;
				v_trans_y = v_prev_x;
				shrink_by = Math.sqrt( v_prev_lensq );

			} else {

				// console.log("Warning: lines are a straight spike");
				v_trans_x = v_prev_x;
				v_trans_y = v_prev_y;
				shrink_by = Math.sqrt( v_prev_lensq / 2 );

			}

		}

		return new Vector2( v_trans_x / shrink_by, v_trans_y / shrink_by );

	}


	var contourMovements = [];

	for ( var i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {

		if ( j === il ) j = 0;
		if ( k === il ) k = 0;

		//  (j)---(i)---(k)
		// console.log('i,j,k', i, j , k)

		contourMovements[ i ] = getBevelVec( contour[ i ], contour[ j ], contour[ k ] );

	}

	var holesMovements = [],
		oneHoleMovements, verticesMovements = contourMovements.concat();

	for ( h = 0, hl = holes.length; h < hl; h ++ ) {

		ahole = holes[ h ];

		oneHoleMovements = [];

		for ( i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {

			if ( j === il ) j = 0;
			if ( k === il ) k = 0;

			//  (j)---(i)---(k)
			oneHoleMovements[ i ] = getBevelVec( ahole[ i ], ahole[ j ], ahole[ k ] );

		}

		holesMovements.push( oneHoleMovements );
		verticesMovements = verticesMovements.concat( oneHoleMovements );

	}


	// Loop bevelSegments, 1 for the front, 1 for the back

	for ( b = 0; b < bevelSegments; b ++ ) {

		//for ( b = bevelSegments; b > 0; b -- ) {

		t = b / bevelSegments;
		z = bevelThickness * Math.cos( t * Math.PI / 2 );
		bs = bevelSize * Math.sin( t * Math.PI / 2 );

		// contract shape

		for ( i = 0, il = contour.length; i < il; i ++ ) {

			vert = scalePt2( contour[ i ], contourMovements[ i ], bs );

			v( vert.x, vert.y, - z );

		}

		// expand holes

		for ( h = 0, hl = holes.length; h < hl; h ++ ) {

			ahole = holes[ h ];
			oneHoleMovements = holesMovements[ h ];

			for ( i = 0, il = ahole.length; i < il; i ++ ) {

				vert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );

				v( vert.x, vert.y, - z );

			}

		}

	}

	bs = bevelSize;

	// Back facing vertices

	for ( i = 0; i < vlen; i ++ ) {

		vert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];

		if ( ! extrudeByPath ) {

			v( vert.x, vert.y, 0 );

		} else {

			// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );

			normal.copy( splineTube.normals[ 0 ] ).multiplyScalar( vert.x );
			binormal.copy( splineTube.binormals[ 0 ] ).multiplyScalar( vert.y );

			position2.copy( extrudePts[ 0 ] ).add( normal ).add( binormal );

			v( position2.x, position2.y, position2.z );

		}

	}

	// Add stepped vertices...
	// Including front facing vertices

	var s;

	for ( s = 1; s <= steps; s ++ ) {

		for ( i = 0; i < vlen; i ++ ) {

			vert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];

			if ( ! extrudeByPath ) {

				v( vert.x, vert.y, amount / steps * s );

			} else {

				// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );

				normal.copy( splineTube.normals[ s ] ).multiplyScalar( vert.x );
				binormal.copy( splineTube.binormals[ s ] ).multiplyScalar( vert.y );

				position2.copy( extrudePts[ s ] ).add( normal ).add( binormal );

				v( position2.x, position2.y, position2.z );

			}

		}

	}


	// Add bevel segments planes

	//for ( b = 1; b <= bevelSegments; b ++ ) {
	for ( b = bevelSegments - 1; b >= 0; b -- ) {

		t = b / bevelSegments;
		z = bevelThickness * Math.cos( t * Math.PI / 2 );
		bs = bevelSize * Math.sin( t * Math.PI / 2 );

		// contract shape

		for ( i = 0, il = contour.length; i < il; i ++ ) {

			vert = scalePt2( contour[ i ], contourMovements[ i ], bs );
			v( vert.x, vert.y, amount + z );

		}

		// expand holes

		for ( h = 0, hl = holes.length; h < hl; h ++ ) {

			ahole = holes[ h ];
			oneHoleMovements = holesMovements[ h ];

			for ( i = 0, il = ahole.length; i < il; i ++ ) {

				vert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );

				if ( ! extrudeByPath ) {

					v( vert.x, vert.y, amount + z );

				} else {

					v( vert.x, vert.y + extrudePts[ steps - 1 ].y, extrudePts[ steps - 1 ].x + z );

				}

			}

		}

	}

	/* Faces */

	// Top and bottom faces

	buildLidFaces();

	// Sides faces

	buildSideFaces();


	/////  Internal functions

	function buildLidFaces() {

		var start = verticesArray.length / 3;

		if ( bevelEnabled ) {

			var layer = 0; // steps + 1
			var offset = vlen * layer;

			// Bottom faces

			for ( i = 0; i < flen; i ++ ) {

				face = faces[ i ];
				f3( face[ 2 ] + offset, face[ 1 ] + offset, face[ 0 ] + offset );

			}

			layer = steps + bevelSegments * 2;
			offset = vlen * layer;

			// Top faces

			for ( i = 0; i < flen; i ++ ) {

				face = faces[ i ];
				f3( face[ 0 ] + offset, face[ 1 ] + offset, face[ 2 ] + offset );

			}

		} else {

			// Bottom faces

			for ( i = 0; i < flen; i ++ ) {

				face = faces[ i ];
				f3( face[ 2 ], face[ 1 ], face[ 0 ] );

			}

			// Top faces

			for ( i = 0; i < flen; i ++ ) {

				face = faces[ i ];
				f3( face[ 0 ] + vlen * steps, face[ 1 ] + vlen * steps, face[ 2 ] + vlen * steps );

			}

		}

		scope.addGroup( start, verticesArray.length / 3 - start, options.material !== undefined ? options.material : 0 );

	}

	// Create faces for the z-sides of the shape

	function buildSideFaces() {

		var start = verticesArray.length / 3;
		var layeroffset = 0;
		sidewalls( contour, layeroffset );
		layeroffset += contour.length;

		for ( h = 0, hl = holes.length; h < hl; h ++ ) {

			ahole = holes[ h ];
			sidewalls( ahole, layeroffset );

			//, true
			layeroffset += ahole.length;

		}


		scope.addGroup( start, verticesArray.length / 3 - start, options.extrudeMaterial !== undefined ? options.extrudeMaterial : 1 );


	}

	function sidewalls( contour, layeroffset ) {

		var j, k;
		i = contour.length;

		while ( -- i >= 0 ) {

			j = i;
			k = i - 1;
			if ( k < 0 ) k = contour.length - 1;

			//console.log('b', i,j, i-1, k,vertices.length);

			var s = 0,
				sl = steps + bevelSegments * 2;

			for ( s = 0; s < sl; s ++ ) {

				var slen1 = vlen * s;
				var slen2 = vlen * ( s + 1 );

				var a = layeroffset + j + slen1,
					b = layeroffset + k + slen1,
					c = layeroffset + k + slen2,
					d = layeroffset + j + slen2;

				f4( a, b, c, d );

			}

		}

	}

	function v( x, y, z ) {

		placeholder.push( x );
		placeholder.push( y );
		placeholder.push( z );

	}


	function f3( a, b, c ) {

		addVertex( a );
		addVertex( b );
		addVertex( c );

		var nextIndex = verticesArray.length / 3;
		var uvs = uvgen.generateTopUV( scope, verticesArray, nextIndex - 3, nextIndex - 2, nextIndex - 1 );

		addUV( uvs[ 0 ] );
		addUV( uvs[ 1 ] );
		addUV( uvs[ 2 ] );

	}

	function f4( a, b, c, d ) {

		addVertex( a );
		addVertex( b );
		addVertex( d );

		addVertex( b );
		addVertex( c );
		addVertex( d );


		var nextIndex = verticesArray.length / 3;
		var uvs = uvgen.generateSideWallUV( scope, verticesArray, nextIndex - 6, nextIndex - 3, nextIndex - 2, nextIndex - 1 );

		addUV( uvs[ 0 ] );
		addUV( uvs[ 1 ] );
		addUV( uvs[ 3 ] );

		addUV( uvs[ 1 ] );
		addUV( uvs[ 2 ] );
		addUV( uvs[ 3 ] );

	}

	function addVertex( index ) {

		indicesArray.push( verticesArray.length / 3 );
		verticesArray.push( placeholder[ index * 3 + 0 ] );
		verticesArray.push( placeholder[ index * 3 + 1 ] );
		verticesArray.push( placeholder[ index * 3 + 2 ] );

	}


	function addUV( vector2 ) {

		uvArray.push( vector2.x );
		uvArray.push( vector2.y );

	}

	if ( ! options.arrays ) {

		this.setIndex( indicesArray );
		this.addAttribute( 'position', new Float32BufferAttribute( verticesArray, 3 ) );
		this.addAttribute( 'uv', new Float32BufferAttribute( options.arrays.uv, 2 ) );

	}

};

ExtrudeGeometry.WorldUVGenerator = {

	generateTopUV: function ( geometry, vertices, indexA, indexB, indexC ) {

		var a_x = vertices[ indexA * 3 ];
		var a_y = vertices[ indexA * 3 + 1 ];
		var b_x = vertices[ indexB * 3 ];
		var b_y = vertices[ indexB * 3 + 1 ];
		var c_x = vertices[ indexC * 3 ];
		var c_y = vertices[ indexC * 3 + 1 ];

		return [
			new Vector2( a_x, a_y ),
			new Vector2( b_x, b_y ),
			new Vector2( c_x, c_y )
		];

	},

	generateSideWallUV: function ( geometry, vertices, indexA, indexB, indexC, indexD ) {

		var a_x = vertices[ indexA * 3 ];
		var a_y = vertices[ indexA * 3 + 1 ];
		var a_z = vertices[ indexA * 3 + 2 ];
		var b_x = vertices[ indexB * 3 ];
		var b_y = vertices[ indexB * 3 + 1 ];
		var b_z = vertices[ indexB * 3 + 2 ];
		var c_x = vertices[ indexC * 3 ];
		var c_y = vertices[ indexC * 3 + 1 ];
		var c_z = vertices[ indexC * 3 + 2 ];
		var d_x = vertices[ indexD * 3 ];
		var d_y = vertices[ indexD * 3 + 1 ];
		var d_z = vertices[ indexD * 3 + 2 ];

		if ( Math.abs( a_y - b_y ) < 0.01 ) {

			return [
				new Vector2( a_x, 1 - a_z ),
				new Vector2( b_x, 1 - b_z ),
				new Vector2( c_x, 1 - c_z ),
				new Vector2( d_x, 1 - d_z )
			];

		} else {

			return [
				new Vector2( a_y, 1 - a_z ),
				new Vector2( b_y, 1 - b_z ),
				new Vector2( c_y, 1 - c_z ),
				new Vector2( d_y, 1 - d_z )
			];

		}

	}
};

/**
 * @author zz85 / http://www.lab4games.net/zz85/blog
 * @author alteredq / http://alteredqualia.com/
 *
 * Text = 3D Text
 *
 * parameters = {
 *  font: <THREE.Font>, // font
 *
 *  size: <float>, // size of the text
 *  height: <float>, // thickness to extrude text
 *  curveSegments: <int>, // number of points on the curves
 *
 *  bevelEnabled: <bool>, // turn on bevel
 *  bevelThickness: <float>, // how deep into text bevel goes
 *  bevelSize: <float> // how far from text outline is bevel
 * }
 */

// TextGeometry

function TextGeometry( text, parameters ) {

	Geometry.call( this );

	this.type = 'TextGeometry';

	this.parameters = {
		text: text,
		parameters: parameters
	};

	this.fromBufferGeometry( new TextBufferGeometry( text, parameters ) );
	this.mergeVertices();

}

TextGeometry.prototype = Object.create( Geometry.prototype );
TextGeometry.prototype.constructor = TextGeometry;

// TextBufferGeometry

function TextBufferGeometry( text, parameters ) {

	parameters = parameters || {};

	var font = parameters.font;

	if ( ! ( font && font.isFont ) ) {

		console.error( 'THREE.TextGeometry: font parameter is not an instance of THREE.Font.' );
		return new Geometry();

	}

	var shapes = font.generateShapes( text, parameters.size, parameters.curveSegments );

	// translate parameters to ExtrudeGeometry API

	parameters.amount = parameters.height !== undefined ? parameters.height : 50;

	// defaults

	if ( parameters.bevelThickness === undefined ) parameters.bevelThickness = 10;
	if ( parameters.bevelSize === undefined ) parameters.bevelSize = 8;
	if ( parameters.bevelEnabled === undefined ) parameters.bevelEnabled = false;

	ExtrudeBufferGeometry.call( this, shapes, parameters );

	this.type = 'TextBufferGeometry';

}

TextBufferGeometry.prototype = Object.create( ExtrudeBufferGeometry.prototype );
TextBufferGeometry.prototype.constructor = TextBufferGeometry;

/**
 * @author mrdoob / http://mrdoob.com/
 * @author benaadams / https://twitter.com/ben_a_adams
 * @author Mugen87 / https://github.com/Mugen87
 */

// SphereGeometry

function SphereGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {

	Geometry.call( this );

	this.type = 'SphereGeometry';

	this.parameters = {
		radius: radius,
		widthSegments: widthSegments,
		heightSegments: heightSegments,
		phiStart: phiStart,
		phiLength: phiLength,
		thetaStart: thetaStart,
		thetaLength: thetaLength
	};

	this.fromBufferGeometry( new SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) );
	this.mergeVertices();

}

SphereGeometry.prototype = Object.create( Geometry.prototype );
SphereGeometry.prototype.constructor = SphereGeometry;

// SphereBufferGeometry

function SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {

	BufferGeometry.call( this );

	this.type = 'SphereBufferGeometry';

	this.parameters = {
		radius: radius,
		widthSegments: widthSegments,
		heightSegments: heightSegments,
		phiStart: phiStart,
		phiLength: phiLength,
		thetaStart: thetaStart,
		thetaLength: thetaLength
	};

	radius = radius || 1;

	widthSegments = Math.max( 3, Math.floor( widthSegments ) || 8 );
	heightSegments = Math.max( 2, Math.floor( heightSegments ) || 6 );

	phiStart = phiStart !== undefined ? phiStart : 0;
	phiLength = phiLength !== undefined ? phiLength : Math.PI * 2;

	thetaStart = thetaStart !== undefined ? thetaStart : 0;
	thetaLength = thetaLength !== undefined ? thetaLength : Math.PI;

	var thetaEnd = thetaStart + thetaLength;

	var ix, iy;

	var index = 0;
	var grid = [];

	var vertex = new Vector3();
	var normal = new Vector3();

	// buffers

	var indices = [];
	var vertices = [];
	var normals = [];
	var uvs = [];

	// generate vertices, normals and uvs

	for ( iy = 0; iy <= heightSegments; iy ++ ) {

		var verticesRow = [];

		var v = iy / heightSegments;

		for ( ix = 0; ix <= widthSegments; ix ++ ) {

			var u = ix / widthSegments;

			// vertex

			vertex.x = - radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );
			vertex.y = radius * Math.cos( thetaStart + v * thetaLength );
			vertex.z = radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );

			vertices.push( vertex.x, vertex.y, vertex.z );

			// normal

			normal.set( vertex.x, vertex.y, vertex.z ).normalize();
			normals.push( normal.x, normal.y, normal.z );

			// uv

			uvs.push( u, 1 - v );

			verticesRow.push( index ++ );

		}

		grid.push( verticesRow );

	}

	// indices

	for ( iy = 0; iy < heightSegments; iy ++ ) {

		for ( ix = 0; ix < widthSegments; ix ++ ) {

			var a = grid[ iy ][ ix + 1 ];
			var b = grid[ iy ][ ix ];
			var c = grid[ iy + 1 ][ ix ];
			var d = grid[ iy + 1 ][ ix + 1 ];

			if ( iy !== 0 || thetaStart > 0 ) indices.push( a, b, d );
			if ( iy !== heightSegments - 1 || thetaEnd < Math.PI ) indices.push( b, c, d );

		}

	}

	// build geometry

	this.setIndex( indices );
	this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
	this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
	this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

}

SphereBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
SphereBufferGeometry.prototype.constructor = SphereBufferGeometry;

/**
 * @author Kaleb Murphy
 * @author Mugen87 / https://github.com/Mugen87
 */

// RingGeometry

function RingGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {

	Geometry.call( this );

	this.type = 'RingGeometry';

	this.parameters = {
		innerRadius: innerRadius,
		outerRadius: outerRadius,
		thetaSegments: thetaSegments,
		phiSegments: phiSegments,
		thetaStart: thetaStart,
		thetaLength: thetaLength
	};

	this.fromBufferGeometry( new RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) );
	this.mergeVertices();

}

RingGeometry.prototype = Object.create( Geometry.prototype );
RingGeometry.prototype.constructor = RingGeometry;

// RingBufferGeometry

function RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {

	BufferGeometry.call( this );

	this.type = 'RingBufferGeometry';

	this.parameters = {
		innerRadius: innerRadius,
		outerRadius: outerRadius,
		thetaSegments: thetaSegments,
		phiSegments: phiSegments,
		thetaStart: thetaStart,
		thetaLength: thetaLength
	};

	innerRadius = innerRadius || 0.5;
	outerRadius = outerRadius || 1;

	thetaStart = thetaStart !== undefined ? thetaStart : 0;
	thetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;

	thetaSegments = thetaSegments !== undefined ? Math.max( 3, thetaSegments ) : 8;
	phiSegments = phiSegments !== undefined ? Math.max( 1, phiSegments ) : 1;

	// buffers

	var indices = [];
	var vertices = [];
	var normals = [];
	var uvs = [];

	// some helper variables

	var segment;
	var radius = innerRadius;
	var radiusStep = ( ( outerRadius - innerRadius ) / phiSegments );
	var vertex = new Vector3();
	var uv = new Vector2();
	var j, i;

	// generate vertices, normals and uvs

	for ( j = 0; j <= phiSegments; j ++ ) {

		for ( i = 0; i <= thetaSegments; i ++ ) {

			// values are generate from the inside of the ring to the outside

			segment = thetaStart + i / thetaSegments * thetaLength;

			// vertex

			vertex.x = radius * Math.cos( segment );
			vertex.y = radius * Math.sin( segment );

			vertices.push( vertex.x, vertex.y, vertex.z );

			// normal

			normals.push( 0, 0, 1 );

			// uv

			uv.x = ( vertex.x / outerRadius + 1 ) / 2;
			uv.y = ( vertex.y / outerRadius + 1 ) / 2;

			uvs.push( uv.x, uv.y );

		}

		// increase the radius for next row of vertices

		radius += radiusStep;

	}

	// indices

	for ( j = 0; j < phiSegments; j ++ ) {

		var thetaSegmentLevel = j * ( thetaSegments + 1 );

		for ( i = 0; i < thetaSegments; i ++ ) {

			segment = i + thetaSegmentLevel;

			var a = segment;
			var b = segment + thetaSegments + 1;
			var c = segment + thetaSegments + 2;
			var d = segment + 1;

			// faces

			indices.push( a, b, d );
			indices.push( b, c, d );

		}

	}

	// build geometry

	this.setIndex( indices );
	this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
	this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
	this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

}

RingBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
RingBufferGeometry.prototype.constructor = RingBufferGeometry;

/**
 * @author astrodud / http://astrodud.isgreat.org/
 * @author zz85 / https://github.com/zz85
 * @author bhouston / http://clara.io
 * @author Mugen87 / https://github.com/Mugen87
 */

// LatheGeometry

function LatheGeometry( points, segments, phiStart, phiLength ) {

	Geometry.call( this );

	this.type = 'LatheGeometry';

	this.parameters = {
		points: points,
		segments: segments,
		phiStart: phiStart,
		phiLength: phiLength
	};

	this.fromBufferGeometry( new LatheBufferGeometry( points, segments, phiStart, phiLength ) );
	this.mergeVertices();

}

LatheGeometry.prototype = Object.create( Geometry.prototype );
LatheGeometry.prototype.constructor = LatheGeometry;

// LatheBufferGeometry

function LatheBufferGeometry( points, segments, phiStart, phiLength ) {

	BufferGeometry.call( this );

	this.type = 'LatheBufferGeometry';

	this.parameters = {
		points: points,
		segments: segments,
		phiStart: phiStart,
		phiLength: phiLength
	};

	segments = Math.floor( segments ) || 12;
	phiStart = phiStart || 0;
	phiLength = phiLength || Math.PI * 2;

	// clamp phiLength so it's in range of [ 0, 2PI ]

	phiLength = _Math.clamp( phiLength, 0, Math.PI * 2 );


	// buffers

	var indices = [];
	var vertices = [];
	var uvs = [];

	// helper variables

	var base;
	var inverseSegments = 1.0 / segments;
	var vertex = new Vector3();
	var uv = new Vector2();
	var i, j;

	// generate vertices and uvs

	for ( i = 0; i <= segments; i ++ ) {

		var phi = phiStart + i * inverseSegments * phiLength;

		var sin = Math.sin( phi );
		var cos = Math.cos( phi );

		for ( j = 0; j <= ( points.length - 1 ); j ++ ) {

			// vertex

			vertex.x = points[ j ].x * sin;
			vertex.y = points[ j ].y;
			vertex.z = points[ j ].x * cos;

			vertices.push( vertex.x, vertex.y, vertex.z );

			// uv

			uv.x = i / segments;
			uv.y = j / ( points.length - 1 );

			uvs.push( uv.x, uv.y );


		}

	}

	// indices

	for ( i = 0; i < segments; i ++ ) {

		for ( j = 0; j < ( points.length - 1 ); j ++ ) {

			base = j + i * points.length;

			var a = base;
			var b = base + points.length;
			var c = base + points.length + 1;
			var d = base + 1;

			// faces

			indices.push( a, b, d );
			indices.push( b, c, d );

		}

	}

	// build geometry

	this.setIndex( indices );
	this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
	this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

	// generate normals

	this.computeVertexNormals();

	// if the geometry is closed, we need to average the normals along the seam.
	// because the corresponding vertices are identical (but still have different UVs).

	if ( phiLength === Math.PI * 2 ) {

		var normals = this.attributes.normal.array;
		var n1 = new Vector3();
		var n2 = new Vector3();
		var n = new Vector3();

		// this is the buffer offset for the last line of vertices

		base = segments * points.length * 3;

		for ( i = 0, j = 0; i < points.length; i ++, j += 3 ) {

			// select the normal of the vertex in the first line

			n1.x = normals[ j + 0 ];
			n1.y = normals[ j + 1 ];
			n1.z = normals[ j + 2 ];

			// select the normal of the vertex in the last line

			n2.x = normals[ base + j + 0 ];
			n2.y = normals[ base + j + 1 ];
			n2.z = normals[ base + j + 2 ];

			// average normals

			n.addVectors( n1, n2 ).normalize();

			// assign the new values to both normals

			normals[ j + 0 ] = normals[ base + j + 0 ] = n.x;
			normals[ j + 1 ] = normals[ base + j + 1 ] = n.y;
			normals[ j + 2 ] = normals[ base + j + 2 ] = n.z;

		}

	}

}

LatheBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
LatheBufferGeometry.prototype.constructor = LatheBufferGeometry;

/**
 * @author jonobr1 / http://jonobr1.com
 * @author Mugen87 / https://github.com/Mugen87
 */

// ShapeGeometry

function ShapeGeometry( shapes, curveSegments ) {

	Geometry.call( this );

	this.type = 'ShapeGeometry';

	if ( typeof curveSegments === 'object' ) {

		console.warn( 'THREE.ShapeGeometry: Options parameter has been removed.' );

		curveSegments = curveSegments.curveSegments;

	}

	this.parameters = {
		shapes: shapes,
		curveSegments: curveSegments
	};

	this.fromBufferGeometry( new ShapeBufferGeometry( shapes, curveSegments ) );
	this.mergeVertices();

}

ShapeGeometry.prototype = Object.create( Geometry.prototype );
ShapeGeometry.prototype.constructor = ShapeGeometry;

// ShapeBufferGeometry

function ShapeBufferGeometry( shapes, curveSegments ) {

	BufferGeometry.call( this );

	this.type = 'ShapeBufferGeometry';

	this.parameters = {
		shapes: shapes,
		curveSegments: curveSegments
	};

	curveSegments = curveSegments || 12;

	// buffers

	var indices = [];
	var vertices = [];
	var normals = [];
	var uvs = [];

	// helper variables

	var groupStart = 0;
	var groupCount = 0;

	// allow single and array values for "shapes" parameter

	if ( Array.isArray( shapes ) === false ) {

		addShape( shapes );

	} else {

		for ( var i = 0; i < shapes.length; i ++ ) {

			addShape( shapes[ i ] );

			this.addGroup( groupStart, groupCount, i ); // enables MultiMaterial support

			groupStart += groupCount;
			groupCount = 0;

		}

	}

	// build geometry

	this.setIndex( indices );
	this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
	this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
	this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );


	// helper functions

	function addShape( shape ) {

		var i, l, shapeHole;

		var indexOffset = vertices.length / 3;
		var points = shape.extractPoints( curveSegments );

		var shapeVertices = points.shape;
		var shapeHoles = points.holes;

		// check direction of vertices

		if ( ShapeUtils.isClockWise( shapeVertices ) === false ) {

			shapeVertices = shapeVertices.reverse();

			// also check if holes are in the opposite direction

			for ( i = 0, l = shapeHoles.length; i < l; i ++ ) {

				shapeHole = shapeHoles[ i ];

				if ( ShapeUtils.isClockWise( shapeHole ) === true ) {

					shapeHoles[ i ] = shapeHole.reverse();

				}

			}

		}

		var faces = ShapeUtils.triangulateShape( shapeVertices, shapeHoles );

		// join vertices of inner and outer paths to a single array

		for ( i = 0, l = shapeHoles.length; i < l; i ++ ) {

			shapeHole = shapeHoles[ i ];
			shapeVertices = shapeVertices.concat( shapeHole );

		}

		// vertices, normals, uvs

		for ( i = 0, l = shapeVertices.length; i < l; i ++ ) {

			var vertex = shapeVertices[ i ];

			vertices.push( vertex.x, vertex.y, 0 );
			normals.push( 0, 0, 1 );
			uvs.push( vertex.x, vertex.y ); // world uvs

		}

		// incides

		for ( i = 0, l = faces.length; i < l; i ++ ) {

			var face = faces[ i ];

			var a = face[ 0 ] + indexOffset;
			var b = face[ 1 ] + indexOffset;
			var c = face[ 2 ] + indexOffset;

			indices.push( a, b, c );
			groupCount += 3;

		}

	}

}

ShapeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
ShapeBufferGeometry.prototype.constructor = ShapeBufferGeometry;

/**
 * @author WestLangley / http://github.com/WestLangley
 * @author Mugen87 / https://github.com/Mugen87
 */

function EdgesGeometry( geometry, thresholdAngle ) {

	BufferGeometry.call( this );

	this.type = 'EdgesGeometry';

	this.parameters = {
		thresholdAngle: thresholdAngle
	};

	thresholdAngle = ( thresholdAngle !== undefined ) ? thresholdAngle : 1;

	// buffer

	var vertices = [];

	// helper variables

	var thresholdDot = Math.cos( _Math.DEG2RAD * thresholdAngle );
	var edge = [ 0, 0 ], edges = {}, edge1, edge2;
	var key, keys = [ 'a', 'b', 'c' ];

	// prepare source geometry

	var geometry2;

	if ( geometry.isBufferGeometry ) {

		geometry2 = new Geometry();
		geometry2.fromBufferGeometry( geometry );

	} else {

		geometry2 = geometry.clone();

	}

	geometry2.mergeVertices();
	geometry2.computeFaceNormals();

	var sourceVertices = geometry2.vertices;
	var faces = geometry2.faces;

	// now create a data structure where each entry represents an edge with its adjoining faces

	for ( var i = 0, l = faces.length; i < l; i ++ ) {

		var face = faces[ i ];

		for ( var j = 0; j < 3; j ++ ) {

			edge1 = face[ keys[ j ] ];
			edge2 = face[ keys[ ( j + 1 ) % 3 ] ];
			edge[ 0 ] = Math.min( edge1, edge2 );
			edge[ 1 ] = Math.max( edge1, edge2 );

			key = edge[ 0 ] + ',' + edge[ 1 ];

			if ( edges[ key ] === undefined ) {

				edges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ], face1: i, face2: undefined };

			} else {

				edges[ key ].face2 = i;

			}

		}

	}

	// generate vertices

	for ( key in edges ) {

		var e = edges[ key ];

		// an edge is only rendered if the angle (in degrees) between the face normals of the adjoining faces exceeds this value. default = 1 degree.

		if ( e.face2 === undefined || faces[ e.face1 ].normal.dot( faces[ e.face2 ].normal ) <= thresholdDot ) {

			var vertex = sourceVertices[ e.index1 ];
			vertices.push( vertex.x, vertex.y, vertex.z );

			vertex = sourceVertices[ e.index2 ];
			vertices.push( vertex.x, vertex.y, vertex.z );

		}

	}

	// build geometry

	this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );

}

EdgesGeometry.prototype = Object.create( BufferGeometry.prototype );
EdgesGeometry.prototype.constructor = EdgesGeometry;

/**
 * @author mrdoob / http://mrdoob.com/
 * @author Mugen87 / https://github.com/Mugen87
 */

// CylinderGeometry

function CylinderGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {

	Geometry.call( this );

	this.type = 'CylinderGeometry';

	this.parameters = {
		radiusTop: radiusTop,
		radiusBottom: radiusBottom,
		height: height,
		radialSegments: radialSegments,
		heightSegments: heightSegments,
		openEnded: openEnded,
		thetaStart: thetaStart,
		thetaLength: thetaLength
	};

	this.fromBufferGeometry( new CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) );
	this.mergeVertices();

}

CylinderGeometry.prototype = Object.create( Geometry.prototype );
CylinderGeometry.prototype.constructor = CylinderGeometry;

// CylinderBufferGeometry

function CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {

	BufferGeometry.call( this );

	this.type = 'CylinderBufferGeometry';

	this.parameters = {
		radiusTop: radiusTop,
		radiusBottom: radiusBottom,
		height: height,
		radialSegments: radialSegments,
		heightSegments: heightSegments,
		openEnded: openEnded,
		thetaStart: thetaStart,
		thetaLength: thetaLength
	};

	var scope = this;

	radiusTop = radiusTop !== undefined ? radiusTop : 1;
	radiusBottom = radiusBottom !== undefined ? radiusBottom : 1;
	height = height || 1;

	radialSegments = Math.floor( radialSegments ) || 8;
	heightSegments = Math.floor( heightSegments ) || 1;

	openEnded = openEnded !== undefined ? openEnded : false;
	thetaStart = thetaStart !== undefined ? thetaStart : 0.0;
	thetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;

	// buffers

	var indices = [];
	var vertices = [];
	var normals = [];
	var uvs = [];

	// helper variables

	var index = 0;
	var indexArray = [];
	var halfHeight = height / 2;
	var groupStart = 0;

	// generate geometry

	generateTorso();

	if ( openEnded === false ) {

		if ( radiusTop > 0 ) generateCap( true );
		if ( radiusBottom > 0 ) generateCap( false );

	}

	// build geometry

	this.setIndex( indices );
	this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
	this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
	this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

	function generateTorso() {

		var x, y;
		var normal = new Vector3();
		var vertex = new Vector3();

		var groupCount = 0;

		// this will be used to calculate the normal
		var slope = ( radiusBottom - radiusTop ) / height;

		// generate vertices, normals and uvs

		for ( y = 0; y <= heightSegments; y ++ ) {

			var indexRow = [];

			var v = y / heightSegments;

			// calculate the radius of the current row

			var radius = v * ( radiusBottom - radiusTop ) + radiusTop;

			for ( x = 0; x <= radialSegments; x ++ ) {

				var u = x / radialSegments;

				var theta = u * thetaLength + thetaStart;

				var sinTheta = Math.sin( theta );
				var cosTheta = Math.cos( theta );

				// vertex

				vertex.x = radius * sinTheta;
				vertex.y = - v * height + halfHeight;
				vertex.z = radius * cosTheta;
				vertices.push( vertex.x, vertex.y, vertex.z );

				// normal

				normal.set( sinTheta, slope, cosTheta ).normalize();
				normals.push( normal.x, normal.y, normal.z );

				// uv

				uvs.push( u, 1 - v );

				// save index of vertex in respective row

				indexRow.push( index ++ );

			}

			// now save vertices of the row in our index array

			indexArray.push( indexRow );

		}

		// generate indices

		for ( x = 0; x < radialSegments; x ++ ) {

			for ( y = 0; y < heightSegments; y ++ ) {

				// we use the index array to access the correct indices

				var a = indexArray[ y ][ x ];
				var b = indexArray[ y + 1 ][ x ];
				var c = indexArray[ y + 1 ][ x + 1 ];
				var d = indexArray[ y ][ x + 1 ];

				// faces

				indices.push( a, b, d );
				indices.push( b, c, d );

				// update group counter

				groupCount += 6;

			}

		}

		// add a group to the geometry. this will ensure multi material support

		scope.addGroup( groupStart, groupCount, 0 );

		// calculate new start value for groups

		groupStart += groupCount;

	}

	function generateCap( top ) {

		var x, centerIndexStart, centerIndexEnd;

		var uv = new Vector2();
		var vertex = new Vector3();

		var groupCount = 0;

		var radius = ( top === true ) ? radiusTop : radiusBottom;
		var sign = ( top === true ) ? 1 : - 1;

		// save the index of the first center vertex
		centerIndexStart = index;

		// first we generate the center vertex data of the cap.
		// because the geometry needs one set of uvs per face,
		// we must generate a center vertex per face/segment

		for ( x = 1; x <= radialSegments; x ++ ) {

			// vertex

			vertices.push( 0, halfHeight * sign, 0 );

			// normal

			normals.push( 0, sign, 0 );

			// uv

			uvs.push( 0.5, 0.5 );

			// increase index

			index ++;

		}

		// save the index of the last center vertex

		centerIndexEnd = index;

		// now we generate the surrounding vertices, normals and uvs

		for ( x = 0; x <= radialSegments; x ++ ) {

			var u = x / radialSegments;
			var theta = u * thetaLength + thetaStart;

			var cosTheta = Math.cos( theta );
			var sinTheta = Math.sin( theta );

			// vertex

			vertex.x = radius * sinTheta;
			vertex.y = halfHeight * sign;
			vertex.z = radius * cosTheta;
			vertices.push( vertex.x, vertex.y, vertex.z );

			// normal

			normals.push( 0, sign, 0 );

			// uv

			uv.x = ( cosTheta * 0.5 ) + 0.5;
			uv.y = ( sinTheta * 0.5 * sign ) + 0.5;
			uvs.push( uv.x, uv.y );

			// increase index

			index ++;

		}

		// generate indices

		for ( x = 0; x < radialSegments; x ++ ) {

			var c = centerIndexStart + x;
			var i = centerIndexEnd + x;

			if ( top === true ) {

				// face top

				indices.push( i, i + 1, c );

			} else {

				// face bottom

				indices.push( i + 1, i, c );

			}

			groupCount += 3;

		}

		// add a group to the geometry. this will ensure multi material support

		scope.addGroup( groupStart, groupCount, top === true ? 1 : 2 );

		// calculate new start value for groups

		groupStart += groupCount;

	}

}

CylinderBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
CylinderBufferGeometry.prototype.constructor = CylinderBufferGeometry;

/**
 * @author abelnation / http://github.com/abelnation
 */

// ConeGeometry

function ConeGeometry( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {

	CylinderGeometry.call( this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );

	this.type = 'ConeGeometry';

	this.parameters = {
		radius: radius,
		height: height,
		radialSegments: radialSegments,
		heightSegments: heightSegments,
		openEnded: openEnded,
		thetaStart: thetaStart,
		thetaLength: thetaLength
	};

}

ConeGeometry.prototype = Object.create( CylinderGeometry.prototype );
ConeGeometry.prototype.constructor = ConeGeometry;

// ConeBufferGeometry

function ConeBufferGeometry( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {

	CylinderBufferGeometry.call( this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );

	this.type = 'ConeBufferGeometry';

	this.parameters = {
		radius: radius,
		height: height,
		radialSegments: radialSegments,
		heightSegments: heightSegments,
		openEnded: openEnded,
		thetaStart: thetaStart,
		thetaLength: thetaLength
	};

}

ConeBufferGeometry.prototype = Object.create( CylinderBufferGeometry.prototype );
ConeBufferGeometry.prototype.constructor = ConeBufferGeometry;

/**
 * @author benaadams / https://twitter.com/ben_a_adams
 * @author Mugen87 / https://github.com/Mugen87
 * @author hughes
 */

// CircleGeometry

function CircleGeometry( radius, segments, thetaStart, thetaLength ) {

	Geometry.call( this );

	this.type = 'CircleGeometry';

	this.parameters = {
		radius: radius,
		segments: segments,
		thetaStart: thetaStart,
		thetaLength: thetaLength
	};

	this.fromBufferGeometry( new CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) );
	this.mergeVertices();

}

CircleGeometry.prototype = Object.create( Geometry.prototype );
CircleGeometry.prototype.constructor = CircleGeometry;

// CircleBufferGeometry

function CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) {

	BufferGeometry.call( this );

	this.type = 'CircleBufferGeometry';

	this.parameters = {
		radius: radius,
		segments: segments,
		thetaStart: thetaStart,
		thetaLength: thetaLength
	};

	radius = radius || 1;
	segments = segments !== undefined ? Math.max( 3, segments ) : 8;

	thetaStart = thetaStart !== undefined ? thetaStart : 0;
	thetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;

	// buffers

	var indices = [];
	var vertices = [];
	var normals = [];
	var uvs = [];

	// helper variables

	var i, s;
	var vertex = new Vector3();
	var uv = new Vector2();

	// center point

	vertices.push( 0, 0, 0 );
	normals.push( 0, 0, 1 );
	uvs.push( 0.5, 0.5 );

	for ( s = 0, i = 3; s <= segments; s ++, i += 3 ) {

		var segment = thetaStart + s / segments * thetaLength;

		// vertex

		vertex.x = radius * Math.cos( segment );
		vertex.y = radius * Math.sin( segment );

		vertices.push( vertex.x, vertex.y, vertex.z );

		// normal

		normals.push( 0, 0, 1 );

		// uvs

		uv.x = ( vertices[ i ] / radius + 1 ) / 2;
		uv.y = ( vertices[ i + 1 ] / radius + 1 ) / 2;

		uvs.push( uv.x, uv.y );

	}

	// indices

	for ( i = 1; i <= segments; i ++ ) {

		indices.push( i, i + 1, 0 );

	}

	// build geometry

	this.setIndex( indices );
	this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
	this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
	this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

}

CircleBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
CircleBufferGeometry.prototype.constructor = CircleBufferGeometry;



var Geometries = Object.freeze({
	WireframeGeometry: WireframeGeometry,
	ParametricGeometry: ParametricGeometry,
	ParametricBufferGeometry: ParametricBufferGeometry,
	TetrahedronGeometry: TetrahedronGeometry,
	TetrahedronBufferGeometry: TetrahedronBufferGeometry,
	OctahedronGeometry: OctahedronGeometry,
	OctahedronBufferGeometry: OctahedronBufferGeometry,
	IcosahedronGeometry: IcosahedronGeometry,
	IcosahedronBufferGeometry: IcosahedronBufferGeometry,
	DodecahedronGeometry: DodecahedronGeometry,
	DodecahedronBufferGeometry: DodecahedronBufferGeometry,
	PolyhedronGeometry: PolyhedronGeometry,
	PolyhedronBufferGeometry: PolyhedronBufferGeometry,
	TubeGeometry: TubeGeometry,
	TubeBufferGeometry: TubeBufferGeometry,
	TorusKnotGeometry: TorusKnotGeometry,
	TorusKnotBufferGeometry: TorusKnotBufferGeometry,
	TorusGeometry: TorusGeometry,
	TorusBufferGeometry: TorusBufferGeometry,
	TextGeometry: TextGeometry,
	TextBufferGeometry: TextBufferGeometry,
	SphereGeometry: SphereGeometry,
	SphereBufferGeometry: SphereBufferGeometry,
	RingGeometry: RingGeometry,
	RingBufferGeometry: RingBufferGeometry,
	PlaneGeometry: PlaneGeometry,
	PlaneBufferGeometry: PlaneBufferGeometry,
	LatheGeometry: LatheGeometry,
	LatheBufferGeometry: LatheBufferGeometry,
	ShapeGeometry: ShapeGeometry,
	ShapeBufferGeometry: ShapeBufferGeometry,
	ExtrudeGeometry: ExtrudeGeometry,
	ExtrudeBufferGeometry: ExtrudeBufferGeometry,
	EdgesGeometry: EdgesGeometry,
	ConeGeometry: ConeGeometry,
	ConeBufferGeometry: ConeBufferGeometry,
	CylinderGeometry: CylinderGeometry,
	CylinderBufferGeometry: CylinderBufferGeometry,
	CircleGeometry: CircleGeometry,
	CircleBufferGeometry: CircleBufferGeometry,
	BoxGeometry: BoxGeometry,
	BoxBufferGeometry: BoxBufferGeometry
});

/**
 * @author mrdoob / http://mrdoob.com/
 *
 * parameters = {
 *  color: <THREE.Color>,
 *  opacity: <float>
 * }
 */

function ShadowMaterial( parameters ) {

	Material.call( this );

	this.type = 'ShadowMaterial';

	this.color = new Color( 0x000000 );
	this.opacity = 1.0;

	this.lights = true;
	this.transparent = true;

	this.setValues( parameters );

}

ShadowMaterial.prototype = Object.create( Material.prototype );
ShadowMaterial.prototype.constructor = ShadowMaterial;

ShadowMaterial.prototype.isShadowMaterial = true;

/**
 * @author mrdoob / http://mrdoob.com/
 */

function RawShaderMaterial( parameters ) {

	ShaderMaterial.call( this, parameters );

	this.type = 'RawShaderMaterial';

}

RawShaderMaterial.prototype = Object.create( ShaderMaterial.prototype );
RawShaderMaterial.prototype.constructor = RawShaderMaterial;

RawShaderMaterial.prototype.isRawShaderMaterial = true;

/**
 * @author WestLangley / http://github.com/WestLangley
 *
 * parameters = {
 *  color: <hex>,
 *  roughness: <float>,
 *  metalness: <float>,
 *  opacity: <float>,
 *
 *  map: new THREE.Texture( <Image> ),
 *
 *  lightMap: new THREE.Texture( <Image> ),
 *  lightMapIntensity: <float>
 *
 *  aoMap: new THREE.Texture( <Image> ),
 *  aoMapIntensity: <float>
 *
 *  emissive: <hex>,
 *  emissiveIntensity: <float>
 *  emissiveMap: new THREE.Texture( <Image> ),
 *
 *  bumpMap: new THREE.Texture( <Image> ),
 *  bumpScale: <float>,
 *
 *  normalMap: new THREE.Texture( <Image> ),
 *  normalScale: <Vector2>,
 *
 *  displacementMap: new THREE.Texture( <Image> ),
 *  displacementScale: <float>,
 *  displacementBias: <float>,
 *
 *  roughnessMap: new THREE.Texture( <Image> ),
 *
 *  metalnessMap: new THREE.Texture( <Image> ),
 *
 *  alphaMap: new THREE.Texture( <Image> ),
 *
 *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
 *  envMapIntensity: <float>
 *
 *  refractionRatio: <float>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>,
 *
 *  skinning: <bool>,
 *  morphTargets: <bool>,
 *  morphNormals: <bool>
 * }
 */

function MeshStandardMaterial( parameters ) {

	Material.call( this );

	this.defines = { 'STANDARD': '' };

	this.type = 'MeshStandardMaterial';

	this.color = new Color( 0xffffff ); // diffuse
	this.roughness = 0.5;
	this.metalness = 0.5;

	this.map = null;

	this.lightMap = null;
	this.lightMapIntensity = 1.0;

	this.aoMap = null;
	this.aoMapIntensity = 1.0;

	this.emissive = new Color( 0x000000 );
	this.emissiveIntensity = 1.0;
	this.emissiveMap = null;

	this.bumpMap = null;
	this.bumpScale = 1;

	this.normalMap = null;
	this.normalScale = new Vector2( 1, 1 );

	this.displacementMap = null;
	this.displacementScale = 1;
	this.displacementBias = 0;

	this.roughnessMap = null;

	this.metalnessMap = null;

	this.alphaMap = null;

	this.envMap = null;
	this.envMapIntensity = 1.0;

	this.refractionRatio = 0.98;

	this.wireframe = false;
	this.wireframeLinewidth = 1;
	this.wireframeLinecap = 'round';
	this.wireframeLinejoin = 'round';

	this.skinning = false;
	this.morphTargets = false;
	this.morphNormals = false;

	this.setValues( parameters );

}

MeshStandardMaterial.prototype = Object.create( Material.prototype );
MeshStandardMaterial.prototype.constructor = MeshStandardMaterial;

MeshStandardMaterial.prototype.isMeshStandardMaterial = true;

MeshStandardMaterial.prototype.copy = function ( source ) {

	Material.prototype.copy.call( this, source );

	this.defines = { 'STANDARD': '' };

	this.color.copy( source.color );
	this.roughness = source.roughness;
	this.metalness = source.metalness;

	this.map = source.map;

	this.lightMap = source.lightMap;
	this.lightMapIntensity = source.lightMapIntensity;

	this.aoMap = source.aoMap;
	this.aoMapIntensity = source.aoMapIntensity;

	this.emissive.copy( source.emissive );
	this.emissiveMap = source.emissiveMap;
	this.emissiveIntensity = source.emissiveIntensity;

	this.bumpMap = source.bumpMap;
	this.bumpScale = source.bumpScale;

	this.normalMap = source.normalMap;
	this.normalScale.copy( source.normalScale );

	this.displacementMap = source.displacementMap;
	this.displacementScale = source.displacementScale;
	this.displacementBias = source.displacementBias;

	this.roughnessMap = source.roughnessMap;

	this.metalnessMap = source.metalnessMap;

	this.alphaMap = source.alphaMap;

	this.envMap = source.envMap;
	this.envMapIntensity = source.envMapIntensity;

	this.refractionRatio = source.refractionRatio;

	this.wireframe = source.wireframe;
	this.wireframeLinewidth = source.wireframeLinewidth;
	this.wireframeLinecap = source.wireframeLinecap;
	this.wireframeLinejoin = source.wireframeLinejoin;

	this.skinning = source.skinning;
	this.morphTargets = source.morphTargets;
	this.morphNormals = source.morphNormals;

	return this;

};

/**
 * @author WestLangley / http://github.com/WestLangley
 *
 * parameters = {
 *  reflectivity: <float>
 * }
 */

function MeshPhysicalMaterial( parameters ) {

	MeshStandardMaterial.call( this );

	this.defines = { 'PHYSICAL': '' };

	this.type = 'MeshPhysicalMaterial';

	this.reflectivity = 0.5; // maps to F0 = 0.04

	this.clearCoat = 0.0;
	this.clearCoatRoughness = 0.0;

	this.setValues( parameters );

}

MeshPhysicalMaterial.prototype = Object.create( MeshStandardMaterial.prototype );
MeshPhysicalMaterial.prototype.constructor = MeshPhysicalMaterial;

MeshPhysicalMaterial.prototype.isMeshPhysicalMaterial = true;

MeshPhysicalMaterial.prototype.copy = function ( source ) {

	MeshStandardMaterial.prototype.copy.call( this, source );

	this.defines = { 'PHYSICAL': '' };

	this.reflectivity = source.reflectivity;

	this.clearCoat = source.clearCoat;
	this.clearCoatRoughness = source.clearCoatRoughness;

	return this;

};

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 *
 * parameters = {
 *  color: <hex>,
 *  specular: <hex>,
 *  shininess: <float>,
 *  opacity: <float>,
 *
 *  map: new THREE.Texture( <Image> ),
 *
 *  lightMap: new THREE.Texture( <Image> ),
 *  lightMapIntensity: <float>
 *
 *  aoMap: new THREE.Texture( <Image> ),
 *  aoMapIntensity: <float>
 *
 *  emissive: <hex>,
 *  emissiveIntensity: <float>
 *  emissiveMap: new THREE.Texture( <Image> ),
 *
 *  bumpMap: new THREE.Texture( <Image> ),
 *  bumpScale: <float>,
 *
 *  normalMap: new THREE.Texture( <Image> ),
 *  normalScale: <Vector2>,
 *
 *  displacementMap: new THREE.Texture( <Image> ),
 *  displacementScale: <float>,
 *  displacementBias: <float>,
 *
 *  specularMap: new THREE.Texture( <Image> ),
 *
 *  alphaMap: new THREE.Texture( <Image> ),
 *
 *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),
 *  combine: THREE.Multiply,
 *  reflectivity: <float>,
 *  refractionRatio: <float>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>,
 *
 *  skinning: <bool>,
 *  morphTargets: <bool>,
 *  morphNormals: <bool>
 * }
 */

function MeshPhongMaterial( parameters ) {

	Material.call( this );

	this.type = 'MeshPhongMaterial';

	this.color = new Color( 0xffffff ); // diffuse
	this.specular = new Color( 0x111111 );
	this.shininess = 30;

	this.map = null;

	this.lightMap = null;
	this.lightMapIntensity = 1.0;

	this.aoMap = null;
	this.aoMapIntensity = 1.0;

	this.emissive = new Color( 0x000000 );
	this.emissiveIntensity = 1.0;
	this.emissiveMap = null;

	this.bumpMap = null;
	this.bumpScale = 1;

	this.normalMap = null;
	this.normalScale = new Vector2( 1, 1 );

	this.displacementMap = null;
	this.displacementScale = 1;
	this.displacementBias = 0;

	this.specularMap = null;

	this.alphaMap = null;

	this.envMap = null;
	this.combine = MultiplyOperation;
	this.reflectivity = 1;
	this.refractionRatio = 0.98;

	this.wireframe = false;
	this.wireframeLinewidth = 1;
	this.wireframeLinecap = 'round';
	this.wireframeLinejoin = 'round';

	this.skinning = false;
	this.morphTargets = false;
	this.morphNormals = false;

	this.setValues( parameters );

}

MeshPhongMaterial.prototype = Object.create( Material.prototype );
MeshPhongMaterial.prototype.constructor = MeshPhongMaterial;

MeshPhongMaterial.prototype.isMeshPhongMaterial = true;

MeshPhongMaterial.prototype.copy = function ( source ) {

	Material.prototype.copy.call( this, source );

	this.color.copy( source.color );
	this.specular.copy( source.specular );
	this.shininess = source.shininess;

	this.map = source.map;

	this.lightMap = source.lightMap;
	this.lightMapIntensity = source.lightMapIntensity;

	this.aoMap = source.aoMap;
	this.aoMapIntensity = source.aoMapIntensity;

	this.emissive.copy( source.emissive );
	this.emissiveMap = source.emissiveMap;
	this.emissiveIntensity = source.emissiveIntensity;

	this.bumpMap = source.bumpMap;
	this.bumpScale = source.bumpScale;

	this.normalMap = source.normalMap;
	this.normalScale.copy( source.normalScale );

	this.displacementMap = source.displacementMap;
	this.displacementScale = source.displacementScale;
	this.displacementBias = source.displacementBias;

	this.specularMap = source.specularMap;

	this.alphaMap = source.alphaMap;

	this.envMap = source.envMap;
	this.combine = source.combine;
	this.reflectivity = source.reflectivity;
	this.refractionRatio = source.refractionRatio;

	this.wireframe = source.wireframe;
	this.wireframeLinewidth = source.wireframeLinewidth;
	this.wireframeLinecap = source.wireframeLinecap;
	this.wireframeLinejoin = source.wireframeLinejoin;

	this.skinning = source.skinning;
	this.morphTargets = source.morphTargets;
	this.morphNormals = source.morphNormals;

	return this;

};

/**
 * @author takahirox / http://github.com/takahirox
 *
 * parameters = {
 *  gradientMap: new THREE.Texture( <Image> )
 * }
 */

function MeshToonMaterial( parameters ) {

	MeshPhongMaterial.call( this );

	this.defines = { 'TOON': '' };

	this.type = 'MeshToonMaterial';

	this.gradientMap = null;

	this.setValues( parameters );

}

MeshToonMaterial.prototype = Object.create( MeshPhongMaterial.prototype );
MeshToonMaterial.prototype.constructor = MeshToonMaterial;

MeshToonMaterial.prototype.isMeshToonMaterial = true;

MeshToonMaterial.prototype.copy = function ( source ) {

	MeshPhongMaterial.prototype.copy.call( this, source );

	this.gradientMap = source.gradientMap;

	return this;

};

/**
 * @author mrdoob / http://mrdoob.com/
 * @author WestLangley / http://github.com/WestLangley
 *
 * parameters = {
 *  opacity: <float>,
 *
 *  bumpMap: new THREE.Texture( <Image> ),
 *  bumpScale: <float>,
 *
 *  normalMap: new THREE.Texture( <Image> ),
 *  normalScale: <Vector2>,
 *
 *  displacementMap: new THREE.Texture( <Image> ),
 *  displacementScale: <float>,
 *  displacementBias: <float>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>
 *
 *  skinning: <bool>,
 *  morphTargets: <bool>,
 *  morphNormals: <bool>
 * }
 */

function MeshNormalMaterial( parameters ) {

	Material.call( this );

	this.type = 'MeshNormalMaterial';

	this.bumpMap = null;
	this.bumpScale = 1;

	this.normalMap = null;
	this.normalScale = new Vector2( 1, 1 );

	this.displacementMap = null;
	this.displacementScale = 1;
	this.displacementBias = 0;

	this.wireframe = false;
	this.wireframeLinewidth = 1;

	this.fog = false;
	this.lights = false;

	this.skinning = false;
	this.morphTargets = false;
	this.morphNormals = false;

	this.setValues( parameters );

}

MeshNormalMaterial.prototype = Object.create( Material.prototype );
MeshNormalMaterial.prototype.constructor = MeshNormalMaterial;

MeshNormalMaterial.prototype.isMeshNormalMaterial = true;

MeshNormalMaterial.prototype.copy = function ( source ) {

	Material.prototype.copy.call( this, source );

	this.bumpMap = source.bumpMap;
	this.bumpScale = source.bumpScale;

	this.normalMap = source.normalMap;
	this.normalScale.copy( source.normalScale );

	this.displacementMap = source.displacementMap;
	this.displacementScale = source.displacementScale;
	this.displacementBias = source.displacementBias;

	this.wireframe = source.wireframe;
	this.wireframeLinewidth = source.wireframeLinewidth;

	this.skinning = source.skinning;
	this.morphTargets = source.morphTargets;
	this.morphNormals = source.morphNormals;

	return this;

};

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 *
 * parameters = {
 *  color: <hex>,
 *  opacity: <float>,
 *
 *  map: new THREE.Texture( <Image> ),
 *
 *  lightMap: new THREE.Texture( <Image> ),
 *  lightMapIntensity: <float>
 *
 *  aoMap: new THREE.Texture( <Image> ),
 *  aoMapIntensity: <float>
 *
 *  emissive: <hex>,
 *  emissiveIntensity: <float>
 *  emissiveMap: new THREE.Texture( <Image> ),
 *
 *  specularMap: new THREE.Texture( <Image> ),
 *
 *  alphaMap: new THREE.Texture( <Image> ),
 *
 *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),
 *  combine: THREE.Multiply,
 *  reflectivity: <float>,
 *  refractionRatio: <float>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>,
 *
 *  skinning: <bool>,
 *  morphTargets: <bool>,
 *  morphNormals: <bool>
 * }
 */

function MeshLambertMaterial( parameters ) {

	Material.call( this );

	this.type = 'MeshLambertMaterial';

	this.color = new Color( 0xffffff ); // diffuse

	this.map = null;

	this.lightMap = null;
	this.lightMapIntensity = 1.0;

	this.aoMap = null;
	this.aoMapIntensity = 1.0;

	this.emissive = new Color( 0x000000 );
	this.emissiveIntensity = 1.0;
	this.emissiveMap = null;

	this.specularMap = null;

	this.alphaMap = null;

	this.envMap = null;
	this.combine = MultiplyOperation;
	this.reflectivity = 1;
	this.refractionRatio = 0.98;

	this.wireframe = false;
	this.wireframeLinewidth = 1;
	this.wireframeLinecap = 'round';
	this.wireframeLinejoin = 'round';

	this.skinning = false;
	this.morphTargets = false;
	this.morphNormals = false;

	this.setValues( parameters );

}

MeshLambertMaterial.prototype = Object.create( Material.prototype );
MeshLambertMaterial.prototype.constructor = MeshLambertMaterial;

MeshLambertMaterial.prototype.isMeshLambertMaterial = true;

MeshLambertMaterial.prototype.copy = function ( source ) {

	Material.prototype.copy.call( this, source );

	this.color.copy( source.color );

	this.map = source.map;

	this.lightMap = source.lightMap;
	this.lightMapIntensity = source.lightMapIntensity;

	this.aoMap = source.aoMap;
	this.aoMapIntensity = source.aoMapIntensity;

	this.emissive.copy( source.emissive );
	this.emissiveMap = source.emissiveMap;
	this.emissiveIntensity = source.emissiveIntensity;

	this.specularMap = source.specularMap;

	this.alphaMap = source.alphaMap;

	this.envMap = source.envMap;
	this.combine = source.combine;
	this.reflectivity = source.reflectivity;
	this.refractionRatio = source.refractionRatio;

	this.wireframe = source.wireframe;
	this.wireframeLinewidth = source.wireframeLinewidth;
	this.wireframeLinecap = source.wireframeLinecap;
	this.wireframeLinejoin = source.wireframeLinejoin;

	this.skinning = source.skinning;
	this.morphTargets = source.morphTargets;
	this.morphNormals = source.morphNormals;

	return this;

};

/**
 * @author alteredq / http://alteredqualia.com/
 *
 * parameters = {
 *  color: <hex>,
 *  opacity: <float>,
 *
 *  linewidth: <float>,
 *
 *  scale: <float>,
 *  dashSize: <float>,
 *  gapSize: <float>
 * }
 */

function LineDashedMaterial( parameters ) {

	LineBasicMaterial.call( this );

	this.type = 'LineDashedMaterial';

	this.scale = 1;
	this.dashSize = 3;
	this.gapSize = 1;

	this.setValues( parameters );

}

LineDashedMaterial.prototype = Object.create( LineBasicMaterial.prototype );
LineDashedMaterial.prototype.constructor = LineDashedMaterial;

LineDashedMaterial.prototype.isLineDashedMaterial = true;

LineDashedMaterial.prototype.copy = function ( source ) {

	LineBasicMaterial.prototype.copy.call( this, source );

	this.scale = source.scale;
	this.dashSize = source.dashSize;
	this.gapSize = source.gapSize;

	return this;

};



var Materials = Object.freeze({
	ShadowMaterial: ShadowMaterial,
	SpriteMaterial: SpriteMaterial,
	RawShaderMaterial: RawShaderMaterial,
	ShaderMaterial: ShaderMaterial,
	PointsMaterial: PointsMaterial,
	MeshPhysicalMaterial: MeshPhysicalMaterial,
	MeshStandardMaterial: MeshStandardMaterial,
	MeshPhongMaterial: MeshPhongMaterial,
	MeshToonMaterial: MeshToonMaterial,
	MeshNormalMaterial: MeshNormalMaterial,
	MeshLambertMaterial: MeshLambertMaterial,
	MeshDepthMaterial: MeshDepthMaterial,
	MeshDistanceMaterial: MeshDistanceMaterial,
	MeshBasicMaterial: MeshBasicMaterial,
	LineDashedMaterial: LineDashedMaterial,
	LineBasicMaterial: LineBasicMaterial,
	Material: Material
});

/**
 * @author mrdoob / http://mrdoob.com/
 */

var Cache = {

	enabled: false,

	files: {},

	add: function ( key, file ) {

		if ( this.enabled === false ) return;

		// console.log( 'THREE.Cache', 'Adding key:', key );

		this.files[ key ] = file;

	},

	get: function ( key ) {

		if ( this.enabled === false ) return;

		// console.log( 'THREE.Cache', 'Checking key:', key );

		return this.files[ key ];

	},

	remove: function ( key ) {

		delete this.files[ key ];

	},

	clear: function () {

		this.files = {};

	}

};

/**
 * @author mrdoob / http://mrdoob.com/
 */

function LoadingManager( onLoad, onProgress, onError ) {

	var scope = this;

	var isLoading = false;
	var itemsLoaded = 0;
	var itemsTotal = 0;
	var urlModifier = undefined;

	this.onStart = undefined;
	this.onLoad = onLoad;
	this.onProgress = onProgress;
	this.onError = onError;

	this.itemStart = function ( url ) {

		itemsTotal ++;

		if ( isLoading === false ) {

			if ( scope.onStart !== undefined ) {

				scope.onStart( url, itemsLoaded, itemsTotal );

			}

		}

		isLoading = true;

	};

	this.itemEnd = function ( url ) {

		itemsLoaded ++;

		if ( scope.onProgress !== undefined ) {

			scope.onProgress( url, itemsLoaded, itemsTotal );

		}

		if ( itemsLoaded === itemsTotal ) {

			isLoading = false;

			if ( scope.onLoad !== undefined ) {

				scope.onLoad();

			}

		}

	};

	this.itemError = function ( url ) {

		if ( scope.onError !== undefined ) {

			scope.onError( url );

		}

	};

	this.resolveURL = function ( url ) {

		if ( urlModifier ) {

			return urlModifier( url );

		}

		return url;

	};

	this.setURLModifier = function ( transform ) {

		urlModifier = transform;

	};

}

var DefaultLoadingManager = new LoadingManager();

/**
 * @author mrdoob / http://mrdoob.com/
 */

var loading = {};

function FileLoader( manager ) {

	this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

}

Object.assign( FileLoader.prototype, {

	load: function ( url, onLoad, onProgress, onError ) {

		if ( url === undefined ) url = '';

		if ( this.path !== undefined ) url = this.path + url;

		url = this.manager.resolveURL( url );

		var scope = this;

		var cached = Cache.get( url );

		if ( cached !== undefined ) {

			scope.manager.itemStart( url );

			setTimeout( function () {

				if ( onLoad ) onLoad( cached );

				scope.manager.itemEnd( url );

			}, 0 );

			return cached;

		}

		// Check if request is duplicate

		if ( loading[ url ] !== undefined ) {

			loading[ url ].push( {

				onLoad: onLoad,
				onProgress: onProgress,
				onError: onError

			} );

			return;

		}

		// Check for data: URI
		var dataUriRegex = /^data:(.*?)(;base64)?,(.*)$/;
		var dataUriRegexResult = url.match( dataUriRegex );

		// Safari can not handle Data URIs through XMLHttpRequest so process manually
		if ( dataUriRegexResult ) {

			var mimeType = dataUriRegexResult[ 1 ];
			var isBase64 = !! dataUriRegexResult[ 2 ];
			var data = dataUriRegexResult[ 3 ];

			data = window.decodeURIComponent( data );

			if ( isBase64 ) data = window.atob( data );

			try {

				var response;
				var responseType = ( this.responseType || '' ).toLowerCase();

				switch ( responseType ) {

					case 'arraybuffer':
					case 'blob':

						var view = new Uint8Array( data.length );

						for ( var i = 0; i < data.length; i ++ ) {

							view[ i ] = data.charCodeAt( i );

						}

						if ( responseType === 'blob' ) {

							response = new Blob( [ view.buffer ], { type: mimeType } );

						} else {

							response = view.buffer;

						}

						break;

					case 'document':

						var parser = new DOMParser();
						response = parser.parseFromString( data, mimeType );

						break;

					case 'json':

						response = JSON.parse( data );

						break;

					default: // 'text' or other

						response = data;

						break;

				}

				// Wait for next browser tick like standard XMLHttpRequest event dispatching does
				window.setTimeout( function () {

					if ( onLoad ) onLoad( response );

					scope.manager.itemEnd( url );

				}, 0 );

			} catch ( error ) {

				// Wait for next browser tick like standard XMLHttpRequest event dispatching does
				window.setTimeout( function () {

					if ( onError ) onError( error );

					scope.manager.itemEnd( url );
					scope.manager.itemError( url );

				}, 0 );

			}

		} else {

			// Initialise array for duplicate requests

			loading[ url ] = [];

			loading[ url ].push( {

				onLoad: onLoad,
				onProgress: onProgress,
				onError: onError

			} );

			var request = new XMLHttpRequest();

			request.open( 'GET', url, true );

			request.addEventListener( 'load', function ( event ) {

				var response = event.target.response;

				Cache.add( url, response );

				var callbacks = loading[ url ];

				delete loading[ url ];

				if ( this.status === 200 ) {

					for ( var i = 0, il = callbacks.length; i < il; i ++ ) {

						var callback = callbacks[ i ];
						if ( callback.onLoad ) callback.onLoad( response );

					}

					scope.manager.itemEnd( url );

				} else if ( this.status === 0 ) {

					// Some browsers return HTTP Status 0 when using non-http protocol
					// e.g. 'file://' or 'data://'. Handle as success.

					console.warn( 'THREE.FileLoader: HTTP Status 0 received.' );

					for ( var i = 0, il = callbacks.length; i < il; i ++ ) {

						var callback = callbacks[ i ];
						if ( callback.onLoad ) callback.onLoad( response );

					}

					scope.manager.itemEnd( url );

				} else {

					for ( var i = 0, il = callbacks.length; i < il; i ++ ) {

						var callback = callbacks[ i ];
						if ( callback.onError ) callback.onError( event );

					}

					scope.manager.itemEnd( url );
					scope.manager.itemError( url );

				}

			}, false );

			request.addEventListener( 'progress', function ( event ) {

				var callbacks = loading[ url ];

				for ( var i = 0, il = callbacks.length; i < il; i ++ ) {

					var callback = callbacks[ i ];
					if ( callback.onProgress ) callback.onProgress( event );

				}

			}, false );

			request.addEventListener( 'error', function ( event ) {

				var callbacks = loading[ url ];

				delete loading[ url ];

				for ( var i = 0, il = callbacks.length; i < il; i ++ ) {

					var callback = callbacks[ i ];
					if ( callback.onError ) callback.onError( event );

				}

				scope.manager.itemEnd( url );
				scope.manager.itemError( url );

			}, false );

			if ( this.responseType !== undefined ) request.responseType = this.responseType;
			if ( this.withCredentials !== undefined ) request.withCredentials = this.withCredentials;

			if ( request.overrideMimeType ) request.overrideMimeType( this.mimeType !== undefined ? this.mimeType : 'text/plain' );

			for ( var header in this.requestHeader ) {

				request.setRequestHeader( header, this.requestHeader[ header ] );

			}

			request.send( null );

		}

		scope.manager.itemStart( url );

		return request;

	},

	setPath: function ( value ) {

		this.path = value;
		return this;

	},

	setResponseType: function ( value ) {

		this.responseType = value;
		return this;

	},

	setWithCredentials: function ( value ) {

		this.withCredentials = value;
		return this;

	},

	setMimeType: function ( value ) {

		this.mimeType = value;
		return this;

	},

	setRequestHeader: function ( value ) {

		this.requestHeader = value;
		return this;

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 *
 * Abstract Base class to block based textures loader (dds, pvr, ...)
 */

function CompressedTextureLoader( manager ) {

	this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

	// override in sub classes
	this._parser = null;

}

Object.assign( CompressedTextureLoader.prototype, {

	load: function ( url, onLoad, onProgress, onError ) {

		var scope = this;

		var images = [];

		var texture = new CompressedTexture();
		texture.image = images;

		var loader = new FileLoader( this.manager );
		loader.setPath( this.path );
		loader.setResponseType( 'arraybuffer' );

		function loadTexture( i ) {

			loader.load( url[ i ], function ( buffer ) {

				var texDatas = scope._parser( buffer, true );

				images[ i ] = {
					width: texDatas.width,
					height: texDatas.height,
					format: texDatas.format,
					mipmaps: texDatas.mipmaps
				};

				loaded += 1;

				if ( loaded === 6 ) {

					if ( texDatas.mipmapCount === 1 )
						texture.minFilter = LinearFilter;

					texture.format = texDatas.format;
					texture.needsUpdate = true;

					if ( onLoad ) onLoad( texture );

				}

			}, onProgress, onError );

		}

		if ( Array.isArray( url ) ) {

			var loaded = 0;

			for ( var i = 0, il = url.length; i < il; ++ i ) {

				loadTexture( i );

			}

		} else {

			// compressed cubemap texture stored in a single DDS file

			loader.load( url, function ( buffer ) {

				var texDatas = scope._parser( buffer, true );

				if ( texDatas.isCubemap ) {

					var faces = texDatas.mipmaps.length / texDatas.mipmapCount;

					for ( var f = 0; f < faces; f ++ ) {

						images[ f ] = { mipmaps: [] };

						for ( var i = 0; i < texDatas.mipmapCount; i ++ ) {

							images[ f ].mipmaps.push( texDatas.mipmaps[ f * texDatas.mipmapCount + i ] );
							images[ f ].format = texDatas.format;
							images[ f ].width = texDatas.width;
							images[ f ].height = texDatas.height;

						}

					}

				} else {

					texture.image.width = texDatas.width;
					texture.image.height = texDatas.height;
					texture.mipmaps = texDatas.mipmaps;

				}

				if ( texDatas.mipmapCount === 1 ) {

					texture.minFilter = LinearFilter;

				}

				texture.format = texDatas.format;
				texture.needsUpdate = true;

				if ( onLoad ) onLoad( texture );

			}, onProgress, onError );

		}

		return texture;

	},

	setPath: function ( value ) {

		this.path = value;
		return this;

	}

} );

/**
 * @author Nikos M. / https://github.com/foo123/
 *
 * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)
 */

function DataTextureLoader( manager ) {

	this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

	// override in sub classes
	this._parser = null;

}

Object.assign( DataTextureLoader.prototype, {

	load: function ( url, onLoad, onProgress, onError ) {

		var scope = this;

		var texture = new DataTexture();

		var loader = new FileLoader( this.manager );
		loader.setResponseType( 'arraybuffer' );

		loader.load( url, function ( buffer ) {

			var texData = scope._parser( buffer );

			if ( ! texData ) return;

			if ( undefined !== texData.image ) {

				texture.image = texData.image;

			} else if ( undefined !== texData.data ) {

				texture.image.width = texData.width;
				texture.image.height = texData.height;
				texture.image.data = texData.data;

			}

			texture.wrapS = undefined !== texData.wrapS ? texData.wrapS : ClampToEdgeWrapping;
			texture.wrapT = undefined !== texData.wrapT ? texData.wrapT : ClampToEdgeWrapping;

			texture.magFilter = undefined !== texData.magFilter ? texData.magFilter : LinearFilter;
			texture.minFilter = undefined !== texData.minFilter ? texData.minFilter : LinearMipMapLinearFilter;

			texture.anisotropy = undefined !== texData.anisotropy ? texData.anisotropy : 1;

			if ( undefined !== texData.format ) {

				texture.format = texData.format;

			}
			if ( undefined !== texData.type ) {

				texture.type = texData.type;

			}

			if ( undefined !== texData.mipmaps ) {

				texture.mipmaps = texData.mipmaps;

			}

			if ( 1 === texData.mipmapCount ) {

				texture.minFilter = LinearFilter;

			}

			texture.needsUpdate = true;

			if ( onLoad ) onLoad( texture, texData );

		}, onProgress, onError );


		return texture;

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 */

function ImageLoader( manager ) {

	this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

}

Object.assign( ImageLoader.prototype, {

	crossOrigin: 'Anonymous',

	load: function ( url, onLoad, onProgress, onError ) {

		if ( url === undefined ) url = '';

		if ( this.path !== undefined ) url = this.path + url;

		url = this.manager.resolveURL( url );

		var scope = this;

		var cached = Cache.get( url );

		if ( cached !== undefined ) {

			scope.manager.itemStart( url );

			setTimeout( function () {

				if ( onLoad ) onLoad( cached );

				scope.manager.itemEnd( url );

			}, 0 );

			return cached;

		}

		var image = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'img' );

		image.addEventListener( 'load', function () {

			Cache.add( url, this );

			if ( onLoad ) onLoad( this );

			scope.manager.itemEnd( url );

		}, false );

		/*
		image.addEventListener( 'progress', function ( event ) {

			if ( onProgress ) onProgress( event );

		}, false );
		*/

		image.addEventListener( 'error', function ( event ) {

			if ( onError ) onError( event );

			scope.manager.itemEnd( url );
			scope.manager.itemError( url );

		}, false );

		if ( url.substr( 0, 5 ) !== 'data:' ) {

			if ( this.crossOrigin !== undefined ) image.crossOrigin = this.crossOrigin;

		}

		scope.manager.itemStart( url );

		image.src = url;

		return image;

	},

	setCrossOrigin: function ( value ) {

		this.crossOrigin = value;
		return this;

	},

	setPath: function ( value ) {

		this.path = value;
		return this;

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 */

function CubeTextureLoader( manager ) {

	this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

}

Object.assign( CubeTextureLoader.prototype, {

	crossOrigin: 'Anonymous',

	load: function ( urls, onLoad, onProgress, onError ) {

		var texture = new CubeTexture();

		var loader = new ImageLoader( this.manager );
		loader.setCrossOrigin( this.crossOrigin );
		loader.setPath( this.path );

		var loaded = 0;

		function loadTexture( i ) {

			loader.load( urls[ i ], function ( image ) {

				texture.images[ i ] = image;

				loaded ++;

				if ( loaded === 6 ) {

					texture.needsUpdate = true;

					if ( onLoad ) onLoad( texture );

				}

			}, undefined, onError );

		}

		for ( var i = 0; i < urls.length; ++ i ) {

			loadTexture( i );

		}

		return texture;

	},

	setCrossOrigin: function ( value ) {

		this.crossOrigin = value;
		return this;

	},

	setPath: function ( value ) {

		this.path = value;
		return this;

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 */

function TextureLoader( manager ) {

	this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

}

Object.assign( TextureLoader.prototype, {

	crossOrigin: 'Anonymous',

	load: function ( url, onLoad, onProgress, onError ) {

		var loader = new ImageLoader( this.manager );
		loader.setCrossOrigin( this.crossOrigin );
		loader.setPath( this.path );

		var texture = new Texture();
		texture.image = loader.load( url, function () {

			// JPEGs can't have an alpha channel, so memory can be saved by storing them as RGB.
			var isJPEG = url.search( /\.(jpg|jpeg)$/ ) > 0 || url.search( /^data\:image\/jpeg/ ) === 0;

			texture.format = isJPEG ? RGBFormat : RGBAFormat;
			texture.needsUpdate = true;

			if ( onLoad !== undefined ) {

				onLoad( texture );

			}

		}, onProgress, onError );

		return texture;

	},

	setCrossOrigin: function ( value ) {

		this.crossOrigin = value;
		return this;

	},

	setPath: function ( value ) {

		this.path = value;
		return this;

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 */

function Light( color, intensity ) {

	Object3D.call( this );

	this.type = 'Light';

	this.color = new Color( color );
	this.intensity = intensity !== undefined ? intensity : 1;

	this.receiveShadow = undefined;

}

Light.prototype = Object.assign( Object.create( Object3D.prototype ), {

	constructor: Light,

	isLight: true,

	copy: function ( source ) {

		Object3D.prototype.copy.call( this, source );

		this.color.copy( source.color );
		this.intensity = source.intensity;

		return this;

	},

	toJSON: function ( meta ) {

		var data = Object3D.prototype.toJSON.call( this, meta );

		data.object.color = this.color.getHex();
		data.object.intensity = this.intensity;

		if ( this.groundColor !== undefined ) data.object.groundColor = this.groundColor.getHex();

		if ( this.distance !== undefined ) data.object.distance = this.distance;
		if ( this.angle !== undefined ) data.object.angle = this.angle;
		if ( this.decay !== undefined ) data.object.decay = this.decay;
		if ( this.penumbra !== undefined ) data.object.penumbra = this.penumbra;

		if ( this.shadow !== undefined ) data.object.shadow = this.shadow.toJSON();

		return data;

	}

} );

/**
 * @author alteredq / http://alteredqualia.com/
 */

function HemisphereLight( skyColor, groundColor, intensity ) {

	Light.call( this, skyColor, intensity );

	this.type = 'HemisphereLight';

	this.castShadow = undefined;

	this.position.copy( Object3D.DefaultUp );
	this.updateMatrix();

	this.groundColor = new Color( groundColor );

}

HemisphereLight.prototype = Object.assign( Object.create( Light.prototype ), {

	constructor: HemisphereLight,

	isHemisphereLight: true,

	copy: function ( source ) {

		Light.prototype.copy.call( this, source );

		this.groundColor.copy( source.groundColor );

		return this;

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 */

function LightShadow( camera ) {

	this.camera = camera;

	this.bias = 0;
	this.radius = 1;

	this.mapSize = new Vector2( 512, 512 );

	this.map = null;
	this.matrix = new Matrix4();

}

Object.assign( LightShadow.prototype, {

	copy: function ( source ) {

		this.camera = source.camera.clone();

		this.bias = source.bias;
		this.radius = source.radius;

		this.mapSize.copy( source.mapSize );

		return this;

	},

	clone: function () {

		return new this.constructor().copy( this );

	},

	toJSON: function () {

		var object = {};

		if ( this.bias !== 0 ) object.bias = this.bias;
		if ( this.radius !== 1 ) object.radius = this.radius;
		if ( this.mapSize.x !== 512 || this.mapSize.y !== 512 ) object.mapSize = this.mapSize.toArray();

		object.camera = this.camera.toJSON( false ).object;
		delete object.camera.matrix;

		return object;

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 */

function SpotLightShadow() {

	LightShadow.call( this, new PerspectiveCamera( 50, 1, 0.5, 500 ) );

}

SpotLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {

	constructor: SpotLightShadow,

	isSpotLightShadow: true,

	update: function ( light ) {

		var camera = this.camera;

		var fov = _Math.RAD2DEG * 2 * light.angle;
		var aspect = this.mapSize.width / this.mapSize.height;
		var far = light.distance || camera.far;

		if ( fov !== camera.fov || aspect !== camera.aspect || far !== camera.far ) {

			camera.fov = fov;
			camera.aspect = aspect;
			camera.far = far;
			camera.updateProjectionMatrix();

		}

	}

} );

/**
 * @author alteredq / http://alteredqualia.com/
 */

function SpotLight( color, intensity, distance, angle, penumbra, decay ) {

	Light.call( this, color, intensity );

	this.type = 'SpotLight';

	this.position.copy( Object3D.DefaultUp );
	this.updateMatrix();

	this.target = new Object3D();

	Object.defineProperty( this, 'power', {
		get: function () {

			// intensity = power per solid angle.
			// ref: equation (17) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf
			return this.intensity * Math.PI;

		},
		set: function ( power ) {

			// intensity = power per solid angle.
			// ref: equation (17) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf
			this.intensity = power / Math.PI;

		}
	} );

	this.distance = ( distance !== undefined ) ? distance : 0;
	this.angle = ( angle !== undefined ) ? angle : Math.PI / 3;
	this.penumbra = ( penumbra !== undefined ) ? penumbra : 0;
	this.decay = ( decay !== undefined ) ? decay : 1;	// for physically correct lights, should be 2.

	this.shadow = new SpotLightShadow();

}

SpotLight.prototype = Object.assign( Object.create( Light.prototype ), {

	constructor: SpotLight,

	isSpotLight: true,

	copy: function ( source ) {

		Light.prototype.copy.call( this, source );

		this.distance = source.distance;
		this.angle = source.angle;
		this.penumbra = source.penumbra;
		this.decay = source.decay;

		this.target = source.target.clone();

		this.shadow = source.shadow.clone();

		return this;

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 */


function PointLight( color, intensity, distance, decay ) {

	Light.call( this, color, intensity );

	this.type = 'PointLight';

	Object.defineProperty( this, 'power', {
		get: function () {

			// intensity = power per solid angle.
			// ref: equation (15) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf
			return this.intensity * 4 * Math.PI;

		},
		set: function ( power ) {

			// intensity = power per solid angle.
			// ref: equation (15) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf
			this.intensity = power / ( 4 * Math.PI );

		}
	} );

	this.distance = ( distance !== undefined ) ? distance : 0;
	this.decay = ( decay !== undefined ) ? decay : 1;	// for physically correct lights, should be 2.

	this.shadow = new LightShadow( new PerspectiveCamera( 90, 1, 0.5, 500 ) );

}

PointLight.prototype = Object.assign( Object.create( Light.prototype ), {

	constructor: PointLight,

	isPointLight: true,

	copy: function ( source ) {

		Light.prototype.copy.call( this, source );

		this.distance = source.distance;
		this.decay = source.decay;

		this.shadow = source.shadow.clone();

		return this;

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 */

function DirectionalLightShadow( ) {

	LightShadow.call( this, new OrthographicCamera( - 5, 5, 5, - 5, 0.5, 500 ) );

}

DirectionalLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {

	constructor: DirectionalLightShadow

} );

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 */

function DirectionalLight( color, intensity ) {

	Light.call( this, color, intensity );

	this.type = 'DirectionalLight';

	this.position.copy( Object3D.DefaultUp );
	this.updateMatrix();

	this.target = new Object3D();

	this.shadow = new DirectionalLightShadow();

}

DirectionalLight.prototype = Object.assign( Object.create( Light.prototype ), {

	constructor: DirectionalLight,

	isDirectionalLight: true,

	copy: function ( source ) {

		Light.prototype.copy.call( this, source );

		this.target = source.target.clone();

		this.shadow = source.shadow.clone();

		return this;

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 */

function AmbientLight( color, intensity ) {

	Light.call( this, color, intensity );

	this.type = 'AmbientLight';

	this.castShadow = undefined;

}

AmbientLight.prototype = Object.assign( Object.create( Light.prototype ), {

	constructor: AmbientLight,

	isAmbientLight: true

} );

/**
 * @author abelnation / http://github.com/abelnation
 */

function RectAreaLight( color, intensity, width, height ) {

	Light.call( this, color, intensity );

	this.type = 'RectAreaLight';

	this.position.set( 0, 1, 0 );
	this.updateMatrix();

	this.width = ( width !== undefined ) ? width : 10;
	this.height = ( height !== undefined ) ? height : 10;

	// TODO (abelnation): distance/decay

	// TODO (abelnation): update method for RectAreaLight to update transform to lookat target

	// TODO (abelnation): shadows

}

// TODO (abelnation): RectAreaLight update when light shape is changed
RectAreaLight.prototype = Object.assign( Object.create( Light.prototype ), {

	constructor: RectAreaLight,

	isRectAreaLight: true,

	copy: function ( source ) {

		Light.prototype.copy.call( this, source );

		this.width = source.width;
		this.height = source.height;

		return this;

	},

	toJSON: function ( meta ) {

		var data = Light.prototype.toJSON.call( this, meta );

		data.object.width = this.width;
		data.object.height = this.height;

		return data;

	}

} );

/**
 * @author tschw
 * @author Ben Houston / http://clara.io/
 * @author David Sarno / http://lighthaus.us/
 */

var AnimationUtils = {

	// same as Array.prototype.slice, but also works on typed arrays
	arraySlice: function ( array, from, to ) {

		if ( AnimationUtils.isTypedArray( array ) ) {

			// in ios9 array.subarray(from, undefined) will return empty array
			// but array.subarray(from) or array.subarray(from, len) is correct
			return new array.constructor( array.subarray( from, to !== undefined ? to : array.length ) );

		}

		return array.slice( from, to );

	},

	// converts an array to a specific type
	convertArray: function ( array, type, forceClone ) {

		if ( ! array || // let 'undefined' and 'null' pass
				! forceClone && array.constructor === type ) return array;

		if ( typeof type.BYTES_PER_ELEMENT === 'number' ) {

			return new type( array ); // create typed array

		}

		return Array.prototype.slice.call( array ); // create Array

	},

	isTypedArray: function ( object ) {

		return ArrayBuffer.isView( object ) &&
				! ( object instanceof DataView );

	},

	// returns an array by which times and values can be sorted
	getKeyframeOrder: function ( times ) {

		function compareTime( i, j ) {

			return times[ i ] - times[ j ];

		}

		var n = times.length;
		var result = new Array( n );
		for ( var i = 0; i !== n; ++ i ) result[ i ] = i;

		result.sort( compareTime );

		return result;

	},

	// uses the array previously returned by 'getKeyframeOrder' to sort data
	sortedArray: function ( values, stride, order ) {

		var nValues = values.length;
		var result = new values.constructor( nValues );

		for ( var i = 0, dstOffset = 0; dstOffset !== nValues; ++ i ) {

			var srcOffset = order[ i ] * stride;

			for ( var j = 0; j !== stride; ++ j ) {

				result[ dstOffset ++ ] = values[ srcOffset + j ];

			}

		}

		return result;

	},

	// function for parsing AOS keyframe formats
	flattenJSON: function ( jsonKeys, times, values, valuePropertyName ) {

		var i = 1, key = jsonKeys[ 0 ];

		while ( key !== undefined && key[ valuePropertyName ] === undefined ) {

			key = jsonKeys[ i ++ ];

		}

		if ( key === undefined ) return; // no data

		var value = key[ valuePropertyName ];
		if ( value === undefined ) return; // no data

		if ( Array.isArray( value ) ) {

			do {

				value = key[ valuePropertyName ];

				if ( value !== undefined ) {

					times.push( key.time );
					values.push.apply( values, value ); // push all elements

				}

				key = jsonKeys[ i ++ ];

			} while ( key !== undefined );

		} else if ( value.toArray !== undefined ) {

			// ...assume THREE.Math-ish

			do {

				value = key[ valuePropertyName ];

				if ( value !== undefined ) {

					times.push( key.time );
					value.toArray( values, values.length );

				}

				key = jsonKeys[ i ++ ];

			} while ( key !== undefined );

		} else {

			// otherwise push as-is

			do {

				value = key[ valuePropertyName ];

				if ( value !== undefined ) {

					times.push( key.time );
					values.push( value );

				}

				key = jsonKeys[ i ++ ];

			} while ( key !== undefined );

		}

	}

};

/**
 * Abstract base class of interpolants over parametric samples.
 *
 * The parameter domain is one dimensional, typically the time or a path
 * along a curve defined by the data.
 *
 * The sample values can have any dimensionality and derived classes may
 * apply special interpretations to the data.
 *
 * This class provides the interval seek in a Template Method, deferring
 * the actual interpolation to derived classes.
 *
 * Time complexity is O(1) for linear access crossing at most two points
 * and O(log N) for random access, where N is the number of positions.
 *
 * References:
 *
 * 		http://www.oodesign.com/template-method-pattern.html
 *
 * @author tschw
 */

function Interpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {

	this.parameterPositions = parameterPositions;
	this._cachedIndex = 0;

	this.resultBuffer = resultBuffer !== undefined ?
		resultBuffer : new sampleValues.constructor( sampleSize );
	this.sampleValues = sampleValues;
	this.valueSize = sampleSize;

}

Object.assign( Interpolant.prototype, {

	evaluate: function ( t ) {

		var pp = this.parameterPositions,
			i1 = this._cachedIndex,

			t1 = pp[ i1 ],
			t0 = pp[ i1 - 1 ];

		validate_interval: {

			seek: {

				var right;

				linear_scan: {

					//- See http://jsperf.com/comparison-to-undefined/3
					//- slower code:
					//-
					//- 				if ( t >= t1 || t1 === undefined ) {
					forward_scan: if ( ! ( t < t1 ) ) {

						for ( var giveUpAt = i1 + 2; ; ) {

							if ( t1 === undefined ) {

								if ( t < t0 ) break forward_scan;

								// after end

								i1 = pp.length;
								this._cachedIndex = i1;
								return this.afterEnd_( i1 - 1, t, t0 );

							}

							if ( i1 === giveUpAt ) break; // this loop

							t0 = t1;
							t1 = pp[ ++ i1 ];

							if ( t < t1 ) {

								// we have arrived at the sought interval
								break seek;

							}

						}

						// prepare binary search on the right side of the index
						right = pp.length;
						break linear_scan;

					}

					//- slower code:
					//-					if ( t < t0 || t0 === undefined ) {
					if ( ! ( t >= t0 ) ) {

						// looping?

						var t1global = pp[ 1 ];

						if ( t < t1global ) {

							i1 = 2; // + 1, using the scan for the details
							t0 = t1global;

						}

						// linear reverse scan

						for ( var giveUpAt = i1 - 2; ; ) {

							if ( t0 === undefined ) {

								// before start

								this._cachedIndex = 0;
								return this.beforeStart_( 0, t, t1 );

							}

							if ( i1 === giveUpAt ) break; // this loop

							t1 = t0;
							t0 = pp[ -- i1 - 1 ];

							if ( t >= t0 ) {

								// we have arrived at the sought interval
								break seek;

							}

						}

						// prepare binary search on the left side of the index
						right = i1;
						i1 = 0;
						break linear_scan;

					}

					// the interval is valid

					break validate_interval;

				} // linear scan

				// binary search

				while ( i1 < right ) {

					var mid = ( i1 + right ) >>> 1;

					if ( t < pp[ mid ] ) {

						right = mid;

					} else {

						i1 = mid + 1;

					}

				}

				t1 = pp[ i1 ];
				t0 = pp[ i1 - 1 ];

				// check boundary cases, again

				if ( t0 === undefined ) {

					this._cachedIndex = 0;
					return this.beforeStart_( 0, t, t1 );

				}

				if ( t1 === undefined ) {

					i1 = pp.length;
					this._cachedIndex = i1;
					return this.afterEnd_( i1 - 1, t0, t );

				}

			} // seek

			this._cachedIndex = i1;

			this.intervalChanged_( i1, t0, t1 );

		} // validate_interval

		return this.interpolate_( i1, t0, t, t1 );

	},

	settings: null, // optional, subclass-specific settings structure
	// Note: The indirection allows central control of many interpolants.

	// --- Protected interface

	DefaultSettings_: {},

	getSettings_: function () {

		return this.settings || this.DefaultSettings_;

	},

	copySampleValue_: function ( index ) {

		// copies a sample value to the result buffer

		var result = this.resultBuffer,
			values = this.sampleValues,
			stride = this.valueSize,
			offset = index * stride;

		for ( var i = 0; i !== stride; ++ i ) {

			result[ i ] = values[ offset + i ];

		}

		return result;

	},

	// Template methods for derived classes:

	interpolate_: function ( /* i1, t0, t, t1 */ ) {

		throw new Error( 'call to abstract method' );
		// implementations shall return this.resultBuffer

	},

	intervalChanged_: function ( /* i1, t0, t1 */ ) {

		// empty

	}

} );

//!\ DECLARE ALIAS AFTER assign prototype !
Object.assign( Interpolant.prototype, {

	//( 0, t, t0 ), returns this.resultBuffer
	beforeStart_: Interpolant.prototype.copySampleValue_,

	//( N-1, tN-1, t ), returns this.resultBuffer
	afterEnd_: Interpolant.prototype.copySampleValue_,

} );

/**
 * Fast and simple cubic spline interpolant.
 *
 * It was derived from a Hermitian construction setting the first derivative
 * at each sample position to the linear slope between neighboring positions
 * over their parameter interval.
 *
 * @author tschw
 */

function CubicInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {

	Interpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );

	this._weightPrev = - 0;
	this._offsetPrev = - 0;
	this._weightNext = - 0;
	this._offsetNext = - 0;

}

CubicInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {

	constructor: CubicInterpolant,

	DefaultSettings_: {

		endingStart: ZeroCurvatureEnding,
		endingEnd: ZeroCurvatureEnding

	},

	intervalChanged_: function ( i1, t0, t1 ) {

		var pp = this.parameterPositions,
			iPrev = i1 - 2,
			iNext = i1 + 1,

			tPrev = pp[ iPrev ],
			tNext = pp[ iNext ];

		if ( tPrev === undefined ) {

			switch ( this.getSettings_().endingStart ) {

				case ZeroSlopeEnding:

					// f'(t0) = 0
					iPrev = i1;
					tPrev = 2 * t0 - t1;

					break;

				case WrapAroundEnding:

					// use the other end of the curve
					iPrev = pp.length - 2;
					tPrev = t0 + pp[ iPrev ] - pp[ iPrev + 1 ];

					break;

				default: // ZeroCurvatureEnding

					// f''(t0) = 0 a.k.a. Natural Spline
					iPrev = i1;
					tPrev = t1;

			}

		}

		if ( tNext === undefined ) {

			switch ( this.getSettings_().endingEnd ) {

				case ZeroSlopeEnding:

					// f'(tN) = 0
					iNext = i1;
					tNext = 2 * t1 - t0;

					break;

				case WrapAroundEnding:

					// use the other end of the curve
					iNext = 1;
					tNext = t1 + pp[ 1 ] - pp[ 0 ];

					break;

				default: // ZeroCurvatureEnding

					// f''(tN) = 0, a.k.a. Natural Spline
					iNext = i1 - 1;
					tNext = t0;

			}

		}

		var halfDt = ( t1 - t0 ) * 0.5,
			stride = this.valueSize;

		this._weightPrev = halfDt / ( t0 - tPrev );
		this._weightNext = halfDt / ( tNext - t1 );
		this._offsetPrev = iPrev * stride;
		this._offsetNext = iNext * stride;

	},

	interpolate_: function ( i1, t0, t, t1 ) {

		var result = this.resultBuffer,
			values = this.sampleValues,
			stride = this.valueSize,

			o1 = i1 * stride,		o0 = o1 - stride,
			oP = this._offsetPrev, 	oN = this._offsetNext,
			wP = this._weightPrev,	wN = this._weightNext,

			p = ( t - t0 ) / ( t1 - t0 ),
			pp = p * p,
			ppp = pp * p;

		// evaluate polynomials

		var sP = - wP * ppp + 2 * wP * pp - wP * p;
		var s0 = ( 1 + wP ) * ppp + ( - 1.5 - 2 * wP ) * pp + ( - 0.5 + wP ) * p + 1;
		var s1 = ( - 1 - wN ) * ppp + ( 1.5 + wN ) * pp + 0.5 * p;
		var sN = wN * ppp - wN * pp;

		// combine data linearly

		for ( var i = 0; i !== stride; ++ i ) {

			result[ i ] =
					sP * values[ oP + i ] +
					s0 * values[ o0 + i ] +
					s1 * values[ o1 + i ] +
					sN * values[ oN + i ];

		}

		return result;

	}

} );

/**
 * @author tschw
 */

function LinearInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {

	Interpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );

}

LinearInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {

	constructor: LinearInterpolant,

	interpolate_: function ( i1, t0, t, t1 ) {

		var result = this.resultBuffer,
			values = this.sampleValues,
			stride = this.valueSize,

			offset1 = i1 * stride,
			offset0 = offset1 - stride,

			weight1 = ( t - t0 ) / ( t1 - t0 ),
			weight0 = 1 - weight1;

		for ( var i = 0; i !== stride; ++ i ) {

			result[ i ] =
					values[ offset0 + i ] * weight0 +
					values[ offset1 + i ] * weight1;

		}

		return result;

	}

} );

/**
 *
 * Interpolant that evaluates to the sample value at the position preceeding
 * the parameter.
 *
 * @author tschw
 */

function DiscreteInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {

	Interpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );

}

DiscreteInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {

	constructor: DiscreteInterpolant,

	interpolate_: function ( i1 /*, t0, t, t1 */ ) {

		return this.copySampleValue_( i1 - 1 );

	}

} );

var KeyframeTrackPrototype;

KeyframeTrackPrototype = {

	TimeBufferType: Float32Array,
	ValueBufferType: Float32Array,

	DefaultInterpolation: InterpolateLinear,

	InterpolantFactoryMethodDiscrete: function ( result ) {

		return new DiscreteInterpolant( this.times, this.values, this.getValueSize(), result );

	},

	InterpolantFactoryMethodLinear: function ( result ) {

		return new LinearInterpolant( this.times, this.values, this.getValueSize(), result );

	},

	InterpolantFactoryMethodSmooth: function ( result ) {

		return new CubicInterpolant( this.times, this.values, this.getValueSize(), result );

	},

	setInterpolation: function ( interpolation ) {

		var factoryMethod;

		switch ( interpolation ) {

			case InterpolateDiscrete:

				factoryMethod = this.InterpolantFactoryMethodDiscrete;

				break;

			case InterpolateLinear:

				factoryMethod = this.InterpolantFactoryMethodLinear;

				break;

			case InterpolateSmooth:

				factoryMethod = this.InterpolantFactoryMethodSmooth;

				break;

		}

		if ( factoryMethod === undefined ) {

			var message = "unsupported interpolation for " +
					this.ValueTypeName + " keyframe track named " + this.name;

			if ( this.createInterpolant === undefined ) {

				// fall back to default, unless the default itself is messed up
				if ( interpolation !== this.DefaultInterpolation ) {

					this.setInterpolation( this.DefaultInterpolation );

				} else {

					throw new Error( message ); // fatal, in this case

				}

			}

			console.warn( 'THREE.KeyframeTrackPrototype:', message );
			return;

		}

		this.createInterpolant = factoryMethod;

	},

	getInterpolation: function () {

		switch ( this.createInterpolant ) {

			case this.InterpolantFactoryMethodDiscrete:

				return InterpolateDiscrete;

			case this.InterpolantFactoryMethodLinear:

				return InterpolateLinear;

			case this.InterpolantFactoryMethodSmooth:

				return InterpolateSmooth;

		}

	},

	getValueSize: function () {

		return this.values.length / this.times.length;

	},

	// move all keyframes either forwards or backwards in time
	shift: function ( timeOffset ) {

		if ( timeOffset !== 0.0 ) {

			var times = this.times;

			for ( var i = 0, n = times.length; i !== n; ++ i ) {

				times[ i ] += timeOffset;

			}

		}

		return this;

	},

	// scale all keyframe times by a factor (useful for frame <-> seconds conversions)
	scale: function ( timeScale ) {

		if ( timeScale !== 1.0 ) {

			var times = this.times;

			for ( var i = 0, n = times.length; i !== n; ++ i ) {

				times[ i ] *= timeScale;

			}

		}

		return this;

	},

	// removes keyframes before and after animation without changing any values within the range [startTime, endTime].
	// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values
	trim: function ( startTime, endTime ) {

		var times = this.times,
			nKeys = times.length,
			from = 0,
			to = nKeys - 1;

		while ( from !== nKeys && times[ from ] < startTime ) ++ from;
		while ( to !== - 1 && times[ to ] > endTime ) -- to;

		++ to; // inclusive -> exclusive bound

		if ( from !== 0 || to !== nKeys ) {

			// empty tracks are forbidden, so keep at least one keyframe
			if ( from >= to ) to = Math.max( to, 1 ), from = to - 1;

			var stride = this.getValueSize();
			this.times = AnimationUtils.arraySlice( times, from, to );
			this.values = AnimationUtils.arraySlice( this.values, from * stride, to * stride );

		}

		return this;

	},

	// ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable
	validate: function () {

		var valid = true;

		var valueSize = this.getValueSize();
		if ( valueSize - Math.floor( valueSize ) !== 0 ) {

			console.error( 'THREE.KeyframeTrackPrototype: Invalid value size in track.', this );
			valid = false;

		}

		var times = this.times,
			values = this.values,

			nKeys = times.length;

		if ( nKeys === 0 ) {

			console.error( 'THREE.KeyframeTrackPrototype: Track is empty.', this );
			valid = false;

		}

		var prevTime = null;

		for ( var i = 0; i !== nKeys; i ++ ) {

			var currTime = times[ i ];

			if ( typeof currTime === 'number' && isNaN( currTime ) ) {

				console.error( 'THREE.KeyframeTrackPrototype: Time is not a valid number.', this, i, currTime );
				valid = false;
				break;

			}

			if ( prevTime !== null && prevTime > currTime ) {

				console.error( 'THREE.KeyframeTrackPrototype: Out of order keys.', this, i, currTime, prevTime );
				valid = false;
				break;

			}

			prevTime = currTime;

		}

		if ( values !== undefined ) {

			if ( AnimationUtils.isTypedArray( values ) ) {

				for ( var i = 0, n = values.length; i !== n; ++ i ) {

					var value = values[ i ];

					if ( isNaN( value ) ) {

						console.error( 'THREE.KeyframeTrackPrototype: Value is not a valid number.', this, i, value );
						valid = false;
						break;

					}

				}

			}

		}

		return valid;

	},

	// removes equivalent sequential keys as common in morph target sequences
	// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)
	optimize: function () {

		var times = this.times,
			values = this.values,
			stride = this.getValueSize(),

			smoothInterpolation = this.getInterpolation() === InterpolateSmooth,

			writeIndex = 1,
			lastIndex = times.length - 1;

		for ( var i = 1; i < lastIndex; ++ i ) {

			var keep = false;

			var time = times[ i ];
			var timeNext = times[ i + 1 ];

			// remove adjacent keyframes scheduled at the same time

			if ( time !== timeNext && ( i !== 1 || time !== time[ 0 ] ) ) {

				if ( ! smoothInterpolation ) {

					// remove unnecessary keyframes same as their neighbors

					var offset = i * stride,
						offsetP = offset - stride,
						offsetN = offset + stride;

					for ( var j = 0; j !== stride; ++ j ) {

						var value = values[ offset + j ];

						if ( value !== values[ offsetP + j ] ||
								value !== values[ offsetN + j ] ) {

							keep = true;
							break;

						}

					}

				} else keep = true;

			}

			// in-place compaction

			if ( keep ) {

				if ( i !== writeIndex ) {

					times[ writeIndex ] = times[ i ];

					var readOffset = i * stride,
						writeOffset = writeIndex * stride;

					for ( var j = 0; j !== stride; ++ j )

						values[ writeOffset + j ] = values[ readOffset + j ];

				}

				++ writeIndex;

			}

		}

		// flush last keyframe (compaction looks ahead)

		if ( lastIndex > 0 ) {

			times[ writeIndex ] = times[ lastIndex ];

			for ( var readOffset = lastIndex * stride, writeOffset = writeIndex * stride, j = 0; j !== stride; ++ j )

				values[ writeOffset + j ] = values[ readOffset + j ];

			++ writeIndex;

		}

		if ( writeIndex !== times.length ) {

			this.times = AnimationUtils.arraySlice( times, 0, writeIndex );
			this.values = AnimationUtils.arraySlice( values, 0, writeIndex * stride );

		}

		return this;

	}

};

function KeyframeTrackConstructor( name, times, values, interpolation ) {

	if ( name === undefined ) throw new Error( 'track name is undefined' );

	if ( times === undefined || times.length === 0 ) {

		throw new Error( 'no keyframes in track named ' + name );

	}

	this.name = name;

	this.times = AnimationUtils.convertArray( times, this.TimeBufferType );
	this.values = AnimationUtils.convertArray( values, this.ValueBufferType );

	this.setInterpolation( interpolation || this.DefaultInterpolation );

	this.validate();
	this.optimize();

}

/**
 *
 * A Track of vectored keyframe values.
 *
 *
 * @author Ben Houston / http://clara.io/
 * @author David Sarno / http://lighthaus.us/
 * @author tschw
 */

function VectorKeyframeTrack( name, times, values, interpolation ) {

	KeyframeTrackConstructor.call( this, name, times, values, interpolation );

}

VectorKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrackPrototype ), {

	constructor: VectorKeyframeTrack,

	ValueTypeName: 'vector'

	// ValueBufferType is inherited

	// DefaultInterpolation is inherited

} );

/**
 * Spherical linear unit quaternion interpolant.
 *
 * @author tschw
 */

function QuaternionLinearInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {

	Interpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );

}

QuaternionLinearInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {

	constructor: QuaternionLinearInterpolant,

	interpolate_: function ( i1, t0, t, t1 ) {

		var result = this.resultBuffer,
			values = this.sampleValues,
			stride = this.valueSize,

			offset = i1 * stride,

			alpha = ( t - t0 ) / ( t1 - t0 );

		for ( var end = offset + stride; offset !== end; offset += 4 ) {

			Quaternion.slerpFlat( result, 0, values, offset - stride, values, offset, alpha );

		}

		return result;

	}

} );

/**
 *
 * A Track of quaternion keyframe values.
 *
 * @author Ben Houston / http://clara.io/
 * @author David Sarno / http://lighthaus.us/
 * @author tschw
 */

function QuaternionKeyframeTrack( name, times, values, interpolation ) {

	KeyframeTrackConstructor.call( this, name, times, values, interpolation );

}

QuaternionKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrackPrototype ), {

	constructor: QuaternionKeyframeTrack,

	ValueTypeName: 'quaternion',

	// ValueBufferType is inherited

	DefaultInterpolation: InterpolateLinear,

	InterpolantFactoryMethodLinear: function ( result ) {

		return new QuaternionLinearInterpolant( this.times, this.values, this.getValueSize(), result );

	},

	InterpolantFactoryMethodSmooth: undefined // not yet implemented

} );

/**
 *
 * A Track of numeric keyframe values.
 *
 * @author Ben Houston / http://clara.io/
 * @author David Sarno / http://lighthaus.us/
 * @author tschw
 */

function NumberKeyframeTrack( name, times, values, interpolation ) {

	KeyframeTrackConstructor.call( this, name, times, values, interpolation );

}

NumberKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrackPrototype ), {

	constructor: NumberKeyframeTrack,

	ValueTypeName: 'number'

	// ValueBufferType is inherited

	// DefaultInterpolation is inherited

} );

/**
 *
 * A Track that interpolates Strings
 *
 *
 * @author Ben Houston / http://clara.io/
 * @author David Sarno / http://lighthaus.us/
 * @author tschw
 */

function StringKeyframeTrack( name, times, values, interpolation ) {

	KeyframeTrackConstructor.call( this, name, times, values, interpolation );

}

StringKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrackPrototype ), {

	constructor: StringKeyframeTrack,

	ValueTypeName: 'string',
	ValueBufferType: Array,

	DefaultInterpolation: InterpolateDiscrete,

	InterpolantFactoryMethodLinear: undefined,

	InterpolantFactoryMethodSmooth: undefined

} );

/**
 *
 * A Track of Boolean keyframe values.
 *
 *
 * @author Ben Houston / http://clara.io/
 * @author David Sarno / http://lighthaus.us/
 * @author tschw
 */

function BooleanKeyframeTrack( name, times, values ) {

	KeyframeTrackConstructor.call( this, name, times, values );

}

BooleanKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrackPrototype ), {

	constructor: BooleanKeyframeTrack,

	ValueTypeName: 'bool',
	ValueBufferType: Array,

	DefaultInterpolation: InterpolateDiscrete,

	InterpolantFactoryMethodLinear: undefined,
	InterpolantFactoryMethodSmooth: undefined

	// Note: Actually this track could have a optimized / compressed
	// representation of a single value and a custom interpolant that
	// computes "firstValue ^ isOdd( index )".

} );

/**
 *
 * A Track of keyframe values that represent color.
 *
 *
 * @author Ben Houston / http://clara.io/
 * @author David Sarno / http://lighthaus.us/
 * @author tschw
 */

function ColorKeyframeTrack( name, times, values, interpolation ) {

	KeyframeTrackConstructor.call( this, name, times, values, interpolation );

}

ColorKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrackPrototype ), {

	constructor: ColorKeyframeTrack,

	ValueTypeName: 'color'

	// ValueBufferType is inherited

	// DefaultInterpolation is inherited


	// Note: Very basic implementation and nothing special yet.
	// However, this is the place for color space parameterization.

} );

/**
 *
 * A timed sequence of keyframes for a specific property.
 *
 *
 * @author Ben Houston / http://clara.io/
 * @author David Sarno / http://lighthaus.us/
 * @author tschw
 */

function KeyframeTrack( name, times, values, interpolation ) {

	KeyframeTrackConstructor.apply( this, name, times, values, interpolation );

}

KeyframeTrack.prototype = KeyframeTrackPrototype;
KeyframeTrackPrototype.constructor = KeyframeTrack;

// Static methods:

Object.assign( KeyframeTrack, {

	// Serialization (in static context, because of constructor invocation
	// and automatic invocation of .toJSON):

	parse: function ( json ) {

		if ( json.type === undefined ) {

			throw new Error( 'track type undefined, can not parse' );

		}

		var trackType = KeyframeTrack._getTrackTypeForValueTypeName( json.type );

		if ( json.times === undefined ) {

			var times = [], values = [];

			AnimationUtils.flattenJSON( json.keys, times, values, 'value' );

			json.times = times;
			json.values = values;

		}

		// derived classes can define a static parse method
		if ( trackType.parse !== undefined ) {

			return trackType.parse( json );

		} else {

			// by default, we assume a constructor compatible with the base
			return new trackType( json.name, json.times, json.values, json.interpolation );

		}

	},

	toJSON: function ( track ) {

		var trackType = track.constructor;

		var json;

		// derived classes can define a static toJSON method
		if ( trackType.toJSON !== undefined ) {

			json = trackType.toJSON( track );

		} else {

			// by default, we assume the data can be serialized as-is
			json = {

				'name': track.name,
				'times': AnimationUtils.convertArray( track.times, Array ),
				'values': AnimationUtils.convertArray( track.values, Array )

			};

			var interpolation = track.getInterpolation();

			if ( interpolation !== track.DefaultInterpolation ) {

				json.interpolation = interpolation;

			}

		}

		json.type = track.ValueTypeName; // mandatory

		return json;

	},

	_getTrackTypeForValueTypeName: function ( typeName ) {

		switch ( typeName.toLowerCase() ) {

			case 'scalar':
			case 'double':
			case 'float':
			case 'number':
			case 'integer':

				return NumberKeyframeTrack;

			case 'vector':
			case 'vector2':
			case 'vector3':
			case 'vector4':

				return VectorKeyframeTrack;

			case 'color':

				return ColorKeyframeTrack;

			case 'quaternion':

				return QuaternionKeyframeTrack;

			case 'bool':
			case 'boolean':

				return BooleanKeyframeTrack;

			case 'string':

				return StringKeyframeTrack;

		}

		throw new Error( 'Unsupported typeName: ' + typeName );

	}

} );

/**
 *
 * Reusable set of Tracks that represent an animation.
 *
 * @author Ben Houston / http://clara.io/
 * @author David Sarno / http://lighthaus.us/
 */

function AnimationClip( name, duration, tracks ) {

	this.name = name;
	this.tracks = tracks;
	this.duration = ( duration !== undefined ) ? duration : - 1;

	this.uuid = _Math.generateUUID();

	// this means it should figure out its duration by scanning the tracks
	if ( this.duration < 0 ) {

		this.resetDuration();

	}

	this.optimize();

}

Object.assign( AnimationClip, {

	parse: function ( json ) {

		var tracks = [],
			jsonTracks = json.tracks,
			frameTime = 1.0 / ( json.fps || 1.0 );

		for ( var i = 0, n = jsonTracks.length; i !== n; ++ i ) {

			tracks.push( KeyframeTrack.parse( jsonTracks[ i ] ).scale( frameTime ) );

		}

		return new AnimationClip( json.name, json.duration, tracks );

	},

	toJSON: function ( clip ) {

		var tracks = [],
			clipTracks = clip.tracks;

		var json = {

			'name': clip.name,
			'duration': clip.duration,
			'tracks': tracks

		};

		for ( var i = 0, n = clipTracks.length; i !== n; ++ i ) {

			tracks.push( KeyframeTrack.toJSON( clipTracks[ i ] ) );

		}

		return json;

	},

	CreateFromMorphTargetSequence: function ( name, morphTargetSequence, fps, noLoop ) {

		var numMorphTargets = morphTargetSequence.length;
		var tracks = [];

		for ( var i = 0; i < numMorphTargets; i ++ ) {

			var times = [];
			var values = [];

			times.push(
				( i + numMorphTargets - 1 ) % numMorphTargets,
				i,
				( i + 1 ) % numMorphTargets );

			values.push( 0, 1, 0 );

			var order = AnimationUtils.getKeyframeOrder( times );
			times = AnimationUtils.sortedArray( times, 1, order );
			values = AnimationUtils.sortedArray( values, 1, order );

			// if there is a key at the first frame, duplicate it as the
			// last frame as well for perfect loop.
			if ( ! noLoop && times[ 0 ] === 0 ) {

				times.push( numMorphTargets );
				values.push( values[ 0 ] );

			}

			tracks.push(
				new NumberKeyframeTrack(
					'.morphTargetInfluences[' + morphTargetSequence[ i ].name + ']',
					times, values
				).scale( 1.0 / fps ) );

		}

		return new AnimationClip( name, - 1, tracks );

	},

	findByName: function ( objectOrClipArray, name ) {

		var clipArray = objectOrClipArray;

		if ( ! Array.isArray( objectOrClipArray ) ) {

			var o = objectOrClipArray;
			clipArray = o.geometry && o.geometry.animations || o.animations;

		}

		for ( var i = 0; i < clipArray.length; i ++ ) {

			if ( clipArray[ i ].name === name ) {

				return clipArray[ i ];

			}

		}

		return null;

	},

	CreateClipsFromMorphTargetSequences: function ( morphTargets, fps, noLoop ) {

		var animationToMorphTargets = {};

		// tested with https://regex101.com/ on trick sequences
		// such flamingo_flyA_003, flamingo_run1_003, crdeath0059
		var pattern = /^([\w-]*?)([\d]+)$/;

		// sort morph target names into animation groups based
		// patterns like Walk_001, Walk_002, Run_001, Run_002
		for ( var i = 0, il = morphTargets.length; i < il; i ++ ) {

			var morphTarget = morphTargets[ i ];
			var parts = morphTarget.name.match( pattern );

			if ( parts && parts.length > 1 ) {

				var name = parts[ 1 ];

				var animationMorphTargets = animationToMorphTargets[ name ];
				if ( ! animationMorphTargets ) {

					animationToMorphTargets[ name ] = animationMorphTargets = [];

				}

				animationMorphTargets.push( morphTarget );

			}

		}

		var clips = [];

		for ( var name in animationToMorphTargets ) {

			clips.push( AnimationClip.CreateFromMorphTargetSequence( name, animationToMorphTargets[ name ], fps, noLoop ) );

		}

		return clips;

	},

	// parse the animation.hierarchy format
	parseAnimation: function ( animation, bones ) {

		if ( ! animation ) {

			console.error( 'THREE.AnimationClip: No animation in JSONLoader data.' );
			return null;

		}

		var addNonemptyTrack = function ( trackType, trackName, animationKeys, propertyName, destTracks ) {

			// only return track if there are actually keys.
			if ( animationKeys.length !== 0 ) {

				var times = [];
				var values = [];

				AnimationUtils.flattenJSON( animationKeys, times, values, propertyName );

				// empty keys are filtered out, so check again
				if ( times.length !== 0 ) {

					destTracks.push( new trackType( trackName, times, values ) );

				}

			}

		};

		var tracks = [];

		var clipName = animation.name || 'default';
		// automatic length determination in AnimationClip.
		var duration = animation.length || - 1;
		var fps = animation.fps || 30;

		var hierarchyTracks = animation.hierarchy || [];

		for ( var h = 0; h < hierarchyTracks.length; h ++ ) {

			var animationKeys = hierarchyTracks[ h ].keys;

			// skip empty tracks
			if ( ! animationKeys || animationKeys.length === 0 ) continue;

			// process morph targets
			if ( animationKeys[ 0 ].morphTargets ) {

				// figure out all morph targets used in this track
				var morphTargetNames = {};

				for ( var k = 0; k < animationKeys.length; k ++ ) {

					if ( animationKeys[ k ].morphTargets ) {

						for ( var m = 0; m < animationKeys[ k ].morphTargets.length; m ++ ) {

							morphTargetNames[ animationKeys[ k ].morphTargets[ m ] ] = - 1;

						}

					}

				}

				// create a track for each morph target with all zero
				// morphTargetInfluences except for the keys in which
				// the morphTarget is named.
				for ( var morphTargetName in morphTargetNames ) {

					var times = [];
					var values = [];

					for ( var m = 0; m !== animationKeys[ k ].morphTargets.length; ++ m ) {

						var animationKey = animationKeys[ k ];

						times.push( animationKey.time );
						values.push( ( animationKey.morphTarget === morphTargetName ) ? 1 : 0 );

					}

					tracks.push( new NumberKeyframeTrack( '.morphTargetInfluence[' + morphTargetName + ']', times, values ) );

				}

				duration = morphTargetNames.length * ( fps || 1.0 );

			} else {

				// ...assume skeletal animation

				var boneName = '.bones[' + bones[ h ].name + ']';

				addNonemptyTrack(
					VectorKeyframeTrack, boneName + '.position',
					animationKeys, 'pos', tracks );

				addNonemptyTrack(
					QuaternionKeyframeTrack, boneName + '.quaternion',
					animationKeys, 'rot', tracks );

				addNonemptyTrack(
					VectorKeyframeTrack, boneName + '.scale',
					animationKeys, 'scl', tracks );

			}

		}

		if ( tracks.length === 0 ) {

			return null;

		}

		var clip = new AnimationClip( clipName, duration, tracks );

		return clip;

	}

} );

Object.assign( AnimationClip.prototype, {

	resetDuration: function () {

		var tracks = this.tracks, duration = 0;

		for ( var i = 0, n = tracks.length; i !== n; ++ i ) {

			var track = this.tracks[ i ];

			duration = Math.max( duration, track.times[ track.times.length - 1 ] );

		}

		this.duration = duration;

	},

	trim: function () {

		for ( var i = 0; i < this.tracks.length; i ++ ) {

			this.tracks[ i ].trim( 0, this.duration );

		}

		return this;

	},

	optimize: function () {

		for ( var i = 0; i < this.tracks.length; i ++ ) {

			this.tracks[ i ].optimize();

		}

		return this;

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 */

function MaterialLoader( manager ) {

	this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;
	this.textures = {};

}

Object.assign( MaterialLoader.prototype, {

	load: function ( url, onLoad, onProgress, onError ) {

		var scope = this;

		var loader = new FileLoader( scope.manager );
		loader.load( url, function ( text ) {

			onLoad( scope.parse( JSON.parse( text ) ) );

		}, onProgress, onError );

	},

	setTextures: function ( value ) {

		this.textures = value;

	},

	parse: function ( json ) {

		var textures = this.textures;

		function getTexture( name ) {

			if ( textures[ name ] === undefined ) {

				console.warn( 'THREE.MaterialLoader: Undefined texture', name );

			}

			return textures[ name ];

		}

		var material = new Materials[ json.type ]();

		if ( json.uuid !== undefined ) material.uuid = json.uuid;
		if ( json.name !== undefined ) material.name = json.name;
		if ( json.color !== undefined ) material.color.setHex( json.color );
		if ( json.roughness !== undefined ) material.roughness = json.roughness;
		if ( json.metalness !== undefined ) material.metalness = json.metalness;
		if ( json.emissive !== undefined ) material.emissive.setHex( json.emissive );
		if ( json.specular !== undefined ) material.specular.setHex( json.specular );
		if ( json.shininess !== undefined ) material.shininess = json.shininess;
		if ( json.clearCoat !== undefined ) material.clearCoat = json.clearCoat;
		if ( json.clearCoatRoughness !== undefined ) material.clearCoatRoughness = json.clearCoatRoughness;
		if ( json.uniforms !== undefined ) material.uniforms = json.uniforms;
		if ( json.vertexShader !== undefined ) material.vertexShader = json.vertexShader;
		if ( json.fragmentShader !== undefined ) material.fragmentShader = json.fragmentShader;
		if ( json.vertexColors !== undefined ) material.vertexColors = json.vertexColors;
		if ( json.fog !== undefined ) material.fog = json.fog;
		if ( json.flatShading !== undefined ) material.flatShading = json.flatShading;
		if ( json.blending !== undefined ) material.blending = json.blending;
		if ( json.side !== undefined ) material.side = json.side;
		if ( json.opacity !== undefined ) material.opacity = json.opacity;
		if ( json.transparent !== undefined ) material.transparent = json.transparent;
		if ( json.alphaTest !== undefined ) material.alphaTest = json.alphaTest;
		if ( json.depthTest !== undefined ) material.depthTest = json.depthTest;
		if ( json.depthWrite !== undefined ) material.depthWrite = json.depthWrite;
		if ( json.colorWrite !== undefined ) material.colorWrite = json.colorWrite;
		if ( json.wireframe !== undefined ) material.wireframe = json.wireframe;
		if ( json.wireframeLinewidth !== undefined ) material.wireframeLinewidth = json.wireframeLinewidth;
		if ( json.wireframeLinecap !== undefined ) material.wireframeLinecap = json.wireframeLinecap;
		if ( json.wireframeLinejoin !== undefined ) material.wireframeLinejoin = json.wireframeLinejoin;

		if ( json.rotation !== undefined ) material.rotation = json.rotation;

		if ( json.linewidth !== 1 ) material.linewidth = json.linewidth;
		if ( json.dashSize !== undefined ) material.dashSize = json.dashSize;
		if ( json.gapSize !== undefined ) material.gapSize = json.gapSize;
		if ( json.scale !== undefined ) material.scale = json.scale;

		if ( json.skinning !== undefined ) material.skinning = json.skinning;
		if ( json.morphTargets !== undefined ) material.morphTargets = json.morphTargets;
		if ( json.dithering !== undefined ) material.dithering = json.dithering;

		if ( json.visible !== undefined ) material.visible = json.visible;
		if ( json.userData !== undefined ) material.userData = json.userData;

		// Deprecated

		if ( json.shading !== undefined ) material.flatShading = json.shading === 1; // THREE.FlatShading

		// for PointsMaterial

		if ( json.size !== undefined ) material.size = json.size;
		if ( json.sizeAttenuation !== undefined ) material.sizeAttenuation = json.sizeAttenuation;

		// maps

		if ( json.map !== undefined ) material.map = getTexture( json.map );

		if ( json.alphaMap !== undefined ) {

			material.alphaMap = getTexture( json.alphaMap );
			material.transparent = true;

		}

		if ( json.bumpMap !== undefined ) material.bumpMap = getTexture( json.bumpMap );
		if ( json.bumpScale !== undefined ) material.bumpScale = json.bumpScale;

		if ( json.normalMap !== undefined ) material.normalMap = getTexture( json.normalMap );
		if ( json.normalScale !== undefined ) {

			var normalScale = json.normalScale;

			if ( Array.isArray( normalScale ) === false ) {

				// Blender exporter used to export a scalar. See #7459

				normalScale = [ normalScale, normalScale ];

			}

			material.normalScale = new Vector2().fromArray( normalScale );

		}

		if ( json.displacementMap !== undefined ) material.displacementMap = getTexture( json.displacementMap );
		if ( json.displacementScale !== undefined ) material.displacementScale = json.displacementScale;
		if ( json.displacementBias !== undefined ) material.displacementBias = json.displacementBias;

		if ( json.roughnessMap !== undefined ) material.roughnessMap = getTexture( json.roughnessMap );
		if ( json.metalnessMap !== undefined ) material.metalnessMap = getTexture( json.metalnessMap );

		if ( json.emissiveMap !== undefined ) material.emissiveMap = getTexture( json.emissiveMap );
		if ( json.emissiveIntensity !== undefined ) material.emissiveIntensity = json.emissiveIntensity;

		if ( json.specularMap !== undefined ) material.specularMap = getTexture( json.specularMap );

		if ( json.envMap !== undefined ) material.envMap = getTexture( json.envMap );

		if ( json.reflectivity !== undefined ) material.reflectivity = json.reflectivity;

		if ( json.lightMap !== undefined ) material.lightMap = getTexture( json.lightMap );
		if ( json.lightMapIntensity !== undefined ) material.lightMapIntensity = json.lightMapIntensity;

		if ( json.aoMap !== undefined ) material.aoMap = getTexture( json.aoMap );
		if ( json.aoMapIntensity !== undefined ) material.aoMapIntensity = json.aoMapIntensity;

		if ( json.gradientMap !== undefined ) material.gradientMap = getTexture( json.gradientMap );

		return material;

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 */

function BufferGeometryLoader( manager ) {

	this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

}

Object.assign( BufferGeometryLoader.prototype, {

	load: function ( url, onLoad, onProgress, onError ) {

		var scope = this;

		var loader = new FileLoader( scope.manager );
		loader.load( url, function ( text ) {

			onLoad( scope.parse( JSON.parse( text ) ) );

		}, onProgress, onError );

	},

	parse: function ( json ) {

		var geometry = new BufferGeometry();

		var index = json.data.index;

		if ( index !== undefined ) {

			var typedArray = new TYPED_ARRAYS[ index.type ]( index.array );
			geometry.setIndex( new BufferAttribute( typedArray, 1 ) );

		}

		var attributes = json.data.attributes;

		for ( var key in attributes ) {

			var attribute = attributes[ key ];
			var typedArray = new TYPED_ARRAYS[ attribute.type ]( attribute.array );

			geometry.addAttribute( key, new BufferAttribute( typedArray, attribute.itemSize, attribute.normalized ) );

		}

		var groups = json.data.groups || json.data.drawcalls || json.data.offsets;

		if ( groups !== undefined ) {

			for ( var i = 0, n = groups.length; i !== n; ++ i ) {

				var group = groups[ i ];

				geometry.addGroup( group.start, group.count, group.materialIndex );

			}

		}

		var boundingSphere = json.data.boundingSphere;

		if ( boundingSphere !== undefined ) {

			var center = new Vector3();

			if ( boundingSphere.center !== undefined ) {

				center.fromArray( boundingSphere.center );

			}

			geometry.boundingSphere = new Sphere( center, boundingSphere.radius );

		}

		return geometry;

	}

} );

var TYPED_ARRAYS = {
	Int8Array: Int8Array,
	Uint8Array: Uint8Array,
	// Workaround for IE11 pre KB2929437. See #11440
	Uint8ClampedArray: typeof Uint8ClampedArray !== 'undefined' ? Uint8ClampedArray : Uint8Array,
	Int16Array: Int16Array,
	Uint16Array: Uint16Array,
	Int32Array: Int32Array,
	Uint32Array: Uint32Array,
	Float32Array: Float32Array,
	Float64Array: Float64Array
};

/**
 * @author alteredq / http://alteredqualia.com/
 */

function Loader() {

	this.onLoadStart = function () {};
	this.onLoadProgress = function () {};
	this.onLoadComplete = function () {};

}

Loader.Handlers = {

	handlers: [],

	add: function ( regex, loader ) {

		this.handlers.push( regex, loader );

	},

	get: function ( file ) {

		var handlers = this.handlers;

		for ( var i = 0, l = handlers.length; i < l; i += 2 ) {

			var regex = handlers[ i ];
			var loader = handlers[ i + 1 ];

			if ( regex.test( file ) ) {

				return loader;

			}

		}

		return null;

	}

};

Object.assign( Loader.prototype, {

	crossOrigin: undefined,

	extractUrlBase: function ( url ) {

		var parts = url.split( '/' );

		if ( parts.length === 1 ) return './';

		parts.pop();

		return parts.join( '/' ) + '/';

	},

	initMaterials: function ( materials, texturePath, crossOrigin ) {

		var array = [];

		for ( var i = 0; i < materials.length; ++ i ) {

			array[ i ] = this.createMaterial( materials[ i ], texturePath, crossOrigin );

		}

		return array;

	},

	createMaterial: ( function () {

		var BlendingMode = {
			NoBlending: NoBlending,
			NormalBlending: NormalBlending,
			AdditiveBlending: AdditiveBlending,
			SubtractiveBlending: SubtractiveBlending,
			MultiplyBlending: MultiplyBlending,
			CustomBlending: CustomBlending
		};

		var color = new Color();
		var textureLoader = new TextureLoader();
		var materialLoader = new MaterialLoader();

		return function createMaterial( m, texturePath, crossOrigin ) {

			// convert from old material format

			var textures = {};

			function loadTexture( path, repeat, offset, wrap, anisotropy ) {

				var fullPath = texturePath + path;
				var loader = Loader.Handlers.get( fullPath );

				var texture;

				if ( loader !== null ) {

					texture = loader.load( fullPath );

				} else {

					textureLoader.setCrossOrigin( crossOrigin );
					texture = textureLoader.load( fullPath );

				}

				if ( repeat !== undefined ) {

					texture.repeat.fromArray( repeat );

					if ( repeat[ 0 ] !== 1 ) texture.wrapS = RepeatWrapping;
					if ( repeat[ 1 ] !== 1 ) texture.wrapT = RepeatWrapping;

				}

				if ( offset !== undefined ) {

					texture.offset.fromArray( offset );

				}

				if ( wrap !== undefined ) {

					if ( wrap[ 0 ] === 'repeat' ) texture.wrapS = RepeatWrapping;
					if ( wrap[ 0 ] === 'mirror' ) texture.wrapS = MirroredRepeatWrapping;

					if ( wrap[ 1 ] === 'repeat' ) texture.wrapT = RepeatWrapping;
					if ( wrap[ 1 ] === 'mirror' ) texture.wrapT = MirroredRepeatWrapping;

				}

				if ( anisotropy !== undefined ) {

					texture.anisotropy = anisotropy;

				}

				var uuid = _Math.generateUUID();

				textures[ uuid ] = texture;

				return uuid;

			}

			//

			var json = {
				uuid: _Math.generateUUID(),
				type: 'MeshLambertMaterial'
			};

			for ( var name in m ) {

				var value = m[ name ];

				switch ( name ) {

					case 'DbgColor':
					case 'DbgIndex':
					case 'opticalDensity':
					case 'illumination':
						break;
					case 'DbgName':
						json.name = value;
						break;
					case 'blending':
						json.blending = BlendingMode[ value ];
						break;
					case 'colorAmbient':
					case 'mapAmbient':
						console.warn( 'THREE.Loader.createMaterial:', name, 'is no longer supported.' );
						break;
					case 'colorDiffuse':
						json.color = color.fromArray( value ).getHex();
						break;
					case 'colorSpecular':
						json.specular = color.fromArray( value ).getHex();
						break;
					case 'colorEmissive':
						json.emissive = color.fromArray( value ).getHex();
						break;
					case 'specularCoef':
						json.shininess = value;
						break;
					case 'shading':
						if ( value.toLowerCase() === 'basic' ) json.type = 'MeshBasicMaterial';
						if ( value.toLowerCase() === 'phong' ) json.type = 'MeshPhongMaterial';
						if ( value.toLowerCase() === 'standard' ) json.type = 'MeshStandardMaterial';
						break;
					case 'mapDiffuse':
						json.map = loadTexture( value, m.mapDiffuseRepeat, m.mapDiffuseOffset, m.mapDiffuseWrap, m.mapDiffuseAnisotropy );
						break;
					case 'mapDiffuseRepeat':
					case 'mapDiffuseOffset':
					case 'mapDiffuseWrap':
					case 'mapDiffuseAnisotropy':
						break;
					case 'mapEmissive':
						json.emissiveMap = loadTexture( value, m.mapEmissiveRepeat, m.mapEmissiveOffset, m.mapEmissiveWrap, m.mapEmissiveAnisotropy );
						break;
					case 'mapEmissiveRepeat':
					case 'mapEmissiveOffset':
					case 'mapEmissiveWrap':
					case 'mapEmissiveAnisotropy':
						break;
					case 'mapLight':
						json.lightMap = loadTexture( value, m.mapLightRepeat, m.mapLightOffset, m.mapLightWrap, m.mapLightAnisotropy );
						break;
					case 'mapLightRepeat':
					case 'mapLightOffset':
					case 'mapLightWrap':
					case 'mapLightAnisotropy':
						break;
					case 'mapAO':
						json.aoMap = loadTexture( value, m.mapAORepeat, m.mapAOOffset, m.mapAOWrap, m.mapAOAnisotropy );
						break;
					case 'mapAORepeat':
					case 'mapAOOffset':
					case 'mapAOWrap':
					case 'mapAOAnisotropy':
						break;
					case 'mapBump':
						json.bumpMap = loadTexture( value, m.mapBumpRepeat, m.mapBumpOffset, m.mapBumpWrap, m.mapBumpAnisotropy );
						break;
					case 'mapBumpScale':
						json.bumpScale = value;
						break;
					case 'mapBumpRepeat':
					case 'mapBumpOffset':
					case 'mapBumpWrap':
					case 'mapBumpAnisotropy':
						break;
					case 'mapNormal':
						json.normalMap = loadTexture( value, m.mapNormalRepeat, m.mapNormalOffset, m.mapNormalWrap, m.mapNormalAnisotropy );
						break;
					case 'mapNormalFactor':
						json.normalScale = [ value, value ];
						break;
					case 'mapNormalRepeat':
					case 'mapNormalOffset':
					case 'mapNormalWrap':
					case 'mapNormalAnisotropy':
						break;
					case 'mapSpecular':
						json.specularMap = loadTexture( value, m.mapSpecularRepeat, m.mapSpecularOffset, m.mapSpecularWrap, m.mapSpecularAnisotropy );
						break;
					case 'mapSpecularRepeat':
					case 'mapSpecularOffset':
					case 'mapSpecularWrap':
					case 'mapSpecularAnisotropy':
						break;
					case 'mapMetalness':
						json.metalnessMap = loadTexture( value, m.mapMetalnessRepeat, m.mapMetalnessOffset, m.mapMetalnessWrap, m.mapMetalnessAnisotropy );
						break;
					case 'mapMetalnessRepeat':
					case 'mapMetalnessOffset':
					case 'mapMetalnessWrap':
					case 'mapMetalnessAnisotropy':
						break;
					case 'mapRoughness':
						json.roughnessMap = loadTexture( value, m.mapRoughnessRepeat, m.mapRoughnessOffset, m.mapRoughnessWrap, m.mapRoughnessAnisotropy );
						break;
					case 'mapRoughnessRepeat':
					case 'mapRoughnessOffset':
					case 'mapRoughnessWrap':
					case 'mapRoughnessAnisotropy':
						break;
					case 'mapAlpha':
						json.alphaMap = loadTexture( value, m.mapAlphaRepeat, m.mapAlphaOffset, m.mapAlphaWrap, m.mapAlphaAnisotropy );
						break;
					case 'mapAlphaRepeat':
					case 'mapAlphaOffset':
					case 'mapAlphaWrap':
					case 'mapAlphaAnisotropy':
						break;
					case 'flipSided':
						json.side = BackSide;
						break;
					case 'doubleSided':
						json.side = DoubleSide;
						break;
					case 'transparency':
						console.warn( 'THREE.Loader.createMaterial: transparency has been renamed to opacity' );
						json.opacity = value;
						break;
					case 'depthTest':
					case 'depthWrite':
					case 'colorWrite':
					case 'opacity':
					case 'reflectivity':
					case 'transparent':
					case 'visible':
					case 'wireframe':
						json[ name ] = value;
						break;
					case 'vertexColors':
						if ( value === true ) json.vertexColors = VertexColors;
						if ( value === 'face' ) json.vertexColors = FaceColors;
						break;
					default:
						console.error( 'THREE.Loader.createMaterial: Unsupported', name, value );
						break;

				}

			}

			if ( json.type === 'MeshBasicMaterial' ) delete json.emissive;
			if ( json.type !== 'MeshPhongMaterial' ) delete json.specular;

			if ( json.opacity < 1 ) json.transparent = true;

			materialLoader.setTextures( textures );

			return materialLoader.parse( json );

		};

	} )()

} );

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 */

function JSONLoader( manager ) {

	if ( typeof manager === 'boolean' ) {

		console.warn( 'THREE.JSONLoader: showStatus parameter has been removed from constructor.' );
		manager = undefined;

	}

	this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

	this.withCredentials = false;

}

Object.assign( JSONLoader.prototype, {

	load: function ( url, onLoad, onProgress, onError ) {

		var scope = this;

		var texturePath = this.texturePath && ( typeof this.texturePath === "string" ) ? this.texturePath : Loader.prototype.extractUrlBase( url );

		var loader = new FileLoader( this.manager );
		loader.setWithCredentials( this.withCredentials );
		loader.load( url, function ( text ) {

			var json = JSON.parse( text );
			var metadata = json.metadata;

			if ( metadata !== undefined ) {

				var type = metadata.type;

				if ( type !== undefined ) {

					if ( type.toLowerCase() === 'object' ) {

						console.error( 'THREE.JSONLoader: ' + url + ' should be loaded with THREE.ObjectLoader instead.' );
						return;

					}

					if ( type.toLowerCase() === 'scene' ) {

						console.error( 'THREE.JSONLoader: ' + url + ' should be loaded with THREE.SceneLoader instead.' );
						return;

					}

				}

			}

			var object = scope.parse( json, texturePath );
			onLoad( object.geometry, object.materials );

		}, onProgress, onError );

	},

	setTexturePath: function ( value ) {

		this.texturePath = value;

	},

	parse: ( function () {

		function parseModel( json, geometry ) {

			function isBitSet( value, position ) {

				return value & ( 1 << position );

			}

			var i, j, fi,

				offset, zLength,

				colorIndex, normalIndex, uvIndex, materialIndex,

				type,
				isQuad,
				hasMaterial,
				hasFaceVertexUv,
				hasFaceNormal, hasFaceVertexNormal,
				hasFaceColor, hasFaceVertexColor,

				vertex, face, faceA, faceB, hex, normal,

				uvLayer, uv, u, v,

				faces = json.faces,
				vertices = json.vertices,
				normals = json.normals,
				colors = json.colors,

				scale = json.scale,

				nUvLayers = 0;


			if ( json.uvs !== undefined ) {

				// disregard empty arrays

				for ( i = 0; i < json.uvs.length; i ++ ) {

					if ( json.uvs[ i ].length ) nUvLayers ++;

				}

				for ( i = 0; i < nUvLayers; i ++ ) {

					geometry.faceVertexUvs[ i ] = [];

				}

			}

			offset = 0;
			zLength = vertices.length;

			while ( offset < zLength ) {

				vertex = new Vector3();

				vertex.x = vertices[ offset ++ ] * scale;
				vertex.y = vertices[ offset ++ ] * scale;
				vertex.z = vertices[ offset ++ ] * scale;

				geometry.vertices.push( vertex );

			}

			offset = 0;
			zLength = faces.length;

			while ( offset < zLength ) {

				type = faces[ offset ++ ];

				isQuad = isBitSet( type, 0 );
				hasMaterial = isBitSet( type, 1 );
				hasFaceVertexUv = isBitSet( type, 3 );
				hasFaceNormal = isBitSet( type, 4 );
				hasFaceVertexNormal = isBitSet( type, 5 );
				hasFaceColor = isBitSet( type, 6 );
				hasFaceVertexColor = isBitSet( type, 7 );

				// console.log("type", type, "bits", isQuad, hasMaterial, hasFaceVertexUv, hasFaceNormal, hasFaceVertexNormal, hasFaceColor, hasFaceVertexColor);

				if ( isQuad ) {

					faceA = new Face3();
					faceA.a = faces[ offset ];
					faceA.b = faces[ offset + 1 ];
					faceA.c = faces[ offset + 3 ];

					faceB = new Face3();
					faceB.a = faces[ offset + 1 ];
					faceB.b = faces[ offset + 2 ];
					faceB.c = faces[ offset + 3 ];

					offset += 4;

					if ( hasMaterial ) {

						materialIndex = faces[ offset ++ ];
						faceA.materialIndex = materialIndex;
						faceB.materialIndex = materialIndex;

					}

					// to get face <=> uv index correspondence

					fi = geometry.faces.length;

					if ( hasFaceVertexUv ) {

						for ( i = 0; i < nUvLayers; i ++ ) {

							uvLayer = json.uvs[ i ];

							geometry.faceVertexUvs[ i ][ fi ] = [];
							geometry.faceVertexUvs[ i ][ fi + 1 ] = [];

							for ( j = 0; j < 4; j ++ ) {

								uvIndex = faces[ offset ++ ];

								u = uvLayer[ uvIndex * 2 ];
								v = uvLayer[ uvIndex * 2 + 1 ];

								uv = new Vector2( u, v );

								if ( j !== 2 ) geometry.faceVertexUvs[ i ][ fi ].push( uv );
								if ( j !== 0 ) geometry.faceVertexUvs[ i ][ fi + 1 ].push( uv );

							}

						}

					}

					if ( hasFaceNormal ) {

						normalIndex = faces[ offset ++ ] * 3;

						faceA.normal.set(
							normals[ normalIndex ++ ],
							normals[ normalIndex ++ ],
							normals[ normalIndex ]
						);

						faceB.normal.copy( faceA.normal );

					}

					if ( hasFaceVertexNormal ) {

						for ( i = 0; i < 4; i ++ ) {

							normalIndex = faces[ offset ++ ] * 3;

							normal = new Vector3(
								normals[ normalIndex ++ ],
								normals[ normalIndex ++ ],
								normals[ normalIndex ]
							);


							if ( i !== 2 ) faceA.vertexNormals.push( normal );
							if ( i !== 0 ) faceB.vertexNormals.push( normal );

						}

					}


					if ( hasFaceColor ) {

						colorIndex = faces[ offset ++ ];
						hex = colors[ colorIndex ];

						faceA.color.setHex( hex );
						faceB.color.setHex( hex );

					}


					if ( hasFaceVertexColor ) {

						for ( i = 0; i < 4; i ++ ) {

							colorIndex = faces[ offset ++ ];
							hex = colors[ colorIndex ];

							if ( i !== 2 ) faceA.vertexColors.push( new Color( hex ) );
							if ( i !== 0 ) faceB.vertexColors.push( new Color( hex ) );

						}

					}

					geometry.faces.push( faceA );
					geometry.faces.push( faceB );

				} else {

					face = new Face3();
					face.a = faces[ offset ++ ];
					face.b = faces[ offset ++ ];
					face.c = faces[ offset ++ ];

					if ( hasMaterial ) {

						materialIndex = faces[ offset ++ ];
						face.materialIndex = materialIndex;

					}

					// to get face <=> uv index correspondence

					fi = geometry.faces.length;

					if ( hasFaceVertexUv ) {

						for ( i = 0; i < nUvLayers; i ++ ) {

							uvLayer = json.uvs[ i ];

							geometry.faceVertexUvs[ i ][ fi ] = [];

							for ( j = 0; j < 3; j ++ ) {

								uvIndex = faces[ offset ++ ];

								u = uvLayer[ uvIndex * 2 ];
								v = uvLayer[ uvIndex * 2 + 1 ];

								uv = new Vector2( u, v );

								geometry.faceVertexUvs[ i ][ fi ].push( uv );

							}

						}

					}

					if ( hasFaceNormal ) {

						normalIndex = faces[ offset ++ ] * 3;

						face.normal.set(
							normals[ normalIndex ++ ],
							normals[ normalIndex ++ ],
							normals[ normalIndex ]
						);

					}

					if ( hasFaceVertexNormal ) {

						for ( i = 0; i < 3; i ++ ) {

							normalIndex = faces[ offset ++ ] * 3;

							normal = new Vector3(
								normals[ normalIndex ++ ],
								normals[ normalIndex ++ ],
								normals[ normalIndex ]
							);

							face.vertexNormals.push( normal );

						}

					}


					if ( hasFaceColor ) {

						colorIndex = faces[ offset ++ ];
						face.color.setHex( colors[ colorIndex ] );

					}


					if ( hasFaceVertexColor ) {

						for ( i = 0; i < 3; i ++ ) {

							colorIndex = faces[ offset ++ ];
							face.vertexColors.push( new Color( colors[ colorIndex ] ) );

						}

					}

					geometry.faces.push( face );

				}

			}

		}

		function parseSkin( json, geometry ) {

			var influencesPerVertex = ( json.influencesPerVertex !== undefined ) ? json.influencesPerVertex : 2;

			if ( json.skinWeights ) {

				for ( var i = 0, l = json.skinWeights.length; i < l; i += influencesPerVertex ) {

					var x = json.skinWeights[ i ];
					var y = ( influencesPerVertex > 1 ) ? json.skinWeights[ i + 1 ] : 0;
					var z = ( influencesPerVertex > 2 ) ? json.skinWeights[ i + 2 ] : 0;
					var w = ( influencesPerVertex > 3 ) ? json.skinWeights[ i + 3 ] : 0;

					geometry.skinWeights.push( new Vector4( x, y, z, w ) );

				}

			}

			if ( json.skinIndices ) {

				for ( var i = 0, l = json.skinIndices.length; i < l; i += influencesPerVertex ) {

					var a = json.skinIndices[ i ];
					var b = ( influencesPerVertex > 1 ) ? json.skinIndices[ i + 1 ] : 0;
					var c = ( influencesPerVertex > 2 ) ? json.skinIndices[ i + 2 ] : 0;
					var d = ( influencesPerVertex > 3 ) ? json.skinIndices[ i + 3 ] : 0;

					geometry.skinIndices.push( new Vector4( a, b, c, d ) );

				}

			}

			geometry.bones = json.bones;

			if ( geometry.bones && geometry.bones.length > 0 && ( geometry.skinWeights.length !== geometry.skinIndices.length || geometry.skinIndices.length !== geometry.vertices.length ) ) {

				console.warn( 'When skinning, number of vertices (' + geometry.vertices.length + '), skinIndices (' +
					geometry.skinIndices.length + '), and skinWeights (' + geometry.skinWeights.length + ') should match.' );

			}

		}

		function parseMorphing( json, geometry ) {

			var scale = json.scale;

			if ( json.morphTargets !== undefined ) {

				for ( var i = 0, l = json.morphTargets.length; i < l; i ++ ) {

					geometry.morphTargets[ i ] = {};
					geometry.morphTargets[ i ].name = json.morphTargets[ i ].name;
					geometry.morphTargets[ i ].vertices = [];

					var dstVertices = geometry.morphTargets[ i ].vertices;
					var srcVertices = json.morphTargets[ i ].vertices;

					for ( var v = 0, vl = srcVertices.length; v < vl; v += 3 ) {

						var vertex = new Vector3();
						vertex.x = srcVertices[ v ] * scale;
						vertex.y = srcVertices[ v + 1 ] * scale;
						vertex.z = srcVertices[ v + 2 ] * scale;

						dstVertices.push( vertex );

					}

				}

			}

			if ( json.morphColors !== undefined && json.morphColors.length > 0 ) {

				console.warn( 'THREE.JSONLoader: "morphColors" no longer supported. Using them as face colors.' );

				var faces = geometry.faces;
				var morphColors = json.morphColors[ 0 ].colors;

				for ( var i = 0, l = faces.length; i < l; i ++ ) {

					faces[ i ].color.fromArray( morphColors, i * 3 );

				}

			}

		}

		function parseAnimations( json, geometry ) {

			var outputAnimations = [];

			// parse old style Bone/Hierarchy animations
			var animations = [];

			if ( json.animation !== undefined ) {

				animations.push( json.animation );

			}

			if ( json.animations !== undefined ) {

				if ( json.animations.length ) {

					animations = animations.concat( json.animations );

				} else {

					animations.push( json.animations );

				}

			}

			for ( var i = 0; i < animations.length; i ++ ) {

				var clip = AnimationClip.parseAnimation( animations[ i ], geometry.bones );
				if ( clip ) outputAnimations.push( clip );

			}

			// parse implicit morph animations
			if ( geometry.morphTargets ) {

				// TODO: Figure out what an appropraite FPS is for morph target animations -- defaulting to 10, but really it is completely arbitrary.
				var morphAnimationClips = AnimationClip.CreateClipsFromMorphTargetSequences( geometry.morphTargets, 10 );
				outputAnimations = outputAnimations.concat( morphAnimationClips );

			}

			if ( outputAnimations.length > 0 ) geometry.animations = outputAnimations;

		}

		return function ( json, texturePath ) {

			if ( json.data !== undefined ) {

				// Geometry 4.0 spec
				json = json.data;

			}

			if ( json.scale !== undefined ) {

				json.scale = 1.0 / json.scale;

			} else {

				json.scale = 1.0;

			}

			var geometry = new Geometry();

			parseModel( json, geometry );
			parseSkin( json, geometry );
			parseMorphing( json, geometry );
			parseAnimations( json, geometry );

			geometry.computeFaceNormals();
			geometry.computeBoundingSphere();

			if ( json.materials === undefined || json.materials.length === 0 ) {

				return { geometry: geometry };

			} else {

				var materials = Loader.prototype.initMaterials( json.materials, texturePath, this.crossOrigin );

				return { geometry: geometry, materials: materials };

			}

		};

	} )()

} );

/**
 * @author mrdoob / http://mrdoob.com/
 */

function ObjectLoader( manager ) {

	this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;
	this.texturePath = '';

}

Object.assign( ObjectLoader.prototype, {

	load: function ( url, onLoad, onProgress, onError ) {

		if ( this.texturePath === '' ) {

			this.texturePath = url.substring( 0, url.lastIndexOf( '/' ) + 1 );

		}

		var scope = this;

		var loader = new FileLoader( scope.manager );
		loader.load( url, function ( text ) {

			var json = null;

			try {

				json = JSON.parse( text );

			} catch ( error ) {

				if ( onError !== undefined ) onError( error );

				console.error( 'THREE:ObjectLoader: Can\'t parse ' + url + '.', error.message );

				return;

			}

			var metadata = json.metadata;

			if ( metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry' ) {

				console.error( 'THREE.ObjectLoader: Can\'t load ' + url + '. Use THREE.JSONLoader instead.' );
				return;

			}

			scope.parse( json, onLoad );

		}, onProgress, onError );

	},

	setTexturePath: function ( value ) {

		this.texturePath = value;

	},

	setCrossOrigin: function ( value ) {

		this.crossOrigin = value;

	},

	parse: function ( json, onLoad ) {

		var geometries = this.parseGeometries( json.geometries );

		var images = this.parseImages( json.images, function () {

			if ( onLoad !== undefined ) onLoad( object );

		} );

		var textures = this.parseTextures( json.textures, images );
		var materials = this.parseMaterials( json.materials, textures );

		var object = this.parseObject( json.object, geometries, materials );

		if ( json.animations ) {

			object.animations = this.parseAnimations( json.animations );

		}

		if ( json.images === undefined || json.images.length === 0 ) {

			if ( onLoad !== undefined ) onLoad( object );

		}

		return object;

	},

	parseGeometries: function ( json ) {

		var geometries = {};

		if ( json !== undefined ) {

			var geometryLoader = new JSONLoader();
			var bufferGeometryLoader = new BufferGeometryLoader();

			for ( var i = 0, l = json.length; i < l; i ++ ) {

				var geometry;
				var data = json[ i ];

				switch ( data.type ) {

					case 'PlaneGeometry':
					case 'PlaneBufferGeometry':

						geometry = new Geometries[ data.type ](
							data.width,
							data.height,
							data.widthSegments,
							data.heightSegments
						);

						break;

					case 'BoxGeometry':
					case 'BoxBufferGeometry':
					case 'CubeGeometry': // backwards compatible

						geometry = new Geometries[ data.type ](
							data.width,
							data.height,
							data.depth,
							data.widthSegments,
							data.heightSegments,
							data.depthSegments
						);

						break;

					case 'CircleGeometry':
					case 'CircleBufferGeometry':

						geometry = new Geometries[ data.type ](
							data.radius,
							data.segments,
							data.thetaStart,
							data.thetaLength
						);

						break;

					case 'CylinderGeometry':
					case 'CylinderBufferGeometry':

						geometry = new Geometries[ data.type ](
							data.radiusTop,
							data.radiusBottom,
							data.height,
							data.radialSegments,
							data.heightSegments,
							data.openEnded,
							data.thetaStart,
							data.thetaLength
						);

						break;

					case 'ConeGeometry':
					case 'ConeBufferGeometry':

						geometry = new Geometries[ data.type ](
							data.radius,
							data.height,
							data.radialSegments,
							data.heightSegments,
							data.openEnded,
							data.thetaStart,
							data.thetaLength
						);

						break;

					case 'SphereGeometry':
					case 'SphereBufferGeometry':

						geometry = new Geometries[ data.type ](
							data.radius,
							data.widthSegments,
							data.heightSegments,
							data.phiStart,
							data.phiLength,
							data.thetaStart,
							data.thetaLength
						);

						break;

					case 'DodecahedronGeometry':
					case 'DodecahedronBufferGeometry':
					case 'IcosahedronGeometry':
					case 'IcosahedronBufferGeometry':
					case 'OctahedronGeometry':
					case 'OctahedronBufferGeometry':
					case 'TetrahedronGeometry':
					case 'TetrahedronBufferGeometry':

						geometry = new Geometries[ data.type ](
							data.radius,
							data.detail
						);

						break;

					case 'RingGeometry':
					case 'RingBufferGeometry':

						geometry = new Geometries[ data.type ](
							data.innerRadius,
							data.outerRadius,
							data.thetaSegments,
							data.phiSegments,
							data.thetaStart,
							data.thetaLength
						);

						break;

					case 'TorusGeometry':
					case 'TorusBufferGeometry':

						geometry = new Geometries[ data.type ](
							data.radius,
							data.tube,
							data.radialSegments,
							data.tubularSegments,
							data.arc
						);

						break;

					case 'TorusKnotGeometry':
					case 'TorusKnotBufferGeometry':

						geometry = new Geometries[ data.type ](
							data.radius,
							data.tube,
							data.tubularSegments,
							data.radialSegments,
							data.p,
							data.q
						);

						break;

					case 'LatheGeometry':
					case 'LatheBufferGeometry':

						geometry = new Geometries[ data.type ](
							data.points,
							data.segments,
							data.phiStart,
							data.phiLength
						);

						break;

					case 'PolyhedronGeometry':
					case 'PolyhedronBufferGeometry':

						geometry = new Geometries[ data.type ](
							data.vertices,
							data.indices,
							data.radius,
							data.details
						);

						break;

					case 'BufferGeometry':

						geometry = bufferGeometryLoader.parse( data );

						break;

					case 'Geometry':

						geometry = geometryLoader.parse( data, this.texturePath ).geometry;

						break;

					default:

						console.warn( 'THREE.ObjectLoader: Unsupported geometry type "' + data.type + '"' );

						continue;

				}

				geometry.uuid = data.uuid;

				if ( data.name !== undefined ) geometry.name = data.name;

				geometries[ data.uuid ] = geometry;

			}

		}

		return geometries;

	},

	parseMaterials: function ( json, textures ) {

		var materials = {};

		if ( json !== undefined ) {

			var loader = new MaterialLoader();
			loader.setTextures( textures );

			for ( var i = 0, l = json.length; i < l; i ++ ) {

				var data = json[ i ];

				if ( data.type === 'MultiMaterial' ) {

					// Deprecated

					var array = [];

					for ( var j = 0; j < data.materials.length; j ++ ) {

						array.push( loader.parse( data.materials[ j ] ) );

					}

					materials[ data.uuid ] = array;

				} else {

					materials[ data.uuid ] = loader.parse( data );

				}

			}

		}

		return materials;

	},

	parseAnimations: function ( json ) {

		var animations = [];

		for ( var i = 0; i < json.length; i ++ ) {

			var clip = AnimationClip.parse( json[ i ] );

			animations.push( clip );

		}

		return animations;

	},

	parseImages: function ( json, onLoad ) {

		var scope = this;
		var images = {};

		function loadImage( url ) {

			scope.manager.itemStart( url );

			return loader.load( url, function () {

				scope.manager.itemEnd( url );

			}, undefined, function () {

				scope.manager.itemEnd( url );
				scope.manager.itemError( url );

			} );

		}

		if ( json !== undefined && json.length > 0 ) {

			var manager = new LoadingManager( onLoad );

			var loader = new ImageLoader( manager );
			loader.setCrossOrigin( this.crossOrigin );

			for ( var i = 0, l = json.length; i < l; i ++ ) {

				var image = json[ i ];
				var path = /^(\/\/)|([a-z]+:(\/\/)?)/i.test( image.url ) ? image.url : scope.texturePath + image.url;

				images[ image.uuid ] = loadImage( path );

			}

		}

		return images;

	},

	parseTextures: function ( json, images ) {

		function parseConstant( value, type ) {

			if ( typeof value === 'number' ) return value;

			console.warn( 'THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value );

			return type[ value ];

		}

		var textures = {};

		if ( json !== undefined ) {

			for ( var i = 0, l = json.length; i < l; i ++ ) {

				var data = json[ i ];

				if ( data.image === undefined ) {

					console.warn( 'THREE.ObjectLoader: No "image" specified for', data.uuid );

				}

				if ( images[ data.image ] === undefined ) {

					console.warn( 'THREE.ObjectLoader: Undefined image', data.image );

				}

				var texture = new Texture( images[ data.image ] );
				texture.needsUpdate = true;

				texture.uuid = data.uuid;

				if ( data.name !== undefined ) texture.name = data.name;

				if ( data.mapping !== undefined ) texture.mapping = parseConstant( data.mapping, TEXTURE_MAPPING );

				if ( data.offset !== undefined ) texture.offset.fromArray( data.offset );
				if ( data.repeat !== undefined ) texture.repeat.fromArray( data.repeat );
				if ( data.center !== undefined ) texture.center.fromArray( data.center );
				if ( data.rotation !== undefined ) texture.rotation = data.rotation;

				if ( data.wrap !== undefined ) {

					texture.wrapS = parseConstant( data.wrap[ 0 ], TEXTURE_WRAPPING );
					texture.wrapT = parseConstant( data.wrap[ 1 ], TEXTURE_WRAPPING );

				}

				if ( data.minFilter !== undefined ) texture.minFilter = parseConstant( data.minFilter, TEXTURE_FILTER );
				if ( data.magFilter !== undefined ) texture.magFilter = parseConstant( data.magFilter, TEXTURE_FILTER );
				if ( data.anisotropy !== undefined ) texture.anisotropy = data.anisotropy;

				if ( data.flipY !== undefined ) texture.flipY = data.flipY;

				textures[ data.uuid ] = texture;

			}

		}

		return textures;

	},

	parseObject: function () {

		var matrix = new Matrix4();

		return function parseObject( data, geometries, materials ) {

			var object;

			function getGeometry( name ) {

				if ( geometries[ name ] === undefined ) {

					console.warn( 'THREE.ObjectLoader: Undefined geometry', name );

				}

				return geometries[ name ];

			}

			function getMaterial( name ) {

				if ( name === undefined ) return undefined;

				if ( Array.isArray( name ) ) {

					var array = [];

					for ( var i = 0, l = name.length; i < l; i ++ ) {

						var uuid = name[ i ];

						if ( materials[ uuid ] === undefined ) {

							console.warn( 'THREE.ObjectLoader: Undefined material', uuid );

						}

						array.push( materials[ uuid ] );

					}

					return array;

				}

				if ( materials[ name ] === undefined ) {

					console.warn( 'THREE.ObjectLoader: Undefined material', name );

				}

				return materials[ name ];

			}

			switch ( data.type ) {

				case 'Scene':

					object = new Scene();

					if ( data.background !== undefined ) {

						if ( Number.isInteger( data.background ) ) {

							object.background = new Color( data.background );

						}

					}

					if ( data.fog !== undefined ) {

						if ( data.fog.type === 'Fog' ) {

							object.fog = new Fog( data.fog.color, data.fog.near, data.fog.far );

						} else if ( data.fog.type === 'FogExp2' ) {

							object.fog = new FogExp2( data.fog.color, data.fog.density );

						}

					}

					break;

				case 'PerspectiveCamera':

					object = new PerspectiveCamera( data.fov, data.aspect, data.near, data.far );

					if ( data.focus !== undefined ) object.focus = data.focus;
					if ( data.zoom !== undefined ) object.zoom = data.zoom;
					if ( data.filmGauge !== undefined ) object.filmGauge = data.filmGauge;
					if ( data.filmOffset !== undefined ) object.filmOffset = data.filmOffset;
					if ( data.view !== undefined ) object.view = Object.assign( {}, data.view );

					break;

				case 'OrthographicCamera':

					object = new OrthographicCamera( data.left, data.right, data.top, data.bottom, data.near, data.far );

					break;

				case 'AmbientLight':

					object = new AmbientLight( data.color, data.intensity );

					break;

				case 'DirectionalLight':

					object = new DirectionalLight( data.color, data.intensity );

					break;

				case 'PointLight':

					object = new PointLight( data.color, data.intensity, data.distance, data.decay );

					break;

				case 'RectAreaLight':

					object = new RectAreaLight( data.color, data.intensity, data.width, data.height );

					break;

				case 'SpotLight':

					object = new SpotLight( data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay );

					break;

				case 'HemisphereLight':

					object = new HemisphereLight( data.color, data.groundColor, data.intensity );

					break;

				case 'SkinnedMesh':

					console.warn( 'THREE.ObjectLoader.parseObject() does not support SkinnedMesh yet.' );

				case 'Mesh':

					var geometry = getGeometry( data.geometry );
					var material = getMaterial( data.material );

					if ( geometry.bones && geometry.bones.length > 0 ) {

						object = new SkinnedMesh( geometry, material );

					} else {

						object = new Mesh( geometry, material );

					}

					break;

				case 'LOD':

					object = new LOD();

					break;

				case 'Line':

					object = new Line( getGeometry( data.geometry ), getMaterial( data.material ), data.mode );

					break;

				case 'LineLoop':

					object = new LineLoop( getGeometry( data.geometry ), getMaterial( data.material ) );

					break;

				case 'LineSegments':

					object = new LineSegments( getGeometry( data.geometry ), getMaterial( data.material ) );

					break;

				case 'PointCloud':
				case 'Points':

					object = new Points( getGeometry( data.geometry ), getMaterial( data.material ) );

					break;

				case 'Sprite':

					object = new Sprite( getMaterial( data.material ) );

					break;

				case 'Group':

					object = new Group();

					break;

				default:

					object = new Object3D();

			}

			object.uuid = data.uuid;

			if ( data.name !== undefined ) object.name = data.name;
			if ( data.matrix !== undefined ) {

				matrix.fromArray( data.matrix );
				matrix.decompose( object.position, object.quaternion, object.scale );

			} else {

				if ( data.position !== undefined ) object.position.fromArray( data.position );
				if ( data.rotation !== undefined ) object.rotation.fromArray( data.rotation );
				if ( data.quaternion !== undefined ) object.quaternion.fromArray( data.quaternion );
				if ( data.scale !== undefined ) object.scale.fromArray( data.scale );

			}

			if ( data.castShadow !== undefined ) object.castShadow = data.castShadow;
			if ( data.receiveShadow !== undefined ) object.receiveShadow = data.receiveShadow;

			if ( data.shadow ) {

				if ( data.shadow.bias !== undefined ) object.shadow.bias = data.shadow.bias;
				if ( data.shadow.radius !== undefined ) object.shadow.radius = data.shadow.radius;
				if ( data.shadow.mapSize !== undefined ) object.shadow.mapSize.fromArray( data.shadow.mapSize );
				if ( data.shadow.camera !== undefined ) object.shadow.camera = this.parseObject( data.shadow.camera );

			}

			if ( data.visible !== undefined ) object.visible = data.visible;
			if ( data.userData !== undefined ) object.userData = data.userData;

			if ( data.children !== undefined ) {

				var children = data.children;

				for ( var i = 0; i < children.length; i ++ ) {

					object.add( this.parseObject( children[ i ], geometries, materials ) );

				}

			}

			if ( data.type === 'LOD' ) {

				var levels = data.levels;

				for ( var l = 0; l < levels.length; l ++ ) {

					var level = levels[ l ];
					var child = object.getObjectByProperty( 'uuid', level.object );

					if ( child !== undefined ) {

						object.addLevel( child, level.distance );

					}

				}

			}

			return object;

		};

	}()

} );

var TEXTURE_MAPPING = {
	UVMapping: UVMapping,
	CubeReflectionMapping: CubeReflectionMapping,
	CubeRefractionMapping: CubeRefractionMapping,
	EquirectangularReflectionMapping: EquirectangularReflectionMapping,
	EquirectangularRefractionMapping: EquirectangularRefractionMapping,
	SphericalReflectionMapping: SphericalReflectionMapping,
	CubeUVReflectionMapping: CubeUVReflectionMapping,
	CubeUVRefractionMapping: CubeUVRefractionMapping
};

var TEXTURE_WRAPPING = {
	RepeatWrapping: RepeatWrapping,
	ClampToEdgeWrapping: ClampToEdgeWrapping,
	MirroredRepeatWrapping: MirroredRepeatWrapping
};

var TEXTURE_FILTER = {
	NearestFilter: NearestFilter,
	NearestMipMapNearestFilter: NearestMipMapNearestFilter,
	NearestMipMapLinearFilter: NearestMipMapLinearFilter,
	LinearFilter: LinearFilter,
	LinearMipMapNearestFilter: LinearMipMapNearestFilter,
	LinearMipMapLinearFilter: LinearMipMapLinearFilter
};

/**
 * @author zz85 / http://www.lab4games.net/zz85/blog
 *
 * Bezier Curves formulas obtained from
 * http://en.wikipedia.org/wiki/Bézier_curve
 */

function CatmullRom( t, p0, p1, p2, p3 ) {

	var v0 = ( p2 - p0 ) * 0.5;
	var v1 = ( p3 - p1 ) * 0.5;
	var t2 = t * t;
	var t3 = t * t2;
	return ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( - 3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;

}

//

function QuadraticBezierP0( t, p ) {

	var k = 1 - t;
	return k * k * p;

}

function QuadraticBezierP1( t, p ) {

	return 2 * ( 1 - t ) * t * p;

}

function QuadraticBezierP2( t, p ) {

	return t * t * p;

}

function QuadraticBezier( t, p0, p1, p2 ) {

	return QuadraticBezierP0( t, p0 ) + QuadraticBezierP1( t, p1 ) +
		QuadraticBezierP2( t, p2 );

}

//

function CubicBezierP0( t, p ) {

	var k = 1 - t;
	return k * k * k * p;

}

function CubicBezierP1( t, p ) {

	var k = 1 - t;
	return 3 * k * k * t * p;

}

function CubicBezierP2( t, p ) {

	return 3 * ( 1 - t ) * t * t * p;

}

function CubicBezierP3( t, p ) {

	return t * t * t * p;

}

function CubicBezier( t, p0, p1, p2, p3 ) {

	return CubicBezierP0( t, p0 ) + CubicBezierP1( t, p1 ) + CubicBezierP2( t, p2 ) +
		CubicBezierP3( t, p3 );

}

/**
 * @author zz85 / http://www.lab4games.net/zz85/blog
 * Extensible curve object
 *
 * Some common of curve methods:
 * .getPoint( t, optionalTarget ), .getTangent( t )
 * .getPointAt( u, optionalTarget ), .getTangentAt( u )
 * .getPoints(), .getSpacedPoints()
 * .getLength()
 * .updateArcLengths()
 *
 * This following curves inherit from THREE.Curve:
 *
 * -- 2D curves --
 * THREE.ArcCurve
 * THREE.CubicBezierCurve
 * THREE.EllipseCurve
 * THREE.LineCurve
 * THREE.QuadraticBezierCurve
 * THREE.SplineCurve
 *
 * -- 3D curves --
 * THREE.CatmullRomCurve3
 * THREE.CubicBezierCurve3
 * THREE.LineCurve3
 * THREE.QuadraticBezierCurve3
 *
 * A series of curves can be represented as a THREE.CurvePath.
 *
 **/

/**************************************************************
 *	Abstract Curve base class
 **************************************************************/

function Curve() {

	this.type = 'Curve';

	this.arcLengthDivisions = 200;

}

Object.assign( Curve.prototype, {

	// Virtual base class method to overwrite and implement in subclasses
	//	- t [0 .. 1]

	getPoint: function ( /* t, optionalTarget */ ) {

		console.warn( 'THREE.Curve: .getPoint() not implemented.' );
		return null;

	},

	// Get point at relative position in curve according to arc length
	// - u [0 .. 1]

	getPointAt: function ( u, optionalTarget ) {

		var t = this.getUtoTmapping( u );
		return this.getPoint( t, optionalTarget );

	},

	// Get sequence of points using getPoint( t )

	getPoints: function ( divisions ) {

		if ( divisions === undefined ) divisions = 5;

		var points = [];

		for ( var d = 0; d <= divisions; d ++ ) {

			points.push( this.getPoint( d / divisions ) );

		}

		return points;

	},

	// Get sequence of points using getPointAt( u )

	getSpacedPoints: function ( divisions ) {

		if ( divisions === undefined ) divisions = 5;

		var points = [];

		for ( var d = 0; d <= divisions; d ++ ) {

			points.push( this.getPointAt( d / divisions ) );

		}

		return points;

	},

	// Get total curve arc length

	getLength: function () {

		var lengths = this.getLengths();
		return lengths[ lengths.length - 1 ];

	},

	// Get list of cumulative segment lengths

	getLengths: function ( divisions ) {

		if ( divisions === undefined ) divisions = this.arcLengthDivisions;

		if ( this.cacheArcLengths &&
			( this.cacheArcLengths.length === divisions + 1 ) &&
			! this.needsUpdate ) {

			return this.cacheArcLengths;

		}

		this.needsUpdate = false;

		var cache = [];
		var current, last = this.getPoint( 0 );
		var p, sum = 0;

		cache.push( 0 );

		for ( p = 1; p <= divisions; p ++ ) {

			current = this.getPoint( p / divisions );
			sum += current.distanceTo( last );
			cache.push( sum );
			last = current;

		}

		this.cacheArcLengths = cache;

		return cache; // { sums: cache, sum: sum }; Sum is in the last element.

	},

	updateArcLengths: function () {

		this.needsUpdate = true;
		this.getLengths();

	},

	// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant

	getUtoTmapping: function ( u, distance ) {

		var arcLengths = this.getLengths();

		var i = 0, il = arcLengths.length;

		var targetArcLength; // The targeted u distance value to get

		if ( distance ) {

			targetArcLength = distance;

		} else {

			targetArcLength = u * arcLengths[ il - 1 ];

		}

		// binary search for the index with largest value smaller than target u distance

		var low = 0, high = il - 1, comparison;

		while ( low <= high ) {

			i = Math.floor( low + ( high - low ) / 2 ); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats

			comparison = arcLengths[ i ] - targetArcLength;

			if ( comparison < 0 ) {

				low = i + 1;

			} else if ( comparison > 0 ) {

				high = i - 1;

			} else {

				high = i;
				break;

				// DONE

			}

		}

		i = high;

		if ( arcLengths[ i ] === targetArcLength ) {

			return i / ( il - 1 );

		}

		// we could get finer grain at lengths, or use simple interpolation between two points

		var lengthBefore = arcLengths[ i ];
		var lengthAfter = arcLengths[ i + 1 ];

		var segmentLength = lengthAfter - lengthBefore;

		// determine where we are between the 'before' and 'after' points

		var segmentFraction = ( targetArcLength - lengthBefore ) / segmentLength;

		// add that fractional amount to t

		var t = ( i + segmentFraction ) / ( il - 1 );

		return t;

	},

	// Returns a unit vector tangent at t
	// In case any sub curve does not implement its tangent derivation,
	// 2 points a small delta apart will be used to find its gradient
	// which seems to give a reasonable approximation

	getTangent: function ( t ) {

		var delta = 0.0001;
		var t1 = t - delta;
		var t2 = t + delta;

		// Capping in case of danger

		if ( t1 < 0 ) t1 = 0;
		if ( t2 > 1 ) t2 = 1;

		var pt1 = this.getPoint( t1 );
		var pt2 = this.getPoint( t2 );

		var vec = pt2.clone().sub( pt1 );
		return vec.normalize();

	},

	getTangentAt: function ( u ) {

		var t = this.getUtoTmapping( u );
		return this.getTangent( t );

	},

	computeFrenetFrames: function ( segments, closed ) {

		// see http://www.cs.indiana.edu/pub/techreports/TR425.pdf

		var normal = new Vector3();

		var tangents = [];
		var normals = [];
		var binormals = [];

		var vec = new Vector3();
		var mat = new Matrix4();

		var i, u, theta;

		// compute the tangent vectors for each segment on the curve

		for ( i = 0; i <= segments; i ++ ) {

			u = i / segments;

			tangents[ i ] = this.getTangentAt( u );
			tangents[ i ].normalize();

		}

		// select an initial normal vector perpendicular to the first tangent vector,
		// and in the direction of the minimum tangent xyz component

		normals[ 0 ] = new Vector3();
		binormals[ 0 ] = new Vector3();
		var min = Number.MAX_VALUE;
		var tx = Math.abs( tangents[ 0 ].x );
		var ty = Math.abs( tangents[ 0 ].y );
		var tz = Math.abs( tangents[ 0 ].z );

		if ( tx <= min ) {

			min = tx;
			normal.set( 1, 0, 0 );

		}

		if ( ty <= min ) {

			min = ty;
			normal.set( 0, 1, 0 );

		}

		if ( tz <= min ) {

			normal.set( 0, 0, 1 );

		}

		vec.crossVectors( tangents[ 0 ], normal ).normalize();

		normals[ 0 ].crossVectors( tangents[ 0 ], vec );
		binormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] );


		// compute the slowly-varying normal and binormal vectors for each segment on the curve

		for ( i = 1; i <= segments; i ++ ) {

			normals[ i ] = normals[ i - 1 ].clone();

			binormals[ i ] = binormals[ i - 1 ].clone();

			vec.crossVectors( tangents[ i - 1 ], tangents[ i ] );

			if ( vec.length() > Number.EPSILON ) {

				vec.normalize();

				theta = Math.acos( _Math.clamp( tangents[ i - 1 ].dot( tangents[ i ] ), - 1, 1 ) ); // clamp for floating pt errors

				normals[ i ].applyMatrix4( mat.makeRotationAxis( vec, theta ) );

			}

			binormals[ i ].crossVectors( tangents[ i ], normals[ i ] );

		}

		// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same

		if ( closed === true ) {

			theta = Math.acos( _Math.clamp( normals[ 0 ].dot( normals[ segments ] ), - 1, 1 ) );
			theta /= segments;

			if ( tangents[ 0 ].dot( vec.crossVectors( normals[ 0 ], normals[ segments ] ) ) > 0 ) {

				theta = - theta;

			}

			for ( i = 1; i <= segments; i ++ ) {

				// twist a little...
				normals[ i ].applyMatrix4( mat.makeRotationAxis( tangents[ i ], theta * i ) );
				binormals[ i ].crossVectors( tangents[ i ], normals[ i ] );

			}

		}

		return {
			tangents: tangents,
			normals: normals,
			binormals: binormals
		};

	},

	clone: function () {

		return new this.constructor().copy( this );

	},

	copy: function ( source ) {

		this.arcLengthDivisions = source.arcLengthDivisions;

		return this;

	}

} );

function LineCurve( v1, v2 ) {

	Curve.call( this );

	this.type = 'LineCurve';

	this.v1 = v1 || new Vector2();
	this.v2 = v2 || new Vector2();

}

LineCurve.prototype = Object.create( Curve.prototype );
LineCurve.prototype.constructor = LineCurve;

LineCurve.prototype.isLineCurve = true;

LineCurve.prototype.getPoint = function ( t, optionalTarget ) {

	var point = optionalTarget || new Vector2();

	if ( t === 1 ) {

		point.copy( this.v2 );

	} else {

		point.copy( this.v2 ).sub( this.v1 );
		point.multiplyScalar( t ).add( this.v1 );

	}

	return point;

};

// Line curve is linear, so we can overwrite default getPointAt

LineCurve.prototype.getPointAt = function ( u, optionalTarget ) {

	return this.getPoint( u, optionalTarget );

};

LineCurve.prototype.getTangent = function ( /* t */ ) {

	var tangent = this.v2.clone().sub( this.v1 );

	return tangent.normalize();

};

LineCurve.prototype.copy = function ( source ) {

	Curve.prototype.copy.call( this, source );

	this.v1.copy( source.v1 );
	this.v2.copy( source.v2 );

	return this;

};

/**
 * @author zz85 / http://www.lab4games.net/zz85/blog
 *
 **/

/**************************************************************
 *	Curved Path - a curve path is simply a array of connected
 *  curves, but retains the api of a curve
 **************************************************************/

function CurvePath() {

	Curve.call( this );

	this.type = 'CurvePath';

	this.curves = [];
	this.autoClose = false; // Automatically closes the path

}

CurvePath.prototype = Object.assign( Object.create( Curve.prototype ), {

	constructor: CurvePath,

	add: function ( curve ) {

		this.curves.push( curve );

	},

	closePath: function () {

		// Add a line curve if start and end of lines are not connected
		var startPoint = this.curves[ 0 ].getPoint( 0 );
		var endPoint = this.curves[ this.curves.length - 1 ].getPoint( 1 );

		if ( ! startPoint.equals( endPoint ) ) {

			this.curves.push( new LineCurve( endPoint, startPoint ) );

		}

	},

	// To get accurate point with reference to
	// entire path distance at time t,
	// following has to be done:

	// 1. Length of each sub path have to be known
	// 2. Locate and identify type of curve
	// 3. Get t for the curve
	// 4. Return curve.getPointAt(t')

	getPoint: function ( t ) {

		var d = t * this.getLength();
		var curveLengths = this.getCurveLengths();
		var i = 0;

		// To think about boundaries points.

		while ( i < curveLengths.length ) {

			if ( curveLengths[ i ] >= d ) {

				var diff = curveLengths[ i ] - d;
				var curve = this.curves[ i ];

				var segmentLength = curve.getLength();
				var u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;

				return curve.getPointAt( u );

			}

			i ++;

		}

		return null;

		// loop where sum != 0, sum > d , sum+1 <d

	},

	// We cannot use the default THREE.Curve getPoint() with getLength() because in
	// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath
	// getPoint() depends on getLength

	getLength: function () {

		var lens = this.getCurveLengths();
		return lens[ lens.length - 1 ];

	},

	// cacheLengths must be recalculated.
	updateArcLengths: function () {

		this.needsUpdate = true;
		this.cacheLengths = null;
		this.getCurveLengths();

	},

	// Compute lengths and cache them
	// We cannot overwrite getLengths() because UtoT mapping uses it.

	getCurveLengths: function () {

		// We use cache values if curves and cache array are same length

		if ( this.cacheLengths && this.cacheLengths.length === this.curves.length ) {

			return this.cacheLengths;

		}

		// Get length of sub-curve
		// Push sums into cached array

		var lengths = [], sums = 0;

		for ( var i = 0, l = this.curves.length; i < l; i ++ ) {

			sums += this.curves[ i ].getLength();
			lengths.push( sums );

		}

		this.cacheLengths = lengths;

		return lengths;

	},

	getSpacedPoints: function ( divisions ) {

		if ( divisions === undefined ) divisions = 40;

		var points = [];

		for ( var i = 0; i <= divisions; i ++ ) {

			points.push( this.getPoint( i / divisions ) );

		}

		if ( this.autoClose ) {

			points.push( points[ 0 ] );

		}

		return points;

	},

	getPoints: function ( divisions ) {

		divisions = divisions || 12;

		var points = [], last;

		for ( var i = 0, curves = this.curves; i < curves.length; i ++ ) {

			var curve = curves[ i ];
			var resolution = ( curve && curve.isEllipseCurve ) ? divisions * 2
				: ( curve && curve.isLineCurve ) ? 1
					: ( curve && curve.isSplineCurve ) ? divisions * curve.points.length
						: divisions;

			var pts = curve.getPoints( resolution );

			for ( var j = 0; j < pts.length; j ++ ) {

				var point = pts[ j ];

				if ( last && last.equals( point ) ) continue; // ensures no consecutive points are duplicates

				points.push( point );
				last = point;

			}

		}

		if ( this.autoClose && points.length > 1 && ! points[ points.length - 1 ].equals( points[ 0 ] ) ) {

			points.push( points[ 0 ] );

		}

		return points;

	},

	copy: function ( source ) {

		Curve.prototype.copy.call( this, source );

		this.curves = [];

		for ( var i = 0, l = source.curves.length; i < l; i ++ ) {

			var curve = source.curves[ i ];

			this.curves.push( curve.clone() );

		}

		this.autoClose = source.autoClose;

		return this;

	}

} );

function EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {

	Curve.call( this );

	this.type = 'EllipseCurve';

	this.aX = aX || 0;
	this.aY = aY || 0;

	this.xRadius = xRadius || 1;
	this.yRadius = yRadius || 1;

	this.aStartAngle = aStartAngle || 0;
	this.aEndAngle = aEndAngle || 2 * Math.PI;

	this.aClockwise = aClockwise || false;

	this.aRotation = aRotation || 0;

}

EllipseCurve.prototype = Object.create( Curve.prototype );
EllipseCurve.prototype.constructor = EllipseCurve;

EllipseCurve.prototype.isEllipseCurve = true;

EllipseCurve.prototype.getPoint = function ( t, optionalTarget ) {

	var point = optionalTarget || new Vector2();

	var twoPi = Math.PI * 2;
	var deltaAngle = this.aEndAngle - this.aStartAngle;
	var samePoints = Math.abs( deltaAngle ) < Number.EPSILON;

	// ensures that deltaAngle is 0 .. 2 PI
	while ( deltaAngle < 0 ) deltaAngle += twoPi;
	while ( deltaAngle > twoPi ) deltaAngle -= twoPi;

	if ( deltaAngle < Number.EPSILON ) {

		if ( samePoints ) {

			deltaAngle = 0;

		} else {

			deltaAngle = twoPi;

		}

	}

	if ( this.aClockwise === true && ! samePoints ) {

		if ( deltaAngle === twoPi ) {

			deltaAngle = - twoPi;

		} else {

			deltaAngle = deltaAngle - twoPi;

		}

	}

	var angle = this.aStartAngle + t * deltaAngle;
	var x = this.aX + this.xRadius * Math.cos( angle );
	var y = this.aY + this.yRadius * Math.sin( angle );

	if ( this.aRotation !== 0 ) {

		var cos = Math.cos( this.aRotation );
		var sin = Math.sin( this.aRotation );

		var tx = x - this.aX;
		var ty = y - this.aY;

		// Rotate the point about the center of the ellipse.
		x = tx * cos - ty * sin + this.aX;
		y = tx * sin + ty * cos + this.aY;

	}

	return point.set( x, y );

};

EllipseCurve.prototype.copy = function ( source ) {

	Curve.prototype.copy.call( this, source );

	this.aX = source.aX;
	this.aY = source.aY;

	this.xRadius = source.xRadius;
	this.yRadius = source.yRadius;

	this.aStartAngle = source.aStartAngle;
	this.aEndAngle = source.aEndAngle;

	this.aClockwise = source.aClockwise;

	this.aRotation = source.aRotation;

	return this;

};

function SplineCurve( points /* array of Vector2 */ ) {

	Curve.call( this );

	this.type = 'SplineCurve';

	this.points = points || [];

}

SplineCurve.prototype = Object.create( Curve.prototype );
SplineCurve.prototype.constructor = SplineCurve;

SplineCurve.prototype.isSplineCurve = true;

SplineCurve.prototype.getPoint = function ( t, optionalTarget ) {

	var point = optionalTarget || new Vector2();

	var points = this.points;
	var p = ( points.length - 1 ) * t;

	var intPoint = Math.floor( p );
	var weight = p - intPoint;

	var p0 = points[ intPoint === 0 ? intPoint : intPoint - 1 ];
	var p1 = points[ intPoint ];
	var p2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];
	var p3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];

	point.set(
		CatmullRom( weight, p0.x, p1.x, p2.x, p3.x ),
		CatmullRom( weight, p0.y, p1.y, p2.y, p3.y )
	);

	return point;

};

SplineCurve.prototype.copy = function ( source ) {

	Curve.prototype.copy.call( this, source );

	this.points = [];

	for ( var i = 0, l = source.points.length; i < l; i ++ ) {

		var point = source.points[ i ];

		this.points.push( point.clone() );

	}

	return this;

};

function CubicBezierCurve( v0, v1, v2, v3 ) {

	Curve.call( this );

	this.type = 'CubicBezierCurve';

	this.v0 = v0 || new Vector2();
	this.v1 = v1 || new Vector2();
	this.v2 = v2 || new Vector2();
	this.v3 = v3 || new Vector2();

}

CubicBezierCurve.prototype = Object.create( Curve.prototype );
CubicBezierCurve.prototype.constructor = CubicBezierCurve;

CubicBezierCurve.prototype.isCubicBezierCurve = true;

CubicBezierCurve.prototype.getPoint = function ( t, optionalTarget ) {

	var point = optionalTarget || new Vector2();

	var v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;

	point.set(
		CubicBezier( t, v0.x, v1.x, v2.x, v3.x ),
		CubicBezier( t, v0.y, v1.y, v2.y, v3.y )
	);

	return point;

};

CubicBezierCurve.prototype.copy = function ( source ) {

	Curve.prototype.copy.call( this, source );

	this.v0.copy( source.v0 );
	this.v1.copy( source.v1 );
	this.v2.copy( source.v2 );
	this.v3.copy( source.v3 );

	return this;

};

function QuadraticBezierCurve( v0, v1, v2 ) {

	Curve.call( this );

	this.type = 'QuadraticBezierCurve';

	this.v0 = v0 || new Vector2();
	this.v1 = v1 || new Vector2();
	this.v2 = v2 || new Vector2();

}

QuadraticBezierCurve.prototype = Object.create( Curve.prototype );
QuadraticBezierCurve.prototype.constructor = QuadraticBezierCurve;

QuadraticBezierCurve.prototype.isQuadraticBezierCurve = true;

QuadraticBezierCurve.prototype.getPoint = function ( t, optionalTarget ) {

	var point = optionalTarget || new Vector2();

	var v0 = this.v0, v1 = this.v1, v2 = this.v2;

	point.set(
		QuadraticBezier( t, v0.x, v1.x, v2.x ),
		QuadraticBezier( t, v0.y, v1.y, v2.y )
	);

	return point;

};

QuadraticBezierCurve.prototype.copy = function ( source ) {

	Curve.prototype.copy.call( this, source );

	this.v0.copy( source.v0 );
	this.v1.copy( source.v1 );
	this.v2.copy( source.v2 );

	return this;

};

var PathPrototype = Object.assign( Object.create( CurvePath.prototype ), {

	setFromPoints: function ( points ) {

		this.moveTo( points[ 0 ].x, points[ 0 ].y );

		for ( var i = 1, l = points.length; i < l; i ++ ) {

			this.lineTo( points[ i ].x, points[ i ].y );

		}

	},

	moveTo: function ( x, y ) {

		this.currentPoint.set( x, y ); // TODO consider referencing vectors instead of copying?

	},

	lineTo: function ( x, y ) {

		var curve = new LineCurve( this.currentPoint.clone(), new Vector2( x, y ) );
		this.curves.push( curve );

		this.currentPoint.set( x, y );

	},

	quadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {

		var curve = new QuadraticBezierCurve(
			this.currentPoint.clone(),
			new Vector2( aCPx, aCPy ),
			new Vector2( aX, aY )
		);

		this.curves.push( curve );

		this.currentPoint.set( aX, aY );

	},

	bezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {

		var curve = new CubicBezierCurve(
			this.currentPoint.clone(),
			new Vector2( aCP1x, aCP1y ),
			new Vector2( aCP2x, aCP2y ),
			new Vector2( aX, aY )
		);

		this.curves.push( curve );

		this.currentPoint.set( aX, aY );

	},

	splineThru: function ( pts /*Array of Vector*/ ) {

		var npts = [ this.currentPoint.clone() ].concat( pts );

		var curve = new SplineCurve( npts );
		this.curves.push( curve );

		this.currentPoint.copy( pts[ pts.length - 1 ] );

	},

	arc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {

		var x0 = this.currentPoint.x;
		var y0 = this.currentPoint.y;

		this.absarc( aX + x0, aY + y0, aRadius,
			aStartAngle, aEndAngle, aClockwise );

	},

	absarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {

		this.absellipse( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );

	},

	ellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {

		var x0 = this.currentPoint.x;
		var y0 = this.currentPoint.y;

		this.absellipse( aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );

	},

	absellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {

		var curve = new EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );

		if ( this.curves.length > 0 ) {

			// if a previous curve is present, attempt to join
			var firstPoint = curve.getPoint( 0 );

			if ( ! firstPoint.equals( this.currentPoint ) ) {

				this.lineTo( firstPoint.x, firstPoint.y );

			}

		}

		this.curves.push( curve );

		var lastPoint = curve.getPoint( 1 );
		this.currentPoint.copy( lastPoint );

	},

	copy: function ( source ) {

		CurvePath.prototype.copy.call( this, source );

		this.currentPoint.copy( source.currentPoint );

		return this;

	}

} );

/**
 * @author zz85 / http://www.lab4games.net/zz85/blog
 * Creates free form 2d path using series of points, lines or curves.
 **/

function Path( points ) {

	CurvePath.call( this );

	this.type = 'Path';

	this.currentPoint = new Vector2();

	if ( points ) {

		this.setFromPoints( points );

	}

}

Path.prototype = PathPrototype;
PathPrototype.constructor = Path;

/**
 * @author zz85 / http://www.lab4games.net/zz85/blog
 * Defines a 2d shape plane using paths.
 **/

// STEP 1 Create a path.
// STEP 2 Turn path into shape.
// STEP 3 ExtrudeGeometry takes in Shape/Shapes
// STEP 3a - Extract points from each shape, turn to vertices
// STEP 3b - Triangulate each shape, add faces.

function Shape( points ) {

	Path.call( this, points );

	this.type = 'Shape';

	this.holes = [];

}

Shape.prototype = Object.assign( Object.create( PathPrototype ), {

	constructor: Shape,

	getPointsHoles: function ( divisions ) {

		var holesPts = [];

		for ( var i = 0, l = this.holes.length; i < l; i ++ ) {

			holesPts[ i ] = this.holes[ i ].getPoints( divisions );

		}

		return holesPts;

	},

	// get points of shape and holes (keypoints based on segments parameter)

	extractPoints: function ( divisions ) {

		return {

			shape: this.getPoints( divisions ),
			holes: this.getPointsHoles( divisions )

		};

	},

	copy: function ( source ) {

		Path.prototype.copy.call( this, source );

		this.holes = [];

		for ( var i = 0, l = source.holes.length; i < l; i ++ ) {

			var hole = source.holes[ i ];

			this.holes.push( hole.clone() );

		}

		return this;

	}

} );

/**
 * @author zz85 / http://www.lab4games.net/zz85/blog
 * minimal class for proxing functions to Path. Replaces old "extractSubpaths()"
 **/

function ShapePath() {

	this.type = 'ShapePath';

	this.subPaths = [];
	this.currentPath = null;

}

Object.assign( ShapePath.prototype, {

	moveTo: function ( x, y ) {

		this.currentPath = new Path();
		this.subPaths.push( this.currentPath );
		this.currentPath.moveTo( x, y );

	},

	lineTo: function ( x, y ) {

		this.currentPath.lineTo( x, y );

	},

	quadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {

		this.currentPath.quadraticCurveTo( aCPx, aCPy, aX, aY );

	},

	bezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {

		this.currentPath.bezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY );

	},

	splineThru: function ( pts ) {

		this.currentPath.splineThru( pts );

	},

	toShapes: function ( isCCW, noHoles ) {

		function toShapesNoHoles( inSubpaths ) {

			var shapes = [];

			for ( var i = 0, l = inSubpaths.length; i < l; i ++ ) {

				var tmpPath = inSubpaths[ i ];

				var tmpShape = new Shape();
				tmpShape.curves = tmpPath.curves;

				shapes.push( tmpShape );

			}

			return shapes;

		}

		function isPointInsidePolygon( inPt, inPolygon ) {

			var polyLen = inPolygon.length;

			// inPt on polygon contour => immediate success    or
			// toggling of inside/outside at every single! intersection point of an edge
			//  with the horizontal line through inPt, left of inPt
			//  not counting lowerY endpoints of edges and whole edges on that line
			var inside = false;
			for ( var p = polyLen - 1, q = 0; q < polyLen; p = q ++ ) {

				var edgeLowPt = inPolygon[ p ];
				var edgeHighPt = inPolygon[ q ];

				var edgeDx = edgeHighPt.x - edgeLowPt.x;
				var edgeDy = edgeHighPt.y - edgeLowPt.y;

				if ( Math.abs( edgeDy ) > Number.EPSILON ) {

					// not parallel
					if ( edgeDy < 0 ) {

						edgeLowPt = inPolygon[ q ]; edgeDx = - edgeDx;
						edgeHighPt = inPolygon[ p ]; edgeDy = - edgeDy;

					}
					if ( ( inPt.y < edgeLowPt.y ) || ( inPt.y > edgeHighPt.y ) ) 		continue;

					if ( inPt.y === edgeLowPt.y ) {

						if ( inPt.x === edgeLowPt.x )		return	true;		// inPt is on contour ?
						// continue;				// no intersection or edgeLowPt => doesn't count !!!

					} else {

						var perpEdge = edgeDy * ( inPt.x - edgeLowPt.x ) - edgeDx * ( inPt.y - edgeLowPt.y );
						if ( perpEdge === 0 )				return	true;		// inPt is on contour ?
						if ( perpEdge < 0 ) 				continue;
						inside = ! inside;		// true intersection left of inPt

					}

				} else {

					// parallel or collinear
					if ( inPt.y !== edgeLowPt.y ) 		continue;			// parallel
					// edge lies on the same horizontal line as inPt
					if ( ( ( edgeHighPt.x <= inPt.x ) && ( inPt.x <= edgeLowPt.x ) ) ||
						 ( ( edgeLowPt.x <= inPt.x ) && ( inPt.x <= edgeHighPt.x ) ) )		return	true;	// inPt: Point on contour !
					// continue;

				}

			}

			return	inside;

		}

		var isClockWise = ShapeUtils.isClockWise;

		var subPaths = this.subPaths;
		if ( subPaths.length === 0 ) return [];

		if ( noHoles === true )	return	toShapesNoHoles( subPaths );


		var solid, tmpPath, tmpShape, shapes = [];

		if ( subPaths.length === 1 ) {

			tmpPath = subPaths[ 0 ];
			tmpShape = new Shape();
			tmpShape.curves = tmpPath.curves;
			shapes.push( tmpShape );
			return shapes;

		}

		var holesFirst = ! isClockWise( subPaths[ 0 ].getPoints() );
		holesFirst = isCCW ? ! holesFirst : holesFirst;

		// console.log("Holes first", holesFirst);

		var betterShapeHoles = [];
		var newShapes = [];
		var newShapeHoles = [];
		var mainIdx = 0;
		var tmpPoints;

		newShapes[ mainIdx ] = undefined;
		newShapeHoles[ mainIdx ] = [];

		for ( var i = 0, l = subPaths.length; i < l; i ++ ) {

			tmpPath = subPaths[ i ];
			tmpPoints = tmpPath.getPoints();
			solid = isClockWise( tmpPoints );
			solid = isCCW ? ! solid : solid;

			if ( solid ) {

				if ( ( ! holesFirst ) && ( newShapes[ mainIdx ] ) )	mainIdx ++;

				newShapes[ mainIdx ] = { s: new Shape(), p: tmpPoints };
				newShapes[ mainIdx ].s.curves = tmpPath.curves;

				if ( holesFirst )	mainIdx ++;
				newShapeHoles[ mainIdx ] = [];

				//console.log('cw', i);

			} else {

				newShapeHoles[ mainIdx ].push( { h: tmpPath, p: tmpPoints[ 0 ] } );

				//console.log('ccw', i);

			}

		}

		// only Holes? -> probably all Shapes with wrong orientation
		if ( ! newShapes[ 0 ] )	return	toShapesNoHoles( subPaths );


		if ( newShapes.length > 1 ) {

			var ambiguous = false;
			var toChange = [];

			for ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {

				betterShapeHoles[ sIdx ] = [];

			}

			for ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {

				var sho = newShapeHoles[ sIdx ];

				for ( var hIdx = 0; hIdx < sho.length; hIdx ++ ) {

					var ho = sho[ hIdx ];
					var hole_unassigned = true;

					for ( var s2Idx = 0; s2Idx < newShapes.length; s2Idx ++ ) {

						if ( isPointInsidePolygon( ho.p, newShapes[ s2Idx ].p ) ) {

							if ( sIdx !== s2Idx )	toChange.push( { froms: sIdx, tos: s2Idx, hole: hIdx } );
							if ( hole_unassigned ) {

								hole_unassigned = false;
								betterShapeHoles[ s2Idx ].push( ho );

							} else {

								ambiguous = true;

							}

						}

					}
					if ( hole_unassigned ) {

						betterShapeHoles[ sIdx ].push( ho );

					}

				}

			}
			// console.log("ambiguous: ", ambiguous);
			if ( toChange.length > 0 ) {

				// console.log("to change: ", toChange);
				if ( ! ambiguous )	newShapeHoles = betterShapeHoles;

			}

		}

		var tmpHoles;

		for ( var i = 0, il = newShapes.length; i < il; i ++ ) {

			tmpShape = newShapes[ i ].s;
			shapes.push( tmpShape );
			tmpHoles = newShapeHoles[ i ];

			for ( var j = 0, jl = tmpHoles.length; j < jl; j ++ ) {

				tmpShape.holes.push( tmpHoles[ j ].h );

			}

		}

		//console.log("shape", shapes);

		return shapes;

	}

} );

/**
 * @author zz85 / http://www.lab4games.net/zz85/blog
 * @author mrdoob / http://mrdoob.com/
 */

function Font( data ) {

	this.type = 'Font';

	this.data = data;

}

Object.assign( Font.prototype, {

	isFont: true,

	generateShapes: function ( text, size, divisions ) {

		function createPaths( text ) {

			var chars = String( text ).split( '' );
			var scale = size / data.resolution;
			var line_height = ( data.boundingBox.yMax - data.boundingBox.yMin + data.underlineThickness ) * scale;

			var offsetX = 0, offsetY = 0;

			var paths = [];

			for ( var i = 0; i < chars.length; i ++ ) {

				var char = chars[ i ];

				if ( char === '\n' ) {

					offsetX = 0;
					offsetY -= line_height;

				} else {

					var ret = createPath( char, scale, offsetX, offsetY );
					offsetX += ret.offsetX;
					paths.push( ret.path );

				}

			}

			return paths;

		}

		function createPath( c, scale, offsetX, offsetY ) {

			var glyph = data.glyphs[ c ] || data.glyphs[ '?' ];

			if ( ! glyph ) return;

			var path = new ShapePath();

			var pts = [];
			var x, y, cpx, cpy, cpx0, cpy0, cpx1, cpy1, cpx2, cpy2, laste;

			if ( glyph.o ) {

				var outline = glyph._cachedOutline || ( glyph._cachedOutline = glyph.o.split( ' ' ) );

				for ( var i = 0, l = outline.length; i < l; ) {

					var action = outline[ i ++ ];

					switch ( action ) {

						case 'm': // moveTo

							x = outline[ i ++ ] * scale + offsetX;
							y = outline[ i ++ ] * scale + offsetY;

							path.moveTo( x, y );

							break;

						case 'l': // lineTo

							x = outline[ i ++ ] * scale + offsetX;
							y = outline[ i ++ ] * scale + offsetY;

							path.lineTo( x, y );

							break;

						case 'q': // quadraticCurveTo

							cpx = outline[ i ++ ] * scale + offsetX;
							cpy = outline[ i ++ ] * scale + offsetY;
							cpx1 = outline[ i ++ ] * scale + offsetX;
							cpy1 = outline[ i ++ ] * scale + offsetY;

							path.quadraticCurveTo( cpx1, cpy1, cpx, cpy );

							laste = pts[ pts.length - 1 ];

							if ( laste ) {

								cpx0 = laste.x;
								cpy0 = laste.y;

								for ( var i2 = 1; i2 <= divisions; i2 ++ ) {

									var t = i2 / divisions;
									QuadraticBezier( t, cpx0, cpx1, cpx );
									QuadraticBezier( t, cpy0, cpy1, cpy );

								}

							}

							break;

						case 'b': // bezierCurveTo

							cpx = outline[ i ++ ] * scale + offsetX;
							cpy = outline[ i ++ ] * scale + offsetY;
							cpx1 = outline[ i ++ ] * scale + offsetX;
							cpy1 = outline[ i ++ ] * scale + offsetY;
							cpx2 = outline[ i ++ ] * scale + offsetX;
							cpy2 = outline[ i ++ ] * scale + offsetY;

							path.bezierCurveTo( cpx1, cpy1, cpx2, cpy2, cpx, cpy );

							laste = pts[ pts.length - 1 ];

							if ( laste ) {

								cpx0 = laste.x;
								cpy0 = laste.y;

								for ( var i2 = 1; i2 <= divisions; i2 ++ ) {

									var t = i2 / divisions;
									CubicBezier( t, cpx0, cpx1, cpx2, cpx );
									CubicBezier( t, cpy0, cpy1, cpy2, cpy );

								}

							}

							break;

					}

				}

			}

			return { offsetX: glyph.ha * scale, path: path };

		}

		//

		if ( size === undefined ) size = 100;
		if ( divisions === undefined ) divisions = 4;

		var data = this.data;

		var paths = createPaths( text );
		var shapes = [];

		for ( var p = 0, pl = paths.length; p < pl; p ++ ) {

			Array.prototype.push.apply( shapes, paths[ p ].toShapes() );

		}

		return shapes;

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 */

function FontLoader( manager ) {

	this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

}

Object.assign( FontLoader.prototype, {

	load: function ( url, onLoad, onProgress, onError ) {

		var scope = this;

		var loader = new FileLoader( this.manager );
		loader.setPath( this.path );
		loader.load( url, function ( text ) {

			var json;

			try {

				json = JSON.parse( text );

			} catch ( e ) {

				console.warn( 'THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.' );
				json = JSON.parse( text.substring( 65, text.length - 2 ) );

			}

			var font = scope.parse( json );

			if ( onLoad ) onLoad( font );

		}, onProgress, onError );

	},

	parse: function ( json ) {

		return new Font( json );

	},

	setPath: function ( value ) {

		this.path = value;
		return this;

	}

} );

var context;

var AudioContext = {

	getContext: function () {

		if ( context === undefined ) {

			context = new ( window.AudioContext || window.webkitAudioContext )();

		}

		return context;

	},

	setContext: function ( value ) {

		context = value;

	}

};

/**
 * @author Reece Aaron Lecrivain / http://reecenotes.com/
 */

function AudioLoader( manager ) {

	this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

}

Object.assign( AudioLoader.prototype, {

	load: function ( url, onLoad, onProgress, onError ) {

		var loader = new FileLoader( this.manager );
		loader.setResponseType( 'arraybuffer' );
		loader.load( url, function ( buffer ) {

			var context = AudioContext.getContext();

			context.decodeAudioData( buffer, function ( audioBuffer ) {

				onLoad( audioBuffer );

			} );

		}, onProgress, onError );

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 */

function StereoCamera() {

	this.type = 'StereoCamera';

	this.aspect = 1;

	this.eyeSep = 0.064;

	this.cameraL = new PerspectiveCamera();
	this.cameraL.layers.enable( 1 );
	this.cameraL.matrixAutoUpdate = false;

	this.cameraR = new PerspectiveCamera();
	this.cameraR.layers.enable( 2 );
	this.cameraR.matrixAutoUpdate = false;

}

Object.assign( StereoCamera.prototype, {

	update: ( function () {

		var instance, focus, fov, aspect, near, far, zoom, eyeSep;

		var eyeRight = new Matrix4();
		var eyeLeft = new Matrix4();

		return function update( camera ) {

			var needsUpdate = instance !== this || focus !== camera.focus || fov !== camera.fov ||
												aspect !== camera.aspect * this.aspect || near !== camera.near ||
												far !== camera.far || zoom !== camera.zoom || eyeSep !== this.eyeSep;

			if ( needsUpdate ) {

				instance = this;
				focus = camera.focus;
				fov = camera.fov;
				aspect = camera.aspect * this.aspect;
				near = camera.near;
				far = camera.far;
				zoom = camera.zoom;

				// Off-axis stereoscopic effect based on
				// http://paulbourke.net/stereographics/stereorender/

				var projectionMatrix = camera.projectionMatrix.clone();
				eyeSep = this.eyeSep / 2;
				var eyeSepOnProjection = eyeSep * near / focus;
				var ymax = ( near * Math.tan( _Math.DEG2RAD * fov * 0.5 ) ) / zoom;
				var xmin, xmax;

				// translate xOffset

				eyeLeft.elements[ 12 ] = - eyeSep;
				eyeRight.elements[ 12 ] = eyeSep;

				// for left eye

				xmin = - ymax * aspect + eyeSepOnProjection;
				xmax = ymax * aspect + eyeSepOnProjection;

				projectionMatrix.elements[ 0 ] = 2 * near / ( xmax - xmin );
				projectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );

				this.cameraL.projectionMatrix.copy( projectionMatrix );

				// for right eye

				xmin = - ymax * aspect - eyeSepOnProjection;
				xmax = ymax * aspect - eyeSepOnProjection;

				projectionMatrix.elements[ 0 ] = 2 * near / ( xmax - xmin );
				projectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );

				this.cameraR.projectionMatrix.copy( projectionMatrix );

			}

			this.cameraL.matrixWorld.copy( camera.matrixWorld ).multiply( eyeLeft );
			this.cameraR.matrixWorld.copy( camera.matrixWorld ).multiply( eyeRight );

		};

	} )()

} );

/**
 * Camera for rendering cube maps
 *	- renders scene into axis-aligned cube
 *
 * @author alteredq / http://alteredqualia.com/
 */

function AudioListener() {

	Object3D.call( this );

	this.type = 'AudioListener';

	this.context = AudioContext.getContext();

	this.gain = this.context.createGain();
	this.gain.connect( this.context.destination );

	this.filter = null;

}

AudioListener.prototype = Object.assign( Object.create( Object3D.prototype ), {

	constructor: AudioListener,

	getInput: function () {

		return this.gain;

	},

	removeFilter: function ( ) {

		if ( this.filter !== null ) {

			this.gain.disconnect( this.filter );
			this.filter.disconnect( this.context.destination );
			this.gain.connect( this.context.destination );
			this.filter = null;

		}

	},

	getFilter: function () {

		return this.filter;

	},

	setFilter: function ( value ) {

		if ( this.filter !== null ) {

			this.gain.disconnect( this.filter );
			this.filter.disconnect( this.context.destination );

		} else {

			this.gain.disconnect( this.context.destination );

		}

		this.filter = value;
		this.gain.connect( this.filter );
		this.filter.connect( this.context.destination );

	},

	getMasterVolume: function () {

		return this.gain.gain.value;

	},

	setMasterVolume: function ( value ) {

		this.gain.gain.value = value;

	},

	updateMatrixWorld: ( function () {

		var position = new Vector3();
		var quaternion = new Quaternion();
		var scale = new Vector3();

		var orientation = new Vector3();

		return function updateMatrixWorld( force ) {

			Object3D.prototype.updateMatrixWorld.call( this, force );

			var listener = this.context.listener;
			var up = this.up;

			this.matrixWorld.decompose( position, quaternion, scale );

			orientation.set( 0, 0, - 1 ).applyQuaternion( quaternion );

			if ( listener.positionX ) {

				listener.positionX.setValueAtTime( position.x, this.context.currentTime );
				listener.positionY.setValueAtTime( position.y, this.context.currentTime );
				listener.positionZ.setValueAtTime( position.z, this.context.currentTime );
				listener.forwardX.setValueAtTime( orientation.x, this.context.currentTime );
				listener.forwardY.setValueAtTime( orientation.y, this.context.currentTime );
				listener.forwardZ.setValueAtTime( orientation.z, this.context.currentTime );
				listener.upX.setValueAtTime( up.x, this.context.currentTime );
				listener.upY.setValueAtTime( up.y, this.context.currentTime );
				listener.upZ.setValueAtTime( up.z, this.context.currentTime );

			} else {

				listener.setPosition( position.x, position.y, position.z );
				listener.setOrientation( orientation.x, orientation.y, orientation.z, up.x, up.y, up.z );

			}

		};

	} )()

} );

/**
 * @author mrdoob / http://mrdoob.com/
 * @author Reece Aaron Lecrivain / http://reecenotes.com/
 */

function Audio( listener ) {

	Object3D.call( this );

	this.type = 'Audio';

	this.context = listener.context;

	this.gain = this.context.createGain();
	this.gain.connect( listener.getInput() );

	this.autoplay = false;

	this.buffer = null;
	this.loop = false;
	this.startTime = 0;
	this.offset = 0;
	this.playbackRate = 1;
	this.isPlaying = false;
	this.hasPlaybackControl = true;
	this.sourceType = 'empty';

	this.filters = [];

}

Audio.prototype = Object.assign( Object.create( Object3D.prototype ), {

	constructor: Audio,

	getOutput: function () {

		return this.gain;

	},

	setNodeSource: function ( audioNode ) {

		this.hasPlaybackControl = false;
		this.sourceType = 'audioNode';
		this.source = audioNode;
		this.connect();

		return this;

	},

	setBuffer: function ( audioBuffer ) {

		this.buffer = audioBuffer;
		this.sourceType = 'buffer';

		if ( this.autoplay ) this.play();

		return this;

	},

	play: function () {

		if ( this.isPlaying === true ) {

			console.warn( 'THREE.Audio: Audio is already playing.' );
			return;

		}

		if ( this.hasPlaybackControl === false ) {

			console.warn( 'THREE.Audio: this Audio has no playback control.' );
			return;

		}

		var source = this.context.createBufferSource();

		source.buffer = this.buffer;
		source.loop = this.loop;
		source.onended = this.onEnded.bind( this );
		source.playbackRate.setValueAtTime( this.playbackRate, this.startTime );
		this.startTime = this.context.currentTime;
		source.start( this.startTime, this.offset );

		this.isPlaying = true;

		this.source = source;

		return this.connect();

	},

	pause: function () {

		if ( this.hasPlaybackControl === false ) {

			console.warn( 'THREE.Audio: this Audio has no playback control.' );
			return;

		}

		if ( this.isPlaying === true ) {

			this.source.stop();
			this.offset += ( this.context.currentTime - this.startTime ) * this.playbackRate;
			this.isPlaying = false;

		}

		return this;

	},

	stop: function () {

		if ( this.hasPlaybackControl === false ) {

			console.warn( 'THREE.Audio: this Audio has no playback control.' );
			return;

		}

		this.source.stop();
		this.offset = 0;
		this.isPlaying = false;

		return this;

	},

	connect: function () {

		if ( this.filters.length > 0 ) {

			this.source.connect( this.filters[ 0 ] );

			for ( var i = 1, l = this.filters.length; i < l; i ++ ) {

				this.filters[ i - 1 ].connect( this.filters[ i ] );

			}

			this.filters[ this.filters.length - 1 ].connect( this.getOutput() );

		} else {

			this.source.connect( this.getOutput() );

		}

		return this;

	},

	disconnect: function () {

		if ( this.filters.length > 0 ) {

			this.source.disconnect( this.filters[ 0 ] );

			for ( var i = 1, l = this.filters.length; i < l; i ++ ) {

				this.filters[ i - 1 ].disconnect( this.filters[ i ] );

			}

			this.filters[ this.filters.length - 1 ].disconnect( this.getOutput() );

		} else {

			this.source.disconnect( this.getOutput() );

		}

		return this;

	},

	getFilters: function () {

		return this.filters;

	},

	setFilters: function ( value ) {

		if ( ! value ) value = [];

		if ( this.isPlaying === true ) {

			this.disconnect();
			this.filters = value;
			this.connect();

		} else {

			this.filters = value;

		}

		return this;

	},

	getFilter: function () {

		return this.getFilters()[ 0 ];

	},

	setFilter: function ( filter ) {

		return this.setFilters( filter ? [ filter ] : [] );

	},

	setPlaybackRate: function ( value ) {

		if ( this.hasPlaybackControl === false ) {

			console.warn( 'THREE.Audio: this Audio has no playback control.' );
			return;

		}

		this.playbackRate = value;

		if ( this.isPlaying === true ) {

			this.source.playbackRate.setValueAtTime( this.playbackRate, this.context.currentTime );

		}

		return this;

	},

	getPlaybackRate: function () {

		return this.playbackRate;

	},

	onEnded: function () {

		this.isPlaying = false;

	},

	getLoop: function () {

		if ( this.hasPlaybackControl === false ) {

			console.warn( 'THREE.Audio: this Audio has no playback control.' );
			return false;

		}

		return this.loop;

	},

	setLoop: function ( value ) {

		if ( this.hasPlaybackControl === false ) {

			console.warn( 'THREE.Audio: this Audio has no playback control.' );
			return;

		}

		this.loop = value;

		if ( this.isPlaying === true ) {

			this.source.loop = this.loop;

		}

		return this;

	},

	getVolume: function () {

		return this.gain.gain.value;

	},

	setVolume: function ( value ) {

		this.gain.gain.value = value;

		return this;

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 */

function PositionalAudio( listener ) {

	Audio.call( this, listener );

	this.panner = this.context.createPanner();
	this.panner.connect( this.gain );

}

PositionalAudio.prototype = Object.assign( Object.create( Audio.prototype ), {

	constructor: PositionalAudio,

	getOutput: function () {

		return this.panner;

	},

	getRefDistance: function () {

		return this.panner.refDistance;

	},

	setRefDistance: function ( value ) {

		this.panner.refDistance = value;

	},

	getRolloffFactor: function () {

		return this.panner.rolloffFactor;

	},

	setRolloffFactor: function ( value ) {

		this.panner.rolloffFactor = value;

	},

	getDistanceModel: function () {

		return this.panner.distanceModel;

	},

	setDistanceModel: function ( value ) {

		this.panner.distanceModel = value;

	},

	getMaxDistance: function () {

		return this.panner.maxDistance;

	},

	setMaxDistance: function ( value ) {

		this.panner.maxDistance = value;

	},

	updateMatrixWorld: ( function () {

		var position = new Vector3();

		return function updateMatrixWorld( force ) {

			Object3D.prototype.updateMatrixWorld.call( this, force );

			position.setFromMatrixPosition( this.matrixWorld );

			this.panner.setPosition( position.x, position.y, position.z );

		};

	} )()


} );

/**
 * @author mrdoob / http://mrdoob.com/
 */

function AudioAnalyser( audio, fftSize ) {

	this.analyser = audio.context.createAnalyser();
	this.analyser.fftSize = fftSize !== undefined ? fftSize : 2048;

	this.data = new Uint8Array( this.analyser.frequencyBinCount );

	audio.getOutput().connect( this.analyser );

}

Object.assign( AudioAnalyser.prototype, {

	getFrequencyData: function () {

		this.analyser.getByteFrequencyData( this.data );

		return this.data;

	},

	getAverageFrequency: function () {

		var value = 0, data = this.getFrequencyData();

		for ( var i = 0; i < data.length; i ++ ) {

			value += data[ i ];

		}

		return value / data.length;

	}

} );

/**
 *
 * Buffered scene graph property that allows weighted accumulation.
 *
 *
 * @author Ben Houston / http://clara.io/
 * @author David Sarno / http://lighthaus.us/
 * @author tschw
 */

function PropertyMixer( binding, typeName, valueSize ) {

	this.binding = binding;
	this.valueSize = valueSize;

	var bufferType = Float64Array,
		mixFunction;

	switch ( typeName ) {

		case 'quaternion':
			mixFunction = this._slerp;
			break;

		case 'string':
		case 'bool':
			bufferType = Array;
			mixFunction = this._select;
			break;

		default:
			mixFunction = this._lerp;

	}

	this.buffer = new bufferType( valueSize * 4 );
	// layout: [ incoming | accu0 | accu1 | orig ]
	//
	// interpolators can use .buffer as their .result
	// the data then goes to 'incoming'
	//
	// 'accu0' and 'accu1' are used frame-interleaved for
	// the cumulative result and are compared to detect
	// changes
	//
	// 'orig' stores the original state of the property

	this._mixBufferRegion = mixFunction;

	this.cumulativeWeight = 0;

	this.useCount = 0;
	this.referenceCount = 0;

}

Object.assign( PropertyMixer.prototype, {

	// accumulate data in the 'incoming' region into 'accu<i>'
	accumulate: function ( accuIndex, weight ) {

		// note: happily accumulating nothing when weight = 0, the caller knows
		// the weight and shouldn't have made the call in the first place

		var buffer = this.buffer,
			stride = this.valueSize,
			offset = accuIndex * stride + stride,

			currentWeight = this.cumulativeWeight;

		if ( currentWeight === 0 ) {

			// accuN := incoming * weight

			for ( var i = 0; i !== stride; ++ i ) {

				buffer[ offset + i ] = buffer[ i ];

			}

			currentWeight = weight;

		} else {

			// accuN := accuN + incoming * weight

			currentWeight += weight;
			var mix = weight / currentWeight;
			this._mixBufferRegion( buffer, offset, 0, mix, stride );

		}

		this.cumulativeWeight = currentWeight;

	},

	// apply the state of 'accu<i>' to the binding when accus differ
	apply: function ( accuIndex ) {

		var stride = this.valueSize,
			buffer = this.buffer,
			offset = accuIndex * stride + stride,

			weight = this.cumulativeWeight,

			binding = this.binding;

		this.cumulativeWeight = 0;

		if ( weight < 1 ) {

			// accuN := accuN + original * ( 1 - cumulativeWeight )

			var originalValueOffset = stride * 3;

			this._mixBufferRegion(
				buffer, offset, originalValueOffset, 1 - weight, stride );

		}

		for ( var i = stride, e = stride + stride; i !== e; ++ i ) {

			if ( buffer[ i ] !== buffer[ i + stride ] ) {

				// value has changed -> update scene graph

				binding.setValue( buffer, offset );
				break;

			}

		}

	},

	// remember the state of the bound property and copy it to both accus
	saveOriginalState: function () {

		var binding = this.binding;

		var buffer = this.buffer,
			stride = this.valueSize,

			originalValueOffset = stride * 3;

		binding.getValue( buffer, originalValueOffset );

		// accu[0..1] := orig -- initially detect changes against the original
		for ( var i = stride, e = originalValueOffset; i !== e; ++ i ) {

			buffer[ i ] = buffer[ originalValueOffset + ( i % stride ) ];

		}

		this.cumulativeWeight = 0;

	},

	// apply the state previously taken via 'saveOriginalState' to the binding
	restoreOriginalState: function () {

		var originalValueOffset = this.valueSize * 3;
		this.binding.setValue( this.buffer, originalValueOffset );

	},


	// mix functions

	_select: function ( buffer, dstOffset, srcOffset, t, stride ) {

		if ( t >= 0.5 ) {

			for ( var i = 0; i !== stride; ++ i ) {

				buffer[ dstOffset + i ] = buffer[ srcOffset + i ];

			}

		}

	},

	_slerp: function ( buffer, dstOffset, srcOffset, t ) {

		Quaternion.slerpFlat( buffer, dstOffset, buffer, dstOffset, buffer, srcOffset, t );

	},

	_lerp: function ( buffer, dstOffset, srcOffset, t, stride ) {

		var s = 1 - t;

		for ( var i = 0; i !== stride; ++ i ) {

			var j = dstOffset + i;

			buffer[ j ] = buffer[ j ] * s + buffer[ srcOffset + i ] * t;

		}

	}

} );

/**
 *
 * A reference to a real property in the scene graph.
 *
 *
 * @author Ben Houston / http://clara.io/
 * @author David Sarno / http://lighthaus.us/
 * @author tschw
 */

function Composite( targetGroup, path, optionalParsedPath ) {

	var parsedPath = optionalParsedPath || PropertyBinding.parseTrackName( path );

	this._targetGroup = targetGroup;
	this._bindings = targetGroup.subscribe_( path, parsedPath );

}

Object.assign( Composite.prototype, {

	getValue: function ( array, offset ) {

		this.bind(); // bind all binding

		var firstValidIndex = this._targetGroup.nCachedObjects_,
			binding = this._bindings[ firstValidIndex ];

		// and only call .getValue on the first
		if ( binding !== undefined ) binding.getValue( array, offset );

	},

	setValue: function ( array, offset ) {

		var bindings = this._bindings;

		for ( var i = this._targetGroup.nCachedObjects_,
				  n = bindings.length; i !== n; ++ i ) {

			bindings[ i ].setValue( array, offset );

		}

	},

	bind: function () {

		var bindings = this._bindings;

		for ( var i = this._targetGroup.nCachedObjects_,
				  n = bindings.length; i !== n; ++ i ) {

			bindings[ i ].bind();

		}

	},

	unbind: function () {

		var bindings = this._bindings;

		for ( var i = this._targetGroup.nCachedObjects_,
				  n = bindings.length; i !== n; ++ i ) {

			bindings[ i ].unbind();

		}

	}

} );


function PropertyBinding( rootNode, path, parsedPath ) {

	this.path = path;
	this.parsedPath = parsedPath || PropertyBinding.parseTrackName( path );

	this.node = PropertyBinding.findNode( rootNode, this.parsedPath.nodeName ) || rootNode;

	this.rootNode = rootNode;

}

Object.assign( PropertyBinding, {

	Composite: Composite,

	create: function ( root, path, parsedPath ) {

		if ( ! ( root && root.isAnimationObjectGroup ) ) {

			return new PropertyBinding( root, path, parsedPath );

		} else {

			return new PropertyBinding.Composite( root, path, parsedPath );

		}

	},

	/**
	 * Replaces spaces with underscores and removes unsupported characters from
	 * node names, to ensure compatibility with parseTrackName().
	 *
	 * @param  {string} name Node name to be sanitized.
	 * @return {string}
	 */
	sanitizeNodeName: function ( name ) {

		return name.replace( /\s/g, '_' ).replace( /[^\w-]/g, '' );

	},

	parseTrackName: function () {

		// Parent directories, delimited by '/' or ':'. Currently unused, but must
		// be matched to parse the rest of the track name.
		var directoryRe = /((?:[\w-]+[\/:])*)/;

		// Target node. May contain word characters (a-zA-Z0-9_) and '.' or '-'.
		var nodeRe = /([\w-\.]+)?/;

		// Object on target node, and accessor. Name may contain only word
		// characters. Accessor may contain any character except closing bracket.
		var objectRe = /(?:\.([\w-]+)(?:\[(.+)\])?)?/;

		// Property and accessor. May contain only word characters. Accessor may
		// contain any non-bracket characters.
		var propertyRe = /\.([\w-]+)(?:\[(.+)\])?/;

		var trackRe = new RegExp( ''
			+ '^'
			+ directoryRe.source
			+ nodeRe.source
			+ objectRe.source
			+ propertyRe.source
			+ '$'
		);

		var supportedObjectNames = [ 'material', 'materials', 'bones' ];

		return function ( trackName ) {

			var matches = trackRe.exec( trackName );

			if ( ! matches ) {

				throw new Error( 'PropertyBinding: Cannot parse trackName: ' + trackName );

			}

			var results = {
				// directoryName: matches[ 1 ], // (tschw) currently unused
				nodeName: matches[ 2 ],
				objectName: matches[ 3 ],
				objectIndex: matches[ 4 ],
				propertyName: matches[ 5 ], // required
				propertyIndex: matches[ 6 ]
			};

			var lastDot = results.nodeName && results.nodeName.lastIndexOf( '.' );

			if ( lastDot !== undefined && lastDot !== - 1 ) {

				var objectName = results.nodeName.substring( lastDot + 1 );

				// Object names must be checked against a whitelist. Otherwise, there
				// is no way to parse 'foo.bar.baz': 'baz' must be a property, but
				// 'bar' could be the objectName, or part of a nodeName (which can
				// include '.' characters).
				if ( supportedObjectNames.indexOf( objectName ) !== - 1 ) {

					results.nodeName = results.nodeName.substring( 0, lastDot );
					results.objectName = objectName;

				}

			}

			if ( results.propertyName === null || results.propertyName.length === 0 ) {

				throw new Error( 'PropertyBinding: can not parse propertyName from trackName: ' + trackName );

			}

			return results;

		};

	}(),

	findNode: function ( root, nodeName ) {

		if ( ! nodeName || nodeName === "" || nodeName === "root" || nodeName === "." || nodeName === - 1 || nodeName === root.name || nodeName === root.uuid ) {

			return root;

		}

		// search into skeleton bones.
		if ( root.skeleton ) {

			var searchSkeleton = function ( skeleton ) {

				for ( var i = 0; i < skeleton.bones.length; i ++ ) {

					var bone = skeleton.bones[ i ];

					if ( bone.name === nodeName ) {

						return bone;

					}

				}

				return null;

			};

			var bone = searchSkeleton( root.skeleton );

			if ( bone ) {

				return bone;

			}

		}

		// search into node subtree.
		if ( root.children ) {

			var searchNodeSubtree = function ( children ) {

				for ( var i = 0; i < children.length; i ++ ) {

					var childNode = children[ i ];

					if ( childNode.name === nodeName || childNode.uuid === nodeName ) {

						return childNode;

					}

					var result = searchNodeSubtree( childNode.children );

					if ( result ) return result;

				}

				return null;

			};

			var subTreeNode = searchNodeSubtree( root.children );

			if ( subTreeNode ) {

				return subTreeNode;

			}

		}

		return null;

	}

} );

Object.assign( PropertyBinding.prototype, { // prototype, continued

	// these are used to "bind" a nonexistent property
	_getValue_unavailable: function () {},
	_setValue_unavailable: function () {},

	BindingType: {
		Direct: 0,
		EntireArray: 1,
		ArrayElement: 2,
		HasFromToArray: 3
	},

	Versioning: {
		None: 0,
		NeedsUpdate: 1,
		MatrixWorldNeedsUpdate: 2
	},

	GetterByBindingType: [

		function getValue_direct( buffer, offset ) {

			buffer[ offset ] = this.node[ this.propertyName ];

		},

		function getValue_array( buffer, offset ) {

			var source = this.resolvedProperty;

			for ( var i = 0, n = source.length; i !== n; ++ i ) {

				buffer[ offset ++ ] = source[ i ];

			}

		},

		function getValue_arrayElement( buffer, offset ) {

			buffer[ offset ] = this.resolvedProperty[ this.propertyIndex ];

		},

		function getValue_toArray( buffer, offset ) {

			this.resolvedProperty.toArray( buffer, offset );

		}

	],

	SetterByBindingTypeAndVersioning: [

		[
			// Direct

			function setValue_direct( buffer, offset ) {

				this.targetObject[ this.propertyName ] = buffer[ offset ];

			},

			function setValue_direct_setNeedsUpdate( buffer, offset ) {

				this.targetObject[ this.propertyName ] = buffer[ offset ];
				this.targetObject.needsUpdate = true;

			},

			function setValue_direct_setMatrixWorldNeedsUpdate( buffer, offset ) {

				this.targetObject[ this.propertyName ] = buffer[ offset ];
				this.targetObject.matrixWorldNeedsUpdate = true;

			}

		], [

			// EntireArray

			function setValue_array( buffer, offset ) {

				var dest = this.resolvedProperty;

				for ( var i = 0, n = dest.length; i !== n; ++ i ) {

					dest[ i ] = buffer[ offset ++ ];

				}

			},

			function setValue_array_setNeedsUpdate( buffer, offset ) {

				var dest = this.resolvedProperty;

				for ( var i = 0, n = dest.length; i !== n; ++ i ) {

					dest[ i ] = buffer[ offset ++ ];

				}

				this.targetObject.needsUpdate = true;

			},

			function setValue_array_setMatrixWorldNeedsUpdate( buffer, offset ) {

				var dest = this.resolvedProperty;

				for ( var i = 0, n = dest.length; i !== n; ++ i ) {

					dest[ i ] = buffer[ offset ++ ];

				}

				this.targetObject.matrixWorldNeedsUpdate = true;

			}

		], [

			// ArrayElement

			function setValue_arrayElement( buffer, offset ) {

				this.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];

			},

			function setValue_arrayElement_setNeedsUpdate( buffer, offset ) {

				this.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];
				this.targetObject.needsUpdate = true;

			},

			function setValue_arrayElement_setMatrixWorldNeedsUpdate( buffer, offset ) {

				this.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];
				this.targetObject.matrixWorldNeedsUpdate = true;

			}

		], [

			// HasToFromArray

			function setValue_fromArray( buffer, offset ) {

				this.resolvedProperty.fromArray( buffer, offset );

			},

			function setValue_fromArray_setNeedsUpdate( buffer, offset ) {

				this.resolvedProperty.fromArray( buffer, offset );
				this.targetObject.needsUpdate = true;

			},

			function setValue_fromArray_setMatrixWorldNeedsUpdate( buffer, offset ) {

				this.resolvedProperty.fromArray( buffer, offset );
				this.targetObject.matrixWorldNeedsUpdate = true;

			}

		]

	],

	getValue: function getValue_unbound( targetArray, offset ) {

		this.bind();
		this.getValue( targetArray, offset );

		// Note: This class uses a State pattern on a per-method basis:
		// 'bind' sets 'this.getValue' / 'setValue' and shadows the
		// prototype version of these methods with one that represents
		// the bound state. When the property is not found, the methods
		// become no-ops.

	},

	setValue: function getValue_unbound( sourceArray, offset ) {

		this.bind();
		this.setValue( sourceArray, offset );

	},

	// create getter / setter pair for a property in the scene graph
	bind: function () {

		var targetObject = this.node,
			parsedPath = this.parsedPath,

			objectName = parsedPath.objectName,
			propertyName = parsedPath.propertyName,
			propertyIndex = parsedPath.propertyIndex;

		if ( ! targetObject ) {

			targetObject = PropertyBinding.findNode( this.rootNode, parsedPath.nodeName ) || this.rootNode;

			this.node = targetObject;

		}

		// set fail state so we can just 'return' on error
		this.getValue = this._getValue_unavailable;
		this.setValue = this._setValue_unavailable;

		// ensure there is a value node
		if ( ! targetObject ) {

			console.error( 'THREE.PropertyBinding: Trying to update node for track: ' + this.path + ' but it wasn\'t found.' );
			return;

		}

		if ( objectName ) {

			var objectIndex = parsedPath.objectIndex;

			// special cases were we need to reach deeper into the hierarchy to get the face materials....
			switch ( objectName ) {

				case 'materials':

					if ( ! targetObject.material ) {

						console.error( 'THREE.PropertyBinding: Can not bind to material as node does not have a material.', this );
						return;

					}

					if ( ! targetObject.material.materials ) {

						console.error( 'THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.', this );
						return;

					}

					targetObject = targetObject.material.materials;

					break;

				case 'bones':

					if ( ! targetObject.skeleton ) {

						console.error( 'THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.', this );
						return;

					}

					// potential future optimization: skip this if propertyIndex is already an integer
					// and convert the integer string to a true integer.

					targetObject = targetObject.skeleton.bones;

					// support resolving morphTarget names into indices.
					for ( var i = 0; i < targetObject.length; i ++ ) {

						if ( targetObject[ i ].name === objectIndex ) {

							objectIndex = i;
							break;

						}

					}

					break;

				default:

					if ( targetObject[ objectName ] === undefined ) {

						console.error( 'THREE.PropertyBinding: Can not bind to objectName of node undefined.', this );
						return;

					}

					targetObject = targetObject[ objectName ];

			}


			if ( objectIndex !== undefined ) {

				if ( targetObject[ objectIndex ] === undefined ) {

					console.error( 'THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.', this, targetObject );
					return;

				}

				targetObject = targetObject[ objectIndex ];

			}

		}

		// resolve property
		var nodeProperty = targetObject[ propertyName ];

		if ( nodeProperty === undefined ) {

			var nodeName = parsedPath.nodeName;

			console.error( 'THREE.PropertyBinding: Trying to update property for track: ' + nodeName +
				'.' + propertyName + ' but it wasn\'t found.', targetObject );
			return;

		}

		// determine versioning scheme
		var versioning = this.Versioning.None;

		if ( targetObject.needsUpdate !== undefined ) { // material

			versioning = this.Versioning.NeedsUpdate;
			this.targetObject = targetObject;

		} else if ( targetObject.matrixWorldNeedsUpdate !== undefined ) { // node transform

			versioning = this.Versioning.MatrixWorldNeedsUpdate;
			this.targetObject = targetObject;

		}

		// determine how the property gets bound
		var bindingType = this.BindingType.Direct;

		if ( propertyIndex !== undefined ) {

			// access a sub element of the property array (only primitives are supported right now)

			if ( propertyName === "morphTargetInfluences" ) {

				// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.

				// support resolving morphTarget names into indices.
				if ( ! targetObject.geometry ) {

					console.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.', this );
					return;

				}

				if ( targetObject.geometry.isBufferGeometry ) {

					if ( ! targetObject.geometry.morphAttributes ) {

						console.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.', this );
						return;

					}

					for ( var i = 0; i < this.node.geometry.morphAttributes.position.length; i ++ ) {

						if ( targetObject.geometry.morphAttributes.position[ i ].name === propertyIndex ) {

							propertyIndex = i;
							break;

						}

					}


				} else {

					if ( ! targetObject.geometry.morphTargets ) {

						console.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphTargets.', this );
						return;

					}

					for ( var i = 0; i < this.node.geometry.morphTargets.length; i ++ ) {

						if ( targetObject.geometry.morphTargets[ i ].name === propertyIndex ) {

							propertyIndex = i;
							break;

						}

					}

				}

			}

			bindingType = this.BindingType.ArrayElement;

			this.resolvedProperty = nodeProperty;
			this.propertyIndex = propertyIndex;

		} else if ( nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined ) {

			// must use copy for Object3D.Euler/Quaternion

			bindingType = this.BindingType.HasFromToArray;

			this.resolvedProperty = nodeProperty;

		} else if ( Array.isArray( nodeProperty ) ) {

			bindingType = this.BindingType.EntireArray;

			this.resolvedProperty = nodeProperty;

		} else {

			this.propertyName = propertyName;

		}

		// select getter / setter
		this.getValue = this.GetterByBindingType[ bindingType ];
		this.setValue = this.SetterByBindingTypeAndVersioning[ bindingType ][ versioning ];

	},

	unbind: function () {

		this.node = null;

		// back to the prototype version of getValue / setValue
		// note: avoiding to mutate the shape of 'this' via 'delete'
		this.getValue = this._getValue_unbound;
		this.setValue = this._setValue_unbound;

	}

} );

//!\ DECLARE ALIAS AFTER assign prototype !
Object.assign( PropertyBinding.prototype, {

	// initial state of these methods that calls 'bind'
	_getValue_unbound: PropertyBinding.prototype.getValue,
	_setValue_unbound: PropertyBinding.prototype.setValue,

} );

/**
 *
 * A group of objects that receives a shared animation state.
 *
 * Usage:
 *
 * 	-	Add objects you would otherwise pass as 'root' to the
 * 		constructor or the .clipAction method of AnimationMixer.
 *
 * 	-	Instead pass this object as 'root'.
 *
 * 	-	You can also add and remove objects later when the mixer
 * 		is running.
 *
 * Note:
 *
 *  	Objects of this class appear as one object to the mixer,
 *  	so cache control of the individual objects must be done
 *  	on the group.
 *
 * Limitation:
 *
 * 	- 	The animated properties must be compatible among the
 * 		all objects in the group.
 *
 *  -	A single property can either be controlled through a
 *  	target group or directly, but not both.
 *
 * @author tschw
 */

function AnimationObjectGroup() {

	this.uuid = _Math.generateUUID();

	// cached objects followed by the active ones
	this._objects = Array.prototype.slice.call( arguments );

	this.nCachedObjects_ = 0;			// threshold
	// note: read by PropertyBinding.Composite

	var indices = {};
	this._indicesByUUID = indices;		// for bookkeeping

	for ( var i = 0, n = arguments.length; i !== n; ++ i ) {

		indices[ arguments[ i ].uuid ] = i;

	}

	this._paths = [];					// inside: string
	this._parsedPaths = [];				// inside: { we don't care, here }
	this._bindings = []; 				// inside: Array< PropertyBinding >
	this._bindingsIndicesByPath = {}; 	// inside: indices in these arrays

	var scope = this;

	this.stats = {

		objects: {
			get total() {

				return scope._objects.length;

			},
			get inUse() {

				return this.total - scope.nCachedObjects_;

			}
		},
		get bindingsPerObject() {

			return scope._bindings.length;

		}

	};

}

Object.assign( AnimationObjectGroup.prototype, {

	isAnimationObjectGroup: true,

	add: function () {

		var objects = this._objects,
			nObjects = objects.length,
			nCachedObjects = this.nCachedObjects_,
			indicesByUUID = this._indicesByUUID,
			paths = this._paths,
			parsedPaths = this._parsedPaths,
			bindings = this._bindings,
			nBindings = bindings.length;

		for ( var i = 0, n = arguments.length; i !== n; ++ i ) {

			var object = arguments[ i ],
				uuid = object.uuid,
				index = indicesByUUID[ uuid ],
				knownObject = undefined;

			if ( index === undefined ) {

				// unknown object -> add it to the ACTIVE region

				index = nObjects ++;
				indicesByUUID[ uuid ] = index;
				objects.push( object );

				// accounting is done, now do the same for all bindings

				for ( var j = 0, m = nBindings; j !== m; ++ j ) {

					bindings[ j ].push( new PropertyBinding( object, paths[ j ], parsedPaths[ j ] ) );

				}

			} else if ( index < nCachedObjects ) {

				knownObject = objects[ index ];

				// move existing object to the ACTIVE region

				var firstActiveIndex = -- nCachedObjects,
					lastCachedObject = objects[ firstActiveIndex ];

				indicesByUUID[ lastCachedObject.uuid ] = index;
				objects[ index ] = lastCachedObject;

				indicesByUUID[ uuid ] = firstActiveIndex;
				objects[ firstActiveIndex ] = object;

				// accounting is done, now do the same for all bindings

				for ( var j = 0, m = nBindings; j !== m; ++ j ) {

					var bindingsForPath = bindings[ j ],
						lastCached = bindingsForPath[ firstActiveIndex ],
						binding = bindingsForPath[ index ];

					bindingsForPath[ index ] = lastCached;

					if ( binding === undefined ) {

						// since we do not bother to create new bindings
						// for objects that are cached, the binding may
						// or may not exist

						binding = new PropertyBinding( object, paths[ j ], parsedPaths[ j ] );

					}

					bindingsForPath[ firstActiveIndex ] = binding;

				}

			} else if ( objects[ index ] !== knownObject ) {

				console.error( 'THREE.AnimationObjectGroup: Different objects with the same UUID ' +
						'detected. Clean the caches or recreate your infrastructure when reloading scenes.' );

			} // else the object is already where we want it to be

		} // for arguments

		this.nCachedObjects_ = nCachedObjects;

	},

	remove: function () {

		var objects = this._objects,
			nCachedObjects = this.nCachedObjects_,
			indicesByUUID = this._indicesByUUID,
			bindings = this._bindings,
			nBindings = bindings.length;

		for ( var i = 0, n = arguments.length; i !== n; ++ i ) {

			var object = arguments[ i ],
				uuid = object.uuid,
				index = indicesByUUID[ uuid ];

			if ( index !== undefined && index >= nCachedObjects ) {

				// move existing object into the CACHED region

				var lastCachedIndex = nCachedObjects ++,
					firstActiveObject = objects[ lastCachedIndex ];

				indicesByUUID[ firstActiveObject.uuid ] = index;
				objects[ index ] = firstActiveObject;

				indicesByUUID[ uuid ] = lastCachedIndex;
				objects[ lastCachedIndex ] = object;

				// accounting is done, now do the same for all bindings

				for ( var j = 0, m = nBindings; j !== m; ++ j ) {

					var bindingsForPath = bindings[ j ],
						firstActive = bindingsForPath[ lastCachedIndex ],
						binding = bindingsForPath[ index ];

					bindingsForPath[ index ] = firstActive;
					bindingsForPath[ lastCachedIndex ] = binding;

				}

			}

		} // for arguments

		this.nCachedObjects_ = nCachedObjects;

	},

	// remove & forget
	uncache: function () {

		var objects = this._objects,
			nObjects = objects.length,
			nCachedObjects = this.nCachedObjects_,
			indicesByUUID = this._indicesByUUID,
			bindings = this._bindings,
			nBindings = bindings.length;

		for ( var i = 0, n = arguments.length; i !== n; ++ i ) {

			var object = arguments[ i ],
				uuid = object.uuid,
				index = indicesByUUID[ uuid ];

			if ( index !== undefined ) {

				delete indicesByUUID[ uuid ];

				if ( index < nCachedObjects ) {

					// object is cached, shrink the CACHED region

					var firstActiveIndex = -- nCachedObjects,
						lastCachedObject = objects[ firstActiveIndex ],
						lastIndex = -- nObjects,
						lastObject = objects[ lastIndex ];

					// last cached object takes this object's place
					indicesByUUID[ lastCachedObject.uuid ] = index;
					objects[ index ] = lastCachedObject;

					// last object goes to the activated slot and pop
					indicesByUUID[ lastObject.uuid ] = firstActiveIndex;
					objects[ firstActiveIndex ] = lastObject;
					objects.pop();

					// accounting is done, now do the same for all bindings

					for ( var j = 0, m = nBindings; j !== m; ++ j ) {

						var bindingsForPath = bindings[ j ],
							lastCached = bindingsForPath[ firstActiveIndex ],
							last = bindingsForPath[ lastIndex ];

						bindingsForPath[ index ] = lastCached;
						bindingsForPath[ firstActiveIndex ] = last;
						bindingsForPath.pop();

					}

				} else {

					// object is active, just swap with the last and pop

					var lastIndex = -- nObjects,
						lastObject = objects[ lastIndex ];

					indicesByUUID[ lastObject.uuid ] = index;
					objects[ index ] = lastObject;
					objects.pop();

					// accounting is done, now do the same for all bindings

					for ( var j = 0, m = nBindings; j !== m; ++ j ) {

						var bindingsForPath = bindings[ j ];

						bindingsForPath[ index ] = bindingsForPath[ lastIndex ];
						bindingsForPath.pop();

					}

				} // cached or active

			} // if object is known

		} // for arguments

		this.nCachedObjects_ = nCachedObjects;

	},

	// Internal interface used by befriended PropertyBinding.Composite:

	subscribe_: function ( path, parsedPath ) {

		// returns an array of bindings for the given path that is changed
		// according to the contained objects in the group

		var indicesByPath = this._bindingsIndicesByPath,
			index = indicesByPath[ path ],
			bindings = this._bindings;

		if ( index !== undefined ) return bindings[ index ];

		var paths = this._paths,
			parsedPaths = this._parsedPaths,
			objects = this._objects,
			nObjects = objects.length,
			nCachedObjects = this.nCachedObjects_,
			bindingsForPath = new Array( nObjects );

		index = bindings.length;

		indicesByPath[ path ] = index;

		paths.push( path );
		parsedPaths.push( parsedPath );
		bindings.push( bindingsForPath );

		for ( var i = nCachedObjects, n = objects.length; i !== n; ++ i ) {

			var object = objects[ i ];
			bindingsForPath[ i ] = new PropertyBinding( object, path, parsedPath );

		}

		return bindingsForPath;

	},

	unsubscribe_: function ( path ) {

		// tells the group to forget about a property path and no longer
		// update the array previously obtained with 'subscribe_'

		var indicesByPath = this._bindingsIndicesByPath,
			index = indicesByPath[ path ];

		if ( index !== undefined ) {

			var paths = this._paths,
				parsedPaths = this._parsedPaths,
				bindings = this._bindings,
				lastBindingsIndex = bindings.length - 1,
				lastBindings = bindings[ lastBindingsIndex ],
				lastBindingsPath = path[ lastBindingsIndex ];

			indicesByPath[ lastBindingsPath ] = index;

			bindings[ index ] = lastBindings;
			bindings.pop();

			parsedPaths[ index ] = parsedPaths[ lastBindingsIndex ];
			parsedPaths.pop();

			paths[ index ] = paths[ lastBindingsIndex ];
			paths.pop();

		}

	}

} );

/**
 *
 * Action provided by AnimationMixer for scheduling clip playback on specific
 * objects.
 *
 * @author Ben Houston / http://clara.io/
 * @author David Sarno / http://lighthaus.us/
 * @author tschw
 *
 */

function AnimationAction( mixer, clip, localRoot ) {

	this._mixer = mixer;
	this._clip = clip;
	this._localRoot = localRoot || null;

	var tracks = clip.tracks,
		nTracks = tracks.length,
		interpolants = new Array( nTracks );

	var interpolantSettings = {
		endingStart: ZeroCurvatureEnding,
		endingEnd: ZeroCurvatureEnding
	};

	for ( var i = 0; i !== nTracks; ++ i ) {

		var interpolant = tracks[ i ].createInterpolant( null );
		interpolants[ i ] = interpolant;
		interpolant.settings = interpolantSettings;

	}

	this._interpolantSettings = interpolantSettings;

	this._interpolants = interpolants;	// bound by the mixer

	// inside: PropertyMixer (managed by the mixer)
	this._propertyBindings = new Array( nTracks );

	this._cacheIndex = null;			// for the memory manager
	this._byClipCacheIndex = null;		// for the memory manager

	this._timeScaleInterpolant = null;
	this._weightInterpolant = null;

	this.loop = LoopRepeat;
	this._loopCount = - 1;

	// global mixer time when the action is to be started
	// it's set back to 'null' upon start of the action
	this._startTime = null;

	// scaled local time of the action
	// gets clamped or wrapped to 0..clip.duration according to loop
	this.time = 0;

	this.timeScale = 1;
	this._effectiveTimeScale = 1;

	this.weight = 1;
	this._effectiveWeight = 1;

	this.repetitions = Infinity; 		// no. of repetitions when looping

	this.paused = false;				// true -> zero effective time scale
	this.enabled = true;				// false -> zero effective weight

	this.clampWhenFinished 	= false;	// keep feeding the last frame?

	this.zeroSlopeAtStart 	= true;		// for smooth interpolation w/o separate
	this.zeroSlopeAtEnd		= true;		// clips for start, loop and end

}

Object.assign( AnimationAction.prototype, {

	// State & Scheduling

	play: function () {

		this._mixer._activateAction( this );

		return this;

	},

	stop: function () {

		this._mixer._deactivateAction( this );

		return this.reset();

	},

	reset: function () {

		this.paused = false;
		this.enabled = true;

		this.time = 0;			// restart clip
		this._loopCount = - 1;	// forget previous loops
		this._startTime = null;	// forget scheduling

		return this.stopFading().stopWarping();

	},

	isRunning: function () {

		return this.enabled && ! this.paused && this.timeScale !== 0 &&
				this._startTime === null && this._mixer._isActiveAction( this );

	},

	// return true when play has been called
	isScheduled: function () {

		return this._mixer._isActiveAction( this );

	},

	startAt: function ( time ) {

		this._startTime = time;

		return this;

	},

	setLoop: function ( mode, repetitions ) {

		this.loop = mode;
		this.repetitions = repetitions;

		return this;

	},

	// Weight

	// set the weight stopping any scheduled fading
	// although .enabled = false yields an effective weight of zero, this
	// method does *not* change .enabled, because it would be confusing
	setEffectiveWeight: function ( weight ) {

		this.weight = weight;

		// note: same logic as when updated at runtime
		this._effectiveWeight = this.enabled ? weight : 0;

		return this.stopFading();

	},

	// return the weight considering fading and .enabled
	getEffectiveWeight: function () {

		return this._effectiveWeight;

	},

	fadeIn: function ( duration ) {

		return this._scheduleFading( duration, 0, 1 );

	},

	fadeOut: function ( duration ) {

		return this._scheduleFading( duration, 1, 0 );

	},

	crossFadeFrom: function ( fadeOutAction, duration, warp ) {

		fadeOutAction.fadeOut( duration );
		this.fadeIn( duration );

		if ( warp ) {

			var fadeInDuration = this._clip.duration,
				fadeOutDuration = fadeOutAction._clip.duration,

				startEndRatio = fadeOutDuration / fadeInDuration,
				endStartRatio = fadeInDuration / fadeOutDuration;

			fadeOutAction.warp( 1.0, startEndRatio, duration );
			this.warp( endStartRatio, 1.0, duration );

		}

		return this;

	},

	crossFadeTo: function ( fadeInAction, duration, warp ) {

		return fadeInAction.crossFadeFrom( this, duration, warp );

	},

	stopFading: function () {

		var weightInterpolant = this._weightInterpolant;

		if ( weightInterpolant !== null ) {

			this._weightInterpolant = null;
			this._mixer._takeBackControlInterpolant( weightInterpolant );

		}

		return this;

	},

	// Time Scale Control

	// set the time scale stopping any scheduled warping
	// although .paused = true yields an effective time scale of zero, this
	// method does *not* change .paused, because it would be confusing
	setEffectiveTimeScale: function ( timeScale ) {

		this.timeScale = timeScale;
		this._effectiveTimeScale = this.paused ? 0 : timeScale;

		return this.stopWarping();

	},

	// return the time scale considering warping and .paused
	getEffectiveTimeScale: function () {

		return this._effectiveTimeScale;

	},

	setDuration: function ( duration ) {

		this.timeScale = this._clip.duration / duration;

		return this.stopWarping();

	},

	syncWith: function ( action ) {

		this.time = action.time;
		this.timeScale = action.timeScale;

		return this.stopWarping();

	},

	halt: function ( duration ) {

		return this.warp( this._effectiveTimeScale, 0, duration );

	},

	warp: function ( startTimeScale, endTimeScale, duration ) {

		var mixer = this._mixer, now = mixer.time,
			interpolant = this._timeScaleInterpolant,

			timeScale = this.timeScale;

		if ( interpolant === null ) {

			interpolant = mixer._lendControlInterpolant();
			this._timeScaleInterpolant = interpolant;

		}

		var times = interpolant.parameterPositions,
			values = interpolant.sampleValues;

		times[ 0 ] = now;
		times[ 1 ] = now + duration;

		values[ 0 ] = startTimeScale / timeScale;
		values[ 1 ] = endTimeScale / timeScale;

		return this;

	},

	stopWarping: function () {

		var timeScaleInterpolant = this._timeScaleInterpolant;

		if ( timeScaleInterpolant !== null ) {

			this._timeScaleInterpolant = null;
			this._mixer._takeBackControlInterpolant( timeScaleInterpolant );

		}

		return this;

	},

	// Object Accessors

	getMixer: function () {

		return this._mixer;

	},

	getClip: function () {

		return this._clip;

	},

	getRoot: function () {

		return this._localRoot || this._mixer._root;

	},

	// Interna

	_update: function ( time, deltaTime, timeDirection, accuIndex ) {

		// called by the mixer

		if ( ! this.enabled ) {

			// call ._updateWeight() to update ._effectiveWeight

			this._updateWeight( time );
			return;

		}

		var startTime = this._startTime;

		if ( startTime !== null ) {

			// check for scheduled start of action

			var timeRunning = ( time - startTime ) * timeDirection;
			if ( timeRunning < 0 || timeDirection === 0 ) {

				return; // yet to come / don't decide when delta = 0

			}

			// start

			this._startTime = null; // unschedule
			deltaTime = timeDirection * timeRunning;

		}

		// apply time scale and advance time

		deltaTime *= this._updateTimeScale( time );
		var clipTime = this._updateTime( deltaTime );

		// note: _updateTime may disable the action resulting in
		// an effective weight of 0

		var weight = this._updateWeight( time );

		if ( weight > 0 ) {

			var interpolants = this._interpolants;
			var propertyMixers = this._propertyBindings;

			for ( var j = 0, m = interpolants.length; j !== m; ++ j ) {

				interpolants[ j ].evaluate( clipTime );
				propertyMixers[ j ].accumulate( accuIndex, weight );

			}

		}

	},

	_updateWeight: function ( time ) {

		var weight = 0;

		if ( this.enabled ) {

			weight = this.weight;
			var interpolant = this._weightInterpolant;

			if ( interpolant !== null ) {

				var interpolantValue = interpolant.evaluate( time )[ 0 ];

				weight *= interpolantValue;

				if ( time > interpolant.parameterPositions[ 1 ] ) {

					this.stopFading();

					if ( interpolantValue === 0 ) {

						// faded out, disable
						this.enabled = false;

					}

				}

			}

		}

		this._effectiveWeight = weight;
		return weight;

	},

	_updateTimeScale: function ( time ) {

		var timeScale = 0;

		if ( ! this.paused ) {

			timeScale = this.timeScale;

			var interpolant = this._timeScaleInterpolant;

			if ( interpolant !== null ) {

				var interpolantValue = interpolant.evaluate( time )[ 0 ];

				timeScale *= interpolantValue;

				if ( time > interpolant.parameterPositions[ 1 ] ) {

					this.stopWarping();

					if ( timeScale === 0 ) {

						// motion has halted, pause
						this.paused = true;

					} else {

						// warp done - apply final time scale
						this.timeScale = timeScale;

					}

				}

			}

		}

		this._effectiveTimeScale = timeScale;
		return timeScale;

	},

	_updateTime: function ( deltaTime ) {

		var time = this.time + deltaTime;

		if ( deltaTime === 0 ) return time;

		var duration = this._clip.duration,

			loop = this.loop,
			loopCount = this._loopCount;

		if ( loop === LoopOnce ) {

			if ( loopCount === - 1 ) {

				// just started

				this._loopCount = 0;
				this._setEndings( true, true, false );

			}

			handle_stop: {

				if ( time >= duration ) {

					time = duration;

				} else if ( time < 0 ) {

					time = 0;

				} else break handle_stop;

				if ( this.clampWhenFinished ) this.paused = true;
				else this.enabled = false;

				this._mixer.dispatchEvent( {
					type: 'finished', action: this,
					direction: deltaTime < 0 ? - 1 : 1
				} );

			}

		} else { // repetitive Repeat or PingPong

			var pingPong = ( loop === LoopPingPong );

			if ( loopCount === - 1 ) {

				// just started

				if ( deltaTime >= 0 ) {

					loopCount = 0;

					this._setEndings( true, this.repetitions === 0, pingPong );

				} else {

					// when looping in reverse direction, the initial
					// transition through zero counts as a repetition,
					// so leave loopCount at -1

					this._setEndings( this.repetitions === 0, true, pingPong );

				}

			}

			if ( time >= duration || time < 0 ) {

				// wrap around

				var loopDelta = Math.floor( time / duration ); // signed
				time -= duration * loopDelta;

				loopCount += Math.abs( loopDelta );

				var pending = this.repetitions - loopCount;

				if ( pending < 0 ) {

					// have to stop (switch state, clamp time, fire event)

					if ( this.clampWhenFinished ) this.paused = true;
					else this.enabled = false;

					time = deltaTime > 0 ? duration : 0;

					this._mixer.dispatchEvent( {
						type: 'finished', action: this,
						direction: deltaTime > 0 ? 1 : - 1
					} );

				} else {

					// keep running

					if ( pending === 0 ) {

						// entering the last round

						var atStart = deltaTime < 0;
						this._setEndings( atStart, ! atStart, pingPong );

					} else {

						this._setEndings( false, false, pingPong );

					}

					this._loopCount = loopCount;

					this._mixer.dispatchEvent( {
						type: 'loop', action: this, loopDelta: loopDelta
					} );

				}

			}

			if ( pingPong && ( loopCount & 1 ) === 1 ) {

				// invert time for the "pong round"

				this.time = time;
				return duration - time;

			}

		}

		this.time = time;
		return time;

	},

	_setEndings: function ( atStart, atEnd, pingPong ) {

		var settings = this._interpolantSettings;

		if ( pingPong ) {

			settings.endingStart 	= ZeroSlopeEnding;
			settings.endingEnd		= ZeroSlopeEnding;

		} else {

			// assuming for LoopOnce atStart == atEnd == true

			if ( atStart ) {

				settings.endingStart = this.zeroSlopeAtStart ? ZeroSlopeEnding : ZeroCurvatureEnding;

			} else {

				settings.endingStart = WrapAroundEnding;

			}

			if ( atEnd ) {

				settings.endingEnd = this.zeroSlopeAtEnd ? ZeroSlopeEnding : ZeroCurvatureEnding;

			} else {

				settings.endingEnd 	 = WrapAroundEnding;

			}

		}

	},

	_scheduleFading: function ( duration, weightNow, weightThen ) {

		var mixer = this._mixer, now = mixer.time,
			interpolant = this._weightInterpolant;

		if ( interpolant === null ) {

			interpolant = mixer._lendControlInterpolant();
			this._weightInterpolant = interpolant;

		}

		var times = interpolant.parameterPositions,
			values = interpolant.sampleValues;

		times[ 0 ] = now; 				values[ 0 ] = weightNow;
		times[ 1 ] = now + duration;	values[ 1 ] = weightThen;

		return this;

	}

} );

/**
 *
 * Player for AnimationClips.
 *
 *
 * @author Ben Houston / http://clara.io/
 * @author David Sarno / http://lighthaus.us/
 * @author tschw
 */

function AnimationMixer( root ) {

	this._root = root;
	this._initMemoryManager();
	this._accuIndex = 0;

	this.time = 0;

	this.timeScale = 1.0;

}

Object.assign( AnimationMixer.prototype, EventDispatcher.prototype, {

	_bindAction: function ( action, prototypeAction ) {

		var root = action._localRoot || this._root,
			tracks = action._clip.tracks,
			nTracks = tracks.length,
			bindings = action._propertyBindings,
			interpolants = action._interpolants,
			rootUuid = root.uuid,
			bindingsByRoot = this._bindingsByRootAndName,
			bindingsByName = bindingsByRoot[ rootUuid ];

		if ( bindingsByName === undefined ) {

			bindingsByName = {};
			bindingsByRoot[ rootUuid ] = bindingsByName;

		}

		for ( var i = 0; i !== nTracks; ++ i ) {

			var track = tracks[ i ],
				trackName = track.name,
				binding = bindingsByName[ trackName ];

			if ( binding !== undefined ) {

				bindings[ i ] = binding;

			} else {

				binding = bindings[ i ];

				if ( binding !== undefined ) {

					// existing binding, make sure the cache knows

					if ( binding._cacheIndex === null ) {

						++ binding.referenceCount;
						this._addInactiveBinding( binding, rootUuid, trackName );

					}

					continue;

				}

				var path = prototypeAction && prototypeAction.
					_propertyBindings[ i ].binding.parsedPath;

				binding = new PropertyMixer(
					PropertyBinding.create( root, trackName, path ),
					track.ValueTypeName, track.getValueSize() );

				++ binding.referenceCount;
				this._addInactiveBinding( binding, rootUuid, trackName );

				bindings[ i ] = binding;

			}

			interpolants[ i ].resultBuffer = binding.buffer;

		}

	},

	_activateAction: function ( action ) {

		if ( ! this._isActiveAction( action ) ) {

			if ( action._cacheIndex === null ) {

				// this action has been forgotten by the cache, but the user
				// appears to be still using it -> rebind

				var rootUuid = ( action._localRoot || this._root ).uuid,
					clipUuid = action._clip.uuid,
					actionsForClip = this._actionsByClip[ clipUuid ];

				this._bindAction( action,
					actionsForClip && actionsForClip.knownActions[ 0 ] );

				this._addInactiveAction( action, clipUuid, rootUuid );

			}

			var bindings = action._propertyBindings;

			// increment reference counts / sort out state
			for ( var i = 0, n = bindings.length; i !== n; ++ i ) {

				var binding = bindings[ i ];

				if ( binding.useCount ++ === 0 ) {

					this._lendBinding( binding );
					binding.saveOriginalState();

				}

			}

			this._lendAction( action );

		}

	},

	_deactivateAction: function ( action ) {

		if ( this._isActiveAction( action ) ) {

			var bindings = action._propertyBindings;

			// decrement reference counts / sort out state
			for ( var i = 0, n = bindings.length; i !== n; ++ i ) {

				var binding = bindings[ i ];

				if ( -- binding.useCount === 0 ) {

					binding.restoreOriginalState();
					this._takeBackBinding( binding );

				}

			}

			this._takeBackAction( action );

		}

	},

	// Memory manager

	_initMemoryManager: function () {

		this._actions = []; // 'nActiveActions' followed by inactive ones
		this._nActiveActions = 0;

		this._actionsByClip = {};
		// inside:
		// {
		// 		knownActions: Array< AnimationAction >	- used as prototypes
		// 		actionByRoot: AnimationAction			- lookup
		// }


		this._bindings = []; // 'nActiveBindings' followed by inactive ones
		this._nActiveBindings = 0;

		this._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >


		this._controlInterpolants = []; // same game as above
		this._nActiveControlInterpolants = 0;

		var scope = this;

		this.stats = {

			actions: {
				get total() {

					return scope._actions.length;

				},
				get inUse() {

					return scope._nActiveActions;

				}
			},
			bindings: {
				get total() {

					return scope._bindings.length;

				},
				get inUse() {

					return scope._nActiveBindings;

				}
			},
			controlInterpolants: {
				get total() {

					return scope._controlInterpolants.length;

				},
				get inUse() {

					return scope._nActiveControlInterpolants;

				}
			}

		};

	},

	// Memory management for AnimationAction objects

	_isActiveAction: function ( action ) {

		var index = action._cacheIndex;
		return index !== null && index < this._nActiveActions;

	},

	_addInactiveAction: function ( action, clipUuid, rootUuid ) {

		var actions = this._actions,
			actionsByClip = this._actionsByClip,
			actionsForClip = actionsByClip[ clipUuid ];

		if ( actionsForClip === undefined ) {

			actionsForClip = {

				knownActions: [ action ],
				actionByRoot: {}

			};

			action._byClipCacheIndex = 0;

			actionsByClip[ clipUuid ] = actionsForClip;

		} else {

			var knownActions = actionsForClip.knownActions;

			action._byClipCacheIndex = knownActions.length;
			knownActions.push( action );

		}

		action._cacheIndex = actions.length;
		actions.push( action );

		actionsForClip.actionByRoot[ rootUuid ] = action;

	},

	_removeInactiveAction: function ( action ) {

		var actions = this._actions,
			lastInactiveAction = actions[ actions.length - 1 ],
			cacheIndex = action._cacheIndex;

		lastInactiveAction._cacheIndex = cacheIndex;
		actions[ cacheIndex ] = lastInactiveAction;
		actions.pop();

		action._cacheIndex = null;


		var clipUuid = action._clip.uuid,
			actionsByClip = this._actionsByClip,
			actionsForClip = actionsByClip[ clipUuid ],
			knownActionsForClip = actionsForClip.knownActions,

			lastKnownAction =
				knownActionsForClip[ knownActionsForClip.length - 1 ],

			byClipCacheIndex = action._byClipCacheIndex;

		lastKnownAction._byClipCacheIndex = byClipCacheIndex;
		knownActionsForClip[ byClipCacheIndex ] = lastKnownAction;
		knownActionsForClip.pop();

		action._byClipCacheIndex = null;


		var actionByRoot = actionsForClip.actionByRoot,
			rootUuid = ( action._localRoot || this._root ).uuid;

		delete actionByRoot[ rootUuid ];

		if ( knownActionsForClip.length === 0 ) {

			delete actionsByClip[ clipUuid ];

		}

		this._removeInactiveBindingsForAction( action );

	},

	_removeInactiveBindingsForAction: function ( action ) {

		var bindings = action._propertyBindings;
		for ( var i = 0, n = bindings.length; i !== n; ++ i ) {

			var binding = bindings[ i ];

			if ( -- binding.referenceCount === 0 ) {

				this._removeInactiveBinding( binding );

			}

		}

	},

	_lendAction: function ( action ) {

		// [ active actions |  inactive actions  ]
		// [  active actions >| inactive actions ]
		//                 s        a
		//                  <-swap->
		//                 a        s

		var actions = this._actions,
			prevIndex = action._cacheIndex,

			lastActiveIndex = this._nActiveActions ++,

			firstInactiveAction = actions[ lastActiveIndex ];

		action._cacheIndex = lastActiveIndex;
		actions[ lastActiveIndex ] = action;

		firstInactiveAction._cacheIndex = prevIndex;
		actions[ prevIndex ] = firstInactiveAction;

	},

	_takeBackAction: function ( action ) {

		// [  active actions  | inactive actions ]
		// [ active actions |< inactive actions  ]
		//        a        s
		//         <-swap->
		//        s        a

		var actions = this._actions,
			prevIndex = action._cacheIndex,

			firstInactiveIndex = -- this._nActiveActions,

			lastActiveAction = actions[ firstInactiveIndex ];

		action._cacheIndex = firstInactiveIndex;
		actions[ firstInactiveIndex ] = action;

		lastActiveAction._cacheIndex = prevIndex;
		actions[ prevIndex ] = lastActiveAction;

	},

	// Memory management for PropertyMixer objects

	_addInactiveBinding: function ( binding, rootUuid, trackName ) {

		var bindingsByRoot = this._bindingsByRootAndName,
			bindingByName = bindingsByRoot[ rootUuid ],

			bindings = this._bindings;

		if ( bindingByName === undefined ) {

			bindingByName = {};
			bindingsByRoot[ rootUuid ] = bindingByName;

		}

		bindingByName[ trackName ] = binding;

		binding._cacheIndex = bindings.length;
		bindings.push( binding );

	},

	_removeInactiveBinding: function ( binding ) {

		var bindings = this._bindings,
			propBinding = binding.binding,
			rootUuid = propBinding.rootNode.uuid,
			trackName = propBinding.path,
			bindingsByRoot = this._bindingsByRootAndName,
			bindingByName = bindingsByRoot[ rootUuid ],

			lastInactiveBinding = bindings[ bindings.length - 1 ],
			cacheIndex = binding._cacheIndex;

		lastInactiveBinding._cacheIndex = cacheIndex;
		bindings[ cacheIndex ] = lastInactiveBinding;
		bindings.pop();

		delete bindingByName[ trackName ];

		remove_empty_map: {

			for ( var _ in bindingByName ) break remove_empty_map; // eslint-disable-line no-unused-vars

			delete bindingsByRoot[ rootUuid ];

		}

	},

	_lendBinding: function ( binding ) {

		var bindings = this._bindings,
			prevIndex = binding._cacheIndex,

			lastActiveIndex = this._nActiveBindings ++,

			firstInactiveBinding = bindings[ lastActiveIndex ];

		binding._cacheIndex = lastActiveIndex;
		bindings[ lastActiveIndex ] = binding;

		firstInactiveBinding._cacheIndex = prevIndex;
		bindings[ prevIndex ] = firstInactiveBinding;

	},

	_takeBackBinding: function ( binding ) {

		var bindings = this._bindings,
			prevIndex = binding._cacheIndex,

			firstInactiveIndex = -- this._nActiveBindings,

			lastActiveBinding = bindings[ firstInactiveIndex ];

		binding._cacheIndex = firstInactiveIndex;
		bindings[ firstInactiveIndex ] = binding;

		lastActiveBinding._cacheIndex = prevIndex;
		bindings[ prevIndex ] = lastActiveBinding;

	},


	// Memory management of Interpolants for weight and time scale

	_lendControlInterpolant: function () {

		var interpolants = this._controlInterpolants,
			lastActiveIndex = this._nActiveControlInterpolants ++,
			interpolant = interpolants[ lastActiveIndex ];

		if ( interpolant === undefined ) {

			interpolant = new LinearInterpolant(
				new Float32Array( 2 ), new Float32Array( 2 ),
				1, this._controlInterpolantsResultBuffer );

			interpolant.__cacheIndex = lastActiveIndex;
			interpolants[ lastActiveIndex ] = interpolant;

		}

		return interpolant;

	},

	_takeBackControlInterpolant: function ( interpolant ) {

		var interpolants = this._controlInterpolants,
			prevIndex = interpolant.__cacheIndex,

			firstInactiveIndex = -- this._nActiveControlInterpolants,

			lastActiveInterpolant = interpolants[ firstInactiveIndex ];

		interpolant.__cacheIndex = firstInactiveIndex;
		interpolants[ firstInactiveIndex ] = interpolant;

		lastActiveInterpolant.__cacheIndex = prevIndex;
		interpolants[ prevIndex ] = lastActiveInterpolant;

	},

	_controlInterpolantsResultBuffer: new Float32Array( 1 ),

	// return an action for a clip optionally using a custom root target
	// object (this method allocates a lot of dynamic memory in case a
	// previously unknown clip/root combination is specified)
	clipAction: function ( clip, optionalRoot ) {

		var root = optionalRoot || this._root,
			rootUuid = root.uuid,

			clipObject = typeof clip === 'string' ?
				AnimationClip.findByName( root, clip ) : clip,

			clipUuid = clipObject !== null ? clipObject.uuid : clip,

			actionsForClip = this._actionsByClip[ clipUuid ],
			prototypeAction = null;

		if ( actionsForClip !== undefined ) {

			var existingAction =
					actionsForClip.actionByRoot[ rootUuid ];

			if ( existingAction !== undefined ) {

				return existingAction;

			}

			// we know the clip, so we don't have to parse all
			// the bindings again but can just copy
			prototypeAction = actionsForClip.knownActions[ 0 ];

			// also, take the clip from the prototype action
			if ( clipObject === null )
				clipObject = prototypeAction._clip;

		}

		// clip must be known when specified via string
		if ( clipObject === null ) return null;

		// allocate all resources required to run it
		var newAction = new AnimationAction( this, clipObject, optionalRoot );

		this._bindAction( newAction, prototypeAction );

		// and make the action known to the memory manager
		this._addInactiveAction( newAction, clipUuid, rootUuid );

		return newAction;

	},

	// get an existing action
	existingAction: function ( clip, optionalRoot ) {

		var root = optionalRoot || this._root,
			rootUuid = root.uuid,

			clipObject = typeof clip === 'string' ?
				AnimationClip.findByName( root, clip ) : clip,

			clipUuid = clipObject ? clipObject.uuid : clip,

			actionsForClip = this._actionsByClip[ clipUuid ];

		if ( actionsForClip !== undefined ) {

			return actionsForClip.actionByRoot[ rootUuid ] || null;

		}

		return null;

	},

	// deactivates all previously scheduled actions
	stopAllAction: function () {

		var actions = this._actions,
			nActions = this._nActiveActions,
			bindings = this._bindings,
			nBindings = this._nActiveBindings;

		this._nActiveActions = 0;
		this._nActiveBindings = 0;

		for ( var i = 0; i !== nActions; ++ i ) {

			actions[ i ].reset();

		}

		for ( var i = 0; i !== nBindings; ++ i ) {

			bindings[ i ].useCount = 0;

		}

		return this;

	},

	// advance the time and update apply the animation
	update: function ( deltaTime ) {

		deltaTime *= this.timeScale;

		var actions = this._actions,
			nActions = this._nActiveActions,

			time = this.time += deltaTime,
			timeDirection = Math.sign( deltaTime ),

			accuIndex = this._accuIndex ^= 1;

		// run active actions

		for ( var i = 0; i !== nActions; ++ i ) {

			var action = actions[ i ];

			action._update( time, deltaTime, timeDirection, accuIndex );

		}

		// update scene graph

		var bindings = this._bindings,
			nBindings = this._nActiveBindings;

		for ( var i = 0; i !== nBindings; ++ i ) {

			bindings[ i ].apply( accuIndex );

		}

		return this;

	},

	// return this mixer's root target object
	getRoot: function () {

		return this._root;

	},

	// free all resources specific to a particular clip
	uncacheClip: function ( clip ) {

		var actions = this._actions,
			clipUuid = clip.uuid,
			actionsByClip = this._actionsByClip,
			actionsForClip = actionsByClip[ clipUuid ];

		if ( actionsForClip !== undefined ) {

			// note: just calling _removeInactiveAction would mess up the
			// iteration state and also require updating the state we can
			// just throw away

			var actionsToRemove = actionsForClip.knownActions;

			for ( var i = 0, n = actionsToRemove.length; i !== n; ++ i ) {

				var action = actionsToRemove[ i ];

				this._deactivateAction( action );

				var cacheIndex = action._cacheIndex,
					lastInactiveAction = actions[ actions.length - 1 ];

				action._cacheIndex = null;
				action._byClipCacheIndex = null;

				lastInactiveAction._cacheIndex = cacheIndex;
				actions[ cacheIndex ] = lastInactiveAction;
				actions.pop();

				this._removeInactiveBindingsForAction( action );

			}

			delete actionsByClip[ clipUuid ];

		}

	},

	// free all resources specific to a particular root target object
	uncacheRoot: function ( root ) {

		var rootUuid = root.uuid,
			actionsByClip = this._actionsByClip;

		for ( var clipUuid in actionsByClip ) {

			var actionByRoot = actionsByClip[ clipUuid ].actionByRoot,
				action = actionByRoot[ rootUuid ];

			if ( action !== undefined ) {

				this._deactivateAction( action );
				this._removeInactiveAction( action );

			}

		}

		var bindingsByRoot = this._bindingsByRootAndName,
			bindingByName = bindingsByRoot[ rootUuid ];

		if ( bindingByName !== undefined ) {

			for ( var trackName in bindingByName ) {

				var binding = bindingByName[ trackName ];
				binding.restoreOriginalState();
				this._removeInactiveBinding( binding );

			}

		}

	},

	// remove a targeted clip from the cache
	uncacheAction: function ( clip, optionalRoot ) {

		var action = this.existingAction( clip, optionalRoot );

		if ( action !== null ) {

			this._deactivateAction( action );
			this._removeInactiveAction( action );

		}

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 */

function Uniform( value ) {

	if ( typeof value === 'string' ) {

		console.warn( 'THREE.Uniform: Type parameter is no longer needed.' );
		value = arguments[ 1 ];

	}

	this.value = value;

}

Uniform.prototype.clone = function () {

	return new Uniform( this.value.clone === undefined ? this.value : this.value.clone() );

};

/**
 * @author benaadams / https://twitter.com/ben_a_adams
 */

function InstancedBufferGeometry() {

	BufferGeometry.call( this );

	this.type = 'InstancedBufferGeometry';
	this.maxInstancedCount = undefined;

}

InstancedBufferGeometry.prototype = Object.assign( Object.create( BufferGeometry.prototype ), {

	constructor: InstancedBufferGeometry,

	isInstancedBufferGeometry: true,

	copy: function ( source ) {

		BufferGeometry.prototype.copy.call( this, source );

		this.maxInstancedCount = source.maxInstancedCount;

		return this;

	},

	clone: function () {

		return new this.constructor().copy( this );

	}

} );

/**
 * @author benaadams / https://twitter.com/ben_a_adams
 */

function InterleavedBufferAttribute( interleavedBuffer, itemSize, offset, normalized ) {

	this.uuid = _Math.generateUUID();

	this.data = interleavedBuffer;
	this.itemSize = itemSize;
	this.offset = offset;

	this.normalized = normalized === true;

}

Object.defineProperties( InterleavedBufferAttribute.prototype, {

	count: {

		get: function () {

			return this.data.count;

		}

	},

	array: {

		get: function () {

			return this.data.array;

		}

	}

} );

Object.assign( InterleavedBufferAttribute.prototype, {

	isInterleavedBufferAttribute: true,

	setX: function ( index, x ) {

		this.data.array[ index * this.data.stride + this.offset ] = x;

		return this;

	},

	setY: function ( index, y ) {

		this.data.array[ index * this.data.stride + this.offset + 1 ] = y;

		return this;

	},

	setZ: function ( index, z ) {

		this.data.array[ index * this.data.stride + this.offset + 2 ] = z;

		return this;

	},

	setW: function ( index, w ) {

		this.data.array[ index * this.data.stride + this.offset + 3 ] = w;

		return this;

	},

	getX: function ( index ) {

		return this.data.array[ index * this.data.stride + this.offset ];

	},

	getY: function ( index ) {

		return this.data.array[ index * this.data.stride + this.offset + 1 ];

	},

	getZ: function ( index ) {

		return this.data.array[ index * this.data.stride + this.offset + 2 ];

	},

	getW: function ( index ) {

		return this.data.array[ index * this.data.stride + this.offset + 3 ];

	},

	setXY: function ( index, x, y ) {

		index = index * this.data.stride + this.offset;

		this.data.array[ index + 0 ] = x;
		this.data.array[ index + 1 ] = y;

		return this;

	},

	setXYZ: function ( index, x, y, z ) {

		index = index * this.data.stride + this.offset;

		this.data.array[ index + 0 ] = x;
		this.data.array[ index + 1 ] = y;
		this.data.array[ index + 2 ] = z;

		return this;

	},

	setXYZW: function ( index, x, y, z, w ) {

		index = index * this.data.stride + this.offset;

		this.data.array[ index + 0 ] = x;
		this.data.array[ index + 1 ] = y;
		this.data.array[ index + 2 ] = z;
		this.data.array[ index + 3 ] = w;

		return this;

	}

} );

/**
 * @author benaadams / https://twitter.com/ben_a_adams
 */

function InterleavedBuffer( array, stride ) {

	this.uuid = _Math.generateUUID();

	this.array = array;
	this.stride = stride;
	this.count = array !== undefined ? array.length / stride : 0;

	this.dynamic = false;
	this.updateRange = { offset: 0, count: - 1 };

	this.onUploadCallback = function () {};

	this.version = 0;

}

Object.defineProperty( InterleavedBuffer.prototype, 'needsUpdate', {

	set: function ( value ) {

		if ( value === true ) this.version ++;

	}

} );

Object.assign( InterleavedBuffer.prototype, {

	isInterleavedBuffer: true,

	setArray: function ( array ) {

		if ( Array.isArray( array ) ) {

			throw new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );

		}

		this.count = array !== undefined ? array.length / this.stride : 0;
		this.array = array;

	},

	setDynamic: function ( value ) {

		this.dynamic = value;

		return this;

	},

	copy: function ( source ) {

		this.array = new source.array.constructor( source.array );
		this.count = source.count;
		this.stride = source.stride;
		this.dynamic = source.dynamic;

		return this;

	},

	copyAt: function ( index1, attribute, index2 ) {

		index1 *= this.stride;
		index2 *= attribute.stride;

		for ( var i = 0, l = this.stride; i < l; i ++ ) {

			this.array[ index1 + i ] = attribute.array[ index2 + i ];

		}

		return this;

	},

	set: function ( value, offset ) {

		if ( offset === undefined ) offset = 0;

		this.array.set( value, offset );

		return this;

	},

	clone: function () {

		return new this.constructor().copy( this );

	},

	onUpload: function ( callback ) {

		this.onUploadCallback = callback;

		return this;

	}

} );

/**
 * @author benaadams / https://twitter.com/ben_a_adams
 */

function InstancedInterleavedBuffer( array, stride, meshPerAttribute ) {

	InterleavedBuffer.call( this, array, stride );

	this.meshPerAttribute = meshPerAttribute || 1;

}

InstancedInterleavedBuffer.prototype = Object.assign( Object.create( InterleavedBuffer.prototype ), {

	constructor: InstancedInterleavedBuffer,

	isInstancedInterleavedBuffer: true,

	copy: function ( source ) {

		InterleavedBuffer.prototype.copy.call( this, source );

		this.meshPerAttribute = source.meshPerAttribute;

		return this;

	}

} );

/**
 * @author benaadams / https://twitter.com/ben_a_adams
 */

function InstancedBufferAttribute( array, itemSize, meshPerAttribute ) {

	BufferAttribute.call( this, array, itemSize );

	this.meshPerAttribute = meshPerAttribute || 1;

}

InstancedBufferAttribute.prototype = Object.assign( Object.create( BufferAttribute.prototype ), {

	constructor: InstancedBufferAttribute,

	isInstancedBufferAttribute: true,

	copy: function ( source ) {

		BufferAttribute.prototype.copy.call( this, source );

		this.meshPerAttribute = source.meshPerAttribute;

		return this;

	}

} );

/**
 * @author mrdoob / http://mrdoob.com/
 * @author bhouston / http://clara.io/
 * @author stephomi / http://stephaneginier.com/
 */

function Raycaster( origin, direction, near, far ) {

	this.ray = new Ray( origin, direction );
	// direction is assumed to be normalized (for accurate distance calculations)

	this.near = near || 0;
	this.far = far || Infinity;

	this.params = {
		Mesh: {},
		Line: {},
		LOD: {},
		Points: { threshold: 1 },
		Sprite: {}
	};

	Object.defineProperties( this.params, {
		PointCloud: {
			get: function () {

				console.warn( 'THREE.Raycaster: params.PointCloud has been renamed to params.Points.' );
				return this.Points;

			}
		}
	} );

}

function ascSort( a, b ) {

	return a.distance - b.distance;

}

function intersectObject( object, raycaster, intersects, recursive ) {

	if ( object.visible === false ) return;

	object.raycast( raycaster, intersects );

	if ( recursive === true ) {

		var children = object.children;

		for ( var i = 0, l = children.length; i < l; i ++ ) {

			intersectObject( children[ i ], raycaster, intersects, true );

		}

	}

}

Object.assign( Raycaster.prototype, {

	linePrecision: 1,

	set: function ( origin, direction ) {

		// direction is assumed to be normalized (for accurate distance calculations)

		this.ray.set( origin, direction );

	},

	setFromCamera: function ( coords, camera ) {

		if ( ( camera && camera.isPerspectiveCamera ) ) {

			this.ray.origin.setFromMatrixPosition( camera.matrixWorld );
			this.ray.direction.set( coords.x, coords.y, 0.5 ).unproject( camera ).sub( this.ray.origin ).normalize();

		} else if ( ( camera && camera.isOrthographicCamera ) ) {

			this.ray.origin.set( coords.x, coords.y, ( camera.near + camera.far ) / ( camera.near - camera.far ) ).unproject( camera ); // set origin in plane of camera
			this.ray.direction.set( 0, 0, - 1 ).transformDirection( camera.matrixWorld );

		} else {

			console.error( 'THREE.Raycaster: Unsupported camera type.' );

		}

	},

	intersectObject: function ( object, recursive ) {

		var intersects = [];

		intersectObject( object, this, intersects, recursive );

		intersects.sort( ascSort );

		return intersects;

	},

	intersectObjects: function ( objects, recursive ) {

		var intersects = [];

		if ( Array.isArray( objects ) === false ) {

			console.warn( 'THREE.Raycaster.intersectObjects: objects is not an Array.' );
			return intersects;

		}

		for ( var i = 0, l = objects.length; i < l; i ++ ) {

			intersectObject( objects[ i ], this, intersects, recursive );

		}

		intersects.sort( ascSort );

		return intersects;

	}

} );

/**
 * @author alteredq / http://alteredqualia.com/
 */

function Clock( autoStart ) {

	this.autoStart = ( autoStart !== undefined ) ? autoStart : true;

	this.startTime = 0;
	this.oldTime = 0;
	this.elapsedTime = 0;

	this.running = false;

}

Object.assign( Clock.prototype, {

	start: function () {

		this.startTime = ( typeof performance === 'undefined' ? Date : performance ).now(); // see #10732

		this.oldTime = this.startTime;
		this.elapsedTime = 0;
		this.running = true;

	},

	stop: function () {

		this.getElapsedTime();
		this.running = false;
		this.autoStart = false;

	},

	getElapsedTime: function () {

		this.getDelta();
		return this.elapsedTime;

	},

	getDelta: function () {

		var diff = 0;

		if ( this.autoStart && ! this.running ) {

			this.start();
			return 0;

		}

		if ( this.running ) {

			var newTime = ( typeof performance === 'undefined' ? Date : performance ).now();

			diff = ( newTime - this.oldTime ) / 1000;
			this.oldTime = newTime;

			this.elapsedTime += diff;

		}

		return diff;

	}

} );

/**
 * @author bhouston / http://clara.io
 * @author WestLangley / http://github.com/WestLangley
 *
 * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system
 *
 * The poles (phi) are at the positive and negative y axis.
 * The equator starts at positive z.
 */

function Spherical( radius, phi, theta ) {

	this.radius = ( radius !== undefined ) ? radius : 1.0;
	this.phi = ( phi !== undefined ) ? phi : 0; // up / down towards top and bottom pole
	this.theta = ( theta !== undefined ) ? theta : 0; // around the equator of the sphere

	return this;

}

Object.assign( Spherical.prototype, {

	set: function ( radius, phi, theta ) {

		this.radius = radius;
		this.phi = phi;
		this.theta = theta;

		return this;

	},

	clone: function () {

		return new this.constructor().copy( this );

	},

	copy: function ( other ) {

		this.radius = other.radius;
		this.phi = other.phi;
		this.theta = other.theta;

		return this;

	},

	// restrict phi to be betwee EPS and PI-EPS
	makeSafe: function () {

		var EPS = 0.000001;
		this.phi = Math.max( EPS, Math.min( Math.PI - EPS, this.phi ) );

		return this;

	},

	setFromVector3: function ( vec3 ) {

		this.radius = vec3.length();

		if ( this.radius === 0 ) {

			this.theta = 0;
			this.phi = 0;

		} else {

			this.theta = Math.atan2( vec3.x, vec3.z ); // equator angle around y-up axis
			this.phi = Math.acos( _Math.clamp( vec3.y / this.radius, - 1, 1 ) ); // polar angle

		}

		return this;

	}

} );

/**
 * @author Mugen87 / https://github.com/Mugen87
 *
 * Ref: https://en.wikipedia.org/wiki/Cylindrical_coordinate_system
 *
 */

function Cylindrical( radius, theta, y ) {

	this.radius = ( radius !== undefined ) ? radius : 1.0; // distance from the origin to a point in the x-z plane
	this.theta = ( theta !== undefined ) ? theta : 0; // counterclockwise angle in the x-z plane measured in radians from the positive z-axis
	this.y = ( y !== undefined ) ? y : 0; // height above the x-z plane

	return this;

}

Object.assign( Cylindrical.prototype, {

	set: function ( radius, theta, y ) {

		this.radius = radius;
		this.theta = theta;
		this.y = y;

		return this;

	},

	clone: function () {

		return new this.constructor().copy( this );

	},

	copy: function ( other ) {

		this.radius = other.radius;
		this.theta = other.theta;
		this.y = other.y;

		return this;

	},

	setFromVector3: function ( vec3 ) {

		this.radius = Math.sqrt( vec3.x * vec3.x + vec3.z * vec3.z );
		this.theta = Math.atan2( vec3.x, vec3.z );
		this.y = vec3.y;

		return this;

	}

} );

/**
 * @author alteredq / http://alteredqualia.com/
 */

function VertexNormalsHelper( object, size, hex, linewidth ) {

	this.object = object;

	this.size = ( size !== undefined ) ? size : 1;

	var color = ( hex !== undefined ) ? hex : 0xff0000;

	var width = ( linewidth !== undefined ) ? linewidth : 1;

	//

	var nNormals = 0;

	var objGeometry = this.object.geometry;

	if ( objGeometry && objGeometry.isGeometry ) {

		nNormals = objGeometry.faces.length * 3;

	} else if ( objGeometry && objGeometry.isBufferGeometry ) {

		nNormals = objGeometry.attributes.normal.count;

	}

	//

	var geometry = new BufferGeometry();

	var positions = new Float32BufferAttribute( nNormals * 2 * 3, 3 );

	geometry.addAttribute( 'position', positions );

	LineSegments.call( this, geometry, new LineBasicMaterial( { color: color, linewidth: width } ) );

	//

	this.matrixAutoUpdate = false;

	this.update();

}

VertexNormalsHelper.prototype = Object.create( LineSegments.prototype );
VertexNormalsHelper.prototype.constructor = VertexNormalsHelper;

VertexNormalsHelper.prototype.update = ( function () {

	var v1 = new Vector3();
	var v2 = new Vector3();
	var normalMatrix = new Matrix3();

	return function update() {

		var keys = [ 'a', 'b', 'c' ];

		this.object.updateMatrixWorld( true );

		normalMatrix.getNormalMatrix( this.object.matrixWorld );

		var matrixWorld = this.object.matrixWorld;

		var position = this.geometry.attributes.position;

		//

		var objGeometry = this.object.geometry;

		if ( objGeometry && objGeometry.isGeometry ) {

			var vertices = objGeometry.vertices;

			var faces = objGeometry.faces;

			var idx = 0;

			for ( var i = 0, l = faces.length; i < l; i ++ ) {

				var face = faces[ i ];

				for ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {

					var vertex = vertices[ face[ keys[ j ] ] ];

					var normal = face.vertexNormals[ j ];

					v1.copy( vertex ).applyMatrix4( matrixWorld );

					v2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );

					position.setXYZ( idx, v1.x, v1.y, v1.z );

					idx = idx + 1;

					position.setXYZ( idx, v2.x, v2.y, v2.z );

					idx = idx + 1;

				}

			}

		} else if ( objGeometry && objGeometry.isBufferGeometry ) {

			var objPos = objGeometry.attributes.position;

			var objNorm = objGeometry.attributes.normal;

			var idx = 0;

			// for simplicity, ignore index and drawcalls, and render every normal

			for ( var j = 0, jl = objPos.count; j < jl; j ++ ) {

				v1.set( objPos.getX( j ), objPos.getY( j ), objPos.getZ( j ) ).applyMatrix4( matrixWorld );

				v2.set( objNorm.getX( j ), objNorm.getY( j ), objNorm.getZ( j ) );

				v2.applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );

				position.setXYZ( idx, v1.x, v1.y, v1.z );

				idx = idx + 1;

				position.setXYZ( idx, v2.x, v2.y, v2.z );

				idx = idx + 1;

			}

		}

		position.needsUpdate = true;

	};

}() );

/**
 * @author alteredq / http://alteredqualia.com/
 * @author mrdoob / http://mrdoob.com/
 * @author WestLangley / http://github.com/WestLangley
 */

function getBoneList( object ) {

	var boneList = [];

	if ( object && object.isBone ) {

		boneList.push( object );

	}

	for ( var i = 0; i < object.children.length; i ++ ) {

		boneList.push.apply( boneList, getBoneList( object.children[ i ] ) );

	}

	return boneList;

}

function SkeletonHelper( object ) {

	var bones = getBoneList( object );

	var geometry = new BufferGeometry();

	var vertices = [];
	var colors = [];

	var color1 = new Color( 0, 0, 1 );
	var color2 = new Color( 0, 1, 0 );

	for ( var i = 0; i < bones.length; i ++ ) {

		var bone = bones[ i ];

		if ( bone.parent && bone.parent.isBone ) {

			vertices.push( 0, 0, 0 );
			vertices.push( 0, 0, 0 );
			colors.push( color1.r, color1.g, color1.b );
			colors.push( color2.r, color2.g, color2.b );

		}

	}

	geometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
	geometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );

	var material = new LineBasicMaterial( { vertexColors: VertexColors, depthTest: false, depthWrite: false, transparent: true } );

	LineSegments.call( this, geometry, material );

	this.root = object;
	this.bones = bones;

	this.matrix = object.matrixWorld;
	this.matrixAutoUpdate = false;

}

SkeletonHelper.prototype = Object.create( LineSegments.prototype );
SkeletonHelper.prototype.constructor = SkeletonHelper;

SkeletonHelper.prototype.updateMatrixWorld = function () {

	var vector = new Vector3();

	var boneMatrix = new Matrix4();
	var matrixWorldInv = new Matrix4();

	return function updateMatrixWorld( force ) {

		var bones = this.bones;

		var geometry = this.geometry;
		var position = geometry.getAttribute( 'position' );

		matrixWorldInv.getInverse( this.root.matrixWorld );

		for ( var i = 0, j = 0; i < bones.length; i ++ ) {

			var bone = bones[ i ];

			if ( bone.parent && bone.parent.isBone ) {

				boneMatrix.multiplyMatrices( matrixWorldInv, bone.matrixWorld );
				vector.setFromMatrixPosition( boneMatrix );
				position.setXYZ( j, vector.x, vector.y, vector.z );

				boneMatrix.multiplyMatrices( matrixWorldInv, bone.parent.matrixWorld );
				vector.setFromMatrixPosition( boneMatrix );
				position.setXYZ( j + 1, vector.x, vector.y, vector.z );

				j += 2;

			}

		}

		geometry.getAttribute( 'position' ).needsUpdate = true;

		Object3D.prototype.updateMatrixWorld.call( this, force );

	};

}();

/**
 * @author alteredq / http://alteredqualia.com/
 * @author mrdoob / http://mrdoob.com/
 */

function HemisphereLightHelper( light, size, color ) {

	Object3D.call( this );

	this.light = light;
	this.light.updateMatrixWorld();

	this.matrix = light.matrixWorld;
	this.matrixAutoUpdate = false;

	this.color = color;

	var geometry = new OctahedronBufferGeometry( size );
	geometry.rotateY( Math.PI * 0.5 );

	this.material = new MeshBasicMaterial( { wireframe: true, fog: false } );
	if ( this.color === undefined ) this.material.vertexColors = VertexColors;

	var position = geometry.getAttribute( 'position' );
	var colors = new Float32Array( position.count * 3 );

	geometry.addAttribute( 'color', new BufferAttribute( colors, 3 ) );

	this.add( new Mesh( geometry, this.material ) );

	this.update();

}

HemisphereLightHelper.prototype = Object.create( Object3D.prototype );
HemisphereLightHelper.prototype.constructor = HemisphereLightHelper;

HemisphereLightHelper.prototype.dispose = function () {

	this.children[ 0 ].geometry.dispose();
	this.children[ 0 ].material.dispose();

};

HemisphereLightHelper.prototype.update = function () {

	var vector = new Vector3();

	var color1 = new Color();
	var color2 = new Color();

	return function update() {

		var mesh = this.children[ 0 ];

		if ( this.color !== undefined ) {

			this.material.color.set( this.color );

		} else {

			var colors = mesh.geometry.getAttribute( 'color' );

			color1.copy( this.light.color );
			color2.copy( this.light.groundColor );

			for ( var i = 0, l = colors.count; i < l; i ++ ) {

				var color = ( i < ( l / 2 ) ) ? color1 : color2;

				colors.setXYZ( i, color.r, color.g, color.b );

			}

			colors.needsUpdate = true;

		}

		mesh.lookAt( vector.setFromMatrixPosition( this.light.matrixWorld ).negate() );

	};

}();

/**
 * @author mrdoob / http://mrdoob.com/
 */

function FaceNormalsHelper( object, size, hex, linewidth ) {

	// FaceNormalsHelper only supports THREE.Geometry

	this.object = object;

	this.size = ( size !== undefined ) ? size : 1;

	var color = ( hex !== undefined ) ? hex : 0xffff00;

	var width = ( linewidth !== undefined ) ? linewidth : 1;

	//

	var nNormals = 0;

	var objGeometry = this.object.geometry;

	if ( objGeometry && objGeometry.isGeometry ) {

		nNormals = objGeometry.faces.length;

	} else {

		console.warn( 'THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.' );

	}

	//

	var geometry = new BufferGeometry();

	var positions = new Float32BufferAttribute( nNormals * 2 * 3, 3 );

	geometry.addAttribute( 'position', positions );

	LineSegments.call( this, geometry, new LineBasicMaterial( { color: color, linewidth: width } ) );

	//

	this.matrixAutoUpdate = false;
	this.update();

}

FaceNormalsHelper.prototype = Object.create( LineSegments.prototype );
FaceNormalsHelper.prototype.constructor = FaceNormalsHelper;

FaceNormalsHelper.prototype.update = ( function () {

	var v1 = new Vector3();
	var v2 = new Vector3();
	var normalMatrix = new Matrix3();

	return function update() {

		this.object.updateMatrixWorld( true );

		normalMatrix.getNormalMatrix( this.object.matrixWorld );

		var matrixWorld = this.object.matrixWorld;

		var position = this.geometry.attributes.position;

		//

		var objGeometry = this.object.geometry;

		var vertices = objGeometry.vertices;

		var faces = objGeometry.faces;

		var idx = 0;

		for ( var i = 0, l = faces.length; i < l; i ++ ) {

			var face = faces[ i ];

			var normal = face.normal;

			v1.copy( vertices[ face.a ] )
				.add( vertices[ face.b ] )
				.add( vertices[ face.c ] )
				.divideScalar( 3 )
				.applyMatrix4( matrixWorld );

			v2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );

			position.setXYZ( idx, v1.x, v1.y, v1.z );

			idx = idx + 1;

			position.setXYZ( idx, v2.x, v2.y, v2.z );

			idx = idx + 1;

		}

		position.needsUpdate = true;

	};

}() );

/**
 * @author alteredq / http://alteredqualia.com/
 * @author mrdoob / http://mrdoob.com/
 * @author WestLangley / http://github.com/WestLangley
 */

function CameraHelper( camera ) {

	var geometry = new BufferGeometry();
	var material = new LineBasicMaterial( { color: 0xffffff, vertexColors: FaceColors } );

	var vertices = [];
	var colors = [];

	var pointMap = {};

	// colors

	var colorFrustum = new Color( 0xffaa00 );
	var colorCone = new Color( 0xff0000 );
	var colorUp = new Color( 0x00aaff );
	var colorTarget = new Color( 0xffffff );
	var colorCross = new Color( 0x333333 );

	// near

	addLine( 'n1', 'n2', colorFrustum );
	addLine( 'n2', 'n4', colorFrustum );
	addLine( 'n4', 'n3', colorFrustum );
	addLine( 'n3', 'n1', colorFrustum );

	// far

	addLine( 'f1', 'f2', colorFrustum );
	addLine( 'f2', 'f4', colorFrustum );
	addLine( 'f4', 'f3', colorFrustum );
	addLine( 'f3', 'f1', colorFrustum );

	// sides

	addLine( 'n1', 'f1', colorFrustum );
	addLine( 'n2', 'f2', colorFrustum );
	addLine( 'n3', 'f3', colorFrustum );
	addLine( 'n4', 'f4', colorFrustum );

	// cone

	addLine( 'p', 'n1', colorCone );
	addLine( 'p', 'n2', colorCone );
	addLine( 'p', 'n3', colorCone );
	addLine( 'p', 'n4', colorCone );

	// up

	addLine( 'u1', 'u2', colorUp );
	addLine( 'u2', 'u3', colorUp );
	addLine( 'u3', 'u1', colorUp );

	// target

	addLine( 'c', 't', colorTarget );
	addLine( 'p', 'c', colorCross );

	// cross

	addLine( 'cn1', 'cn2', colorCross );
	addLine( 'cn3', 'cn4', colorCross );

	addLine( 'cf1', 'cf2', colorCross );
	addLine( 'cf3', 'cf4', colorCross );

	function addLine( a, b, color ) {

		addPoint( a, color );
		addPoint( b, color );

	}

	function addPoint( id, color ) {

		vertices.push( 0, 0, 0 );
		colors.push( color.r, color.g, color.b );

		if ( pointMap[ id ] === undefined ) {

			pointMap[ id ] = [];

		}

		pointMap[ id ].push( ( vertices.length / 3 ) - 1 );

	}

	geometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
	geometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );

	LineSegments.call( this, geometry, material );

	this.camera = camera;
	if ( this.camera.updateProjectionMatrix ) this.camera.updateProjectionMatrix();

	this.matrix = camera.matrixWorld;
	this.matrixAutoUpdate = false;

	this.pointMap = pointMap;

	this.update();

}

CameraHelper.prototype = Object.create( LineSegments.prototype );
CameraHelper.prototype.constructor = CameraHelper;

CameraHelper.prototype.update = function () {

	var geometry, pointMap;

	var vector = new Vector3();
	var camera = new Camera();

	function setPoint( point, x, y, z ) {

		vector.set( x, y, z ).unproject( camera );

		var points = pointMap[ point ];

		if ( points !== undefined ) {

			var position = geometry.getAttribute( 'position' );

			for ( var i = 0, l = points.length; i < l; i ++ ) {

				position.setXYZ( points[ i ], vector.x, vector.y, vector.z );

			}

		}

	}

	return function update() {

		geometry = this.geometry;
		pointMap = this.pointMap;

		var w = 1, h = 1;

		// we need just camera projection matrix
		// world matrix must be identity

		camera.projectionMatrix.copy( this.camera.projectionMatrix );

		// center / target

		setPoint( 'c', 0, 0, - 1 );
		setPoint( 't', 0, 0, 1 );

		// near

		setPoint( 'n1', - w, - h, - 1 );
		setPoint( 'n2', w, - h, - 1 );
		setPoint( 'n3', - w, h, - 1 );
		setPoint( 'n4', w, h, - 1 );

		// far

		setPoint( 'f1', - w, - h, 1 );
		setPoint( 'f2', w, - h, 1 );
		setPoint( 'f3', - w, h, 1 );
		setPoint( 'f4', w, h, 1 );

		// up

		setPoint( 'u1', w * 0.7, h * 1.1, - 1 );
		setPoint( 'u2', - w * 0.7, h * 1.1, - 1 );
		setPoint( 'u3', 0, h * 2, - 1 );

		// cross

		setPoint( 'cf1', - w, 0, 1 );
		setPoint( 'cf2', w, 0, 1 );
		setPoint( 'cf3', 0, - h, 1 );
		setPoint( 'cf4', 0, h, 1 );

		setPoint( 'cn1', - w, 0, - 1 );
		setPoint( 'cn2', w, 0, - 1 );
		setPoint( 'cn3', 0, - h, - 1 );
		setPoint( 'cn4', 0, h, - 1 );

		geometry.getAttribute( 'position' ).needsUpdate = true;

	};

}();

/**
 * @author mrdoob / http://mrdoob.com/
 * @author Mugen87 / http://github.com/Mugen87
 */

function AxesHelper( size ) {

	size = size || 1;

	var vertices = [
		0, 0, 0,	size, 0, 0,
		0, 0, 0,	0, size, 0,
		0, 0, 0,	0, 0, size
	];

	var colors = [
		1, 0, 0,	1, 0.6, 0,
		0, 1, 0,	0.6, 1, 0,
		0, 0, 1,	0, 0.6, 1
	];

	var geometry = new BufferGeometry();
	geometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
	geometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );

	var material = new LineBasicMaterial( { vertexColors: VertexColors } );

	LineSegments.call( this, geometry, material );

}

AxesHelper.prototype = Object.create( LineSegments.prototype );
AxesHelper.prototype.constructor = AxesHelper;

/**
 * @author zz85 https://github.com/zz85
 *
 * Centripetal CatmullRom Curve - which is useful for avoiding
 * cusps and self-intersections in non-uniform catmull rom curves.
 * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf
 *
 * curve.type accepts centripetal(default), chordal and catmullrom
 * curve.tension is used for catmullrom which defaults to 0.5
 */


/*
Based on an optimized c++ solution in
 - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/
 - http://ideone.com/NoEbVM

This CubicPoly class could be used for reusing some variables and calculations,
but for three.js curve use, it could be possible inlined and flatten into a single function call
which can be placed in CurveUtils.
*/

function CubicPoly() {

	var c0 = 0, c1 = 0, c2 = 0, c3 = 0;

	/*
	 * Compute coefficients for a cubic polynomial
	 *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3
	 * such that
	 *   p(0) = x0, p(1) = x1
	 *  and
	 *   p'(0) = t0, p'(1) = t1.
	 */
	function init( x0, x1, t0, t1 ) {

		c0 = x0;
		c1 = t0;
		c2 = - 3 * x0 + 3 * x1 - 2 * t0 - t1;
		c3 = 2 * x0 - 2 * x1 + t0 + t1;

	}

	return {

		initCatmullRom: function ( x0, x1, x2, x3, tension ) {

			init( x1, x2, tension * ( x2 - x0 ), tension * ( x3 - x1 ) );

		},

		initNonuniformCatmullRom: function ( x0, x1, x2, x3, dt0, dt1, dt2 ) {

			// compute tangents when parameterized in [t1,t2]
			var t1 = ( x1 - x0 ) / dt0 - ( x2 - x0 ) / ( dt0 + dt1 ) + ( x2 - x1 ) / dt1;
			var t2 = ( x2 - x1 ) / dt1 - ( x3 - x1 ) / ( dt1 + dt2 ) + ( x3 - x2 ) / dt2;

			// rescale tangents for parametrization in [0,1]
			t1 *= dt1;
			t2 *= dt1;

			init( x1, x2, t1, t2 );

		},

		calc: function ( t ) {

			var t2 = t * t;
			var t3 = t2 * t;
			return c0 + c1 * t + c2 * t2 + c3 * t3;

		}

	};

}

//

var tmp = new Vector3();
var px = new CubicPoly();
var py = new CubicPoly();
var pz = new CubicPoly();

function CatmullRomCurve3( points, closed, curveType, tension ) {

	Curve.call( this );

	this.type = 'CatmullRomCurve3';

	this.points = points || [];
	this.closed = closed || false;
	this.curveType = curveType || 'centripetal';
	this.tension = tension || 0.5;

}

CatmullRomCurve3.prototype = Object.create( Curve.prototype );
CatmullRomCurve3.prototype.constructor = CatmullRomCurve3;

CatmullRomCurve3.prototype.isCatmullRomCurve3 = true;

CatmullRomCurve3.prototype.getPoint = function ( t, optionalTarget ) {

	var point = optionalTarget || new Vector3();

	var points = this.points;
	var l = points.length;

	var p = ( l - ( this.closed ? 0 : 1 ) ) * t;
	var intPoint = Math.floor( p );
	var weight = p - intPoint;

	if ( this.closed ) {

		intPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / points.length ) + 1 ) * points.length;

	} else if ( weight === 0 && intPoint === l - 1 ) {

		intPoint = l - 2;
		weight = 1;

	}

	var p0, p1, p2, p3; // 4 points

	if ( this.closed || intPoint > 0 ) {

		p0 = points[ ( intPoint - 1 ) % l ];

	} else {

		// extrapolate first point
		tmp.subVectors( points[ 0 ], points[ 1 ] ).add( points[ 0 ] );
		p0 = tmp;

	}

	p1 = points[ intPoint % l ];
	p2 = points[ ( intPoint + 1 ) % l ];

	if ( this.closed || intPoint + 2 < l ) {

		p3 = points[ ( intPoint + 2 ) % l ];

	} else {

		// extrapolate last point
		tmp.subVectors( points[ l - 1 ], points[ l - 2 ] ).add( points[ l - 1 ] );
		p3 = tmp;

	}

	if ( this.curveType === 'centripetal' || this.curveType === 'chordal' ) {

		// init Centripetal / Chordal Catmull-Rom
		var pow = this.curveType === 'chordal' ? 0.5 : 0.25;
		var dt0 = Math.pow( p0.distanceToSquared( p1 ), pow );
		var dt1 = Math.pow( p1.distanceToSquared( p2 ), pow );
		var dt2 = Math.pow( p2.distanceToSquared( p3 ), pow );

		// safety check for repeated points
		if ( dt1 < 1e-4 ) dt1 = 1.0;
		if ( dt0 < 1e-4 ) dt0 = dt1;
		if ( dt2 < 1e-4 ) dt2 = dt1;

		px.initNonuniformCatmullRom( p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2 );
		py.initNonuniformCatmullRom( p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2 );
		pz.initNonuniformCatmullRom( p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2 );

	} else if ( this.curveType === 'catmullrom' ) {

		px.initCatmullRom( p0.x, p1.x, p2.x, p3.x, this.tension );
		py.initCatmullRom( p0.y, p1.y, p2.y, p3.y, this.tension );
		pz.initCatmullRom( p0.z, p1.z, p2.z, p3.z, this.tension );

	}

	point.set(
		px.calc( weight ),
		py.calc( weight ),
		pz.calc( weight )
	);

	return point;

};

CatmullRomCurve3.prototype.copy = function ( source ) {

	Curve.prototype.copy.call( this, source );

	this.points = [];

	for ( var i = 0, l = source.points.length; i < l; i ++ ) {

		var point = source.points[ i ];

		this.points.push( point.clone() );

	}

	this.closed = source.closed;
	this.curveType = source.curveType;
	this.tension = source.tension;

	return this;

};

Curve.create = function ( construct, getPoint ) {

	console.log( 'THREE.Curve.create() has been deprecated' );

	construct.prototype = Object.create( Curve.prototype );
	construct.prototype.constructor = construct;
	construct.prototype.getPoint = getPoint;

	return construct;

};

//

Object.assign( CurvePath.prototype, {

	createPointsGeometry: function ( divisions ) {

		console.warn( 'THREE.CurvePath: .createPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );

		// generate geometry from path points (for Line or Points objects)

		var pts = this.getPoints( divisions );
		return this.createGeometry( pts );

	},

	createSpacedPointsGeometry: function ( divisions ) {

		console.warn( 'THREE.CurvePath: .createSpacedPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );

		// generate geometry from equidistant sampling along the path

		var pts = this.getSpacedPoints( divisions );
		return this.createGeometry( pts );

	},

	createGeometry: function ( points ) {

		console.warn( 'THREE.CurvePath: .createGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );

		var geometry = new Geometry();

		for ( var i = 0, l = points.length; i < l; i ++ ) {

			var point = points[ i ];
			geometry.vertices.push( new Vector3( point.x, point.y, point.z || 0 ) );

		}

		return geometry;

	}

} );

//

Object.assign( Path.prototype, {

	fromPoints: function ( points ) {

		console.warn( 'THREE.Path: .fromPoints() has been renamed to .setFromPoints().' );
		this.setFromPoints( points );

	}

} );

//

function Spline( points ) {

	console.warn( 'THREE.Spline has been removed. Use THREE.CatmullRomCurve3 instead.' );

	CatmullRomCurve3.call( this, points );
	this.type = 'catmullrom';

}

Spline.prototype = Object.create( CatmullRomCurve3.prototype );

Object.assign( Spline.prototype, {

	initFromArray: function ( /* a */ ) {

		console.error( 'THREE.Spline: .initFromArray() has been removed.' );

	},
	getControlPointsArray: function ( /* optionalTarget */ ) {

		console.error( 'THREE.Spline: .getControlPointsArray() has been removed.' );

	},
	reparametrizeByArcLength: function ( /* samplingCoef */ ) {

		console.error( 'THREE.Spline: .reparametrizeByArcLength() has been removed.' );

	}

} );

//

SkeletonHelper.prototype.update = function () {

	console.error( 'THREE.SkeletonHelper: update() no longer needs to be called.' );

};

Object.assign( Box2.prototype, {

	center: function ( optionalTarget ) {

		console.warn( 'THREE.Box2: .center() has been renamed to .getCenter().' );
		return this.getCenter( optionalTarget );

	},
	empty: function () {

		console.warn( 'THREE.Box2: .empty() has been renamed to .isEmpty().' );
		return this.isEmpty();

	},
	isIntersectionBox: function ( box ) {

		console.warn( 'THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().' );
		return this.intersectsBox( box );

	},
	size: function ( optionalTarget ) {

		console.warn( 'THREE.Box2: .size() has been renamed to .getSize().' );
		return this.getSize( optionalTarget );

	}
} );

Object.assign( Box3.prototype, {

	center: function ( optionalTarget ) {

		console.warn( 'THREE.Box3: .center() has been renamed to .getCenter().' );
		return this.getCenter( optionalTarget );

	},
	empty: function () {

		console.warn( 'THREE.Box3: .empty() has been renamed to .isEmpty().' );
		return this.isEmpty();

	},
	isIntersectionBox: function ( box ) {

		console.warn( 'THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().' );
		return this.intersectsBox( box );

	},
	isIntersectionSphere: function ( sphere ) {

		console.warn( 'THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().' );
		return this.intersectsSphere( sphere );

	},
	size: function ( optionalTarget ) {

		console.warn( 'THREE.Box3: .size() has been renamed to .getSize().' );
		return this.getSize( optionalTarget );

	}
} );

Line3.prototype.center = function ( optionalTarget ) {

	console.warn( 'THREE.Line3: .center() has been renamed to .getCenter().' );
	return this.getCenter( optionalTarget );

};

Object.assign( _Math, {

	random16: function () {

		console.warn( 'THREE.Math: .random16() has been deprecated. Use Math.random() instead.' );
		return Math.random();

	},

	nearestPowerOfTwo: function ( value ) {

		console.warn( 'THREE.Math: .nearestPowerOfTwo() has been renamed to .floorPowerOfTwo().' );
		return _Math.floorPowerOfTwo( value );

	},

	nextPowerOfTwo: function ( value ) {

		console.warn( 'THREE.Math: .nextPowerOfTwo() has been renamed to .ceilPowerOfTwo().' );
		return _Math.ceilPowerOfTwo( value );

	}

} );

Object.assign( Matrix3.prototype, {

	flattenToArrayOffset: function ( array, offset ) {

		console.warn( "THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead." );
		return this.toArray( array, offset );

	},
	multiplyVector3: function ( vector ) {

		console.warn( 'THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.' );
		return vector.applyMatrix3( this );

	},
	multiplyVector3Array: function ( /* a */ ) {

		console.error( 'THREE.Matrix3: .multiplyVector3Array() has been removed.' );

	},
	applyToBuffer: function ( buffer /*, offset, length */ ) {

		console.warn( 'THREE.Matrix3: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead.' );
		return this.applyToBufferAttribute( buffer );

	},
	applyToVector3Array: function ( /* array, offset, length */ ) {

		console.error( 'THREE.Matrix3: .applyToVector3Array() has been removed.' );

	}

} );

Object.assign( Matrix4.prototype, {

	extractPosition: function ( m ) {

		console.warn( 'THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().' );
		return this.copyPosition( m );

	},
	flattenToArrayOffset: function ( array, offset ) {

		console.warn( "THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead." );
		return this.toArray( array, offset );

	},
	getPosition: function () {

		var v1;

		return function getPosition() {

			if ( v1 === undefined ) v1 = new Vector3();
			console.warn( 'THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.' );
			return v1.setFromMatrixColumn( this, 3 );

		};

	}(),
	setRotationFromQuaternion: function ( q ) {

		console.warn( 'THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().' );
		return this.makeRotationFromQuaternion( q );

	},
	multiplyToArray: function () {

		console.warn( 'THREE.Matrix4: .multiplyToArray() has been removed.' );

	},
	multiplyVector3: function ( vector ) {

		console.warn( 'THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead.' );
		return vector.applyMatrix4( this );

	},
	multiplyVector4: function ( vector ) {

		console.warn( 'THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.' );
		return vector.applyMatrix4( this );

	},
	multiplyVector3Array: function ( /* a */ ) {

		console.error( 'THREE.Matrix4: .multiplyVector3Array() has been removed.' );

	},
	rotateAxis: function ( v ) {

		console.warn( 'THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.' );
		v.transformDirection( this );

	},
	crossVector: function ( vector ) {

		console.warn( 'THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.' );
		return vector.applyMatrix4( this );

	},
	translate: function () {

		console.error( 'THREE.Matrix4: .translate() has been removed.' );

	},
	rotateX: function () {

		console.error( 'THREE.Matrix4: .rotateX() has been removed.' );

	},
	rotateY: function () {

		console.error( 'THREE.Matrix4: .rotateY() has been removed.' );

	},
	rotateZ: function () {

		console.error( 'THREE.Matrix4: .rotateZ() has been removed.' );

	},
	rotateByAxis: function () {

		console.error( 'THREE.Matrix4: .rotateByAxis() has been removed.' );

	},
	applyToBuffer: function ( buffer /*, offset, length */ ) {

		console.warn( 'THREE.Matrix4: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead.' );
		return this.applyToBufferAttribute( buffer );

	},
	applyToVector3Array: function ( /* array, offset, length */ ) {

		console.error( 'THREE.Matrix4: .applyToVector3Array() has been removed.' );

	},
	makeFrustum: function ( left, right, bottom, top, near, far ) {

		console.warn( 'THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead.' );
		return this.makePerspective( left, right, top, bottom, near, far );

	}

} );

Plane.prototype.isIntersectionLine = function ( line ) {

	console.warn( 'THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().' );
	return this.intersectsLine( line );

};

Quaternion.prototype.multiplyVector3 = function ( vector ) {

	console.warn( 'THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.' );
	return vector.applyQuaternion( this );

};

Object.assign( Ray.prototype, {

	isIntersectionBox: function ( box ) {

		console.warn( 'THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().' );
		return this.intersectsBox( box );

	},
	isIntersectionPlane: function ( plane ) {

		console.warn( 'THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().' );
		return this.intersectsPlane( plane );

	},
	isIntersectionSphere: function ( sphere ) {

		console.warn( 'THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().' );
		return this.intersectsSphere( sphere );

	}

} );

Object.assign( Shape.prototype, {

	extractAllPoints: function ( divisions ) {

		console.warn( 'THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead.' );
		return this.extractPoints( divisions );

	},
	extrude: function ( options ) {

		console.warn( 'THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.' );
		return new ExtrudeGeometry( this, options );

	},
	makeGeometry: function ( options ) {

		console.warn( 'THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.' );
		return new ShapeGeometry( this, options );

	}

} );

Object.assign( Vector2.prototype, {

	fromAttribute: function ( attribute, index, offset ) {

		console.warn( 'THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute().' );
		return this.fromBufferAttribute( attribute, index, offset );

	},
	distanceToManhattan: function ( v ) {

		console.warn( 'THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo().' );
		return this.manhattanDistanceTo( v );

	},
	lengthManhattan: function () {

		console.warn( 'THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength().' );
		return this.manhattanLength();

	}

} );

Object.assign( Vector3.prototype, {

	setEulerFromRotationMatrix: function () {

		console.error( 'THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.' );

	},
	setEulerFromQuaternion: function () {

		console.error( 'THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.' );

	},
	getPositionFromMatrix: function ( m ) {

		console.warn( 'THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().' );
		return this.setFromMatrixPosition( m );

	},
	getScaleFromMatrix: function ( m ) {

		console.warn( 'THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().' );
		return this.setFromMatrixScale( m );

	},
	getColumnFromMatrix: function ( index, matrix ) {

		console.warn( 'THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().' );
		return this.setFromMatrixColumn( matrix, index );

	},
	applyProjection: function ( m ) {

		console.warn( 'THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead.' );
		return this.applyMatrix4( m );

	},
	fromAttribute: function ( attribute, index, offset ) {

		console.warn( 'THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute().' );
		return this.fromBufferAttribute( attribute, index, offset );

	},
	distanceToManhattan: function ( v ) {

		console.warn( 'THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo().' );
		return this.manhattanDistanceTo( v );

	},
	lengthManhattan: function () {

		console.warn( 'THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength().' );
		return this.manhattanLength();

	}

} );

Object.assign( Vector4.prototype, {

	fromAttribute: function ( attribute, index, offset ) {

		console.warn( 'THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute().' );
		return this.fromBufferAttribute( attribute, index, offset );

	},
	lengthManhattan: function () {

		console.warn( 'THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength().' );
		return this.manhattanLength();

	}

} );

//

Geometry.prototype.computeTangents = function () {

	console.warn( 'THREE.Geometry: .computeTangents() has been removed.' );

};

Object.assign( Object3D.prototype, {

	getChildByName: function ( name ) {

		console.warn( 'THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().' );
		return this.getObjectByName( name );

	},
	renderDepth: function () {

		console.warn( 'THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.' );

	},
	translate: function ( distance, axis ) {

		console.warn( 'THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.' );
		return this.translateOnAxis( axis, distance );

	}

} );

Object.defineProperties( Object3D.prototype, {

	eulerOrder: {
		get: function () {

			console.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );
			return this.rotation.order;

		},
		set: function ( value ) {

			console.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );
			this.rotation.order = value;

		}
	},
	useQuaternion: {
		get: function () {

			console.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );

		},
		set: function () {

			console.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );

		}
	}

} );

Object.defineProperties( LOD.prototype, {

	objects: {
		get: function () {

			console.warn( 'THREE.LOD: .objects has been renamed to .levels.' );
			return this.levels;

		}
	}

} );

Object.defineProperty( Skeleton.prototype, 'useVertexTexture', {

	get: function () {

		console.warn( 'THREE.Skeleton: useVertexTexture has been removed.' );

	},
	set: function () {

		console.warn( 'THREE.Skeleton: useVertexTexture has been removed.' );

	}

} );

Object.defineProperty( Curve.prototype, '__arcLengthDivisions', {

	get: function () {

		console.warn( 'THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.' );
		return this.arcLengthDivisions;

	},
	set: function ( value ) {

		console.warn( 'THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.' );
		this.arcLengthDivisions = value;

	}

} );

//

PerspectiveCamera.prototype.setLens = function ( focalLength, filmGauge ) {

	console.warn( "THREE.PerspectiveCamera.setLens is deprecated. " +
			"Use .setFocalLength and .filmGauge for a photographic setup." );

	if ( filmGauge !== undefined ) this.filmGauge = filmGauge;
	this.setFocalLength( focalLength );

};

//

Object.defineProperties( Light.prototype, {
	onlyShadow: {
		set: function () {

			console.warn( 'THREE.Light: .onlyShadow has been removed.' );

		}
	},
	shadowCameraFov: {
		set: function ( value ) {

			console.warn( 'THREE.Light: .shadowCameraFov is now .shadow.camera.fov.' );
			this.shadow.camera.fov = value;

		}
	},
	shadowCameraLeft: {
		set: function ( value ) {

			console.warn( 'THREE.Light: .shadowCameraLeft is now .shadow.camera.left.' );
			this.shadow.camera.left = value;

		}
	},
	shadowCameraRight: {
		set: function ( value ) {

			console.warn( 'THREE.Light: .shadowCameraRight is now .shadow.camera.right.' );
			this.shadow.camera.right = value;

		}
	},
	shadowCameraTop: {
		set: function ( value ) {

			console.warn( 'THREE.Light: .shadowCameraTop is now .shadow.camera.top.' );
			this.shadow.camera.top = value;

		}
	},
	shadowCameraBottom: {
		set: function ( value ) {

			console.warn( 'THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.' );
			this.shadow.camera.bottom = value;

		}
	},
	shadowCameraNear: {
		set: function ( value ) {

			console.warn( 'THREE.Light: .shadowCameraNear is now .shadow.camera.near.' );
			this.shadow.camera.near = value;

		}
	},
	shadowCameraFar: {
		set: function ( value ) {

			console.warn( 'THREE.Light: .shadowCameraFar is now .shadow.camera.far.' );
			this.shadow.camera.far = value;

		}
	},
	shadowCameraVisible: {
		set: function () {

			console.warn( 'THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.' );

		}
	},
	shadowBias: {
		set: function ( value ) {

			console.warn( 'THREE.Light: .shadowBias is now .shadow.bias.' );
			this.shadow.bias = value;

		}
	},
	shadowDarkness: {
		set: function () {

			console.warn( 'THREE.Light: .shadowDarkness has been removed.' );

		}
	},
	shadowMapWidth: {
		set: function ( value ) {

			console.warn( 'THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.' );
			this.shadow.mapSize.width = value;

		}
	},
	shadowMapHeight: {
		set: function ( value ) {

			console.warn( 'THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.' );
			this.shadow.mapSize.height = value;

		}
	}
} );

//

Object.defineProperties( BufferAttribute.prototype, {

	length: {
		get: function () {

			console.warn( 'THREE.BufferAttribute: .length has been deprecated. Use .count instead.' );
			return this.array.length;

		}
	}

} );

Object.assign( BufferGeometry.prototype, {

	addIndex: function ( index ) {

		console.warn( 'THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().' );
		this.setIndex( index );

	},
	addDrawCall: function ( start, count, indexOffset ) {

		if ( indexOffset !== undefined ) {

			console.warn( 'THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.' );

		}
		console.warn( 'THREE.BufferGeometry: .addDrawCall() is now .addGroup().' );
		this.addGroup( start, count );

	},
	clearDrawCalls: function () {

		console.warn( 'THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().' );
		this.clearGroups();

	},
	computeTangents: function () {

		console.warn( 'THREE.BufferGeometry: .computeTangents() has been removed.' );

	},
	computeOffsets: function () {

		console.warn( 'THREE.BufferGeometry: .computeOffsets() has been removed.' );

	}

} );

Object.defineProperties( BufferGeometry.prototype, {

	drawcalls: {
		get: function () {

			console.error( 'THREE.BufferGeometry: .drawcalls has been renamed to .groups.' );
			return this.groups;

		}
	},
	offsets: {
		get: function () {

			console.warn( 'THREE.BufferGeometry: .offsets has been renamed to .groups.' );
			return this.groups;

		}
	}

} );

//

Object.defineProperties( Uniform.prototype, {

	dynamic: {
		set: function () {

			console.warn( 'THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.' );

		}
	},
	onUpdate: {
		value: function () {

			console.warn( 'THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.' );
			return this;

		}
	}

} );

//

Object.defineProperties( Material.prototype, {

	wrapAround: {
		get: function () {

			console.warn( 'THREE.Material: .wrapAround has been removed.' );

		},
		set: function () {

			console.warn( 'THREE.Material: .wrapAround has been removed.' );

		}
	},
	wrapRGB: {
		get: function () {

			console.warn( 'THREE.Material: .wrapRGB has been removed.' );
			return new Color();

		}
	},

	shading: {
		get: function () {

			console.error( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );

		},
		set: function ( value ) {

			console.warn( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );
			this.flatShading = ( value === FlatShading );

		}
	}

} );

Object.defineProperties( MeshPhongMaterial.prototype, {

	metal: {
		get: function () {

			console.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.' );
			return false;

		},
		set: function () {

			console.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead' );

		}
	}

} );

Object.defineProperties( ShaderMaterial.prototype, {

	derivatives: {
		get: function () {

			console.warn( 'THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );
			return this.extensions.derivatives;

		},
		set: function ( value ) {

			console.warn( 'THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );
			this.extensions.derivatives = value;

		}
	}

} );

//

Object.assign( WebGLRenderer.prototype, {

	getCurrentRenderTarget: function () {

		console.warn( 'THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget().' );
		return this.getRenderTarget();

	},

	getMaxAnisotropy: function () {

		console.warn( 'THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy().' );
		return this.capabilities.getMaxAnisotropy();

	},

	getPrecision: function () {

		console.warn( 'THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision.' );
		return this.capabilities.precision;

	},

	resetGLState: function () {

		console.warn( 'THREE.WebGLRenderer: .resetGLState() is now .state.reset().' );
		return this.state.reset();

	},

	supportsFloatTextures: function () {

		console.warn( 'THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \'OES_texture_float\' ).' );
		return this.extensions.get( 'OES_texture_float' );

	},
	supportsHalfFloatTextures: function () {

		console.warn( 'THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \'OES_texture_half_float\' ).' );
		return this.extensions.get( 'OES_texture_half_float' );

	},
	supportsStandardDerivatives: function () {

		console.warn( 'THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \'OES_standard_derivatives\' ).' );
		return this.extensions.get( 'OES_standard_derivatives' );

	},
	supportsCompressedTextureS3TC: function () {

		console.warn( 'THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \'WEBGL_compressed_texture_s3tc\' ).' );
		return this.extensions.get( 'WEBGL_compressed_texture_s3tc' );

	},
	supportsCompressedTexturePVRTC: function () {

		console.warn( 'THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \'WEBGL_compressed_texture_pvrtc\' ).' );
		return this.extensions.get( 'WEBGL_compressed_texture_pvrtc' );

	},
	supportsBlendMinMax: function () {

		console.warn( 'THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \'EXT_blend_minmax\' ).' );
		return this.extensions.get( 'EXT_blend_minmax' );

	},
	supportsVertexTextures: function () {

		console.warn( 'THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures.' );
		return this.capabilities.vertexTextures;

	},
	supportsInstancedArrays: function () {

		console.warn( 'THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \'ANGLE_instanced_arrays\' ).' );
		return this.extensions.get( 'ANGLE_instanced_arrays' );

	},
	enableScissorTest: function ( boolean ) {

		console.warn( 'THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().' );
		this.setScissorTest( boolean );

	},
	initMaterial: function () {

		console.warn( 'THREE.WebGLRenderer: .initMaterial() has been removed.' );

	},
	addPrePlugin: function () {

		console.warn( 'THREE.WebGLRenderer: .addPrePlugin() has been removed.' );

	},
	addPostPlugin: function () {

		console.warn( 'THREE.WebGLRenderer: .addPostPlugin() has been removed.' );

	},
	updateShadowMap: function () {

		console.warn( 'THREE.WebGLRenderer: .updateShadowMap() has been removed.' );

	}

} );

Object.defineProperties( WebGLRenderer.prototype, {

	shadowMapEnabled: {
		get: function () {

			return this.shadowMap.enabled;

		},
		set: function ( value ) {

			console.warn( 'THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.' );
			this.shadowMap.enabled = value;

		}
	},
	shadowMapType: {
		get: function () {

			return this.shadowMap.type;

		},
		set: function ( value ) {

			console.warn( 'THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.' );
			this.shadowMap.type = value;

		}
	},
	shadowMapCullFace: {
		get: function () {

			return this.shadowMap.cullFace;

		},
		set: function ( value ) {

			console.warn( 'THREE.WebGLRenderer: .shadowMapCullFace is now .shadowMap.cullFace.' );
			this.shadowMap.cullFace = value;

		}
	}
} );

Object.defineProperties( WebGLShadowMap.prototype, {

	cullFace: {
		get: function () {

			return this.renderReverseSided ? CullFaceFront : CullFaceBack;

		},
		set: function ( cullFace ) {

			var value = ( cullFace !== CullFaceBack );
			console.warn( "WebGLRenderer: .shadowMap.cullFace is deprecated. Set .shadowMap.renderReverseSided to " + value + "." );
			this.renderReverseSided = value;

		}
	}

} );

//

Object.defineProperties( WebGLRenderTarget.prototype, {

	wrapS: {
		get: function () {

			console.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );
			return this.texture.wrapS;

		},
		set: function ( value ) {

			console.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );
			this.texture.wrapS = value;

		}
	},
	wrapT: {
		get: function () {

			console.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );
			return this.texture.wrapT;

		},
		set: function ( value ) {

			console.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );
			this.texture.wrapT = value;

		}
	},
	magFilter: {
		get: function () {

			console.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );
			return this.texture.magFilter;

		},
		set: function ( value ) {

			console.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );
			this.texture.magFilter = value;

		}
	},
	minFilter: {
		get: function () {

			console.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );
			return this.texture.minFilter;

		},
		set: function ( value ) {

			console.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );
			this.texture.minFilter = value;

		}
	},
	anisotropy: {
		get: function () {

			console.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );
			return this.texture.anisotropy;

		},
		set: function ( value ) {

			console.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );
			this.texture.anisotropy = value;

		}
	},
	offset: {
		get: function () {

			console.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );
			return this.texture.offset;

		},
		set: function ( value ) {

			console.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );
			this.texture.offset = value;

		}
	},
	repeat: {
		get: function () {

			console.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );
			return this.texture.repeat;

		},
		set: function ( value ) {

			console.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );
			this.texture.repeat = value;

		}
	},
	format: {
		get: function () {

			console.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );
			return this.texture.format;

		},
		set: function ( value ) {

			console.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );
			this.texture.format = value;

		}
	},
	type: {
		get: function () {

			console.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );
			return this.texture.type;

		},
		set: function ( value ) {

			console.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );
			this.texture.type = value;

		}
	},
	generateMipmaps: {
		get: function () {

			console.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );
			return this.texture.generateMipmaps;

		},
		set: function ( value ) {

			console.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );
			this.texture.generateMipmaps = value;

		}
	}

} );

//

Audio.prototype.load = function ( file ) {

	console.warn( 'THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.' );
	var scope = this;
	var audioLoader = new AudioLoader();
	audioLoader.load( file, function ( buffer ) {

		scope.setBuffer( buffer );

	} );
	return this;

};

AudioAnalyser.prototype.getData = function () {

	console.warn( 'THREE.AudioAnalyser: .getData() is now .getFrequencyData().' );
	return this.getFrequencyData();

};

//

class ThreeEnvironment {
  
  /**
  * constructor, need the DOM element to setup the THREE js environment
  * @param {DOMElement} domEl - a div
  */
  constructor( domEl ){
    this._parentDiv = domEl;
    this._camera = null;
    this._scene = null;
    this._objectContainer = null;
    this._renderer = null;
    
    this._initThreeEnv();
    this._animate();
  }
  
  
  _initThreeEnv(){
    var objectContainer = new Object3D();
    this._camera = new PerspectiveCamera( 45, window.innerWidth / window.innerHeight, 1, 3500 );
    this._camera.position.z = 50;
    
    this._scene = new Scene();
    
    var axesHelper = new AxesHelper( 5 );
    this._scene.add( axesHelper );

    this._scene.add( new AmbientLight( 0x444444 ) );

    var light1 = new DirectionalLight( 0xffffff, 0.5 );
    light1.position.set( 1, 1, 1 );
    this._scene.add( light1 );

    var light2 = new DirectionalLight( 0xffffff, 1.5 );
    light2.position.set( 0, -1, 0 );
    this._scene.add( light2 );
    this._scene.add( objectContainer );

    this._renderer = new WebGLRenderer( { antialias: true, alpha: true } );
    this._renderer.setClearColor( 0xffffff, 0 );
    this._renderer.setPixelRatio( window.devicePixelRatio );
    this._renderer.setSize( window.innerWidth, window.innerHeight );
    this._renderer.gammaInput = true;
    this._renderer.gammaOutput = true;

    this._parentDiv.appendChild( this._renderer.domElement );
    window.addEventListener( 'resize', this._onWindowResize.bind(this), false );
  }
  
  
  _onWindowResize() {
    this._camera.aspect = window.innerWidth / window.innerHeight;
    this._camera.updateProjectionMatrix();
    this._renderer.setSize( window.innerWidth, window.innerHeight );
  }
  
  
  _animate() {
    requestAnimationFrame( this._animate.bind(this) );
    this._render();
  }
  
  
  _render(){
    
    //var time = Date.now() * 0.001;
    //objectContainer.rotation.x = time * 0.25;
    //objectContainer.rotation.y = time * 0.5;
    this._renderer.render( this._scene, this._camera );
  }
  
  
  addCube(){
    var geometry = new BoxGeometry( 1, 1, 1 );
    var material = new MeshBasicMaterial( {color: 0x00ff00} );
    var cube = new Mesh( geometry, material );
    this._objectContainer.add( cube );
  }
  
  
} /* END of class ThreeEnvironment */

/* src/components/ThreePlayground.html generated by Svelte v1.41.3 */
function data$1() {
  return {
    threeEnvironment: null
  }
}

var methods$2 = {

  
};

function oncreate$1() {
  this.set({threeEnvironment: new ThreeEnvironment( this.refs.threeParentDiv )});
}

function encapsulateStyles$2(node) {
	setAttribute(node, "svelte-1474427007", "");
}

function create_main_fragment$2(state, component) {
	var div;

	return {
		c: function create() {
			div = createElement("div");
			this.h();
		},

		h: function hydrate() {
			encapsulateStyles$2(div);
			div.className = "threeParentDiv";
		},

		m: function mount(target, anchor) {
			insertNode(div, target, anchor);
			component.refs.threeParentDiv = div;
		},

		p: noop,

		u: function unmount() {
			detachNode(div);
		},

		d: function destroy$$1() {
			if (component.refs.threeParentDiv === div) component.refs.threeParentDiv = null;
		}
	};
}

function ThreePlayground(options) {
	init(this, options);
	this.refs = {};
	this._state = assign(data$1(), options.data);

	var _oncreate = oncreate$1.bind(this);

	if (!options._root) {
		this._oncreate = [_oncreate];
	} else {
	 	this._root._oncreate.push(_oncreate);
	 }

	this._fragment = create_main_fragment$2(this._state, this);

	if (options.target) {
		this._fragment.c();
		this._fragment.m(options.target, options.anchor || null);

		callAll(this._oncreate);
	}
}

assign(ThreePlayground.prototype, methods$2, proto);

var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};



function unwrapExports (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var pixpipe_cjs = createCommonjsModule(function (module, exports) {
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. */

/**
 * Common utilities
 * @module glMatrix
 */

// Configuration Constants

var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;


/**
 * Sets the type of array used when creating new vectors and matrices
 *
 * @param {Type} type Array type, such as Float32Array or Array
 */
function setMatrixArrayType(type) {
  ARRAY_TYPE = type;
}

/**
 * Convert Degree To Radian
 *
 * @param {Number} a Angle in Degrees
 */


/**
 * Tests whether or not the arguments have approximately the same value, within an absolute
 * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less
 * than or equal to 1.0, and a relative tolerance is used for larger values)
 *
 * @param {Number} a The first number to test.
 * @param {Number} b The second number to test.
 * @returns {Boolean} True if the numbers are approximately equal, false otherwise.
 */

/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. */

/**
 * 2x2 Matrix
 * @module mat2
 */

/**
 * Creates a new identity mat2
 *
 * @returns {mat2} a new 2x2 matrix
 */


/**
 * Creates a new mat2 initialized with values from an existing matrix
 *
 * @param {mat2} a matrix to clone
 * @returns {mat2} a new 2x2 matrix
 */


/**
 * Copy the values from one mat2 to another
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the source matrix
 * @returns {mat2} out
 */


/**
 * Set a mat2 to the identity matrix
 *
 * @param {mat2} out the receiving matrix
 * @returns {mat2} out
 */


/**
 * Create a new mat2 with the given values
 *
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m10 Component in column 1, row 0 position (index 2)
 * @param {Number} m11 Component in column 1, row 1 position (index 3)
 * @returns {mat2} out A new 2x2 matrix
 */


/**
 * Set the components of a mat2 to the given values
 *
 * @param {mat2} out the receiving matrix
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m10 Component in column 1, row 0 position (index 2)
 * @param {Number} m11 Component in column 1, row 1 position (index 3)
 * @returns {mat2} out
 */


/**
 * Transpose the values of a mat2
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the source matrix
 * @returns {mat2} out
 */


/**
 * Inverts a mat2
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the source matrix
 * @returns {mat2} out
 */


/**
 * Calculates the adjugate of a mat2
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the source matrix
 * @returns {mat2} out
 */


/**
 * Calculates the determinant of a mat2
 *
 * @param {mat2} a the source matrix
 * @returns {Number} determinant of a
 */


/**
 * Multiplies two mat2's
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the first operand
 * @param {mat2} b the second operand
 * @returns {mat2} out
 */


/**
 * Rotates a mat2 by the given angle
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat2} out
 */


/**
 * Scales the mat2 by the dimensions in the given vec2
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the matrix to rotate
 * @param {vec2} v the vec2 to scale the matrix by
 * @returns {mat2} out
 **/


/**
 * Creates a matrix from a given angle
 * This is equivalent to (but much faster than):
 *
 *     mat2.identity(dest);
 *     mat2.rotate(dest, dest, rad);
 *
 * @param {mat2} out mat2 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat2} out
 */


/**
 * Creates a matrix from a vector scaling
 * This is equivalent to (but much faster than):
 *
 *     mat2.identity(dest);
 *     mat2.scale(dest, dest, vec);
 *
 * @param {mat2} out mat2 receiving operation result
 * @param {vec2} v Scaling vector
 * @returns {mat2} out
 */


/**
 * Returns a string representation of a mat2
 *
 * @param {mat2} a matrix to represent as a string
 * @returns {String} string representation of the matrix
 */


/**
 * Returns Frobenius norm of a mat2
 *
 * @param {mat2} a the matrix to calculate Frobenius norm of
 * @returns {Number} Frobenius norm
 */


/**
 * Returns L, D and U matrices (Lower triangular, Diagonal and Upper triangular) by factorizing the input matrix
 * @param {mat2} L the lower triangular matrix
 * @param {mat2} D the diagonal matrix
 * @param {mat2} U the upper triangular matrix
 * @param {mat2} a the input matrix to factorize
 */



/**
 * Adds two mat2's
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the first operand
 * @param {mat2} b the second operand
 * @returns {mat2} out
 */


/**
 * Subtracts matrix b from matrix a
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the first operand
 * @param {mat2} b the second operand
 * @returns {mat2} out
 */


/**
 * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)
 *
 * @param {mat2} a The first matrix.
 * @param {mat2} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */


/**
 * Returns whether or not the matrices have approximately the same elements in the same position.
 *
 * @param {mat2} a The first matrix.
 * @param {mat2} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */


/**
 * Multiply each element of the matrix by a scalar.
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the matrix to scale
 * @param {Number} b amount to scale the matrix's elements by
 * @returns {mat2} out
 */


/**
 * Adds two mat2's after multiplying each element of the second operand by a scalar value.
 *
 * @param {mat2} out the receiving vector
 * @param {mat2} a the first operand
 * @param {mat2} b the second operand
 * @param {Number} scale the amount to scale b's elements by before adding
 * @returns {mat2} out
 */


/**
 * Alias for {@link mat2.multiply}
 * @function
 */


/**
 * Alias for {@link mat2.subtract}
 * @function
 */

/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. */

/**
 * 2x3 Matrix
 * @module mat2d
 *
 * @description
 * A mat2d contains six elements defined as:
 * <pre>
 * [a, c, tx,
 *  b, d, ty]
 * </pre>
 * This is a short form for the 3x3 matrix:
 * <pre>
 * [a, c, tx,
 *  b, d, ty,
 *  0, 0, 1]
 * </pre>
 * The last row is ignored so the array is shorter and operations are faster.
 */

/**
 * Creates a new identity mat2d
 *
 * @returns {mat2d} a new 2x3 matrix
 */


/**
 * Creates a new mat2d initialized with values from an existing matrix
 *
 * @param {mat2d} a matrix to clone
 * @returns {mat2d} a new 2x3 matrix
 */


/**
 * Copy the values from one mat2d to another
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the source matrix
 * @returns {mat2d} out
 */


/**
 * Set a mat2d to the identity matrix
 *
 * @param {mat2d} out the receiving matrix
 * @returns {mat2d} out
 */


/**
 * Create a new mat2d with the given values
 *
 * @param {Number} a Component A (index 0)
 * @param {Number} b Component B (index 1)
 * @param {Number} c Component C (index 2)
 * @param {Number} d Component D (index 3)
 * @param {Number} tx Component TX (index 4)
 * @param {Number} ty Component TY (index 5)
 * @returns {mat2d} A new mat2d
 */


/**
 * Set the components of a mat2d to the given values
 *
 * @param {mat2d} out the receiving matrix
 * @param {Number} a Component A (index 0)
 * @param {Number} b Component B (index 1)
 * @param {Number} c Component C (index 2)
 * @param {Number} d Component D (index 3)
 * @param {Number} tx Component TX (index 4)
 * @param {Number} ty Component TY (index 5)
 * @returns {mat2d} out
 */


/**
 * Inverts a mat2d
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the source matrix
 * @returns {mat2d} out
 */


/**
 * Calculates the determinant of a mat2d
 *
 * @param {mat2d} a the source matrix
 * @returns {Number} determinant of a
 */


/**
 * Multiplies two mat2d's
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the first operand
 * @param {mat2d} b the second operand
 * @returns {mat2d} out
 */


/**
 * Rotates a mat2d by the given angle
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat2d} out
 */


/**
 * Scales the mat2d by the dimensions in the given vec2
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the matrix to translate
 * @param {vec2} v the vec2 to scale the matrix by
 * @returns {mat2d} out
 **/


/**
 * Translates the mat2d by the dimensions in the given vec2
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the matrix to translate
 * @param {vec2} v the vec2 to translate the matrix by
 * @returns {mat2d} out
 **/


/**
 * Creates a matrix from a given angle
 * This is equivalent to (but much faster than):
 *
 *     mat2d.identity(dest);
 *     mat2d.rotate(dest, dest, rad);
 *
 * @param {mat2d} out mat2d receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat2d} out
 */


/**
 * Creates a matrix from a vector scaling
 * This is equivalent to (but much faster than):
 *
 *     mat2d.identity(dest);
 *     mat2d.scale(dest, dest, vec);
 *
 * @param {mat2d} out mat2d receiving operation result
 * @param {vec2} v Scaling vector
 * @returns {mat2d} out
 */


/**
 * Creates a matrix from a vector translation
 * This is equivalent to (but much faster than):
 *
 *     mat2d.identity(dest);
 *     mat2d.translate(dest, dest, vec);
 *
 * @param {mat2d} out mat2d receiving operation result
 * @param {vec2} v Translation vector
 * @returns {mat2d} out
 */


/**
 * Returns a string representation of a mat2d
 *
 * @param {mat2d} a matrix to represent as a string
 * @returns {String} string representation of the matrix
 */


/**
 * Returns Frobenius norm of a mat2d
 *
 * @param {mat2d} a the matrix to calculate Frobenius norm of
 * @returns {Number} Frobenius norm
 */


/**
 * Adds two mat2d's
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the first operand
 * @param {mat2d} b the second operand
 * @returns {mat2d} out
 */


/**
 * Subtracts matrix b from matrix a
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the first operand
 * @param {mat2d} b the second operand
 * @returns {mat2d} out
 */


/**
 * Multiply each element of the matrix by a scalar.
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the matrix to scale
 * @param {Number} b amount to scale the matrix's elements by
 * @returns {mat2d} out
 */


/**
 * Adds two mat2d's after multiplying each element of the second operand by a scalar value.
 *
 * @param {mat2d} out the receiving vector
 * @param {mat2d} a the first operand
 * @param {mat2d} b the second operand
 * @param {Number} scale the amount to scale b's elements by before adding
 * @returns {mat2d} out
 */


/**
 * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)
 *
 * @param {mat2d} a The first matrix.
 * @param {mat2d} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */


/**
 * Returns whether or not the matrices have approximately the same elements in the same position.
 *
 * @param {mat2d} a The first matrix.
 * @param {mat2d} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */


/**
 * Alias for {@link mat2d.multiply}
 * @function
 */


/**
 * Alias for {@link mat2d.subtract}
 * @function
 */

/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. */

/**
 * 3x3 Matrix
 * @module mat3
 */

/**
 * Creates a new identity mat3
 *
 * @returns {mat3} a new 3x3 matrix
 */
function create$2() {
  var out = new ARRAY_TYPE(9);
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 1;
  out[5] = 0;
  out[6] = 0;
  out[7] = 0;
  out[8] = 1;
  return out;
}

/**
 * Copies the upper-left 3x3 values into the given mat3.
 *
 * @param {mat3} out the receiving 3x3 matrix
 * @param {mat4} a   the source 4x4 matrix
 * @returns {mat3} out
 */


/**
 * Creates a new mat3 initialized with values from an existing matrix
 *
 * @param {mat3} a matrix to clone
 * @returns {mat3} a new 3x3 matrix
 */


/**
 * Copy the values from one mat3 to another
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the source matrix
 * @returns {mat3} out
 */


/**
 * Create a new mat3 with the given values
 *
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m02 Component in column 0, row 2 position (index 2)
 * @param {Number} m10 Component in column 1, row 0 position (index 3)
 * @param {Number} m11 Component in column 1, row 1 position (index 4)
 * @param {Number} m12 Component in column 1, row 2 position (index 5)
 * @param {Number} m20 Component in column 2, row 0 position (index 6)
 * @param {Number} m21 Component in column 2, row 1 position (index 7)
 * @param {Number} m22 Component in column 2, row 2 position (index 8)
 * @returns {mat3} A new mat3
 */


/**
 * Set the components of a mat3 to the given values
 *
 * @param {mat3} out the receiving matrix
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m02 Component in column 0, row 2 position (index 2)
 * @param {Number} m10 Component in column 1, row 0 position (index 3)
 * @param {Number} m11 Component in column 1, row 1 position (index 4)
 * @param {Number} m12 Component in column 1, row 2 position (index 5)
 * @param {Number} m20 Component in column 2, row 0 position (index 6)
 * @param {Number} m21 Component in column 2, row 1 position (index 7)
 * @param {Number} m22 Component in column 2, row 2 position (index 8)
 * @returns {mat3} out
 */


/**
 * Set a mat3 to the identity matrix
 *
 * @param {mat3} out the receiving matrix
 * @returns {mat3} out
 */


/**
 * Transpose the values of a mat3
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the source matrix
 * @returns {mat3} out
 */


/**
 * Inverts a mat3
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the source matrix
 * @returns {mat3} out
 */


/**
 * Calculates the adjugate of a mat3
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the source matrix
 * @returns {mat3} out
 */


/**
 * Calculates the determinant of a mat3
 *
 * @param {mat3} a the source matrix
 * @returns {Number} determinant of a
 */


/**
 * Multiplies two mat3's
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the first operand
 * @param {mat3} b the second operand
 * @returns {mat3} out
 */


/**
 * Translate a mat3 by the given vector
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the matrix to translate
 * @param {vec2} v vector to translate by
 * @returns {mat3} out
 */


/**
 * Rotates a mat3 by the given angle
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat3} out
 */


/**
 * Scales the mat3 by the dimensions in the given vec2
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the matrix to rotate
 * @param {vec2} v the vec2 to scale the matrix by
 * @returns {mat3} out
 **/


/**
 * Creates a matrix from a vector translation
 * This is equivalent to (but much faster than):
 *
 *     mat3.identity(dest);
 *     mat3.translate(dest, dest, vec);
 *
 * @param {mat3} out mat3 receiving operation result
 * @param {vec2} v Translation vector
 * @returns {mat3} out
 */


/**
 * Creates a matrix from a given angle
 * This is equivalent to (but much faster than):
 *
 *     mat3.identity(dest);
 *     mat3.rotate(dest, dest, rad);
 *
 * @param {mat3} out mat3 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat3} out
 */


/**
 * Creates a matrix from a vector scaling
 * This is equivalent to (but much faster than):
 *
 *     mat3.identity(dest);
 *     mat3.scale(dest, dest, vec);
 *
 * @param {mat3} out mat3 receiving operation result
 * @param {vec2} v Scaling vector
 * @returns {mat3} out
 */


/**
 * Copies the values from a mat2d into a mat3
 *
 * @param {mat3} out the receiving matrix
 * @param {mat2d} a the matrix to copy
 * @returns {mat3} out
 **/


/**
* Calculates a 3x3 matrix from the given quaternion
*
* @param {mat3} out mat3 receiving operation result
* @param {quat} q Quaternion to create matrix from
*
* @returns {mat3} out
*/


/**
* Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix
*
* @param {mat3} out mat3 receiving operation result
* @param {mat4} a Mat4 to derive the normal matrix from
*
* @returns {mat3} out
*/


/**
 * Generates a 2D projection matrix with the given bounds
 *
 * @param {mat3} out mat3 frustum matrix will be written into
 * @param {number} width Width of your gl context
 * @param {number} height Height of gl context
 * @returns {mat3} out
 */


/**
 * Returns a string representation of a mat3
 *
 * @param {mat3} a matrix to represent as a string
 * @returns {String} string representation of the matrix
 */


/**
 * Returns Frobenius norm of a mat3
 *
 * @param {mat3} a the matrix to calculate Frobenius norm of
 * @returns {Number} Frobenius norm
 */


/**
 * Adds two mat3's
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the first operand
 * @param {mat3} b the second operand
 * @returns {mat3} out
 */


/**
 * Subtracts matrix b from matrix a
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the first operand
 * @param {mat3} b the second operand
 * @returns {mat3} out
 */


/**
 * Multiply each element of the matrix by a scalar.
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the matrix to scale
 * @param {Number} b amount to scale the matrix's elements by
 * @returns {mat3} out
 */


/**
 * Adds two mat3's after multiplying each element of the second operand by a scalar value.
 *
 * @param {mat3} out the receiving vector
 * @param {mat3} a the first operand
 * @param {mat3} b the second operand
 * @param {Number} scale the amount to scale b's elements by before adding
 * @returns {mat3} out
 */


/**
 * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)
 *
 * @param {mat3} a The first matrix.
 * @param {mat3} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */


/**
 * Returns whether or not the matrices have approximately the same elements in the same position.
 *
 * @param {mat3} a The first matrix.
 * @param {mat3} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */


/**
 * Alias for {@link mat3.multiply}
 * @function
 */


/**
 * Alias for {@link mat3.subtract}
 * @function
 */

/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. */

/**
 * 4x4 Matrix
 * @module mat4
 */

/**
 * Creates a new identity mat4
 *
 * @returns {mat4} a new 4x4 matrix
 */
function create$3() {
  var out = new ARRAY_TYPE(16);
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = 1;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = 1;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}

/**
 * Creates a new mat4 initialized with values from an existing matrix
 *
 * @param {mat4} a matrix to clone
 * @returns {mat4} a new 4x4 matrix
 */


/**
 * Copy the values from one mat4 to another
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */


/**
 * Create a new mat4 with the given values
 *
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m02 Component in column 0, row 2 position (index 2)
 * @param {Number} m03 Component in column 0, row 3 position (index 3)
 * @param {Number} m10 Component in column 1, row 0 position (index 4)
 * @param {Number} m11 Component in column 1, row 1 position (index 5)
 * @param {Number} m12 Component in column 1, row 2 position (index 6)
 * @param {Number} m13 Component in column 1, row 3 position (index 7)
 * @param {Number} m20 Component in column 2, row 0 position (index 8)
 * @param {Number} m21 Component in column 2, row 1 position (index 9)
 * @param {Number} m22 Component in column 2, row 2 position (index 10)
 * @param {Number} m23 Component in column 2, row 3 position (index 11)
 * @param {Number} m30 Component in column 3, row 0 position (index 12)
 * @param {Number} m31 Component in column 3, row 1 position (index 13)
 * @param {Number} m32 Component in column 3, row 2 position (index 14)
 * @param {Number} m33 Component in column 3, row 3 position (index 15)
 * @returns {mat4} A new mat4
 */
function fromValues$3(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
  var out = new ARRAY_TYPE(16);
  out[0] = m00;
  out[1] = m01;
  out[2] = m02;
  out[3] = m03;
  out[4] = m10;
  out[5] = m11;
  out[6] = m12;
  out[7] = m13;
  out[8] = m20;
  out[9] = m21;
  out[10] = m22;
  out[11] = m23;
  out[12] = m30;
  out[13] = m31;
  out[14] = m32;
  out[15] = m33;
  return out;
}

/**
 * Set the components of a mat4 to the given values
 *
 * @param {mat4} out the receiving matrix
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m02 Component in column 0, row 2 position (index 2)
 * @param {Number} m03 Component in column 0, row 3 position (index 3)
 * @param {Number} m10 Component in column 1, row 0 position (index 4)
 * @param {Number} m11 Component in column 1, row 1 position (index 5)
 * @param {Number} m12 Component in column 1, row 2 position (index 6)
 * @param {Number} m13 Component in column 1, row 3 position (index 7)
 * @param {Number} m20 Component in column 2, row 0 position (index 8)
 * @param {Number} m21 Component in column 2, row 1 position (index 9)
 * @param {Number} m22 Component in column 2, row 2 position (index 10)
 * @param {Number} m23 Component in column 2, row 3 position (index 11)
 * @param {Number} m30 Component in column 3, row 0 position (index 12)
 * @param {Number} m31 Component in column 3, row 1 position (index 13)
 * @param {Number} m32 Component in column 3, row 2 position (index 14)
 * @param {Number} m33 Component in column 3, row 3 position (index 15)
 * @returns {mat4} out
 */


/**
 * Set a mat4 to the identity matrix
 *
 * @param {mat4} out the receiving matrix
 * @returns {mat4} out
 */


/**
 * Transpose the values of a mat4
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */


/**
 * Inverts a mat4
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */
function invert$3(out, a) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2],
      a03 = a[3];
  var a10 = a[4],
      a11 = a[5],
      a12 = a[6],
      a13 = a[7];
  var a20 = a[8],
      a21 = a[9],
      a22 = a[10],
      a23 = a[11];
  var a30 = a[12],
      a31 = a[13],
      a32 = a[14],
      a33 = a[15];

  var b00 = a00 * a11 - a01 * a10;
  var b01 = a00 * a12 - a02 * a10;
  var b02 = a00 * a13 - a03 * a10;
  var b03 = a01 * a12 - a02 * a11;
  var b04 = a01 * a13 - a03 * a11;
  var b05 = a02 * a13 - a03 * a12;
  var b06 = a20 * a31 - a21 * a30;
  var b07 = a20 * a32 - a22 * a30;
  var b08 = a20 * a33 - a23 * a30;
  var b09 = a21 * a32 - a22 * a31;
  var b10 = a21 * a33 - a23 * a31;
  var b11 = a22 * a33 - a23 * a32;

  // Calculate the determinant
  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;

  if (!det) {
    return null;
  }
  det = 1.0 / det;

  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;
  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;
  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;
  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;
  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;
  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;
  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;

  return out;
}

/**
 * Calculates the adjugate of a mat4
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */


/**
 * Calculates the determinant of a mat4
 *
 * @param {mat4} a the source matrix
 * @returns {Number} determinant of a
 */


/**
 * Multiplies two mat4s
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the first operand
 * @param {mat4} b the second operand
 * @returns {mat4} out
 */


/**
 * Translate a mat4 by the given vector
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to translate
 * @param {vec3} v vector to translate by
 * @returns {mat4} out
 */


/**
 * Scales the mat4 by the dimensions in the given vec3 not using vectorization
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to scale
 * @param {vec3} v the vec3 to scale the matrix by
 * @returns {mat4} out
 **/


/**
 * Rotates a mat4 by the given angle around the given axis
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @param {vec3} axis the axis to rotate around
 * @returns {mat4} out
 */


/**
 * Rotates a matrix by the given angle around the X axis
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */


/**
 * Rotates a matrix by the given angle around the Y axis
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */


/**
 * Rotates a matrix by the given angle around the Z axis
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */


/**
 * Creates a matrix from a vector translation
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.translate(dest, dest, vec);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {vec3} v Translation vector
 * @returns {mat4} out
 */


/**
 * Creates a matrix from a vector scaling
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.scale(dest, dest, vec);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {vec3} v Scaling vector
 * @returns {mat4} out
 */


/**
 * Creates a matrix from a given angle around a given axis
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.rotate(dest, dest, rad, axis);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @param {vec3} axis the axis to rotate around
 * @returns {mat4} out
 */


/**
 * Creates a matrix from the given angle around the X axis
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.rotateX(dest, dest, rad);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */


/**
 * Creates a matrix from the given angle around the Y axis
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.rotateY(dest, dest, rad);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */


/**
 * Creates a matrix from the given angle around the Z axis
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.rotateZ(dest, dest, rad);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */


/**
 * Creates a matrix from a quaternion rotation and vector translation
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.translate(dest, vec);
 *     let quatMat = mat4.create();
 *     quat4.toMat4(quat, quatMat);
 *     mat4.multiply(dest, quatMat);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {quat4} q Rotation quaternion
 * @param {vec3} v Translation vector
 * @returns {mat4} out
 */


/**
 * Returns the translation vector component of a transformation
 *  matrix. If a matrix is built with fromRotationTranslation,
 *  the returned vector will be the same as the translation vector
 *  originally supplied.
 * @param  {vec3} out Vector to receive translation component
 * @param  {mat4} mat Matrix to be decomposed (input)
 * @return {vec3} out
 */


/**
 * Returns the scaling factor component of a transformation
 *  matrix. If a matrix is built with fromRotationTranslationScale
 *  with a normalized Quaternion paramter, the returned vector will be
 *  the same as the scaling vector
 *  originally supplied.
 * @param  {vec3} out Vector to receive scaling factor component
 * @param  {mat4} mat Matrix to be decomposed (input)
 * @return {vec3} out
 */


/**
 * Returns a quaternion representing the rotational component
 *  of a transformation matrix. If a matrix is built with
 *  fromRotationTranslation, the returned quaternion will be the
 *  same as the quaternion originally supplied.
 * @param {quat} out Quaternion to receive the rotation component
 * @param {mat4} mat Matrix to be decomposed (input)
 * @return {quat} out
 */


/**
 * Creates a matrix from a quaternion rotation, vector translation and vector scale
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.translate(dest, vec);
 *     let quatMat = mat4.create();
 *     quat4.toMat4(quat, quatMat);
 *     mat4.multiply(dest, quatMat);
 *     mat4.scale(dest, scale)
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {quat4} q Rotation quaternion
 * @param {vec3} v Translation vector
 * @param {vec3} s Scaling vector
 * @returns {mat4} out
 */


/**
 * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.translate(dest, vec);
 *     mat4.translate(dest, origin);
 *     let quatMat = mat4.create();
 *     quat4.toMat4(quat, quatMat);
 *     mat4.multiply(dest, quatMat);
 *     mat4.scale(dest, scale)
 *     mat4.translate(dest, negativeOrigin);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {quat4} q Rotation quaternion
 * @param {vec3} v Translation vector
 * @param {vec3} s Scaling vector
 * @param {vec3} o The origin vector around which to scale and rotate
 * @returns {mat4} out
 */


/**
 * Calculates a 4x4 matrix from the given quaternion
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {quat} q Quaternion to create matrix from
 *
 * @returns {mat4} out
 */


/**
 * Generates a frustum matrix with the given bounds
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {Number} left Left bound of the frustum
 * @param {Number} right Right bound of the frustum
 * @param {Number} bottom Bottom bound of the frustum
 * @param {Number} top Top bound of the frustum
 * @param {Number} near Near bound of the frustum
 * @param {Number} far Far bound of the frustum
 * @returns {mat4} out
 */


/**
 * Generates a perspective projection matrix with the given bounds
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {number} fovy Vertical field of view in radians
 * @param {number} aspect Aspect ratio. typically viewport width/height
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum
 * @returns {mat4} out
 */


/**
 * Generates a perspective projection matrix with the given field of view.
 * This is primarily useful for generating projection matrices to be used
 * with the still experiemental WebVR API.
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum
 * @returns {mat4} out
 */


/**
 * Generates a orthogonal projection matrix with the given bounds
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {number} left Left bound of the frustum
 * @param {number} right Right bound of the frustum
 * @param {number} bottom Bottom bound of the frustum
 * @param {number} top Top bound of the frustum
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum
 * @returns {mat4} out
 */


/**
 * Generates a look-at matrix with the given eye position, focal point, and up axis
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {vec3} eye Position of the viewer
 * @param {vec3} center Point the viewer is looking at
 * @param {vec3} up vec3 pointing up
 * @returns {mat4} out
 */


/**
 * Generates a matrix that makes something look at something else.
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {vec3} eye Position of the viewer
 * @param {vec3} center Point the viewer is looking at
 * @param {vec3} up vec3 pointing up
 * @returns {mat4} out
 */


/**
 * Returns a string representation of a mat4
 *
 * @param {mat4} a matrix to represent as a string
 * @returns {String} string representation of the matrix
 */


/**
 * Returns Frobenius norm of a mat4
 *
 * @param {mat4} a the matrix to calculate Frobenius norm of
 * @returns {Number} Frobenius norm
 */


/**
 * Adds two mat4's
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the first operand
 * @param {mat4} b the second operand
 * @returns {mat4} out
 */


/**
 * Subtracts matrix b from matrix a
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the first operand
 * @param {mat4} b the second operand
 * @returns {mat4} out
 */


/**
 * Multiply each element of the matrix by a scalar.
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to scale
 * @param {Number} b amount to scale the matrix's elements by
 * @returns {mat4} out
 */


/**
 * Adds two mat4's after multiplying each element of the second operand by a scalar value.
 *
 * @param {mat4} out the receiving vector
 * @param {mat4} a the first operand
 * @param {mat4} b the second operand
 * @param {Number} scale the amount to scale b's elements by before adding
 * @returns {mat4} out
 */


/**
 * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)
 *
 * @param {mat4} a The first matrix.
 * @param {mat4} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */


/**
 * Returns whether or not the matrices have approximately the same elements in the same position.
 *
 * @param {mat4} a The first matrix.
 * @param {mat4} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */


/**
 * Alias for {@link mat4.multiply}
 * @function
 */


/**
 * Alias for {@link mat4.subtract}
 * @function
 */

/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. */

/**
 * 3 Dimensional Vector
 * @module vec3
 */

/**
 * Creates a new, empty vec3
 *
 * @returns {vec3} a new 3D vector
 */
function create$5() {
  var out = new ARRAY_TYPE(3);
  out[0] = 0;
  out[1] = 0;
  out[2] = 0;
  return out;
}

/**
 * Creates a new vec3 initialized with values from an existing vector
 *
 * @param {vec3} a vector to clone
 * @returns {vec3} a new 3D vector
 */


/**
 * Calculates the length of a vec3
 *
 * @param {vec3} a vector to calculate length of
 * @returns {Number} length of a
 */
function length$1(a) {
  var x = a[0];
  var y = a[1];
  var z = a[2];
  return Math.sqrt(x * x + y * y + z * z);
}

/**
 * Creates a new vec3 initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @returns {vec3} a new 3D vector
 */
function fromValues$5(x, y, z) {
  var out = new ARRAY_TYPE(3);
  out[0] = x;
  out[1] = y;
  out[2] = z;
  return out;
}

/**
 * Copy the values from one vec3 to another
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the source vector
 * @returns {vec3} out
 */


/**
 * Set the components of a vec3 to the given values
 *
 * @param {vec3} out the receiving vector
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @returns {vec3} out
 */


/**
 * Adds two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */


/**
 * Subtracts vector b from vector a
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */


/**
 * Multiplies two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */


/**
 * Divides two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */


/**
 * Math.ceil the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a vector to ceil
 * @returns {vec3} out
 */


/**
 * Math.floor the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a vector to floor
 * @returns {vec3} out
 */


/**
 * Returns the minimum of two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */


/**
 * Returns the maximum of two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */


/**
 * Math.round the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a vector to round
 * @returns {vec3} out
 */


/**
 * Scales a vec3 by a scalar number
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {vec3} out
 */


/**
 * Adds two vec3's after scaling the second operand by a scalar value
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @param {Number} scale the amount to scale b by before adding
 * @returns {vec3} out
 */


/**
 * Calculates the euclidian distance between two vec3's
 *
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {Number} distance between a and b
 */


/**
 * Calculates the squared euclidian distance between two vec3's
 *
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {Number} squared distance between a and b
 */


/**
 * Calculates the squared length of a vec3
 *
 * @param {vec3} a vector to calculate squared length of
 * @returns {Number} squared length of a
 */


/**
 * Negates the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a vector to negate
 * @returns {vec3} out
 */


/**
 * Returns the inverse of the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a vector to invert
 * @returns {vec3} out
 */


/**
 * Normalize a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a vector to normalize
 * @returns {vec3} out
 */
function normalize$1(out, a) {
  var x = a[0];
  var y = a[1];
  var z = a[2];
  var len = x * x + y * y + z * z;
  if (len > 0) {
    //TODO: evaluate use of glm_invsqrt here?
    len = 1 / Math.sqrt(len);
    out[0] = a[0] * len;
    out[1] = a[1] * len;
    out[2] = a[2] * len;
  }
  return out;
}

/**
 * Calculates the dot product of two vec3's
 *
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {Number} dot product of a and b
 */
function dot$1(a, b) {
  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
}

/**
 * Computes the cross product of two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
function cross(out, a, b) {
  var ax = a[0],
      ay = a[1],
      az = a[2];
  var bx = b[0],
      by = b[1],
      bz = b[2];

  out[0] = ay * bz - az * by;
  out[1] = az * bx - ax * bz;
  out[2] = ax * by - ay * bx;
  return out;
}

/**
 * Performs a linear interpolation between two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {vec3} out
 */


/**
 * Performs a hermite interpolation with two control points
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @param {vec3} c the third operand
 * @param {vec3} d the fourth operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {vec3} out
 */


/**
 * Performs a bezier interpolation with two control points
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @param {vec3} c the third operand
 * @param {vec3} d the fourth operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {vec3} out
 */


/**
 * Generates a random vector with the given scale
 *
 * @param {vec3} out the receiving vector
 * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
 * @returns {vec3} out
 */


/**
 * Transforms the vec3 with a mat4.
 * 4th vector component is implicitly '1'
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the vector to transform
 * @param {mat4} m matrix to transform with
 * @returns {vec3} out
 */


/**
 * Transforms the vec3 with a mat3.
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the vector to transform
 * @param {mat3} m the 3x3 matrix to transform with
 * @returns {vec3} out
 */


/**
 * Transforms the vec3 with a quat
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the vector to transform
 * @param {quat} q quaternion to transform with
 * @returns {vec3} out
 */


/**
 * Rotate a 3D vector around the x-axis
 * @param {vec3} out The receiving vec3
 * @param {vec3} a The vec3 point to rotate
 * @param {vec3} b The origin of the rotation
 * @param {Number} c The angle of rotation
 * @returns {vec3} out
 */


/**
 * Rotate a 3D vector around the y-axis
 * @param {vec3} out The receiving vec3
 * @param {vec3} a The vec3 point to rotate
 * @param {vec3} b The origin of the rotation
 * @param {Number} c The angle of rotation
 * @returns {vec3} out
 */


/**
 * Rotate a 3D vector around the z-axis
 * @param {vec3} out The receiving vec3
 * @param {vec3} a The vec3 point to rotate
 * @param {vec3} b The origin of the rotation
 * @param {Number} c The angle of rotation
 * @returns {vec3} out
 */


/**
 * Get the angle between two 3D vectors
 * @param {vec3} a The first operand
 * @param {vec3} b The second operand
 * @returns {Number} The angle in radians
 */


/**
 * Returns a string representation of a vector
 *
 * @param {vec3} a vector to represent as a string
 * @returns {String} string representation of the vector
 */


/**
 * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)
 *
 * @param {vec3} a The first vector.
 * @param {vec3} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */


/**
 * Returns whether or not the vectors have approximately the same elements in the same position.
 *
 * @param {vec3} a The first vector.
 * @param {vec3} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */


/**
 * Alias for {@link vec3.subtract}
 * @function
 */


/**
 * Alias for {@link vec3.multiply}
 * @function
 */


/**
 * Alias for {@link vec3.divide}
 * @function
 */


/**
 * Alias for {@link vec3.distance}
 * @function
 */


/**
 * Alias for {@link vec3.squaredDistance}
 * @function
 */


/**
 * Alias for {@link vec3.length}
 * @function
 */
var len$1 = length$1;

/**
 * Alias for {@link vec3.squaredLength}
 * @function
 */


/**
 * Perform some operation over an array of vec3s.
 *
 * @param {Array} a the array of vectors to iterate over
 * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed
 * @param {Number} offset Number of elements to skip at the beginning of the array
 * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array
 * @param {Function} fn Function to call for each vector in the array
 * @param {Object} [arg] additional argument to pass to fn
 * @returns {Array} a
 * @function
 */
var forEach = function () {
  var vec = create$5();

  return function (a, stride, offset, count, fn, arg) {
    var i = void 0,
        l = void 0;
    if (!stride) {
      stride = 3;
    }

    if (!offset) {
      offset = 0;
    }

    if (count) {
      l = Math.min(count * stride + offset, a.length);
    } else {
      l = a.length;
    }

    for (i = offset; i < l; i += stride) {
      vec[0] = a[i];vec[1] = a[i + 1];vec[2] = a[i + 2];
      fn(vec, vec, arg);
      a[i] = vec[0];a[i + 1] = vec[1];a[i + 2] = vec[2];
    }

    return a;
  };
}();

/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. */

/**
 * 4 Dimensional Vector
 * @module vec4
 */

/**
 * Creates a new, empty vec4
 *
 * @returns {vec4} a new 4D vector
 */
function create$6() {
  var out = new ARRAY_TYPE(4);
  out[0] = 0;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  return out;
}

/**
 * Creates a new vec4 initialized with values from an existing vector
 *
 * @param {vec4} a vector to clone
 * @returns {vec4} a new 4D vector
 */


/**
 * Creates a new vec4 initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {vec4} a new 4D vector
 */
function fromValues$6(x, y, z, w) {
  var out = new ARRAY_TYPE(4);
  out[0] = x;
  out[1] = y;
  out[2] = z;
  out[3] = w;
  return out;
}

/**
 * Copy the values from one vec4 to another
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the source vector
 * @returns {vec4} out
 */


/**
 * Set the components of a vec4 to the given values
 *
 * @param {vec4} out the receiving vector
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {vec4} out
 */


/**
 * Adds two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */


/**
 * Subtracts vector b from vector a
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */


/**
 * Multiplies two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */


/**
 * Divides two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */


/**
 * Math.ceil the components of a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a vector to ceil
 * @returns {vec4} out
 */


/**
 * Math.floor the components of a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a vector to floor
 * @returns {vec4} out
 */


/**
 * Returns the minimum of two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */


/**
 * Returns the maximum of two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */


/**
 * Math.round the components of a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a vector to round
 * @returns {vec4} out
 */


/**
 * Scales a vec4 by a scalar number
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {vec4} out
 */


/**
 * Adds two vec4's after scaling the second operand by a scalar value
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @param {Number} scale the amount to scale b by before adding
 * @returns {vec4} out
 */


/**
 * Calculates the euclidian distance between two vec4's
 *
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {Number} distance between a and b
 */


/**
 * Calculates the squared euclidian distance between two vec4's
 *
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {Number} squared distance between a and b
 */


/**
 * Calculates the length of a vec4
 *
 * @param {vec4} a vector to calculate length of
 * @returns {Number} length of a
 */


/**
 * Calculates the squared length of a vec4
 *
 * @param {vec4} a vector to calculate squared length of
 * @returns {Number} squared length of a
 */


/**
 * Negates the components of a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a vector to negate
 * @returns {vec4} out
 */


/**
 * Returns the inverse of the components of a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a vector to invert
 * @returns {vec4} out
 */


/**
 * Normalize a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a vector to normalize
 * @returns {vec4} out
 */
function normalize$2(out, a) {
  var x = a[0];
  var y = a[1];
  var z = a[2];
  var w = a[3];
  var len = x * x + y * y + z * z + w * w;
  if (len > 0) {
    len = 1 / Math.sqrt(len);
    out[0] = x * len;
    out[1] = y * len;
    out[2] = z * len;
    out[3] = w * len;
  }
  return out;
}

/**
 * Calculates the dot product of two vec4's
 *
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {Number} dot product of a and b
 */


/**
 * Performs a linear interpolation between two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {vec4} out
 */


/**
 * Generates a random vector with the given scale
 *
 * @param {vec4} out the receiving vector
 * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
 * @returns {vec4} out
 */


/**
 * Transforms the vec4 with a mat4.
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the vector to transform
 * @param {mat4} m matrix to transform with
 * @returns {vec4} out
 */
function transformMat4$1(out, a, m) {
  var x = a[0],
      y = a[1],
      z = a[2],
      w = a[3];
  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;
  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;
  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;
  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;
  return out;
}

/**
 * Transforms the vec4 with a quat
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the vector to transform
 * @param {quat} q quaternion to transform with
 * @returns {vec4} out
 */


/**
 * Returns a string representation of a vector
 *
 * @param {vec4} a vector to represent as a string
 * @returns {String} string representation of the vector
 */


/**
 * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)
 *
 * @param {vec4} a The first vector.
 * @param {vec4} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */


/**
 * Returns whether or not the vectors have approximately the same elements in the same position.
 *
 * @param {vec4} a The first vector.
 * @param {vec4} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */


/**
 * Alias for {@link vec4.subtract}
 * @function
 */


/**
 * Alias for {@link vec4.multiply}
 * @function
 */


/**
 * Alias for {@link vec4.divide}
 * @function
 */


/**
 * Alias for {@link vec4.distance}
 * @function
 */


/**
 * Alias for {@link vec4.squaredDistance}
 * @function
 */


/**
 * Alias for {@link vec4.length}
 * @function
 */


/**
 * Alias for {@link vec4.squaredLength}
 * @function
 */


/**
 * Perform some operation over an array of vec4s.
 *
 * @param {Array} a the array of vectors to iterate over
 * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed
 * @param {Number} offset Number of elements to skip at the beginning of the array
 * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array
 * @param {Function} fn Function to call for each vector in the array
 * @param {Object} [arg] additional argument to pass to fn
 * @returns {Array} a
 * @function
 */
var forEach$1 = function () {
  var vec = create$6();

  return function (a, stride, offset, count, fn, arg) {
    var i = void 0,
        l = void 0;
    if (!stride) {
      stride = 4;
    }

    if (!offset) {
      offset = 0;
    }

    if (count) {
      l = Math.min(count * stride + offset, a.length);
    } else {
      l = a.length;
    }

    for (i = offset; i < l; i += stride) {
      vec[0] = a[i];vec[1] = a[i + 1];vec[2] = a[i + 2];vec[3] = a[i + 3];
      fn(vec, vec, arg);
      a[i] = vec[0];a[i + 1] = vec[1];a[i + 2] = vec[2];a[i + 3] = vec[3];
    }

    return a;
  };
}();

/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. */

/**
 * Quaternion
 * @module quat
 */

/**
 * Creates a new identity quat
 *
 * @returns {quat} a new quaternion
 */
function create$4() {
  var out = new ARRAY_TYPE(4);
  out[0] = 0;
  out[1] = 0;
  out[2] = 0;
  out[3] = 1;
  return out;
}

/**
 * Set a quat to the identity quaternion
 *
 * @param {quat} out the receiving quaternion
 * @returns {quat} out
 */


/**
 * Sets a quat from the given angle and rotation axis,
 * then returns it.
 *
 * @param {quat} out the receiving quaternion
 * @param {vec3} axis the axis around which to rotate
 * @param {Number} rad the angle in radians
 * @returns {quat} out
 **/
function setAxisAngle(out, axis, rad) {
  rad = rad * 0.5;
  var s = Math.sin(rad);
  out[0] = s * axis[0];
  out[1] = s * axis[1];
  out[2] = s * axis[2];
  out[3] = Math.cos(rad);
  return out;
}

/**
 * Gets the rotation axis and angle for a given
 *  quaternion. If a quaternion is created with
 *  setAxisAngle, this method will return the same
 *  values as providied in the original parameter list
 *  OR functionally equivalent values.
 * Example: The quaternion formed by axis [0, 0, 1] and
 *  angle -90 is the same as the quaternion formed by
 *  [0, 0, 1] and 270. This method favors the latter.
 * @param  {vec3} out_axis  Vector receiving the axis of rotation
 * @param  {quat} q     Quaternion to be decomposed
 * @return {Number}     Angle, in radians, of the rotation
 */


/**
 * Multiplies two quat's
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @returns {quat} out
 */


/**
 * Rotates a quaternion by the given angle about the X axis
 *
 * @param {quat} out quat receiving operation result
 * @param {quat} a quat to rotate
 * @param {number} rad angle (in radians) to rotate
 * @returns {quat} out
 */


/**
 * Rotates a quaternion by the given angle about the Y axis
 *
 * @param {quat} out quat receiving operation result
 * @param {quat} a quat to rotate
 * @param {number} rad angle (in radians) to rotate
 * @returns {quat} out
 */


/**
 * Rotates a quaternion by the given angle about the Z axis
 *
 * @param {quat} out quat receiving operation result
 * @param {quat} a quat to rotate
 * @param {number} rad angle (in radians) to rotate
 * @returns {quat} out
 */


/**
 * Calculates the W component of a quat from the X, Y, and Z components.
 * Assumes that quaternion is 1 unit in length.
 * Any existing W component will be ignored.
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a quat to calculate W component of
 * @returns {quat} out
 */


/**
 * Performs a spherical linear interpolation between two quat
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {quat} out
 */
function slerp(out, a, b, t) {
  // benchmarks:
  //    http://jsperf.com/quaternion-slerp-implementations
  var ax = a[0],
      ay = a[1],
      az = a[2],
      aw = a[3];
  var bx = b[0],
      by = b[1],
      bz = b[2],
      bw = b[3];

  var omega = void 0,
      cosom = void 0,
      sinom = void 0,
      scale0 = void 0,
      scale1 = void 0;

  // calc cosine
  cosom = ax * bx + ay * by + az * bz + aw * bw;
  // adjust signs (if necessary)
  if (cosom < 0.0) {
    cosom = -cosom;
    bx = -bx;
    by = -by;
    bz = -bz;
    bw = -bw;
  }
  // calculate coefficients
  if (1.0 - cosom > 0.000001) {
    // standard case (slerp)
    omega = Math.acos(cosom);
    sinom = Math.sin(omega);
    scale0 = Math.sin((1.0 - t) * omega) / sinom;
    scale1 = Math.sin(t * omega) / sinom;
  } else {
    // "from" and "to" quaternions are very close
    //  ... so we can do a linear interpolation
    scale0 = 1.0 - t;
    scale1 = t;
  }
  // calculate final values
  out[0] = scale0 * ax + scale1 * bx;
  out[1] = scale0 * ay + scale1 * by;
  out[2] = scale0 * az + scale1 * bz;
  out[3] = scale0 * aw + scale1 * bw;

  return out;
}

/**
 * Calculates the inverse of a quat
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a quat to calculate inverse of
 * @returns {quat} out
 */


/**
 * Calculates the conjugate of a quat
 * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a quat to calculate conjugate of
 * @returns {quat} out
 */


/**
 * Creates a quaternion from the given 3x3 rotation matrix.
 *
 * NOTE: The resultant quaternion is not normalized, so you should be sure
 * to renormalize the quaternion yourself where necessary.
 *
 * @param {quat} out the receiving quaternion
 * @param {mat3} m rotation matrix
 * @returns {quat} out
 * @function
 */
function fromMat3(out, m) {
  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes
  // article "Quaternion Calculus and Fast Animation".
  var fTrace = m[0] + m[4] + m[8];
  var fRoot = void 0;

  if (fTrace > 0.0) {
    // |w| > 1/2, may as well choose w > 1/2
    fRoot = Math.sqrt(fTrace + 1.0); // 2w
    out[3] = 0.5 * fRoot;
    fRoot = 0.5 / fRoot; // 1/(4w)
    out[0] = (m[5] - m[7]) * fRoot;
    out[1] = (m[6] - m[2]) * fRoot;
    out[2] = (m[1] - m[3]) * fRoot;
  } else {
    // |w| <= 1/2
    var i = 0;
    if (m[4] > m[0]) i = 1;
    if (m[8] > m[i * 3 + i]) i = 2;
    var j = (i + 1) % 3;
    var k = (i + 2) % 3;

    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);
    out[i] = 0.5 * fRoot;
    fRoot = 0.5 / fRoot;
    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;
    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;
    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;
  }

  return out;
}

/**
 * Creates a quaternion from the given euler angle x, y, z.
 *
 * @param {quat} out the receiving quaternion
 * @param {x} Angle to rotate around X axis in degrees.
 * @param {y} Angle to rotate around Y axis in degrees.
 * @param {z} Angle to rotate around Z axis in degrees.
 * @returns {quat} out
 * @function
 */


/**
 * Returns a string representation of a quatenion
 *
 * @param {quat} a vector to represent as a string
 * @returns {String} string representation of the vector
 */


/**
 * Creates a new quat initialized with values from an existing quaternion
 *
 * @param {quat} a quaternion to clone
 * @returns {quat} a new quaternion
 * @function
 */


/**
 * Creates a new quat initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {quat} a new quaternion
 * @function
 */


/**
 * Copy the values from one quat to another
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the source quaternion
 * @returns {quat} out
 * @function
 */


/**
 * Set the components of a quat to the given values
 *
 * @param {quat} out the receiving quaternion
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {quat} out
 * @function
 */


/**
 * Adds two quat's
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @returns {quat} out
 * @function
 */


/**
 * Alias for {@link quat.multiply}
 * @function
 */


/**
 * Scales a quat by a scalar number
 *
 * @param {quat} out the receiving vector
 * @param {quat} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {quat} out
 * @function
 */


/**
 * Calculates the dot product of two quat's
 *
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @returns {Number} dot product of a and b
 * @function
 */


/**
 * Performs a linear interpolation between two quat's
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {quat} out
 * @function
 */


/**
 * Calculates the length of a quat
 *
 * @param {quat} a vector to calculate length of
 * @returns {Number} length of a
 */


/**
 * Alias for {@link quat.length}
 * @function
 */


/**
 * Calculates the squared length of a quat
 *
 * @param {quat} a vector to calculate squared length of
 * @returns {Number} squared length of a
 * @function
 */


/**
 * Alias for {@link quat.squaredLength}
 * @function
 */


/**
 * Normalize a quat
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a quaternion to normalize
 * @returns {quat} out
 * @function
 */
var normalize = normalize$2;

/**
 * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)
 *
 * @param {quat} a The first quaternion.
 * @param {quat} b The second quaternion.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */


/**
 * Returns whether or not the quaternions have approximately the same elements in the same position.
 *
 * @param {quat} a The first vector.
 * @param {quat} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */


/**
 * Sets a quaternion to represent the shortest rotation from one
 * vector to another.
 *
 * Both vectors are assumed to be unit length.
 *
 * @param {quat} out the receiving quaternion.
 * @param {vec3} a the initial vector
 * @param {vec3} b the destination vector
 * @returns {quat} out
 */
var rotationTo = function () {
  var tmpvec3 = create$5();
  var xUnitVec3 = fromValues$5(1, 0, 0);
  var yUnitVec3 = fromValues$5(0, 1, 0);

  return function (out, a, b) {
    var dot = dot$1(a, b);
    if (dot < -0.999999) {
      cross(tmpvec3, xUnitVec3, a);
      if (len$1(tmpvec3) < 0.000001) cross(tmpvec3, yUnitVec3, a);
      normalize$1(tmpvec3, tmpvec3);
      setAxisAngle(out, tmpvec3, Math.PI);
      return out;
    } else if (dot > 0.999999) {
      out[0] = 0;
      out[1] = 0;
      out[2] = 0;
      out[3] = 1;
      return out;
    } else {
      cross(tmpvec3, a, b);
      out[0] = tmpvec3[0];
      out[1] = tmpvec3[1];
      out[2] = tmpvec3[2];
      out[3] = 1 + dot;
      return normalize(out, out);
    }
  };
}();

/**
 * Performs a spherical linear interpolation with two control points
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @param {quat} c the third operand
 * @param {quat} d the fourth operand
 * @param {Number} t interpolation amount
 * @returns {quat} out
 */
var sqlerp = function () {
  var temp1 = create$4();
  var temp2 = create$4();

  return function (out, a, b, c, d, t) {
    slerp(temp1, a, d, t);
    slerp(temp2, b, c, t);
    slerp(out, temp1, temp2, 2 * t * (1 - t));

    return out;
  };
}();

/**
 * Sets the specified quaternion with values corresponding to the given
 * axes. Each axis is a vec3 and is expected to be unit length and
 * perpendicular to all other specified axes.
 *
 * @param {vec3} view  the vector representing the viewing direction
 * @param {vec3} right the vector representing the local "right" direction
 * @param {vec3} up    the vector representing the local "up" direction
 * @returns {quat} out
 */
var setAxes = function () {
  var matr = create$2();

  return function (out, view, right, up) {
    matr[0] = right[0];
    matr[3] = right[1];
    matr[6] = right[2];

    matr[1] = up[0];
    matr[4] = up[1];
    matr[7] = up[2];

    matr[2] = -view[0];
    matr[5] = -view[1];
    matr[8] = -view[2];

    return normalize(out, fromMat3(out, matr));
  };
}();

/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. */

/**
 * 2 Dimensional Vector
 * @module vec2
 */

/**
 * Creates a new, empty vec2
 *
 * @returns {vec2} a new 2D vector
 */
function create$7() {
  var out = new ARRAY_TYPE(2);
  out[0] = 0;
  out[1] = 0;
  return out;
}

/**
 * Creates a new vec2 initialized with values from an existing vector
 *
 * @param {vec2} a vector to clone
 * @returns {vec2} a new 2D vector
 */


/**
 * Creates a new vec2 initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @returns {vec2} a new 2D vector
 */


/**
 * Copy the values from one vec2 to another
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the source vector
 * @returns {vec2} out
 */


/**
 * Set the components of a vec2 to the given values
 *
 * @param {vec2} out the receiving vector
 * @param {Number} x X component
 * @param {Number} y Y component
 * @returns {vec2} out
 */


/**
 * Adds two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */


/**
 * Subtracts vector b from vector a
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */


/**
 * Multiplies two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */


/**
 * Divides two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */


/**
 * Math.ceil the components of a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a vector to ceil
 * @returns {vec2} out
 */


/**
 * Math.floor the components of a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a vector to floor
 * @returns {vec2} out
 */


/**
 * Returns the minimum of two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */


/**
 * Returns the maximum of two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */


/**
 * Math.round the components of a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a vector to round
 * @returns {vec2} out
 */


/**
 * Scales a vec2 by a scalar number
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {vec2} out
 */


/**
 * Adds two vec2's after scaling the second operand by a scalar value
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @param {Number} scale the amount to scale b by before adding
 * @returns {vec2} out
 */


/**
 * Calculates the euclidian distance between two vec2's
 *
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {Number} distance between a and b
 */


/**
 * Calculates the squared euclidian distance between two vec2's
 *
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {Number} squared distance between a and b
 */


/**
 * Calculates the length of a vec2
 *
 * @param {vec2} a vector to calculate length of
 * @returns {Number} length of a
 */


/**
 * Calculates the squared length of a vec2
 *
 * @param {vec2} a vector to calculate squared length of
 * @returns {Number} squared length of a
 */


/**
 * Negates the components of a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a vector to negate
 * @returns {vec2} out
 */


/**
 * Returns the inverse of the components of a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a vector to invert
 * @returns {vec2} out
 */


/**
 * Normalize a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a vector to normalize
 * @returns {vec2} out
 */


/**
 * Calculates the dot product of two vec2's
 *
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {Number} dot product of a and b
 */


/**
 * Computes the cross product of two vec2's
 * Note that the cross product must by definition produce a 3D vector
 *
 * @param {vec3} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec3} out
 */


/**
 * Performs a linear interpolation between two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {vec2} out
 */


/**
 * Generates a random vector with the given scale
 *
 * @param {vec2} out the receiving vector
 * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
 * @returns {vec2} out
 */


/**
 * Transforms the vec2 with a mat2
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the vector to transform
 * @param {mat2} m matrix to transform with
 * @returns {vec2} out
 */


/**
 * Transforms the vec2 with a mat2d
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the vector to transform
 * @param {mat2d} m matrix to transform with
 * @returns {vec2} out
 */


/**
 * Transforms the vec2 with a mat3
 * 3rd vector component is implicitly '1'
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the vector to transform
 * @param {mat3} m matrix to transform with
 * @returns {vec2} out
 */


/**
 * Transforms the vec2 with a mat4
 * 3rd vector component is implicitly '0'
 * 4th vector component is implicitly '1'
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the vector to transform
 * @param {mat4} m matrix to transform with
 * @returns {vec2} out
 */


/**
 * Returns a string representation of a vector
 *
 * @param {vec2} a vector to represent as a string
 * @returns {String} string representation of the vector
 */


/**
 * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)
 *
 * @param {vec2} a The first vector.
 * @param {vec2} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */


/**
 * Returns whether or not the vectors have approximately the same elements in the same position.
 *
 * @param {vec2} a The first vector.
 * @param {vec2} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */


/**
 * Alias for {@link vec2.length}
 * @function
 */


/**
 * Alias for {@link vec2.subtract}
 * @function
 */


/**
 * Alias for {@link vec2.multiply}
 * @function
 */


/**
 * Alias for {@link vec2.divide}
 * @function
 */


/**
 * Alias for {@link vec2.distance}
 * @function
 */


/**
 * Alias for {@link vec2.squaredDistance}
 * @function
 */


/**
 * Alias for {@link vec2.squaredLength}
 * @function
 */


/**
 * Perform some operation over an array of vec2s.
 *
 * @param {Array} a the array of vectors to iterate over
 * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed
 * @param {Number} offset Number of elements to skip at the beginning of the array
 * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array
 * @param {Function} fn Function to call for each vector in the array
 * @param {Object} [arg] additional argument to pass to fn
 * @returns {Array} a
 * @function
 */
var forEach$2 = function () {
  var vec = create$7();

  return function (a, stride, offset, count, fn, arg) {
    var i = void 0,
        l = void 0;
    if (!stride) {
      stride = 2;
    }

    if (!offset) {
      offset = 0;
    }

    if (count) {
      l = Math.min(count * stride + offset, a.length);
    } else {
      l = a.length;
    }

    for (i = offset; i < l; i += stride) {
      vec[0] = a[i];vec[1] = a[i + 1];
      fn(vec, vec, arg);
      a[i] = vec[0];a[i + 1] = vec[1];
    }

    return a;
  };
}();

/**
 * @fileoverview gl-matrix - High performance matrix and vector operations
 * @author Brandon Jones
 * @author Colin MacKenzie IV
 * @version 2.4.0
 */

/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. */
// END HEADER

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
  return typeof obj;
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};





var asyncGenerator = function () {
  function AwaitValue(value) {
    this.value = value;
  }

  function AsyncGenerator(gen) {
    var front, back;

    function send(key, arg) {
      return new Promise(function (resolve, reject) {
        var request = {
          key: key,
          arg: arg,
          resolve: resolve,
          reject: reject,
          next: null
        };

        if (back) {
          back = back.next = request;
        } else {
          front = back = request;
          resume(key, arg);
        }
      });
    }

    function resume(key, arg) {
      try {
        var result = gen[key](arg);
        var value = result.value;

        if (value instanceof AwaitValue) {
          Promise.resolve(value.value).then(function (arg) {
            resume("next", arg);
          }, function (arg) {
            resume("throw", arg);
          });
        } else {
          settle(result.done ? "return" : "normal", result.value);
        }
      } catch (err) {
        settle("throw", err);
      }
    }

    function settle(type, value) {
      switch (type) {
        case "return":
          front.resolve({
            value: value,
            done: true
          });
          break;

        case "throw":
          front.reject(value);
          break;

        default:
          front.resolve({
            value: value,
            done: false
          });
          break;
      }

      front = front.next;

      if (front) {
        resume(front.key, front.arg);
      } else {
        back = null;
      }
    }

    this._invoke = send;

    if (typeof gen.return !== "function") {
      this.return = undefined;
    }
  }

  if (typeof Symbol === "function" && Symbol.asyncIterator) {
    AsyncGenerator.prototype[Symbol.asyncIterator] = function () {
      return this;
    };
  }

  AsyncGenerator.prototype.next = function (arg) {
    return this._invoke("next", arg);
  };

  AsyncGenerator.prototype.throw = function (arg) {
    return this._invoke("throw", arg);
  };

  AsyncGenerator.prototype.return = function (arg) {
    return this._invoke("return", arg);
  };

  return {
    wrap: function (fn) {
      return function () {
        return new AsyncGenerator(fn.apply(this, arguments));
      };
    },
    await: function (value) {
      return new AwaitValue(value);
    }
  };
}();





var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();







var get = function get(object, property, receiver) {
  if (object === null) object = Function.prototype;
  var desc = Object.getOwnPropertyDescriptor(object, property);

  if (desc === undefined) {
    var parent = Object.getPrototypeOf(object);

    if (parent === null) {
      return undefined;
    } else {
      return get(parent, property, receiver);
    }
  } else if ("value" in desc) {
    return desc.value;
  } else {
    var getter = desc.get;

    if (getter === undefined) {
      return undefined;
    }

    return getter.call(receiver);
  }
};

var inherits = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
};











var possibleConstructorReturn = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
};



















var toConsumableArray = function (arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

    return arr2;
  } else {
    return Array.from(arr);
  }
};

/*
* Author   Jonathan Lurie - http://me.jonathanlurie.fr
* License  MIT
* Link     https://github.com/Pixpipe/pixpipejs
* Lab      MCIN - Montreal Neurological Institute
*/

// The index types are stored in this sort-of-private/sort-of-static object.
var coreTypes = {};

/**
* CoreTypes is bit of an exception in Pixpipejs because it does not inherit from
* PixpipeObject and it contains only static methods. In a sens, it's comparable
* to a singleton that stores all the core types constructors of Pixpipe so that
* they can be retrived only by querying their name.
* 
* At the creation of a new type, the static method `.addCoreType()` should be
* called right after the closing curly bracket of the class declaration.
* This is if we want to reference this class as a core type.
*/

var CoreTypes = function () {
  function CoreTypes() {
    classCallCheck(this, CoreTypes);
  }

  createClass(CoreTypes, null, [{
    key: "addCoreType",


    /**
    * [STATIC]
    * Adds a new type to the collection of core types. This is used when we want
    * to retrieve a type and instanciate an object of this type using its constructor name.
    * @param {Class} typeClass  - the class of the type
    */
    value: function addCoreType(typeClass) {
      if (typeof typeClass === "function") {
        coreTypes[typeClass.name] = typeClass;
      }
    }

    /**
    * [STATIC]
    * Return the constructor of the given type name. This is useful to instanciate 
    * an object based on the name of its type (eg. in PixBinDecoder)
    * @param {String} typeName - the name of the type eg. "Image2D"
    * @return {Function} constructor for the given type
    */

  }, {
    key: "getCoreType",
    value: function getCoreType(typeName) {
      if (typeName in coreTypes) {
        return coreTypes[typeName];
      } else {
        return null;
      }
    }
  }]);
  return CoreTypes;
}();

var commonjsGlobal$$1 = typeof window !== 'undefined' ? window : typeof commonjsGlobal !== 'undefined' ? commonjsGlobal : typeof self !== 'undefined' ? self : {};

function commonjsRequire$$1 () {
	throw new Error('Dynamic requires are not currently supported by rollup-plugin-commonjs');
}



function createCommonjsModule$$1(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var joiBrowser = createCommonjsModule$$1(function (module, exports) {
	(function webpackUniversalModuleDefinition(root, factory) {
		module.exports = factory();
	})(commonjsGlobal$$1, function () {
		return (/******/function (modules) {
				// webpackBootstrap
				/******/ // The module cache
				/******/var installedModules = {};

				/******/ // The require function
				/******/function __webpack_require__(moduleId) {

					/******/ // Check if module is in cache
					/******/if (installedModules[moduleId])
						/******/return installedModules[moduleId].exports;

					/******/ // Create a new module (and put it into the cache)
					/******/var module = installedModules[moduleId] = {
						/******/exports: {},
						/******/id: moduleId,
						/******/loaded: false
						/******/ };

					/******/ // Execute the module function
					/******/modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

					/******/ // Flag the module as loaded
					/******/module.loaded = true;

					/******/ // Return the exports of the module
					/******/return module.exports;
					/******/
				}

				/******/ // expose the modules object (__webpack_modules__)
				/******/__webpack_require__.m = modules;

				/******/ // expose the module cache
				/******/__webpack_require__.c = installedModules;

				/******/ // __webpack_public_path__
				/******/__webpack_require__.p = "";

				/******/ // Load entry module and return exports
				/******/return __webpack_require__(0);
				/******/
			}(
			/************************************************************************/
			/******/[
			/* 0 */
			/***/function (module, exports, __webpack_require__) {

				'use strict';

				var Joi = __webpack_require__(1);

				module.exports = Joi;

				/***/
			},
			/* 1 */
			/***/function (module, exports, __webpack_require__) {

				'use strict';

				// Load modules

				var _extends$$1 = Object.assign || function (target) {
					for (var i = 1; i < arguments.length; i++) {
						var source = arguments[i];for (var key in source) {
							if (Object.prototype.hasOwnProperty.call(source, key)) {
								target[key] = source[key];
							}
						}
					}return target;
				};

				function _defaults(obj, defaults$$1) {
					var keys = Object.getOwnPropertyNames(defaults$$1);for (var i = 0; i < keys.length; i++) {
						var key = keys[i];var value = Object.getOwnPropertyDescriptor(defaults$$1, key);if (value && value.configurable && obj[key] === undefined) {
							Object.defineProperty(obj, key, value);
						}
					}return obj;
				}

				function _defineProperty(obj, key, value) {
					if (key in obj) {
						Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });
					} else {
						obj[key] = value;
					}return obj;
				}

				function _classCallCheck(instance, Constructor) {
					if (!(instance instanceof Constructor)) {
						throw new TypeError("Cannot call a class as a function");
					}
				}

				function _possibleConstructorReturn(self, call) {
					if (!self) {
						throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
					}return call && ((typeof call === 'undefined' ? 'undefined' : _typeof(call)) === "object" || typeof call === "function") ? call : self;
				}

				function _inherits(subClass, superClass) {
					if (typeof superClass !== "function" && superClass !== null) {
						throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));
					}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass);
				}

				var Hoek = __webpack_require__(2);
				var Any = __webpack_require__(11);
				var Cast = __webpack_require__(16);
				var Errors = __webpack_require__(13);
				var Lazy = __webpack_require__(29);
				var Ref = __webpack_require__(12);

				// Declare internals

				var internals = {
					alternatives: __webpack_require__(25),
					array: __webpack_require__(30),
					boolean: __webpack_require__(24),
					binary: __webpack_require__(31),
					date: __webpack_require__(17),
					number: __webpack_require__(23),
					object: __webpack_require__(26),
					string: __webpack_require__(18)
				};

				internals.root = function () {

					var any = new Any();

					var root = any.clone();
					root.any = function () {

						Hoek.assert(arguments.length === 0, 'Joi.any() does not allow arguments.');

						return any;
					};

					root.alternatives = root.alt = function () {

						return arguments.length ? internals.alternatives.try.apply(internals.alternatives, arguments) : internals.alternatives;
					};

					root.array = function () {

						Hoek.assert(arguments.length === 0, 'Joi.array() does not allow arguments.');

						return internals.array;
					};

					root.boolean = root.bool = function () {

						Hoek.assert(arguments.length === 0, 'Joi.boolean() does not allow arguments.');

						return internals.boolean;
					};

					root.binary = function () {

						Hoek.assert(arguments.length === 0, 'Joi.binary() does not allow arguments.');

						return internals.binary;
					};

					root.date = function () {

						Hoek.assert(arguments.length === 0, 'Joi.date() does not allow arguments.');

						return internals.date;
					};

					root.func = function () {

						Hoek.assert(arguments.length === 0, 'Joi.func() does not allow arguments.');

						return internals.object._func();
					};

					root.number = function () {

						Hoek.assert(arguments.length === 0, 'Joi.number() does not allow arguments.');

						return internals.number;
					};

					root.object = function () {

						return arguments.length ? internals.object.keys.apply(internals.object, arguments) : internals.object;
					};

					root.string = function () {

						Hoek.assert(arguments.length === 0, 'Joi.string() does not allow arguments.');

						return internals.string;
					};

					root.ref = function () {

						return Ref.create.apply(null, arguments);
					};

					root.isRef = function (ref) {

						return Ref.isRef(ref);
					};

					root.validate = function (value /*, [schema], [options], callback */) {

						var last = arguments[arguments.length - 1];
						var callback = typeof last === 'function' ? last : null;

						var count = arguments.length - (callback ? 1 : 0);
						if (count === 1) {
							return any.validate(value, callback);
						}

						var options = count === 3 ? arguments[2] : {};
						var schema = root.compile(arguments[1]);

						return schema._validateWithOptions(value, options, callback);
					};

					root.describe = function () {

						var schema = arguments.length ? root.compile(arguments[0]) : any;
						return schema.describe();
					};

					root.compile = function (schema) {

						try {
							return Cast.schema(schema);
						} catch (err) {
							if (err.hasOwnProperty('path')) {
								err.message = err.message + '(' + err.path + ')';
							}
							throw err;
						}
					};

					root.assert = function (value, schema, message) {

						root.attempt(value, schema, message);
					};

					root.attempt = function (value, schema, message) {

						var result = root.validate(value, schema);
						var error = result.error;
						if (error) {
							if (!message) {
								if (typeof error.annotate === 'function') {
									error.message = error.annotate();
								}
								throw error;
							}

							if (!(message instanceof Error)) {
								if (typeof error.annotate === 'function') {
									error.message = message + ' ' + error.annotate();
								}
								throw error;
							}

							throw message;
						}

						return result.value;
					};

					root.reach = function (schema, path) {

						Hoek.assert(schema && schema instanceof Any, 'you must provide a joi schema');
						Hoek.assert(typeof path === 'string', 'path must be a string');

						if (path === '') {
							return schema;
						}

						var parts = path.split('.');
						var children = schema._inner.children;
						if (!children) {
							return;
						}

						var key = parts[0];
						for (var i = 0; i < children.length; ++i) {
							var child = children[i];
							if (child.key === key) {
								return this.reach(child.schema, path.substr(key.length + 1));
							}
						}
					};

					root.lazy = function (fn) {

						return Lazy.set(fn);
					};

					root.extend = function () {
						var _this = this;

						var extensions = Hoek.flatten(Array.prototype.slice.call(arguments));
						Hoek.assert(extensions.length > 0, 'You need to provide at least one extension');

						this.assert(extensions, root.extensionsSchema);

						var joi = Object.create(this.any());
						_extends$$1(joi, this);

						var _loop = function _loop(i) {
							var extension = extensions[i];

							if (typeof extension === 'function') {
								extension = extension(joi);
							}

							_this.assert(extension, root.extensionSchema);

							var base = (extension.base || _this.any()).clone(); // Cloning because we're going to override language afterwards
							var ctor = base.constructor;
							var type = function (_ctor) {
								_inherits(type, _ctor);

								// eslint-disable-line no-loop-func

								function type() {
									_classCallCheck(this, type);

									var _this2 = _possibleConstructorReturn(this, _ctor.call(this));

									if (extension.base) {
										_extends$$1(_this2, base);
									}

									_this2._type = extension.name;

									if (extension.language) {
										_this2._settings = _this2._settings || { language: {} };
										_this2._settings.language = Hoek.applyToDefaults(_this2._settings.language, _defineProperty({}, extension.name, extension.language));
									}
									return _this2;
								}

								return type;
							}(ctor);

							if (extension.coerce) {
								type.prototype._coerce = function (value, state, options) {

									if (ctor.prototype._coerce) {
										var baseRet = ctor.prototype._coerce.call(this, value, state, options);

										if (baseRet.errors) {
											return baseRet;
										}

										value = baseRet.value;
									}

									var ret = extension.coerce.call(this, value, state, options);
									if (ret instanceof Errors.Err) {
										return { value: value, errors: ret };
									}

									return { value: ret };
								};
							}
							if (extension.pre) {
								type.prototype._base = function (value, state, options) {

									if (ctor.prototype._base) {
										var baseRet = ctor.prototype._base.call(this, value, state, options);

										if (baseRet.errors) {
											return baseRet;
										}

										value = baseRet.value;
									}

									var ret = extension.pre.call(this, value, state, options);
									if (ret instanceof Errors.Err) {
										return { value: value, errors: ret };
									}

									return { value: ret };
								};
							}

							if (extension.rules) {
								var _loop2 = function _loop2(j) {
									var rule = extension.rules[j];
									var ruleArgs = rule.params ? rule.params instanceof Any ? rule.params._inner.children.map(function (k) {
										return k.key;
									}) : Object.keys(rule.params) : [];
									var validateArgs = rule.params ? Cast.schema(rule.params) : null;

									type.prototype[rule.name] = function () {
										// eslint-disable-line no-loop-func

										if (arguments.length > ruleArgs.length) {
											throw new Error('Unexpected number of arguments');
										}

										var args = Array.prototype.slice.call(arguments);
										var hasRef = false;
										var arg = {};

										for (var k = 0; k < ruleArgs.length; ++k) {
											arg[ruleArgs[k]] = args[k];
											if (!hasRef && Ref.isRef(args[k])) {
												hasRef = true;
											}
										}

										if (validateArgs) {
											arg = joi.attempt(arg, validateArgs);
										}

										var schema = void 0;
										if (rule.validate) {
											var validate = function validate(value, state, options) {

												return rule.validate.call(this, arg, value, state, options);
											};

											schema = this._test(rule.name, arg, validate, {
												description: rule.description,
												hasRef: hasRef
											});
										} else {
											schema = this.clone();
										}

										if (rule.setup) {
											var newSchema = rule.setup.call(schema, arg);
											if (newSchema !== undefined) {
												Hoek.assert(newSchema instanceof Any, 'Setup of extension Joi.' + this._type + '().' + rule.name + '() must return undefined or a Joi object');
												schema = newSchema;
											}
										}

										return schema;
									};
								};

								for (var j = 0; j < extension.rules.length; ++j) {
									_loop2(j);
								}
							}

							if (extension.describe) {
								type.prototype.describe = function () {

									var description = ctor.prototype.describe.call(this);
									return extension.describe.call(this, description);
								};
							}

							var instance = new type();
							joi[extension.name] = function () {

								return instance;
							};
						};

						for (var i = 0; i < extensions.length; ++i) {
							_loop(i);
						}

						return joi;
					};

					root.extensionSchema = internals.object.keys({
						base: internals.object.type(Any, 'Joi object'),
						name: internals.string.required(),
						coerce: internals.object._func().arity(3),
						pre: internals.object._func().arity(3),
						language: internals.object,
						describe: internals.object._func().arity(1),
						rules: internals.array.items(internals.object.keys({
							name: internals.string.required(),
							setup: internals.object._func().arity(1),
							validate: internals.object._func().arity(4),
							params: [internals.object.pattern(/.*/, internals.object.type(Any, 'Joi object')), internals.object.type(internals.object.constructor, 'Joi object')],
							description: [internals.string, internals.object._func().arity(1)]
						}).or('setup', 'validate'))
					}).strict();

					root.extensionsSchema = internals.array.items([internals.object, internals.object._func().arity(1)]).strict();

					root.version = __webpack_require__(32).version;

					return root;
				};

				module.exports = internals.root();

				/***/
			},
			/* 2 */
			/***/function (module, exports, __webpack_require__) {

				/* WEBPACK VAR INJECTION */(function (Buffer, process) {
					'use strict';

					// Load modules

					var _typeof$$1 = typeof Symbol === "function" && _typeof(Symbol.iterator) === "symbol" ? function (obj) {
						return typeof obj === 'undefined' ? 'undefined' : _typeof(obj);
					} : function (obj) {
						return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === 'undefined' ? 'undefined' : _typeof(obj);
					};

					var Crypto = __webpack_require__(5);
					var Path = __webpack_require__(6);
					var Util = __webpack_require__(7);
					var Escape = __webpack_require__(10);

					// Declare internals

					var internals = {};

					// Clone object or array

					exports.clone = function (obj, seen) {

						if ((typeof obj === 'undefined' ? 'undefined' : _typeof$$1(obj)) !== 'object' || obj === null) {

							return obj;
						}

						seen = seen || new Map();

						var lookup = seen.get(obj);
						if (lookup) {
							return lookup;
						}

						var newObj = void 0;
						var cloneDeep = false;

						if (!Array.isArray(obj)) {
							if (Buffer.isBuffer(obj)) {
								newObj = new Buffer(obj);
							} else if (obj instanceof Date) {
								newObj = new Date(obj.getTime());
							} else if (obj instanceof RegExp) {
								newObj = new RegExp(obj);
							} else {
								var proto = Object.getPrototypeOf(obj);
								if (proto && proto.isImmutable) {

									newObj = obj;
								} else {
									newObj = Object.create(proto);
									cloneDeep = true;
								}
							}
						} else {
							newObj = [];
							cloneDeep = true;
						}

						seen.set(obj, newObj);

						if (cloneDeep) {
							var keys = Object.getOwnPropertyNames(obj);
							for (var i = 0; i < keys.length; ++i) {
								var key = keys[i];
								var descriptor = Object.getOwnPropertyDescriptor(obj, key);
								if (descriptor && (descriptor.get || descriptor.set)) {

									Object.defineProperty(newObj, key, descriptor);
								} else {
									newObj[key] = exports.clone(obj[key], seen);
								}
							}
						}

						return newObj;
					};

					// Merge all the properties of source into target, source wins in conflict, and by default null and undefined from source are applied

					/*eslint-disable */
					exports.merge = function (target, source, isNullOverride /* = true */, isMergeArrays /* = true */) {
						/*eslint-enable */

						exports.assert(target && (typeof target === 'undefined' ? 'undefined' : _typeof$$1(target)) === 'object', 'Invalid target value: must be an object');
						exports.assert(source === null || source === undefined || (typeof source === 'undefined' ? 'undefined' : _typeof$$1(source)) === 'object', 'Invalid source value: must be null, undefined, or an object');

						if (!source) {
							return target;
						}

						if (Array.isArray(source)) {
							exports.assert(Array.isArray(target), 'Cannot merge array onto an object');
							if (isMergeArrays === false) {
								// isMergeArrays defaults to true
								target.length = 0; // Must not change target assignment
							}

							for (var i = 0; i < source.length; ++i) {
								target.push(exports.clone(source[i]));
							}

							return target;
						}

						var keys = Object.keys(source);
						for (var _i = 0; _i < keys.length; ++_i) {
							var key = keys[_i];
							var value = source[key];
							if (value && (typeof value === 'undefined' ? 'undefined' : _typeof$$1(value)) === 'object') {

								if (!target[key] || _typeof$$1(target[key]) !== 'object' || Array.isArray(target[key]) !== Array.isArray(value) || value instanceof Date || Buffer.isBuffer(value) || value instanceof RegExp) {

									target[key] = exports.clone(value);
								} else {
									exports.merge(target[key], value, isNullOverride, isMergeArrays);
								}
							} else {
								if (value !== null && value !== undefined) {
									// Explicit to preserve empty strings

									target[key] = value;
								} else if (isNullOverride !== false) {
									// Defaults to true
									target[key] = value;
								}
							}
						}

						return target;
					};

					// Apply options to a copy of the defaults

					exports.applyToDefaults = function (defaults$$1, options, isNullOverride) {

						exports.assert(defaults$$1 && (typeof defaults$$1 === 'undefined' ? 'undefined' : _typeof$$1(defaults$$1)) === 'object', 'Invalid defaults value: must be an object');
						exports.assert(!options || options === true || (typeof options === 'undefined' ? 'undefined' : _typeof$$1(options)) === 'object', 'Invalid options value: must be true, falsy or an object');

						if (!options) {
							// If no options, return null
							return null;
						}

						var copy = exports.clone(defaults$$1);

						if (options === true) {
							// If options is set to true, use defaults
							return copy;
						}

						return exports.merge(copy, options, isNullOverride === true, false);
					};

					// Clone an object except for the listed keys which are shallow copied

					exports.cloneWithShallow = function (source, keys) {

						if (!source || (typeof source === 'undefined' ? 'undefined' : _typeof$$1(source)) !== 'object') {

							return source;
						}

						var storage = internals.store(source, keys); // Move shallow copy items to storage
						var copy = exports.clone(source); // Deep copy the rest
						internals.restore(copy, source, storage); // Shallow copy the stored items and restore
						return copy;
					};

					internals.store = function (source, keys) {

						var storage = {};
						for (var i = 0; i < keys.length; ++i) {
							var key = keys[i];
							var value = exports.reach(source, key);
							if (value !== undefined) {
								storage[key] = value;
								internals.reachSet(source, key, undefined);
							}
						}

						return storage;
					};

					internals.restore = function (copy, source, storage) {

						var keys = Object.keys(storage);
						for (var i = 0; i < keys.length; ++i) {
							var key = keys[i];
							internals.reachSet(copy, key, storage[key]);
							internals.reachSet(source, key, storage[key]);
						}
					};

					internals.reachSet = function (obj, key, value) {

						var path = key.split('.');
						var ref = obj;
						for (var i = 0; i < path.length; ++i) {
							var segment = path[i];
							if (i + 1 === path.length) {
								ref[segment] = value;
							}

							ref = ref[segment];
						}
					};

					// Apply options to defaults except for the listed keys which are shallow copied from option without merging

					exports.applyToDefaultsWithShallow = function (defaults$$1, options, keys) {

						exports.assert(defaults$$1 && (typeof defaults$$1 === 'undefined' ? 'undefined' : _typeof$$1(defaults$$1)) === 'object', 'Invalid defaults value: must be an object');
						exports.assert(!options || options === true || (typeof options === 'undefined' ? 'undefined' : _typeof$$1(options)) === 'object', 'Invalid options value: must be true, falsy or an object');
						exports.assert(keys && Array.isArray(keys), 'Invalid keys');

						if (!options) {
							// If no options, return null
							return null;
						}

						var copy = exports.cloneWithShallow(defaults$$1, keys);

						if (options === true) {
							// If options is set to true, use defaults
							return copy;
						}

						var storage = internals.store(options, keys); // Move shallow copy items to storage
						exports.merge(copy, options, false, false); // Deep copy the rest
						internals.restore(copy, options, storage); // Shallow copy the stored items and restore
						return copy;
					};

					// Deep object or array comparison

					exports.deepEqual = function (obj, ref, options, seen) {

						options = options || { prototype: true };

						var type = typeof obj === 'undefined' ? 'undefined' : _typeof$$1(obj);

						if (type !== (typeof ref === 'undefined' ? 'undefined' : _typeof$$1(ref))) {
							return false;
						}

						if (type !== 'object' || obj === null || ref === null) {

							if (obj === ref) {
								// Copied from Deep-eql, copyright(c) 2013 Jake Luer, jake@alogicalparadox.com, MIT Licensed, https://github.com/chaijs/deep-eql
								return obj !== 0 || 1 / obj === 1 / ref; // -0 / +0
							}

							return obj !== obj && ref !== ref; // NaN
						}

						seen = seen || [];
						if (seen.indexOf(obj) !== -1) {
							return true; // If previous comparison failed, it would have stopped execution
						}

						seen.push(obj);

						if (Array.isArray(obj)) {
							if (!Array.isArray(ref)) {
								return false;
							}

							if (!options.part && obj.length !== ref.length) {
								return false;
							}

							for (var i = 0; i < obj.length; ++i) {
								if (options.part) {
									var found = false;
									for (var j = 0; j < ref.length; ++j) {
										if (exports.deepEqual(obj[i], ref[j], options)) {
											found = true;
											break;
										}
									}

									return found;
								}

								if (!exports.deepEqual(obj[i], ref[i], options)) {
									return false;
								}
							}

							return true;
						}

						if (Buffer.isBuffer(obj)) {
							if (!Buffer.isBuffer(ref)) {
								return false;
							}

							if (obj.length !== ref.length) {
								return false;
							}

							for (var _i2 = 0; _i2 < obj.length; ++_i2) {
								if (obj[_i2] !== ref[_i2]) {
									return false;
								}
							}

							return true;
						}

						if (obj instanceof Date) {
							return ref instanceof Date && obj.getTime() === ref.getTime();
						}

						if (obj instanceof RegExp) {
							return ref instanceof RegExp && obj.toString() === ref.toString();
						}

						if (options.prototype) {
							if (Object.getPrototypeOf(obj) !== Object.getPrototypeOf(ref)) {
								return false;
							}
						}

						var keys = Object.getOwnPropertyNames(obj);

						if (!options.part && keys.length !== Object.getOwnPropertyNames(ref).length) {
							return false;
						}

						for (var _i3 = 0; _i3 < keys.length; ++_i3) {
							var key = keys[_i3];
							var descriptor = Object.getOwnPropertyDescriptor(obj, key);
							if (descriptor.get) {
								if (!exports.deepEqual(descriptor, Object.getOwnPropertyDescriptor(ref, key), options, seen)) {
									return false;
								}
							} else if (!exports.deepEqual(obj[key], ref[key], options, seen)) {
								return false;
							}
						}

						return true;
					};

					// Remove duplicate items from array

					exports.unique = function (array, key) {

						var result = void 0;
						if (key) {
							(function () {
								result = [];
								var index = new Set();
								array.forEach(function (item) {

									var identifier = item[key];
									if (!index.has(identifier)) {
										index.add(identifier);
										result.push(item);
									}
								});
							})();
						} else {
							result = Array.from(new Set(array));
						}

						return result;
					};

					// Convert array into object

					exports.mapToObject = function (array, key) {

						if (!array) {
							return null;
						}

						var obj = {};
						for (var i = 0; i < array.length; ++i) {
							if (key) {
								if (array[i][key]) {
									obj[array[i][key]] = true;
								}
							} else {
								obj[array[i]] = true;
							}
						}

						return obj;
					};

					// Find the common unique items in two arrays

					exports.intersect = function (array1, array2, justFirst) {

						if (!array1 || !array2) {
							return [];
						}

						var common = [];
						var hash = Array.isArray(array1) ? exports.mapToObject(array1) : array1;
						var found = {};
						for (var i = 0; i < array2.length; ++i) {
							if (hash[array2[i]] && !found[array2[i]]) {
								if (justFirst) {
									return array2[i];
								}

								common.push(array2[i]);
								found[array2[i]] = true;
							}
						}

						return justFirst ? null : common;
					};

					// Test if the reference contains the values

					exports.contain = function (ref, values, options) {

						/*
          string -> string(s)
          array -> item(s)
          object -> key(s)
          object -> object (key:value)
      */

						var valuePairs = null;
						if ((typeof ref === 'undefined' ? 'undefined' : _typeof$$1(ref)) === 'object' && (typeof values === 'undefined' ? 'undefined' : _typeof$$1(values)) === 'object' && !Array.isArray(ref) && !Array.isArray(values)) {

							valuePairs = values;
							values = Object.keys(values);
						} else {
							values = [].concat(values);
						}

						options = options || {}; // deep, once, only, part

						exports.assert(arguments.length >= 2, 'Insufficient arguments');
						exports.assert(typeof ref === 'string' || (typeof ref === 'undefined' ? 'undefined' : _typeof$$1(ref)) === 'object', 'Reference must be string or an object');
						exports.assert(values.length, 'Values array cannot be empty');

						var compare = void 0;
						var compareFlags = void 0;
						if (options.deep) {
							compare = exports.deepEqual;

							var hasOnly = options.hasOwnProperty('only');
							var hasPart = options.hasOwnProperty('part');

							compareFlags = {
								prototype: hasOnly ? options.only : hasPart ? !options.part : false,
								part: hasOnly ? !options.only : hasPart ? options.part : true
							};
						} else {
							compare = function compare(a, b) {
								return a === b;
							};
						}

						var misses = false;
						var matches = new Array(values.length);
						for (var i = 0; i < matches.length; ++i) {
							matches[i] = 0;
						}

						if (typeof ref === 'string') {
							var pattern = '(';
							for (var _i4 = 0; _i4 < values.length; ++_i4) {
								var value = values[_i4];
								exports.assert(typeof value === 'string', 'Cannot compare string reference to non-string value');
								pattern += (_i4 ? '|' : '') + exports.escapeRegex(value);
							}

							var regex = new RegExp(pattern + ')', 'g');
							var leftovers = ref.replace(regex, function ($0, $1) {

								var index = values.indexOf($1);
								++matches[index];
								return ''; // Remove from string
							});

							misses = !!leftovers;
						} else if (Array.isArray(ref)) {
							for (var _i5 = 0; _i5 < ref.length; ++_i5) {
								var matched = false;
								for (var j = 0; j < values.length && matched === false; ++j) {
									matched = compare(values[j], ref[_i5], compareFlags) && j;
								}

								if (matched !== false) {
									++matches[matched];
								} else {
									misses = true;
								}
							}
						} else {
							var keys = Object.getOwnPropertyNames(ref);
							for (var _i6 = 0; _i6 < keys.length; ++_i6) {
								var key = keys[_i6];
								var pos = values.indexOf(key);
								if (pos !== -1) {
									if (valuePairs && !compare(valuePairs[key], ref[key], compareFlags)) {

										return false;
									}

									++matches[pos];
								} else {
									misses = true;
								}
							}
						}

						var result = false;
						for (var _i7 = 0; _i7 < matches.length; ++_i7) {
							result = result || !!matches[_i7];
							if (options.once && matches[_i7] > 1 || !options.part && !matches[_i7]) {

								return false;
							}
						}

						if (options.only && misses) {

							return false;
						}

						return result;
					};

					// Flatten array

					exports.flatten = function (array, target) {

						var result = target || [];

						for (var i = 0; i < array.length; ++i) {
							if (Array.isArray(array[i])) {
								exports.flatten(array[i], result);
							} else {
								result.push(array[i]);
							}
						}

						return result;
					};

					// Convert an object key chain string ('a.b.c') to reference (object[a][b][c])

					exports.reach = function (obj, chain, options) {

						if (chain === false || chain === null || typeof chain === 'undefined') {

							return obj;
						}

						options = options || {};
						if (typeof options === 'string') {
							options = { separator: options };
						}

						var path = chain.split(options.separator || '.');
						var ref = obj;
						for (var i = 0; i < path.length; ++i) {
							var key = path[i];
							if (key[0] === '-' && Array.isArray(ref)) {
								key = key.slice(1, key.length);
								key = ref.length - key;
							}

							if (!ref || !(((typeof ref === 'undefined' ? 'undefined' : _typeof$$1(ref)) === 'object' || typeof ref === 'function') && key in ref) || (typeof ref === 'undefined' ? 'undefined' : _typeof$$1(ref)) !== 'object' && options.functions === false) {
								// Only object and function can have properties

								exports.assert(!options.strict || i + 1 === path.length, 'Missing segment', key, 'in reach path ', chain);
								exports.assert((typeof ref === 'undefined' ? 'undefined' : _typeof$$1(ref)) === 'object' || options.functions === true || typeof ref !== 'function', 'Invalid segment', key, 'in reach path ', chain);
								ref = options.default;
								break;
							}

							ref = ref[key];
						}

						return ref;
					};

					exports.reachTemplate = function (obj, template, options) {

						return template.replace(/{([^}]+)}/g, function ($0, chain) {

							var value = exports.reach(obj, chain, options);
							return value === undefined || value === null ? '' : value;
						});
					};

					exports.formatStack = function (stack) {

						var trace = [];
						for (var i = 0; i < stack.length; ++i) {
							var item = stack[i];
							trace.push([item.getFileName(), item.getLineNumber(), item.getColumnNumber(), item.getFunctionName(), item.isConstructor()]);
						}

						return trace;
					};

					exports.formatTrace = function (trace) {

						var display = [];

						for (var i = 0; i < trace.length; ++i) {
							var row = trace[i];
							display.push((row[4] ? 'new ' : '') + row[3] + ' (' + row[0] + ':' + row[1] + ':' + row[2] + ')');
						}

						return display;
					};

					exports.callStack = function (slice) {

						// http://code.google.com/p/v8/wiki/JavaScriptStackTraceApi

						var v8 = Error.prepareStackTrace;
						Error.prepareStackTrace = function (_, stack) {

							return stack;
						};

						var capture = {};
						Error.captureStackTrace(capture, this); // arguments.callee is not supported in strict mode so we use this and slice the trace of this off the result
						var stack = capture.stack;

						Error.prepareStackTrace = v8;

						var trace = exports.formatStack(stack);

						return trace.slice(1 + slice);
					};

					exports.displayStack = function (slice) {

						var trace = exports.callStack(slice === undefined ? 1 : slice + 1);

						return exports.formatTrace(trace);
					};

					exports.abortThrow = false;

					exports.abort = function (message, hideStack) {

						if (process.env.NODE_ENV === 'test' || exports.abortThrow === true) {
							throw new Error(message || 'Unknown error');
						}

						var stack = '';
						if (!hideStack) {
							stack = exports.displayStack(1).join('\n\t');
						}
						console.log('ABORT: ' + message + '\n\t' + stack);
						process.exit(1);
					};

					exports.assert = function (condition /*, msg1, msg2, msg3 */) {

						if (condition) {
							return;
						}

						if (arguments.length === 2 && arguments[1] instanceof Error) {
							throw arguments[1];
						}

						var msgs = [];
						for (var i = 1; i < arguments.length; ++i) {
							if (arguments[i] !== '') {
								msgs.push(arguments[i]); // Avoids Array.slice arguments leak, allowing for V8 optimizations
							}
						}

						msgs = msgs.map(function (msg) {

							return typeof msg === 'string' ? msg : msg instanceof Error ? msg.message : exports.stringify(msg);
						});

						throw new Error(msgs.join(' ') || 'Unknown error');
					};

					exports.Timer = function () {

						this.ts = 0;
						this.reset();
					};

					exports.Timer.prototype.reset = function () {

						this.ts = Date.now();
					};

					exports.Timer.prototype.elapsed = function () {

						return Date.now() - this.ts;
					};

					exports.Bench = function () {

						this.ts = 0;
						this.reset();
					};

					exports.Bench.prototype.reset = function () {

						this.ts = exports.Bench.now();
					};

					exports.Bench.prototype.elapsed = function () {

						return exports.Bench.now() - this.ts;
					};

					exports.Bench.now = function () {

						var ts = process.hrtime();
						return ts[0] * 1e3 + ts[1] / 1e6;
					};

					// Escape string for Regex construction

					exports.escapeRegex = function (string) {

						// Escape ^$.*+-?=!:|\/()[]{},
						return string.replace(/[\^\$\.\*\+\-\?\=\!\:\|\\\/\(\)\[\]\{\}\,]/g, '\\$&');
					};

					// Base64url (RFC 4648) encode

					exports.base64urlEncode = function (value, encoding) {

						exports.assert(typeof value === 'string' || Buffer.isBuffer(value), 'value must be string or buffer');
						var buf = Buffer.isBuffer(value) ? value : new Buffer(value, encoding || 'binary');
						return buf.toString('base64').replace(/\+/g, '-').replace(/\//g, '_').replace(/\=/g, '');
					};

					// Base64url (RFC 4648) decode

					exports.base64urlDecode = function (value, encoding) {

						if (typeof value !== 'string') {

							return new Error('Value not a string');
						}

						if (!/^[\w\-]*$/.test(value)) {

							return new Error('Invalid character');
						}

						var buf = new Buffer(value, 'base64');
						return encoding === 'buffer' ? buf : buf.toString(encoding || 'binary');
					};

					// Escape attribute value for use in HTTP header

					exports.escapeHeaderAttribute = function (attribute) {

						// Allowed value characters: !#$%&'()*+,-./:;<=>?@[]^_`{|}~ and space, a-z, A-Z, 0-9, \, "

						exports.assert(/^[ \w\!#\$%&'\(\)\*\+,\-\.\/\:;<\=>\?@\[\]\^`\{\|\}~\"\\]*$/.test(attribute), 'Bad attribute value (' + attribute + ')');

						return attribute.replace(/\\/g, '\\\\').replace(/\"/g, '\\"'); // Escape quotes and slash
					};

					exports.escapeHtml = function (string) {

						return Escape.escapeHtml(string);
					};

					exports.escapeJavaScript = function (string) {

						return Escape.escapeJavaScript(string);
					};

					exports.nextTick = function (callback) {

						return function () {

							var args = arguments;
							process.nextTick(function () {

								callback.apply(null, args);
							});
						};
					};

					exports.once = function (method) {

						if (method._hoekOnce) {
							return method;
						}

						var once = false;
						var wrapped = function wrapped() {

							if (!once) {
								once = true;
								method.apply(null, arguments);
							}
						};

						wrapped._hoekOnce = true;

						return wrapped;
					};

					exports.isInteger = Number.isSafeInteger;

					exports.ignore = function () {};

					exports.inherits = Util.inherits;

					exports.format = Util.format;

					exports.transform = function (source, transform, options) {

						exports.assert(source === null || source === undefined || (typeof source === 'undefined' ? 'undefined' : _typeof$$1(source)) === 'object' || Array.isArray(source), 'Invalid source object: must be null, undefined, an object, or an array');
						var separator = (typeof options === 'undefined' ? 'undefined' : _typeof$$1(options)) === 'object' && options !== null ? options.separator || '.' : '.';

						if (Array.isArray(source)) {
							var results = [];
							for (var i = 0; i < source.length; ++i) {
								results.push(exports.transform(source[i], transform, options));
							}
							return results;
						}

						var result = {};
						var keys = Object.keys(transform);

						for (var _i8 = 0; _i8 < keys.length; ++_i8) {
							var key = keys[_i8];
							var path = key.split(separator);
							var sourcePath = transform[key];

							exports.assert(typeof sourcePath === 'string', 'All mappings must be "." delineated strings');

							var segment = void 0;
							var res = result;

							while (path.length > 1) {
								segment = path.shift();
								if (!res[segment]) {
									res[segment] = {};
								}
								res = res[segment];
							}
							segment = path.shift();
							res[segment] = exports.reach(source, sourcePath, options);
						}

						return result;
					};

					exports.uniqueFilename = function (path, extension) {

						if (extension) {
							extension = extension[0] !== '.' ? '.' + extension : extension;
						} else {
							extension = '';
						}

						path = Path.resolve(path);
						var name = [Date.now(), process.pid, Crypto.randomBytes(8).toString('hex')].join('-') + extension;
						return Path.join(path, name);
					};

					exports.stringify = function () {

						try {
							return JSON.stringify.apply(null, arguments);
						} catch (err) {
							return '[Cannot display object: ' + err.message + ']';
						}
					};

					exports.shallow = function (source) {

						var target = {};
						var keys = Object.keys(source);
						for (var i = 0; i < keys.length; ++i) {
							var key = keys[i];
							target[key] = source[key];
						}

						return target;
					};
					/* WEBPACK VAR INJECTION */
				}).call(exports, __webpack_require__(3).Buffer, __webpack_require__(4));

				/***/
			},
			/* 3 */
			/***/function (module, exports) {

				function Buffer() {
					throw new Error("Buffer is not included.");
				}
				Buffer.isBuffer = function () {
					return false;
				};

				exports.INSPECT_MAX_BYTES = 50;
				exports.SlowBuffer = Buffer;
				exports.Buffer = Buffer;

				/***/
			},
			/* 4 */
			/***/function (module, exports) {

				// shim for using process in browser
				var process = module.exports = {};

				// cached from whatever global is present so that test runners that stub it
				// don't break things.  But we need to wrap it in a try catch in case it is
				// wrapped in strict mode code which doesn't define any globals.  It's inside a
				// function because try/catches deoptimize in certain engines.

				var cachedSetTimeout;
				var cachedClearTimeout;

				function defaultSetTimout() {
					throw new Error('setTimeout has not been defined');
				}
				function defaultClearTimeout() {
					throw new Error('clearTimeout has not been defined');
				}
				(function () {
					try {
						if (typeof setTimeout === 'function') {
							cachedSetTimeout = setTimeout;
						} else {
							cachedSetTimeout = defaultSetTimout;
						}
					} catch (e) {
						cachedSetTimeout = defaultSetTimout;
					}
					try {
						if (typeof clearTimeout === 'function') {
							cachedClearTimeout = clearTimeout;
						} else {
							cachedClearTimeout = defaultClearTimeout;
						}
					} catch (e) {
						cachedClearTimeout = defaultClearTimeout;
					}
				})();
				function runTimeout(fun) {
					if (cachedSetTimeout === setTimeout) {
						//normal enviroments in sane situations
						return setTimeout(fun, 0);
					}
					// if setTimeout wasn't available but was latter defined
					if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
						cachedSetTimeout = setTimeout;
						return setTimeout(fun, 0);
					}
					try {
						// when when somebody has screwed with setTimeout but no I.E. maddness
						return cachedSetTimeout(fun, 0);
					} catch (e) {
						try {
							// When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
							return cachedSetTimeout.call(null, fun, 0);
						} catch (e) {
							// same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
							return cachedSetTimeout.call(this, fun, 0);
						}
					}
				}
				function runClearTimeout(marker) {
					if (cachedClearTimeout === clearTimeout) {
						//normal enviroments in sane situations
						return clearTimeout(marker);
					}
					// if clearTimeout wasn't available but was latter defined
					if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
						cachedClearTimeout = clearTimeout;
						return clearTimeout(marker);
					}
					try {
						// when when somebody has screwed with setTimeout but no I.E. maddness
						return cachedClearTimeout(marker);
					} catch (e) {
						try {
							// When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
							return cachedClearTimeout.call(null, marker);
						} catch (e) {
							// same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
							// Some versions of I.E. have different rules for clearTimeout vs setTimeout
							return cachedClearTimeout.call(this, marker);
						}
					}
				}
				var queue = [];
				var draining = false;
				var currentQueue;
				var queueIndex = -1;

				function cleanUpNextTick() {
					if (!draining || !currentQueue) {
						return;
					}
					draining = false;
					if (currentQueue.length) {
						queue = currentQueue.concat(queue);
					} else {
						queueIndex = -1;
					}
					if (queue.length) {
						drainQueue();
					}
				}

				function drainQueue() {
					if (draining) {
						return;
					}
					var timeout = runTimeout(cleanUpNextTick);
					draining = true;

					var len = queue.length;
					while (len) {
						currentQueue = queue;
						queue = [];
						while (++queueIndex < len) {
							if (currentQueue) {
								currentQueue[queueIndex].run();
							}
						}
						queueIndex = -1;
						len = queue.length;
					}
					currentQueue = null;
					draining = false;
					runClearTimeout(timeout);
				}

				process.nextTick = function (fun) {
					var args = new Array(arguments.length - 1);
					if (arguments.length > 1) {
						for (var i = 1; i < arguments.length; i++) {
							args[i - 1] = arguments[i];
						}
					}
					queue.push(new Item(fun, args));
					if (queue.length === 1 && !draining) {
						runTimeout(drainQueue);
					}
				};

				// v8 likes predictible objects
				function Item(fun, array) {
					this.fun = fun;
					this.array = array;
				}
				Item.prototype.run = function () {
					this.fun.apply(null, this.array);
				};
				process.title = 'browser';
				process.browser = true;
				process.env = {};
				process.argv = [];
				process.version = ''; // empty string to avoid regexp issues
				process.versions = {};

				function noop() {}

				process.on = noop;
				process.addListener = noop;
				process.once = noop;
				process.off = noop;
				process.removeListener = noop;
				process.removeAllListeners = noop;
				process.emit = noop;

				process.binding = function (name) {
					throw new Error('process.binding is not supported');
				};

				process.cwd = function () {
					return '/';
				};
				process.chdir = function (dir) {
					throw new Error('process.chdir is not supported');
				};
				process.umask = function () {
					return 0;
				};

				/***/
			},
			/* 5 */
			/***/function (module, exports) {

				/***/},
			/* 6 */
			/***/function (module, exports, __webpack_require__) {

				/* WEBPACK VAR INJECTION */(function (process) {
					// Copyright Joyent, Inc. and other Node contributors.
					//
					// Permission is hereby granted, free of charge, to any person obtaining a
					// copy of this software and associated documentation files (the
					// "Software"), to deal in the Software without restriction, including
					// without limitation the rights to use, copy, modify, merge, publish,
					// distribute, sublicense, and/or sell copies of the Software, and to permit
					// persons to whom the Software is furnished to do so, subject to the
					// following conditions:
					//
					// The above copyright notice and this permission notice shall be included
					// in all copies or substantial portions of the Software.
					//
					// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
					// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
					// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
					// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
					// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
					// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
					// USE OR OTHER DEALINGS IN THE SOFTWARE.

					// resolves . and .. elements in a path array with directory names there
					// must be no slashes, empty elements, or device names (c:\) in the array
					// (so also no leading and trailing slashes - it does not distinguish
					// relative and absolute paths)
					function normalizeArray(parts, allowAboveRoot) {
						// if the path tries to go above the root, `up` ends up > 0
						var up = 0;
						for (var i = parts.length - 1; i >= 0; i--) {
							var last = parts[i];
							if (last === '.') {
								parts.splice(i, 1);
							} else if (last === '..') {
								parts.splice(i, 1);
								up++;
							} else if (up) {
								parts.splice(i, 1);
								up--;
							}
						}

						// if the path is allowed to go above the root, restore leading ..s
						if (allowAboveRoot) {
							for (; up--; up) {
								parts.unshift('..');
							}
						}

						return parts;
					}

					// Split a filename into [root, dir, basename, ext], unix version
					// 'root' is just a slash, or nothing.
					var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
					var splitPath = function splitPath(filename) {
						return splitPathRe.exec(filename).slice(1);
					};

					// path.resolve([from ...], to)
					// posix version
					exports.resolve = function () {
						var resolvedPath = '',
						    resolvedAbsolute = false;

						for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
							var path = i >= 0 ? arguments[i] : process.cwd();

							// Skip empty and invalid entries
							if (typeof path !== 'string') {
								throw new TypeError('Arguments to path.resolve must be strings');
							} else if (!path) {
								continue;
							}

							resolvedPath = path + '/' + resolvedPath;
							resolvedAbsolute = path.charAt(0) === '/';
						}

						// At this point the path should be resolved to a full absolute path, but
						// handle relative paths to be safe (might happen when process.cwd() fails)

						// Normalize the path
						resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function (p) {
							return !!p;
						}), !resolvedAbsolute).join('/');

						return (resolvedAbsolute ? '/' : '') + resolvedPath || '.';
					};

					// path.normalize(path)
					// posix version
					exports.normalize = function (path) {
						var isAbsolute = exports.isAbsolute(path),
						    trailingSlash = substr(path, -1) === '/';

						// Normalize the path
						path = normalizeArray(filter(path.split('/'), function (p) {
							return !!p;
						}), !isAbsolute).join('/');

						if (!path && !isAbsolute) {
							path = '.';
						}
						if (path && trailingSlash) {
							path += '/';
						}

						return (isAbsolute ? '/' : '') + path;
					};

					// posix version
					exports.isAbsolute = function (path) {
						return path.charAt(0) === '/';
					};

					// posix version
					exports.join = function () {
						var paths = Array.prototype.slice.call(arguments, 0);
						return exports.normalize(filter(paths, function (p, index) {
							if (typeof p !== 'string') {
								throw new TypeError('Arguments to path.join must be strings');
							}
							return p;
						}).join('/'));
					};

					// path.relative(from, to)
					// posix version
					exports.relative = function (from, to) {
						from = exports.resolve(from).substr(1);
						to = exports.resolve(to).substr(1);

						function trim(arr) {
							var start = 0;
							for (; start < arr.length; start++) {
								if (arr[start] !== '') break;
							}

							var end = arr.length - 1;
							for (; end >= 0; end--) {
								if (arr[end] !== '') break;
							}

							if (start > end) return [];
							return arr.slice(start, end - start + 1);
						}

						var fromParts = trim(from.split('/'));
						var toParts = trim(to.split('/'));

						var length = Math.min(fromParts.length, toParts.length);
						var samePartsLength = length;
						for (var i = 0; i < length; i++) {
							if (fromParts[i] !== toParts[i]) {
								samePartsLength = i;
								break;
							}
						}

						var outputParts = [];
						for (var i = samePartsLength; i < fromParts.length; i++) {
							outputParts.push('..');
						}

						outputParts = outputParts.concat(toParts.slice(samePartsLength));

						return outputParts.join('/');
					};

					exports.sep = '/';
					exports.delimiter = ':';

					exports.dirname = function (path) {
						var result = splitPath(path),
						    root = result[0],
						    dir = result[1];

						if (!root && !dir) {
							// No dirname whatsoever
							return '.';
						}

						if (dir) {
							// It has a dirname, strip trailing slash
							dir = dir.substr(0, dir.length - 1);
						}

						return root + dir;
					};

					exports.basename = function (path, ext) {
						var f = splitPath(path)[2];
						// TODO: make this comparison case-insensitive on windows?
						if (ext && f.substr(-1 * ext.length) === ext) {
							f = f.substr(0, f.length - ext.length);
						}
						return f;
					};

					exports.extname = function (path) {
						return splitPath(path)[3];
					};

					function filter(xs, f) {
						if (xs.filter) return xs.filter(f);
						var res = [];
						for (var i = 0; i < xs.length; i++) {
							if (f(xs[i], i, xs)) res.push(xs[i]);
						}
						return res;
					}

					// String.prototype.substr - negative index don't work in IE8
					var substr = 'ab'.substr(-1) === 'b' ? function (str, start, len) {
						return str.substr(start, len);
					} : function (str, start, len) {
						if (start < 0) start = str.length + start;
						return str.substr(start, len);
					};

					/* WEBPACK VAR INJECTION */
				}).call(exports, __webpack_require__(4));

				/***/
			},
			/* 7 */
			/***/function (module, exports, __webpack_require__) {

				/* WEBPACK VAR INJECTION */(function (global, process) {
					// Copyright Joyent, Inc. and other Node contributors.
					//
					// Permission is hereby granted, free of charge, to any person obtaining a
					// copy of this software and associated documentation files (the
					// "Software"), to deal in the Software without restriction, including
					// without limitation the rights to use, copy, modify, merge, publish,
					// distribute, sublicense, and/or sell copies of the Software, and to permit
					// persons to whom the Software is furnished to do so, subject to the
					// following conditions:
					//
					// The above copyright notice and this permission notice shall be included
					// in all copies or substantial portions of the Software.
					//
					// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
					// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
					// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
					// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
					// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
					// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
					// USE OR OTHER DEALINGS IN THE SOFTWARE.

					var formatRegExp = /%[sdj%]/g;
					exports.format = function (f) {
						if (!isString(f)) {
							var objects = [];
							for (var i = 0; i < arguments.length; i++) {
								objects.push(inspect(arguments[i]));
							}
							return objects.join(' ');
						}

						var i = 1;
						var args = arguments;
						var len = args.length;
						var str = String(f).replace(formatRegExp, function (x) {
							if (x === '%%') return '%';
							if (i >= len) return x;
							switch (x) {
								case '%s':
									return String(args[i++]);
								case '%d':
									return Number(args[i++]);
								case '%j':
									try {
										return JSON.stringify(args[i++]);
									} catch (_) {
										return '[Circular]';
									}
								default:
									return x;
							}
						});
						for (var x = args[i]; i < len; x = args[++i]) {
							if (isNull(x) || !isObject(x)) {
								str += ' ' + x;
							} else {
								str += ' ' + inspect(x);
							}
						}
						return str;
					};

					// Mark that a method should not be used.
					// Returns a modified function which warns once by default.
					// If --no-deprecation is set, then it is a no-op.
					exports.deprecate = function (fn, msg) {
						// Allow for deprecating things in the process of starting up.
						if (isUndefined(global.process)) {
							return function () {
								return exports.deprecate(fn, msg).apply(this, arguments);
							};
						}

						if (process.noDeprecation === true) {
							return fn;
						}

						var warned = false;
						function deprecated() {
							if (!warned) {
								if (process.throwDeprecation) {
									throw new Error(msg);
								} else if (process.traceDeprecation) {
									console.trace(msg);
								} else {
									console.error(msg);
								}
								warned = true;
							}
							return fn.apply(this, arguments);
						}

						return deprecated;
					};

					var debugs = {};
					var debugEnviron;
					exports.debuglog = function (set) {
						if (isUndefined(debugEnviron)) debugEnviron = process.env.NODE_DEBUG || '';
						set = set.toUpperCase();
						if (!debugs[set]) {
							if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
								var pid = process.pid;
								debugs[set] = function () {
									var msg = exports.format.apply(exports, arguments);
									console.error('%s %d: %s', set, pid, msg);
								};
							} else {
								debugs[set] = function () {};
							}
						}
						return debugs[set];
					};

					/**
      * Echos the value of a value. Trys to print the value out
      * in the best way possible given the different types.
      *
      * @param {Object} obj The object to print out.
      * @param {Object} opts Optional options object that alters the output.
      */
					/* legacy: obj, showHidden, depth, colors*/
					function inspect(obj, opts) {
						// default options
						var ctx = {
							seen: [],
							stylize: stylizeNoColor
						};
						// legacy...
						if (arguments.length >= 3) ctx.depth = arguments[2];
						if (arguments.length >= 4) ctx.colors = arguments[3];
						if (isBoolean(opts)) {
							// legacy...
							ctx.showHidden = opts;
						} else if (opts) {
							// got an "options" object
							exports._extend(ctx, opts);
						}
						// set default options
						if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
						if (isUndefined(ctx.depth)) ctx.depth = 2;
						if (isUndefined(ctx.colors)) ctx.colors = false;
						if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
						if (ctx.colors) ctx.stylize = stylizeWithColor;
						return formatValue(ctx, obj, ctx.depth);
					}
					exports.inspect = inspect;

					// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
					inspect.colors = {
						'bold': [1, 22],
						'italic': [3, 23],
						'underline': [4, 24],
						'inverse': [7, 27],
						'white': [37, 39],
						'grey': [90, 39],
						'black': [30, 39],
						'blue': [34, 39],
						'cyan': [36, 39],
						'green': [32, 39],
						'magenta': [35, 39],
						'red': [31, 39],
						'yellow': [33, 39]
					};

					// Don't use 'blue' not visible on cmd.exe
					inspect.styles = {
						'special': 'cyan',
						'number': 'yellow',
						'boolean': 'yellow',
						'undefined': 'grey',
						'null': 'bold',
						'string': 'green',
						'date': 'magenta',
						// "name": intentionally not styling
						'regexp': 'red'
					};

					function stylizeWithColor(str, styleType) {
						var style = inspect.styles[styleType];

						if (style) {
							return '\x1B[' + inspect.colors[style][0] + 'm' + str + '\x1B[' + inspect.colors[style][1] + 'm';
						} else {
							return str;
						}
					}

					function stylizeNoColor(str, styleType) {
						return str;
					}

					function arrayToHash(array) {
						var hash = {};

						array.forEach(function (val, idx) {
							hash[val] = true;
						});

						return hash;
					}

					function formatValue(ctx, value, recurseTimes) {
						// Provide a hook for user-specified inspect functions.
						// Check that value is an object with an inspect function on it
						if (ctx.customInspect && value && isFunction(value.inspect) &&
						// Filter out the util module, it's inspect function is special
						value.inspect !== exports.inspect &&
						// Also filter out any prototype objects using the circular check.
						!(value.constructor && value.constructor.prototype === value)) {
							var ret = value.inspect(recurseTimes, ctx);
							if (!isString(ret)) {
								ret = formatValue(ctx, ret, recurseTimes);
							}
							return ret;
						}

						// Primitive types cannot have properties
						var primitive = formatPrimitive(ctx, value);
						if (primitive) {
							return primitive;
						}

						// Look up the keys of the object.
						var keys = Object.keys(value);
						var visibleKeys = arrayToHash(keys);

						if (ctx.showHidden) {
							keys = Object.getOwnPropertyNames(value);
						}

						// IE doesn't make error fields non-enumerable
						// http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
						if (isError(value) && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
							return formatError(value);
						}

						// Some type of object without properties can be shortcutted.
						if (keys.length === 0) {
							if (isFunction(value)) {
								var name = value.name ? ': ' + value.name : '';
								return ctx.stylize('[Function' + name + ']', 'special');
							}
							if (isRegExp(value)) {
								return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
							}
							if (isDate(value)) {
								return ctx.stylize(Date.prototype.toString.call(value), 'date');
							}
							if (isError(value)) {
								return formatError(value);
							}
						}

						var base = '',
						    array = false,
						    braces = ['{', '}'];

						// Make Array say that they are Array
						if (isArray(value)) {
							array = true;
							braces = ['[', ']'];
						}

						// Make functions say that they are functions
						if (isFunction(value)) {
							var n = value.name ? ': ' + value.name : '';
							base = ' [Function' + n + ']';
						}

						// Make RegExps say that they are RegExps
						if (isRegExp(value)) {
							base = ' ' + RegExp.prototype.toString.call(value);
						}

						// Make dates with properties first say the date
						if (isDate(value)) {
							base = ' ' + Date.prototype.toUTCString.call(value);
						}

						// Make error with message first say the error
						if (isError(value)) {
							base = ' ' + formatError(value);
						}

						if (keys.length === 0 && (!array || value.length == 0)) {
							return braces[0] + base + braces[1];
						}

						if (recurseTimes < 0) {
							if (isRegExp(value)) {
								return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
							} else {
								return ctx.stylize('[Object]', 'special');
							}
						}

						ctx.seen.push(value);

						var output;
						if (array) {
							output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
						} else {
							output = keys.map(function (key) {
								return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
							});
						}

						ctx.seen.pop();

						return reduceToSingleString(output, base, braces);
					}

					function formatPrimitive(ctx, value) {
						if (isUndefined(value)) return ctx.stylize('undefined', 'undefined');
						if (isString(value)) {
							var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '').replace(/'/g, "\\'").replace(/\\"/g, '"') + '\'';
							return ctx.stylize(simple, 'string');
						}
						if (isNumber(value)) return ctx.stylize('' + value, 'number');
						if (isBoolean(value)) return ctx.stylize('' + value, 'boolean');
						// For some reason typeof null is "object", so special case here.
						if (isNull(value)) return ctx.stylize('null', 'null');
					}

					function formatError(value) {
						return '[' + Error.prototype.toString.call(value) + ']';
					}

					function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
						var output = [];
						for (var i = 0, l = value.length; i < l; ++i) {
							if (hasOwnProperty(value, String(i))) {
								output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true));
							} else {
								output.push('');
							}
						}
						keys.forEach(function (key) {
							if (!key.match(/^\d+$/)) {
								output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));
							}
						});
						return output;
					}

					function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
						var name, str, desc;
						desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
						if (desc.get) {
							if (desc.set) {
								str = ctx.stylize('[Getter/Setter]', 'special');
							} else {
								str = ctx.stylize('[Getter]', 'special');
							}
						} else {
							if (desc.set) {
								str = ctx.stylize('[Setter]', 'special');
							}
						}
						if (!hasOwnProperty(visibleKeys, key)) {
							name = '[' + key + ']';
						}
						if (!str) {
							if (ctx.seen.indexOf(desc.value) < 0) {
								if (isNull(recurseTimes)) {
									str = formatValue(ctx, desc.value, null);
								} else {
									str = formatValue(ctx, desc.value, recurseTimes - 1);
								}
								if (str.indexOf('\n') > -1) {
									if (array) {
										str = str.split('\n').map(function (line) {
											return '  ' + line;
										}).join('\n').substr(2);
									} else {
										str = '\n' + str.split('\n').map(function (line) {
											return '   ' + line;
										}).join('\n');
									}
								}
							} else {
								str = ctx.stylize('[Circular]', 'special');
							}
						}
						if (isUndefined(name)) {
							if (array && key.match(/^\d+$/)) {
								return str;
							}
							name = JSON.stringify('' + key);
							if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
								name = name.substr(1, name.length - 2);
								name = ctx.stylize(name, 'name');
							} else {
								name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
								name = ctx.stylize(name, 'string');
							}
						}

						return name + ': ' + str;
					}

					function reduceToSingleString(output, base, braces) {
						var numLinesEst = 0;
						var length = output.reduce(function (prev, cur) {
							numLinesEst++;
							if (cur.indexOf('\n') >= 0) numLinesEst++;
							return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
						}, 0);

						if (length > 60) {
							return braces[0] + (base === '' ? '' : base + '\n ') + ' ' + output.join(',\n  ') + ' ' + braces[1];
						}

						return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
					}

					// NOTE: These type checking functions intentionally don't use `instanceof`
					// because it is fragile and can be easily faked with `Object.create()`.
					function isArray(ar) {
						return Array.isArray(ar);
					}
					exports.isArray = isArray;

					function isBoolean(arg) {
						return typeof arg === 'boolean';
					}
					exports.isBoolean = isBoolean;

					function isNull(arg) {
						return arg === null;
					}
					exports.isNull = isNull;

					function isNullOrUndefined(arg) {
						return arg == null;
					}
					exports.isNullOrUndefined = isNullOrUndefined;

					function isNumber(arg) {
						return typeof arg === 'number';
					}
					exports.isNumber = isNumber;

					function isString(arg) {
						return typeof arg === 'string';
					}
					exports.isString = isString;

					function isSymbol(arg) {
						return (typeof arg === 'undefined' ? 'undefined' : _typeof(arg)) === 'symbol';
					}
					exports.isSymbol = isSymbol;

					function isUndefined(arg) {
						return arg === void 0;
					}
					exports.isUndefined = isUndefined;

					function isRegExp(re) {
						return isObject(re) && objectToString(re) === '[object RegExp]';
					}
					exports.isRegExp = isRegExp;

					function isObject(arg) {
						return (typeof arg === 'undefined' ? 'undefined' : _typeof(arg)) === 'object' && arg !== null;
					}
					exports.isObject = isObject;

					function isDate(d) {
						return isObject(d) && objectToString(d) === '[object Date]';
					}
					exports.isDate = isDate;

					function isError(e) {
						return isObject(e) && (objectToString(e) === '[object Error]' || e instanceof Error);
					}
					exports.isError = isError;

					function isFunction(arg) {
						return typeof arg === 'function';
					}
					exports.isFunction = isFunction;

					function isPrimitive(arg) {
						return arg === null || typeof arg === 'boolean' || typeof arg === 'number' || typeof arg === 'string' || (typeof arg === 'undefined' ? 'undefined' : _typeof(arg)) === 'symbol' || // ES6 symbol
						typeof arg === 'undefined';
					}
					exports.isPrimitive = isPrimitive;

					exports.isBuffer = __webpack_require__(8);

					function objectToString(o) {
						return Object.prototype.toString.call(o);
					}

					function pad(n) {
						return n < 10 ? '0' + n.toString(10) : n.toString(10);
					}

					var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];

					// 26 Feb 16:19:34
					function timestamp() {
						var d = new Date();
						var time = [pad(d.getHours()), pad(d.getMinutes()), pad(d.getSeconds())].join(':');
						return [d.getDate(), months[d.getMonth()], time].join(' ');
					}

					// log is just a thin wrapper to console.log that prepends a timestamp
					exports.log = function () {
						console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
					};

					/**
      * Inherit the prototype methods from one constructor into another.
      *
      * The Function.prototype.inherits from lang.js rewritten as a standalone
      * function (not on Function.prototype). NOTE: If this file is to be loaded
      * during bootstrapping this function needs to be rewritten using some native
      * functions as prototype setup using normal JavaScript does not work as
      * expected during bootstrapping (see mirror.js in r114903).
      *
      * @param {function} ctor Constructor function which needs to inherit the
      *     prototype.
      * @param {function} superCtor Constructor function to inherit prototype from.
      */
					exports.inherits = __webpack_require__(9);

					exports._extend = function (origin, add) {
						// Don't do anything if add isn't an object
						if (!add || !isObject(add)) return origin;

						var keys = Object.keys(add);
						var i = keys.length;
						while (i--) {
							origin[keys[i]] = add[keys[i]];
						}
						return origin;
					};

					function hasOwnProperty(obj, prop) {
						return Object.prototype.hasOwnProperty.call(obj, prop);
					}

					/* WEBPACK VAR INJECTION */
				}).call(exports, function () {
					return this;
				}(), __webpack_require__(4));

				/***/
			},
			/* 8 */
			/***/function (module, exports) {

				module.exports = function isBuffer(arg) {
					return arg && (typeof arg === 'undefined' ? 'undefined' : _typeof(arg)) === 'object' && typeof arg.copy === 'function' && typeof arg.fill === 'function' && typeof arg.readUInt8 === 'function';
				};

				/***/
			},
			/* 9 */
			/***/function (module, exports) {

				if (typeof Object.create === 'function') {
					// implementation from standard node.js 'util' module
					module.exports = function inherits$$1(ctor, superCtor) {
						ctor.super_ = superCtor;
						ctor.prototype = Object.create(superCtor.prototype, {
							constructor: {
								value: ctor,
								enumerable: false,
								writable: true,
								configurable: true
							}
						});
					};
				} else {
					// old school shim for old browsers
					module.exports = function inherits$$1(ctor, superCtor) {
						ctor.super_ = superCtor;
						var TempCtor = function TempCtor() {};
						TempCtor.prototype = superCtor.prototype;
						ctor.prototype = new TempCtor();
						ctor.prototype.constructor = ctor;
					};
				}

				/***/
			},
			/* 10 */
			/***/function (module, exports, __webpack_require__) {

				/* WEBPACK VAR INJECTION */(function (Buffer) {
					'use strict';

					// Declare internals

					var internals = {};

					exports.escapeJavaScript = function (input) {

						if (!input) {
							return '';
						}

						var escaped = '';

						for (var i = 0; i < input.length; ++i) {

							var charCode = input.charCodeAt(i);

							if (internals.isSafe(charCode)) {
								escaped += input[i];
							} else {
								escaped += internals.escapeJavaScriptChar(charCode);
							}
						}

						return escaped;
					};

					exports.escapeHtml = function (input) {

						if (!input) {
							return '';
						}

						var escaped = '';

						for (var i = 0; i < input.length; ++i) {

							var charCode = input.charCodeAt(i);

							if (internals.isSafe(charCode)) {
								escaped += input[i];
							} else {
								escaped += internals.escapeHtmlChar(charCode);
							}
						}

						return escaped;
					};

					internals.escapeJavaScriptChar = function (charCode) {

						if (charCode >= 256) {
							return '\\u' + internals.padLeft('' + charCode, 4);
						}

						var hexValue = new Buffer(String.fromCharCode(charCode), 'ascii').toString('hex');
						return '\\x' + internals.padLeft(hexValue, 2);
					};

					internals.escapeHtmlChar = function (charCode) {

						var namedEscape = internals.namedHtml[charCode];
						if (typeof namedEscape !== 'undefined') {
							return namedEscape;
						}

						if (charCode >= 256) {
							return '&#' + charCode + ';';
						}

						var hexValue = new Buffer(String.fromCharCode(charCode), 'ascii').toString('hex');
						return '&#x' + internals.padLeft(hexValue, 2) + ';';
					};

					internals.padLeft = function (str, len) {

						while (str.length < len) {
							str = '0' + str;
						}

						return str;
					};

					internals.isSafe = function (charCode) {

						return typeof internals.safeCharCodes[charCode] !== 'undefined';
					};

					internals.namedHtml = {
						'38': '&amp;',
						'60': '&lt;',
						'62': '&gt;',
						'34': '&quot;',
						'160': '&nbsp;',
						'162': '&cent;',
						'163': '&pound;',
						'164': '&curren;',
						'169': '&copy;',
						'174': '&reg;'
					};

					internals.safeCharCodes = function () {

						var safe = {};

						for (var i = 32; i < 123; ++i) {

							if (i >= 97 || // a-z
							i >= 65 && i <= 90 || // A-Z
							i >= 48 && i <= 57 || // 0-9
							i === 32 || // space
							i === 46 || // .
							i === 44 || // ,
							i === 45 || // -
							i === 58 || // :
							i === 95) {
								// _

								safe[i] = null;
							}
						}

						return safe;
					}();
					/* WEBPACK VAR INJECTION */
				}).call(exports, __webpack_require__(3).Buffer);

				/***/
			},
			/* 11 */
			/***/function (module, exports, __webpack_require__) {

				'use strict';

				// Load modules

				var _extends$$1 = Object.assign || function (target) {
					for (var i = 1; i < arguments.length; i++) {
						var source = arguments[i];for (var key in source) {
							if (Object.prototype.hasOwnProperty.call(source, key)) {
								target[key] = source[key];
							}
						}
					}return target;
				};

				var _typeof$$1 = typeof Symbol === "function" && _typeof(Symbol.iterator) === "symbol" ? function (obj) {
					return typeof obj === 'undefined' ? 'undefined' : _typeof(obj);
				} : function (obj) {
					return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === 'undefined' ? 'undefined' : _typeof(obj);
				};

				function _classCallCheck(instance, Constructor) {
					if (!(instance instanceof Constructor)) {
						throw new TypeError("Cannot call a class as a function");
					}
				}

				var Hoek = __webpack_require__(2);
				var Ref = __webpack_require__(12);
				var Errors = __webpack_require__(13);
				var Alternatives = null; // Delay-loaded to prevent circular dependencies
				var Cast = null;

				// Declare internals

				var internals = {
					Set: __webpack_require__(15)
				};

				internals.defaults = {
					abortEarly: true,
					convert: true,
					allowUnknown: false,
					skipFunctions: false,
					stripUnknown: false,
					language: {},
					presence: 'optional',
					strip: false,
					noDefaults: false

					// context: null
				};

				module.exports = internals.Any = function () {
					function _class() {
						_classCallCheck(this, _class);

						Cast = Cast || __webpack_require__(16);

						this.isJoi = true;
						this._type = 'any';
						this._settings = null;
						this._valids = new internals.Set();
						this._invalids = new internals.Set();
						this._tests = [];
						this._refs = [];
						this._flags = {
							/*
        presence: 'optional',                   // optional, required, forbidden, ignore
        allowOnly: false,
        allowUnknown: undefined,
        default: undefined,
        forbidden: false,
        encoding: undefined,
        insensitive: false,
        trim: false,
        case: undefined,                        // upper, lower
        empty: undefined,
        func: false,
        raw: false
        */
						};

						this._description = null;
						this._unit = null;
						this._notes = [];
						this._tags = [];
						this._examples = [];
						this._meta = [];

						this._inner = {}; // Hash of arrays of immutable objects
					}

					_class.prototype.createError = function createError(type, context, state, options) {

						return Errors.create(type, context, state, options, this._flags);
					};

					_class.prototype.createOverrideError = function createOverrideError(type, context, state, options, message, template) {

						return Errors.create(type, context, state, options, this._flags, message, template);
					};

					_class.prototype.checkOptions = function checkOptions(options) {

						var Schemas = __webpack_require__(28);
						var result = Schemas.options.validate(options);
						if (result.error) {
							throw new Error(result.error.details[0].message);
						}
					};

					_class.prototype.clone = function clone() {

						var obj = Object.create(Object.getPrototypeOf(this));

						obj.isJoi = true;
						obj._type = this._type;
						obj._settings = internals.concatSettings(this._settings);
						obj._baseType = this._baseType;
						obj._valids = Hoek.clone(this._valids);
						obj._invalids = Hoek.clone(this._invalids);
						obj._tests = this._tests.slice();
						obj._refs = this._refs.slice();
						obj._flags = Hoek.clone(this._flags);

						obj._description = this._description;
						obj._unit = this._unit;
						obj._notes = this._notes.slice();
						obj._tags = this._tags.slice();
						obj._examples = this._examples.slice();
						obj._meta = this._meta.slice();

						obj._inner = {};
						var inners = Object.keys(this._inner);
						for (var i = 0; i < inners.length; ++i) {
							var key = inners[i];
							obj._inner[key] = this._inner[key] ? this._inner[key].slice() : null;
						}

						return obj;
					};

					_class.prototype.concat = function concat(schema) {

						Hoek.assert(schema instanceof internals.Any, 'Invalid schema object');
						Hoek.assert(this._type === 'any' || schema._type === 'any' || schema._type === this._type, 'Cannot merge type', this._type, 'with another type:', schema._type);

						var obj = this.clone();

						if (this._type === 'any' && schema._type !== 'any') {

							// Reset values as if we were "this"
							var tmpObj = schema.clone();
							var keysToRestore = ['_settings', '_valids', '_invalids', '_tests', '_refs', '_flags', '_description', '_unit', '_notes', '_tags', '_examples', '_meta', '_inner'];

							for (var i = 0; i < keysToRestore.length; ++i) {
								tmpObj[keysToRestore[i]] = obj[keysToRestore[i]];
							}

							obj = tmpObj;
						}

						obj._settings = obj._settings ? internals.concatSettings(obj._settings, schema._settings) : schema._settings;
						obj._valids.merge(schema._valids, schema._invalids);
						obj._invalids.merge(schema._invalids, schema._valids);
						obj._tests = obj._tests.concat(schema._tests);
						obj._refs = obj._refs.concat(schema._refs);
						Hoek.merge(obj._flags, schema._flags);

						obj._description = schema._description || obj._description;
						obj._unit = schema._unit || obj._unit;
						obj._notes = obj._notes.concat(schema._notes);
						obj._tags = obj._tags.concat(schema._tags);
						obj._examples = obj._examples.concat(schema._examples);
						obj._meta = obj._meta.concat(schema._meta);

						var inners = Object.keys(schema._inner);
						var isObject = obj._type === 'object';
						for (var _i = 0; _i < inners.length; ++_i) {
							var key = inners[_i];
							var source = schema._inner[key];
							if (source) {
								var target = obj._inner[key];
								if (target) {
									if (isObject && key === 'children') {
										var keys = {};

										for (var j = 0; j < target.length; ++j) {
											keys[target[j].key] = j;
										}

										for (var _j = 0; _j < source.length; ++_j) {
											var sourceKey = source[_j].key;
											if (keys[sourceKey] >= 0) {
												target[keys[sourceKey]] = {
													key: sourceKey,
													schema: target[keys[sourceKey]].schema.concat(source[_j].schema)
												};
											} else {
												target.push(source[_j]);
											}
										}
									} else {
										obj._inner[key] = obj._inner[key].concat(source);
									}
								} else {
									obj._inner[key] = source.slice();
								}
							}
						}

						return obj;
					};

					_class.prototype._test = function _test(name, arg, func, options) {

						var obj = this.clone();
						obj._tests.push({ func: func, name: name, arg: arg, options: options });
						return obj;
					};

					_class.prototype.options = function options(_options) {

						Hoek.assert(!_options.context, 'Cannot override context');
						this.checkOptions(_options);

						var obj = this.clone();
						obj._settings = internals.concatSettings(obj._settings, _options);
						return obj;
					};

					_class.prototype.strict = function strict(isStrict) {

						var obj = this.clone();
						obj._settings = obj._settings || {};
						obj._settings.convert = isStrict === undefined ? false : !isStrict;
						return obj;
					};

					_class.prototype.raw = function raw(isRaw) {

						var value = isRaw === undefined ? true : isRaw;

						if (this._flags.raw === value) {
							return this;
						}

						var obj = this.clone();
						obj._flags.raw = value;
						return obj;
					};

					_class.prototype.error = function error(err) {

						Hoek.assert(err && (err instanceof Error || typeof err === 'function'), 'Must provide a valid Error object or a function');

						var obj = this.clone();
						obj._flags.error = err;
						return obj;
					};

					_class.prototype.allow = function allow() {

						var obj = this.clone();
						var values = Hoek.flatten(Array.prototype.slice.call(arguments));
						for (var i = 0; i < values.length; ++i) {
							var value = values[i];

							Hoek.assert(value !== undefined, 'Cannot call allow/valid/invalid with undefined');
							obj._invalids.remove(value);
							obj._valids.add(value, obj._refs);
						}
						return obj;
					};

					_class.prototype.valid = function valid() {

						var obj = this.allow.apply(this, arguments);
						obj._flags.allowOnly = true;
						return obj;
					};

					_class.prototype.invalid = function invalid(value) {

						var obj = this.clone();
						var values = Hoek.flatten(Array.prototype.slice.call(arguments));
						for (var i = 0; i < values.length; ++i) {
							value = values[i];

							Hoek.assert(value !== undefined, 'Cannot call allow/valid/invalid with undefined');
							obj._valids.remove(value);
							obj._invalids.add(value, this._refs);
						}

						return obj;
					};

					_class.prototype.required = function required() {

						if (this._flags.presence === 'required') {
							return this;
						}

						var obj = this.clone();
						obj._flags.presence = 'required';
						return obj;
					};

					_class.prototype.optional = function optional() {

						if (this._flags.presence === 'optional') {
							return this;
						}

						var obj = this.clone();
						obj._flags.presence = 'optional';
						return obj;
					};

					_class.prototype.forbidden = function forbidden() {

						if (this._flags.presence === 'forbidden') {
							return this;
						}

						var obj = this.clone();
						obj._flags.presence = 'forbidden';
						return obj;
					};

					_class.prototype.strip = function strip() {

						if (this._flags.strip) {
							return this;
						}

						var obj = this.clone();
						obj._flags.strip = true;
						return obj;
					};

					_class.prototype.applyFunctionToChildren = function applyFunctionToChildren(children, fn, args, root) {

						children = [].concat(children);

						if (children.length !== 1 || children[0] !== '') {
							root = root ? root + '.' : '';

							var extraChildren = (children[0] === '' ? children.slice(1) : children).map(function (child) {

								return root + child;
							});

							throw new Error('unknown key(s) ' + extraChildren.join(', '));
						}

						return this[fn].apply(this, args);
					};

					_class.prototype.default = function _default(value, description) {

						if (typeof value === 'function' && !Ref.isRef(value)) {

							if (!value.description && description) {

								value.description = description;
							}

							if (!this._flags.func) {
								Hoek.assert(typeof value.description === 'string' && value.description.length > 0, 'description must be provided when default value is a function');
							}
						}

						var obj = this.clone();
						obj._flags.default = value;
						Ref.push(obj._refs, value);
						return obj;
					};

					_class.prototype.empty = function empty(schema) {

						var obj = this.clone();
						obj._flags.empty = schema === undefined ? undefined : Cast.schema(schema);
						return obj;
					};

					_class.prototype.when = function when(ref, options) {

						Hoek.assert(options && (typeof options === 'undefined' ? 'undefined' : _typeof$$1(options)) === 'object', 'Invalid options');
						Hoek.assert(options.then !== undefined || options.otherwise !== undefined, 'options must have at least one of "then" or "otherwise"');

						var then = options.hasOwnProperty('then') ? this.concat(Cast.schema(options.then)) : undefined;
						var otherwise = options.hasOwnProperty('otherwise') ? this.concat(Cast.schema(options.otherwise)) : undefined;

						Alternatives = Alternatives || __webpack_require__(25);
						var obj = Alternatives.when(ref, { is: options.is, then: then, otherwise: otherwise });
						obj._flags.presence = 'ignore';
						obj._baseType = this;

						return obj;
					};

					_class.prototype.description = function description(desc) {

						Hoek.assert(desc && typeof desc === 'string', 'Description must be a non-empty string');

						var obj = this.clone();
						obj._description = desc;
						return obj;
					};

					_class.prototype.notes = function notes(_notes) {

						Hoek.assert(_notes && (typeof _notes === 'string' || Array.isArray(_notes)), 'Notes must be a non-empty string or array');

						var obj = this.clone();
						obj._notes = obj._notes.concat(_notes);
						return obj;
					};

					_class.prototype.tags = function tags(_tags) {

						Hoek.assert(_tags && (typeof _tags === 'string' || Array.isArray(_tags)), 'Tags must be a non-empty string or array');

						var obj = this.clone();
						obj._tags = obj._tags.concat(_tags);
						return obj;
					};

					_class.prototype.meta = function meta(_meta) {

						Hoek.assert(_meta !== undefined, 'Meta cannot be undefined');

						var obj = this.clone();
						obj._meta = obj._meta.concat(_meta);
						return obj;
					};

					_class.prototype.example = function example(value) {

						Hoek.assert(arguments.length, 'Missing example');
						var result = this._validate(value, null, internals.defaults);
						Hoek.assert(!result.errors, 'Bad example:', result.errors && Errors.process(result.errors, value));

						var obj = this.clone();
						obj._examples.push(value);
						return obj;
					};

					_class.prototype.unit = function unit(name) {

						Hoek.assert(name && typeof name === 'string', 'Unit name must be a non-empty string');

						var obj = this.clone();
						obj._unit = name;
						return obj;
					};

					_class.prototype._prepareEmptyValue = function _prepareEmptyValue(value) {

						if (typeof value === 'string' && this._flags.trim) {
							return value.trim();
						}

						return value;
					};

					_class.prototype._validate = function _validate(value, state, options, reference) {
						var _this = this;

						var originalValue = value;

						// Setup state and settings

						state = state || { key: '', path: '', parent: null, reference: reference };

						if (this._settings) {
							options = internals.concatSettings(options, this._settings);
						}

						var errors = [];
						var finish = function finish() {

							var finalValue = void 0;

							if (value !== undefined) {
								finalValue = _this._flags.raw ? originalValue : value;
							} else if (options.noDefaults) {
								finalValue = value;
							} else if (Ref.isRef(_this._flags.default)) {
								finalValue = _this._flags.default(state.parent, options);
							} else if (typeof _this._flags.default === 'function' && !(_this._flags.func && !_this._flags.default.description)) {

								var args = void 0;

								if (state.parent !== null && _this._flags.default.length > 0) {

									args = [Hoek.clone(state.parent), options];
								}

								var defaultValue = internals._try(_this._flags.default, args);
								finalValue = defaultValue.value;
								if (defaultValue.error) {
									errors.push(_this.createError('any.default', defaultValue.error, state, options));
								}
							} else {
								finalValue = Hoek.clone(_this._flags.default);
							}

							if (errors.length && typeof _this._flags.error === 'function') {
								var change = _this._flags.error.call(_this, errors);

								if (typeof change === 'string') {
									errors = [_this.createOverrideError('override', { reason: errors }, state, options, change)];
								} else {
									errors = [].concat(change).map(function (err) {

										return err instanceof Error ? err : _this.createOverrideError(err.type || 'override', err.context, state, options, err.message, err.template);
									});
								}
							}

							return {
								value: _this._flags.strip ? undefined : finalValue,
								finalValue: finalValue,
								errors: errors.length ? errors : null
							};
						};

						if (this._coerce) {
							var coerced = this._coerce.call(this, value, state, options);
							if (coerced.errors) {
								value = coerced.value;
								errors = errors.concat(coerced.errors);
								return finish(); // Coerced error always aborts early
							}

							value = coerced.value;
						}

						if (this._flags.empty && !this._flags.empty._validate(this._prepareEmptyValue(value), null, internals.defaults).errors) {
							value = undefined;
						}

						// Check presence requirements

						var presence = this._flags.presence || options.presence;
						if (presence === 'optional') {
							if (value === undefined) {
								var isDeepDefault = this._flags.hasOwnProperty('default') && this._flags.default === undefined;
								if (isDeepDefault && this._type === 'object') {
									value = {};
								} else {
									return finish();
								}
							}
						} else if (presence === 'required' && value === undefined) {

							errors.push(this.createError('any.required', null, state, options));
							return finish();
						} else if (presence === 'forbidden') {
							if (value === undefined) {
								return finish();
							}

							errors.push(this.createError('any.unknown', null, state, options));
							return finish();
						}

						// Check allowed and denied values using the original value

						if (this._valids.has(value, state, options, this._flags.insensitive)) {
							return finish();
						}

						if (this._invalids.has(value, state, options, this._flags.insensitive)) {
							errors.push(this.createError(value === '' ? 'any.empty' : 'any.invalid', null, state, options));
							if (options.abortEarly || value === undefined) {
								// No reason to keep validating missing value

								return finish();
							}
						}

						// Convert value and validate type

						if (this._base) {
							var base = this._base.call(this, value, state, options);
							if (base.errors) {
								value = base.value;
								errors = errors.concat(base.errors);
								return finish(); // Base error always aborts early
							}

							if (base.value !== value) {
								value = base.value;

								// Check allowed and denied values using the converted value

								if (this._valids.has(value, state, options, this._flags.insensitive)) {
									return finish();
								}

								if (this._invalids.has(value, state, options, this._flags.insensitive)) {
									errors.push(this.createError(value === '' ? 'any.empty' : 'any.invalid', null, state, options));
									if (options.abortEarly) {
										return finish();
									}
								}
							}
						}

						// Required values did not match

						if (this._flags.allowOnly) {
							errors.push(this.createError('any.allowOnly', { valids: this._valids.values({ stripUndefined: true }) }, state, options));
							if (options.abortEarly) {
								return finish();
							}
						}

						// Helper.validate tests

						for (var i = 0; i < this._tests.length; ++i) {
							var test = this._tests[i];
							var ret = test.func.call(this, value, state, options);
							if (ret instanceof Errors.Err) {
								errors.push(ret);
								if (options.abortEarly) {
									return finish();
								}
							} else {
								value = ret;
							}
						}

						return finish();
					};

					_class.prototype._validateWithOptions = function _validateWithOptions(value, options, callback) {

						if (options) {
							this.checkOptions(options);
						}

						var settings = internals.concatSettings(internals.defaults, options);
						var result = this._validate(value, null, settings);
						var errors = Errors.process(result.errors, value);

						if (callback) {
							return callback(errors, result.value);
						}

						return { error: errors, value: result.value };
					};

					_class.prototype.validate = function validate(value, options, callback) {

						if (typeof options === 'function') {
							return this._validateWithOptions(value, null, options);
						}

						return this._validateWithOptions(value, options, callback);
					};

					_class.prototype.describe = function describe() {
						var _this2 = this;

						var description = {
							type: this._type
						};

						var flags = Object.keys(this._flags);
						if (flags.length) {
							if (['empty', 'default', 'lazy', 'label'].some(function (flag) {
								return _this2._flags.hasOwnProperty(flag);
							})) {
								description.flags = {};
								for (var i = 0; i < flags.length; ++i) {
									var flag = flags[i];
									if (flag === 'empty') {
										description.flags[flag] = this._flags[flag].describe();
									} else if (flag === 'default') {
										if (Ref.isRef(this._flags[flag])) {
											description.flags[flag] = this._flags[flag].toString();
										} else if (typeof this._flags[flag] === 'function') {
											description.flags[flag] = this._flags[flag].description;
										} else {
											description.flags[flag] = this._flags[flag];
										}
									} else if (flag === 'lazy' || flag === 'label') {
										// We don't want it in the description
									} else {
										description.flags[flag] = this._flags[flag];
									}
								}
							} else {
								description.flags = this._flags;
							}
						}

						if (this._settings) {
							description.options = Hoek.clone(this._settings);
						}

						if (this._baseType) {
							description.base = this._baseType.describe();
						}

						if (this._description) {
							description.description = this._description;
						}

						if (this._notes.length) {
							description.notes = this._notes;
						}

						if (this._tags.length) {
							description.tags = this._tags;
						}

						if (this._meta.length) {
							description.meta = this._meta;
						}

						if (this._examples.length) {
							description.examples = this._examples;
						}

						if (this._unit) {
							description.unit = this._unit;
						}

						var valids = this._valids.values();
						if (valids.length) {
							description.valids = valids.map(function (v) {

								return Ref.isRef(v) ? v.toString() : v;
							});
						}

						var invalids = this._invalids.values();
						if (invalids.length) {
							description.invalids = invalids.map(function (v) {

								return Ref.isRef(v) ? v.toString() : v;
							});
						}

						description.rules = [];

						for (var _i2 = 0; _i2 < this._tests.length; ++_i2) {
							var validator = this._tests[_i2];
							var item = { name: validator.name };

							if (validator.arg !== void 0) {
								item.arg = Ref.isRef(validator.arg) ? validator.arg.toString() : validator.arg;
							}

							var options = validator.options;
							if (options) {
								if (options.hasRef) {
									item.arg = {};
									var keys = Object.keys(validator.arg);
									for (var j = 0; j < keys.length; ++j) {
										var key = keys[j];
										var value = validator.arg[key];
										item.arg[key] = Ref.isRef(value) ? value.toString() : value;
									}
								}

								if (typeof options.description === 'string') {
									item.description = options.description;
								} else if (typeof options.description === 'function') {
									item.description = options.description(item.arg);
								}
							}

							description.rules.push(item);
						}

						if (!description.rules.length) {
							delete description.rules;
						}

						var label = this._getLabel();
						if (label) {
							description.label = label;
						}

						return description;
					};

					_class.prototype.label = function label(name) {

						Hoek.assert(name && typeof name === 'string', 'Label name must be a non-empty string');

						var obj = this.clone();
						obj._flags.label = name;
						return obj;
					};

					_class.prototype._getLabel = function _getLabel(def) {

						return this._flags.label || def;
					};

					return _class;
				}();

				internals.Any.prototype.isImmutable = true; // Prevents Hoek from deep cloning schema objects

				// Aliases

				internals.Any.prototype.only = internals.Any.prototype.equal = internals.Any.prototype.valid;
				internals.Any.prototype.disallow = internals.Any.prototype.not = internals.Any.prototype.invalid;
				internals.Any.prototype.exist = internals.Any.prototype.required;

				internals._try = function (fn, args) {

					var err = void 0;
					var result = void 0;

					try {
						result = fn.apply(null, args);
					} catch (e) {
						err = e;
					}

					return {
						value: result,
						error: err
					};
				};

				internals.concatSettings = function (target, source) {

					// Used to avoid cloning context

					if (!target && !source) {

						return null;
					}

					var obj = {};

					if (target) {
						_extends$$1(obj, target);
					}

					if (source) {
						var sKeys = Object.keys(source);
						for (var i = 0; i < sKeys.length; ++i) {
							var key = sKeys[i];
							if (key !== 'language' || !obj.hasOwnProperty(key)) {

								obj[key] = source[key];
							} else {
								obj[key] = Hoek.applyToDefaults(obj[key], source[key]);
							}
						}
					}

					return obj;
				};

				/***/
			},
			/* 12 */
			/***/function (module, exports, __webpack_require__) {

				'use strict';

				// Load modules

				var Hoek = __webpack_require__(2);

				// Declare internals

				exports.create = function (key, options) {

					Hoek.assert(typeof key === 'string', 'Invalid reference key:', key);

					var settings = Hoek.clone(options); // options can be reused and modified

					var ref = function ref(value, validationOptions) {

						return Hoek.reach(ref.isContext ? validationOptions.context : value, ref.key, settings);
					};

					ref.isContext = key[0] === (settings && settings.contextPrefix || '$');
					ref.key = ref.isContext ? key.slice(1) : key;
					ref.path = ref.key.split(settings && settings.separator || '.');
					ref.depth = ref.path.length;
					ref.root = ref.path[0];
					ref.isJoi = true;

					ref.toString = function () {

						return (ref.isContext ? 'context:' : 'ref:') + ref.key;
					};

					return ref;
				};

				exports.isRef = function (ref) {

					return typeof ref === 'function' && ref.isJoi;
				};

				exports.push = function (array, ref) {

					if (exports.isRef(ref) && !ref.isContext) {

						array.push(ref.root);
					}
				};

				/***/
			},
			/* 13 */
			/***/function (module, exports, __webpack_require__) {

				'use strict';

				// Load modules

				var _typeof$$1 = typeof Symbol === "function" && _typeof(Symbol.iterator) === "symbol" ? function (obj) {
					return typeof obj === 'undefined' ? 'undefined' : _typeof(obj);
				} : function (obj) {
					return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === 'undefined' ? 'undefined' : _typeof(obj);
				};

				function _classCallCheck(instance, Constructor) {
					if (!(instance instanceof Constructor)) {
						throw new TypeError("Cannot call a class as a function");
					}
				}

				var Hoek = __webpack_require__(2);
				var Language = __webpack_require__(14);

				// Declare internals

				var internals = {
					annotations: Symbol('joi-annotations')
				};

				internals.stringify = function (value, wrapArrays) {

					var type = typeof value === 'undefined' ? 'undefined' : _typeof$$1(value);

					if (value === null) {
						return 'null';
					}

					if (type === 'string') {
						return value;
					}

					if (value instanceof exports.Err || type === 'function') {
						return value.toString();
					}

					if (type === 'object') {
						if (Array.isArray(value)) {
							var partial = '';

							for (var i = 0; i < value.length; ++i) {
								partial = partial + (partial.length ? ', ' : '') + internals.stringify(value[i], wrapArrays);
							}

							return wrapArrays ? '[' + partial + ']' : partial;
						}

						return value.toString();
					}

					return JSON.stringify(value);
				};

				exports.Err = function () {
					function _class(type, context, state, options, flags, message, template) {
						_classCallCheck(this, _class);

						this.isJoi = true;
						this.type = type;
						this.context = context || {};
						this.context.key = state.key;
						this.path = state.path;
						this.options = options;
						this.flags = flags;
						this.message = message;
						this.template = template;
					}

					_class.prototype.toString = function toString() {
						var _this = this;

						if (this.message) {
							return this.message;
						}

						var format = void 0;

						if (this.template) {
							format = this.template;
						}

						var localized = this.options.language;

						if (this.flags.label) {
							this.context.key = this.flags.label;
						} else if (this.context.key === '' || this.context.key === null) {
							this.context.key = localized.root || Language.errors.root;
						}

						format = format || Hoek.reach(localized, this.type) || Hoek.reach(Language.errors, this.type);

						var wrapArrays = Hoek.reach(localized, 'messages.wrapArrays');
						if (typeof wrapArrays !== 'boolean') {
							wrapArrays = Language.errors.messages.wrapArrays;
						}

						if (format === null) {
							var childrenString = internals.stringify(this.context.reason, wrapArrays);
							if (wrapArrays) {
								return childrenString.slice(1, -1);
							}
							return childrenString;
						}

						var hasKey = /\{\{\!?key\}\}/.test(format);
						var skipKey = format.length > 2 && format[0] === '!' && format[1] === '!';

						if (skipKey) {
							format = format.slice(2);
						}

						if (!hasKey && !skipKey) {
							format = (Hoek.reach(localized, 'key') || Hoek.reach(Language.errors, 'key')) + format;
						}

						return format.replace(/\{\{(\!?)([^}]+)\}\}/g, function ($0, isSecure, name) {

							var value = Hoek.reach(_this.context, name);
							var normalized = internals.stringify(value, wrapArrays);
							return isSecure ? Hoek.escapeHtml(normalized) : normalized;
						});
					};

					return _class;
				}();

				exports.create = function (type, context, state, options, flags, message, template) {

					return new exports.Err(type, context, state, options, flags, message, template);
				};

				exports.process = function (errors, object) {

					if (!errors || !errors.length) {
						return null;
					}

					// Construct error

					var message = '';
					var details = [];

					var processErrors = function processErrors(localErrors, parent) {

						for (var i = 0; i < localErrors.length; ++i) {
							var item = localErrors[i];

							if (item instanceof Error) {
								return item;
							}

							if (item.flags.error && typeof item.flags.error !== 'function') {
								return item.flags.error;
							}

							var itemMessage = void 0;
							if (parent === undefined) {
								itemMessage = item.toString();
								message = message + (message ? '. ' : '') + itemMessage;
							}

							// Do not push intermediate errors, we're only interested in leafs

							if (item.context.reason && item.context.reason.length) {
								var _override = processErrors(item.context.reason, item.path);
								if (_override) {
									return _override;
								}
							} else {
								details.push({
									message: itemMessage || item.toString(),
									path: internals.getPath(item),
									type: item.type,
									context: item.context
								});
							}
						}
					};

					var override = processErrors(errors);
					if (override) {
						return override;
					}

					var error = new Error(message);
					error.isJoi = true;
					error.name = 'ValidationError';
					error.details = details;
					error._object = object;
					error.annotate = internals.annotate;
					return error;
				};

				internals.getPath = function (item) {

					return item.path || item.context.key;
				};

				// Inspired by json-stringify-safe
				internals.safeStringify = function (obj, spaces) {

					return JSON.stringify(obj, internals.serializer(), spaces);
				};

				internals.serializer = function () {

					var keys = [];
					var stack = [];

					var cycleReplacer = function cycleReplacer(key, value) {

						if (stack[0] === value) {
							return '[Circular ~]';
						}

						return '[Circular ~.' + keys.slice(0, stack.indexOf(value)).join('.') + ']';
					};

					return function (key, value) {

						if (stack.length > 0) {
							var thisPos = stack.indexOf(this);
							if (~thisPos) {
								stack.length = thisPos + 1;
								keys.length = thisPos + 1;
								keys[thisPos] = key;
							} else {
								stack.push(this);
								keys.push(key);
							}

							if (~stack.indexOf(value)) {
								value = cycleReplacer.call(this, key, value);
							}
						} else {
							stack.push(value);
						}

						if (value) {
							var annotations = value[internals.annotations];
							if (annotations) {
								if (Array.isArray(value)) {
									var annotated = [];

									for (var i = 0; i < value.length; ++i) {
										if (annotations.errors[i]) {
											annotated.push('_$idx$_' + annotations.errors[i].sort().join(', ') + '_$end$_');
										}
										annotated.push(value[i]);
									}

									value = annotated;
								} else {
									var errorKeys = Object.keys(annotations.errors);
									for (var _i = 0; _i < errorKeys.length; ++_i) {
										var errorKey = errorKeys[_i];
										value[errorKey + '_$key$_' + annotations.errors[errorKey].sort().join(', ') + '_$end$_'] = value[errorKey];
										value[errorKey] = undefined;
									}

									var missingKeys = Object.keys(annotations.missing);
									for (var _i2 = 0; _i2 < missingKeys.length; ++_i2) {
										var missingKey = missingKeys[_i2];
										value['_$miss$_' + missingKey + '|' + annotations.missing[missingKey] + '_$end$_'] = '__missing__';
									}
								}

								return value;
							}
						}

						if (value === Infinity || value === -Infinity || Number.isNaN(value) || typeof value === 'function' || (typeof value === 'undefined' ? 'undefined' : _typeof$$1(value)) === 'symbol') {
							return '[' + value.toString() + ']';
						}

						return value;
					};
				};

				internals.annotate = function (stripColorCodes) {

					var redFgEscape = stripColorCodes ? '' : '\x1B[31m';
					var redBgEscape = stripColorCodes ? '' : '\x1B[41m';
					var endColor = stripColorCodes ? '' : '\x1B[0m';

					if (_typeof$$1(this._object) !== 'object') {
						return this.details[0].message;
					}

					var obj = Hoek.clone(this._object || {});

					for (var i = this.details.length - 1; i >= 0; --i) {
						// Reverse order to process deepest child first
						var pos = i + 1;
						var error = this.details[i];
						var path = error.path.split('.');
						var ref = obj;
						for (var j = 0;; ++j) {
							var seg = path[j];

							if (ref.isImmutable) {
								ref = ref.clone(); // joi schemas are not cloned by hoek, we have to take this extra step
							}

							if (j + 1 < path.length && ref[seg] && typeof ref[seg] !== 'string') {

								ref = ref[seg];
							} else {
								var refAnnotations = ref[internals.annotations] = ref[internals.annotations] || { errors: {}, missing: {} };
								var value = ref[seg];

								if (value !== undefined) {
									refAnnotations.errors[seg] = refAnnotations.errors[seg] || [];
									refAnnotations.errors[seg].push(pos);
								} else {
									refAnnotations.missing[seg] = pos;
								}

								break;
							}
						}
					}

					var replacers = {
						key: /_\$key\$_([, \d]+)_\$end\$_\"/g,
						missing: /\"_\$miss\$_([^\|]+)\|(\d+)_\$end\$_\"\: \"__missing__\"/g,
						arrayIndex: /\s*\"_\$idx\$_([, \d]+)_\$end\$_\",?\n(.*)/g,
						specials: /"\[(NaN|Symbol.*|-?Infinity|function.*|\(.*)\]"/g
					};

					var message = internals.safeStringify(obj, 2).replace(replacers.key, function ($0, $1) {
						return '" ' + redFgEscape + '[' + $1 + ']' + endColor;
					}).replace(replacers.missing, function ($0, $1, $2) {
						return redBgEscape + '"' + $1 + '"' + endColor + redFgEscape + ' [' + $2 + ']: -- missing --' + endColor;
					}).replace(replacers.arrayIndex, function ($0, $1, $2) {
						return '\n' + $2 + ' ' + redFgEscape + '[' + $1 + ']' + endColor;
					}).replace(replacers.specials, function ($0, $1) {
						return $1;
					});

					message = message + '\n' + redFgEscape;

					for (var _i3 = 0; _i3 < this.details.length; ++_i3) {
						var _pos = _i3 + 1;
						message = message + '\n[' + _pos + '] ' + this.details[_i3].message;
					}

					message = message + endColor;

					return message;
				};

				/***/
			},
			/* 14 */
			/***/function (module, exports) {

				'use strict';

				// Load modules


				// Declare internals

				exports.errors = {
					root: 'value',
					key: '"{{!key}}" ',
					messages: {
						wrapArrays: true
					},
					any: {
						unknown: 'is not allowed',
						invalid: 'contains an invalid value',
						empty: 'is not allowed to be empty',
						required: 'is required',
						allowOnly: 'must be one of {{valids}}',
						default: 'threw an error when running default method'
					},
					alternatives: {
						base: 'not matching any of the allowed alternatives',
						child: null
					},
					array: {
						base: 'must be an array',
						includes: 'at position {{pos}} does not match any of the allowed types',
						includesSingle: 'single value of "{{!key}}" does not match any of the allowed types',
						includesOne: 'at position {{pos}} fails because {{reason}}',
						includesOneSingle: 'single value of "{{!key}}" fails because {{reason}}',
						includesRequiredUnknowns: 'does not contain {{unknownMisses}} required value(s)',
						includesRequiredKnowns: 'does not contain {{knownMisses}}',
						includesRequiredBoth: 'does not contain {{knownMisses}} and {{unknownMisses}} other required value(s)',
						excludes: 'at position {{pos}} contains an excluded value',
						excludesSingle: 'single value of "{{!key}}" contains an excluded value',
						min: 'must contain at least {{limit}} items',
						max: 'must contain less than or equal to {{limit}} items',
						length: 'must contain {{limit}} items',
						ordered: 'at position {{pos}} fails because {{reason}}',
						orderedLength: 'at position {{pos}} fails because array must contain at most {{limit}} items',
						ref: 'references "{{ref}}" which is not a positive integer',
						sparse: 'must not be a sparse array',
						unique: 'position {{pos}} contains a duplicate value'
					},
					boolean: {
						base: 'must be a boolean'
					},
					binary: {
						base: 'must be a buffer or a string',
						min: 'must be at least {{limit}} bytes',
						max: 'must be less than or equal to {{limit}} bytes',
						length: 'must be {{limit}} bytes'
					},
					date: {
						base: 'must be a number of milliseconds or valid date string',
						format: 'must be a string with one of the following formats {{format}}',
						strict: 'must be a valid date',
						min: 'must be larger than or equal to "{{limit}}"',
						max: 'must be less than or equal to "{{limit}}"',
						isoDate: 'must be a valid ISO 8601 date',
						timestamp: {
							javascript: 'must be a valid timestamp or number of milliseconds',
							unix: 'must be a valid timestamp or number of seconds'
						},
						ref: 'references "{{ref}}" which is not a date'
					},
					function: {
						base: 'must be a Function',
						arity: 'must have an arity of {{n}}',
						minArity: 'must have an arity greater or equal to {{n}}',
						maxArity: 'must have an arity lesser or equal to {{n}}',
						ref: 'must be a Joi reference'
					},
					lazy: {
						base: '!!schema error: lazy schema must be set',
						schema: '!!schema error: lazy schema function must return a schema'
					},
					object: {
						base: 'must be an object',
						child: '!!child "{{!child}}" fails because {{reason}}',
						min: 'must have at least {{limit}} children',
						max: 'must have less than or equal to {{limit}} children',
						length: 'must have {{limit}} children',
						allowUnknown: '!!"{{!child}}" is not allowed',
						with: '!!"{{mainWithLabel}}" missing required peer "{{peerWithLabel}}"',
						without: '!!"{{mainWithLabel}}" conflict with forbidden peer "{{peerWithLabel}}"',
						missing: 'must contain at least one of {{peersWithLabels}}',
						xor: 'contains a conflict between exclusive peers {{peersWithLabels}}',
						or: 'must contain at least one of {{peersWithLabels}}',
						and: 'contains {{presentWithLabels}} without its required peers {{missingWithLabels}}',
						nand: '!!"{{mainWithLabel}}" must not exist simultaneously with {{peersWithLabels}}',
						assert: '!!"{{ref}}" validation failed because "{{ref}}" failed to {{message}}',
						rename: {
							multiple: 'cannot rename child "{{from}}" because multiple renames are disabled and another key was already renamed to "{{to}}"',
							override: 'cannot rename child "{{from}}" because override is disabled and target "{{to}}" exists'
						},
						type: 'must be an instance of "{{type}}"',
						schema: 'must be a Joi instance'
					},
					number: {
						base: 'must be a number',
						min: 'must be larger than or equal to {{limit}}',
						max: 'must be less than or equal to {{limit}}',
						less: 'must be less than {{limit}}',
						greater: 'must be greater than {{limit}}',
						float: 'must be a float or double',
						integer: 'must be an integer',
						negative: 'must be a negative number',
						positive: 'must be a positive number',
						precision: 'must have no more than {{limit}} decimal places',
						ref: 'references "{{ref}}" which is not a number',
						multiple: 'must be a multiple of {{multiple}}'
					},
					string: {
						base: 'must be a string',
						min: 'length must be at least {{limit}} characters long',
						max: 'length must be less than or equal to {{limit}} characters long',
						length: 'length must be {{limit}} characters long',
						alphanum: 'must only contain alpha-numeric characters',
						token: 'must only contain alpha-numeric and underscore characters',
						regex: {
							base: 'with value "{{!value}}" fails to match the required pattern: {{pattern}}',
							name: 'with value "{{!value}}" fails to match the {{name}} pattern',
							invert: {
								base: 'with value "{{!value}}" matches the inverted pattern: {{pattern}}',
								name: 'with value "{{!value}}" matches the inverted {{name}} pattern'
							}
						},
						email: 'must be a valid email',
						uri: 'must be a valid uri',
						uriRelativeOnly: 'must be a valid relative uri',
						uriCustomScheme: 'must be a valid uri with a scheme matching the {{scheme}} pattern',
						isoDate: 'must be a valid ISO 8601 date',
						guid: 'must be a valid GUID',
						hex: 'must only contain hexadecimal characters',
						base64: 'must be a valid base64 string',
						hostname: 'must be a valid hostname',
						lowercase: 'must only contain lowercase characters',
						uppercase: 'must only contain uppercase characters',
						trim: 'must not have leading or trailing whitespace',
						creditCard: 'must be a credit card',
						ref: 'references "{{ref}}" which is not a number',
						ip: 'must be a valid ip address with a {{cidr}} CIDR',
						ipVersion: 'must be a valid ip address of one of the following versions {{version}} with a {{cidr}} CIDR'
					}
				};

				/***/
			},
			/* 15 */
			/***/function (module, exports, __webpack_require__) {

				/* WEBPACK VAR INJECTION */(function (Buffer) {
					'use strict';

					var _typeof$$1 = typeof Symbol === "function" && _typeof(Symbol.iterator) === "symbol" ? function (obj) {
						return typeof obj === 'undefined' ? 'undefined' : _typeof(obj);
					} : function (obj) {
						return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === 'undefined' ? 'undefined' : _typeof(obj);
					};

					function _classCallCheck(instance, Constructor) {
						if (!(instance instanceof Constructor)) {
							throw new TypeError("Cannot call a class as a function");
						}
					}

					var Ref = __webpack_require__(12);

					module.exports = function () {
						function Set() {
							_classCallCheck(this, Set);

							this._set = [];
						}

						Set.prototype.add = function add(value, refs) {

							if (!Ref.isRef(value) && this.has(value, null, null, false)) {

								return;
							}

							if (refs !== undefined) {
								// If it's a merge, we don't have any refs
								Ref.push(refs, value);
							}

							this._set.push(value);
							return this;
						};

						Set.prototype.merge = function merge(add, remove) {

							for (var i = 0; i < add._set.length; ++i) {
								this.add(add._set[i]);
							}

							for (var _i = 0; _i < remove._set.length; ++_i) {
								this.remove(remove._set[_i]);
							}

							return this;
						};

						Set.prototype.remove = function remove(value) {

							this._set = this._set.filter(function (item) {
								return value !== item;
							});
							return this;
						};

						Set.prototype.has = function has(value, state, options, insensitive) {

							for (var i = 0; i < this._set.length; ++i) {
								var items = this._set[i];

								if (state && Ref.isRef(items)) {
									// Only resolve references if there is a state, otherwise it's a merge
									items = items(state.reference || state.parent, options);
								}

								if (!Array.isArray(items)) {
									items = [items];
								}

								for (var j = 0; j < items.length; ++j) {
									var item = items[j];
									if ((typeof value === 'undefined' ? 'undefined' : _typeof$$1(value)) !== (typeof item === 'undefined' ? 'undefined' : _typeof$$1(item))) {
										continue;
									}

									if (value === item || value instanceof Date && item instanceof Date && value.getTime() === item.getTime() || insensitive && typeof value === 'string' && value.toLowerCase() === item.toLowerCase() || Buffer.isBuffer(value) && Buffer.isBuffer(item) && value.length === item.length && value.toString('binary') === item.toString('binary')) {

										return true;
									}
								}
							}

							return false;
						};

						Set.prototype.values = function values(options) {

							if (options && options.stripUndefined) {
								var values = [];

								for (var i = 0; i < this._set.length; ++i) {
									var item = this._set[i];
									if (item !== undefined) {
										values.push(item);
									}
								}

								return values;
							}

							return this._set.slice();
						};

						Set.prototype.slice = function slice() {

							var newSet = new Set();
							newSet._set = this._set.slice();

							return newSet;
						};

						Set.prototype.concat = function concat(source) {

							var newSet = new Set();
							newSet._set = this._set.concat(source._set);

							return newSet;
						};

						return Set;
					}();
					/* WEBPACK VAR INJECTION */
				}).call(exports, __webpack_require__(3).Buffer);

				/***/
			},
			/* 16 */
			/***/function (module, exports, __webpack_require__) {

				'use strict';

				// Load modules

				var _typeof$$1 = typeof Symbol === "function" && _typeof(Symbol.iterator) === "symbol" ? function (obj) {
					return typeof obj === 'undefined' ? 'undefined' : _typeof(obj);
				} : function (obj) {
					return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === 'undefined' ? 'undefined' : _typeof(obj);
				};

				var Hoek = __webpack_require__(2);
				var Ref = __webpack_require__(12);

				// Type modules are delay-loaded to prevent circular dependencies


				// Declare internals

				var internals = {
					any: null,
					date: __webpack_require__(17),
					string: __webpack_require__(18),
					number: __webpack_require__(23),
					boolean: __webpack_require__(24),
					alt: null,
					object: null
				};

				exports.schema = function (config) {

					internals.any = internals.any || new (__webpack_require__(11))();
					internals.alt = internals.alt || __webpack_require__(25);
					internals.object = internals.object || __webpack_require__(26);

					if (config !== undefined && config !== null && (typeof config === 'undefined' ? 'undefined' : _typeof$$1(config)) === 'object') {

						if (config.isJoi) {
							return config;
						}

						if (Array.isArray(config)) {
							return internals.alt.try(config);
						}

						if (config instanceof RegExp) {
							return internals.string.regex(config);
						}

						if (config instanceof Date) {
							return internals.date.valid(config);
						}

						return internals.object.keys(config);
					}

					if (typeof config === 'string') {
						return internals.string.valid(config);
					}

					if (typeof config === 'number') {
						return internals.number.valid(config);
					}

					if (typeof config === 'boolean') {
						return internals.boolean.valid(config);
					}

					if (Ref.isRef(config)) {
						return internals.any.valid(config);
					}

					Hoek.assert(config === null, 'Invalid schema content:', config);

					return internals.any.valid(null);
				};

				exports.ref = function (id) {

					return Ref.isRef(id) ? id : Ref.create(id);
				};

				/***/
			},
			/* 17 */
			/***/function (module, exports, __webpack_require__) {

				'use strict';

				// Load modules

				function _defaults(obj, defaults$$1) {
					var keys = Object.getOwnPropertyNames(defaults$$1);for (var i = 0; i < keys.length; i++) {
						var key = keys[i];var value = Object.getOwnPropertyDescriptor(defaults$$1, key);if (value && value.configurable && obj[key] === undefined) {
							Object.defineProperty(obj, key, value);
						}
					}return obj;
				}

				function _classCallCheck(instance, Constructor) {
					if (!(instance instanceof Constructor)) {
						throw new TypeError("Cannot call a class as a function");
					}
				}

				function _possibleConstructorReturn(self, call) {
					if (!self) {
						throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
					}return call && ((typeof call === 'undefined' ? 'undefined' : _typeof(call)) === "object" || typeof call === "function") ? call : self;
				}

				function _inherits(subClass, superClass) {
					if (typeof superClass !== "function" && superClass !== null) {
						throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));
					}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass);
				}

				var Any = __webpack_require__(11);
				var Ref = __webpack_require__(12);
				var Hoek = __webpack_require__(2);

				// Declare internals

				var internals = {};

				internals.isoDate = /^(?:[-+]\d{2})?(?:\d{4}(?!\d{2}\b))(?:(-?)(?:(?:0[1-9]|1[0-2])(?:\1(?:[12]\d|0[1-9]|3[01]))?|W(?:[0-4]\d|5[0-2])(?:-?[1-7])?|(?:00[1-9]|0[1-9]\d|[12]\d{2}|3(?:[0-5]\d|6[1-6])))(?![T]$|[T][\d]+Z$)(?:[T\s](?:(?:(?:[01]\d|2[0-3])(?:(:?)[0-5]\d)?|24\:?00)(?:[.,]\d+(?!:))?)(?:\2[0-5]\d(?:[.,]\d+)?)?(?:[Z]|(?:[+-])(?:[01]\d|2[0-3])(?::?[0-5]\d)?)?)?)?$/;
				internals.invalidDate = new Date('');
				internals.isIsoDate = function () {

					var isoString = internals.isoDate.toString();

					return function (date) {

						return date && date.toString() === isoString;
					};
				}();

				internals.Date = function (_Any) {
					_inherits(_class, _Any);

					function _class() {
						_classCallCheck(this, _class);

						var _this = _possibleConstructorReturn(this, _Any.call(this));

						_this._type = 'date';
						return _this;
					}

					_class.prototype._base = function _base(value, state, options) {

						var result = {
							value: options.convert && internals.Date.toDate(value, this._flags.format, this._flags.timestamp, this._flags.multiplier) || value
						};

						if (result.value instanceof Date && !isNaN(result.value.getTime())) {
							result.errors = null;
						} else if (!options.convert) {
							result.errors = this.createError('date.strict', null, state, options);
						} else {
							var type = void 0;
							if (internals.isIsoDate(this._flags.format)) {
								type = 'isoDate';
							} else if (this._flags.timestamp) {
								type = 'timestamp.' + this._flags.timestamp;
							} else {
								type = 'base';
							}

							result.errors = this.createError('date.' + type, null, state, options);
						}

						return result;
					};

					_class.toDate = function toDate(value, format, timestamp, multiplier) {

						if (value instanceof Date) {
							return value;
						}

						if (typeof value === 'string' || typeof value === 'number' && !isNaN(value) && isFinite(value)) {

							if (typeof value === 'string' && /^[+-]?\d+(\.\d+)?$/.test(value)) {

								value = parseFloat(value);
							}

							var date = void 0;
							if (format && internals.isIsoDate(format)) {
								date = format.test(value) ? new Date(value) : internals.invalidDate;
							} else if (timestamp && multiplier) {
								date = new Date(value * multiplier);
							} else {
								date = new Date(value);
							}

							if (!isNaN(date.getTime())) {
								return date;
							}
						}

						return null;
					};

					_class.prototype.iso = function iso() {

						if (this._flags.format === internals.isoDate) {
							return this;
						}

						var obj = this.clone();
						obj._flags.format = internals.isoDate;
						return obj;
					};

					_class.prototype.timestamp = function timestamp(type) {

						type = type || 'javascript';

						var allowed = ['javascript', 'unix'];
						Hoek.assert(allowed.indexOf(type) !== -1, '"type" must be one of "' + allowed.join('", "') + '"');

						if (this._flags.timestamp === type) {
							return this;
						}

						var obj = this.clone();
						obj._flags.timestamp = type;
						obj._flags.multiplier = type === 'unix' ? 1000 : 1;
						return obj;
					};

					_class.prototype._isIsoDate = function _isIsoDate(value) {

						return internals.isoDate.test(value);
					};

					return _class;
				}(Any);

				internals.compare = function (type, compare) {

					return function (date) {

						var isNow = date === 'now';
						var isRef = Ref.isRef(date);

						if (!isNow && !isRef) {
							date = internals.Date.toDate(date);
						}

						Hoek.assert(date, 'Invalid date format');

						return this._test(type, date, function (value, state, options) {

							var compareTo = void 0;
							if (isNow) {
								compareTo = Date.now();
							} else if (isRef) {
								compareTo = internals.Date.toDate(date(state.reference || state.parent, options));

								if (!compareTo) {
									return this.createError('date.ref', { ref: date.key }, state, options);
								}

								compareTo = compareTo.getTime();
							} else {
								compareTo = date.getTime();
							}

							if (compare(value.getTime(), compareTo)) {
								return value;
							}

							return this.createError('date.' + type, { limit: new Date(compareTo) }, state, options);
						});
					};
				};
				internals.Date.prototype.min = internals.compare('min', function (value, date) {
					return value >= date;
				});
				internals.Date.prototype.max = internals.compare('max', function (value, date) {
					return value <= date;
				});

				module.exports = new internals.Date();

				/***/
			},
			/* 18 */
			/***/function (module, exports, __webpack_require__) {

				/* WEBPACK VAR INJECTION */(function (Buffer) {
					'use strict';

					// Load modules

					var _typeof$$1 = typeof Symbol === "function" && _typeof(Symbol.iterator) === "symbol" ? function (obj) {
						return typeof obj === 'undefined' ? 'undefined' : _typeof(obj);
					} : function (obj) {
						return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === 'undefined' ? 'undefined' : _typeof(obj);
					};

					function _defaults(obj, defaults$$1) {
						var keys = Object.getOwnPropertyNames(defaults$$1);for (var i = 0; i < keys.length; i++) {
							var key = keys[i];var value = Object.getOwnPropertyDescriptor(defaults$$1, key);if (value && value.configurable && obj[key] === undefined) {
								Object.defineProperty(obj, key, value);
							}
						}return obj;
					}

					function _classCallCheck(instance, Constructor) {
						if (!(instance instanceof Constructor)) {
							throw new TypeError("Cannot call a class as a function");
						}
					}

					function _possibleConstructorReturn(self, call) {
						if (!self) {
							throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
						}return call && ((typeof call === 'undefined' ? 'undefined' : _typeof(call)) === "object" || typeof call === "function") ? call : self;
					}

					function _inherits(subClass, superClass) {
						if (typeof superClass !== "function" && superClass !== null) {
							throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));
						}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass);
					}

					var Net = __webpack_require__(5);
					var Hoek = __webpack_require__(2);
					var Isemail = void 0; // Loaded on demand
					var Any = __webpack_require__(11);
					var Ref = __webpack_require__(12);
					var JoiDate = __webpack_require__(17);
					var Uri = __webpack_require__(19);
					var Ip = __webpack_require__(21);

					// Declare internals

					var internals = {
						uriRegex: Uri.createUriRegex(),
						ipRegex: Ip.createIpRegex(['ipv4', 'ipv6', 'ipvfuture'], 'optional'),
						guidBrackets: {
							'{': '}', '[': ']', '(': ')', '': ''
						},
						guidVersions: {
							uuidv1: '1',
							uuidv2: '2',
							uuidv3: '3',
							uuidv4: '4',
							uuidv5: '5'
						}
					};

					internals.String = function (_Any) {
						_inherits(_class, _Any);

						function _class() {
							_classCallCheck(this, _class);

							var _this = _possibleConstructorReturn(this, _Any.call(this));

							_this._type = 'string';
							_this._invalids.add('');
							return _this;
						}

						_class.prototype._base = function _base(value, state, options) {

							if (typeof value === 'string' && options.convert) {

								if (this._flags.case) {
									value = this._flags.case === 'upper' ? value.toLocaleUpperCase() : value.toLocaleLowerCase();
								}

								if (this._flags.trim) {
									value = value.trim();
								}

								if (this._inner.replacements) {

									for (var i = 0; i < this._inner.replacements.length; ++i) {
										var replacement = this._inner.replacements[i];
										value = value.replace(replacement.pattern, replacement.replacement);
									}
								}

								if (this._flags.truncate) {
									for (var _i = 0; _i < this._tests.length; ++_i) {
										var test = this._tests[_i];
										if (test.name === 'max') {
											value = value.slice(0, test.arg);
											break;
										}
									}
								}
							}

							return {
								value: value,
								errors: typeof value === 'string' ? null : this.createError('string.base', { value: value }, state, options)
							};
						};

						_class.prototype.insensitive = function insensitive() {

							if (this._flags.insensitive) {
								return this;
							}

							var obj = this.clone();
							obj._flags.insensitive = true;
							return obj;
						};

						_class.prototype.creditCard = function creditCard() {

							return this._test('creditCard', undefined, function (value, state, options) {

								var i = value.length;
								var sum = 0;
								var mul = 1;

								while (i--) {
									var char = value.charAt(i) * mul;
									sum = sum + (char - (char > 9) * 9);
									mul = mul ^ 3;
								}

								var check = sum % 10 === 0 && sum > 0;
								return check ? value : this.createError('string.creditCard', { value: value }, state, options);
							});
						};

						_class.prototype.regex = function regex(pattern, patternOptions) {

							Hoek.assert(pattern instanceof RegExp, 'pattern must be a RegExp');

							var patternObject = {
								pattern: new RegExp(pattern.source, pattern.ignoreCase ? 'i' : undefined) // Future version should break this and forbid unsupported regex flags
							};

							if (typeof patternOptions === 'string') {
								patternObject.name = patternOptions;
							} else if ((typeof patternOptions === 'undefined' ? 'undefined' : _typeof$$1(patternOptions)) === 'object') {
								patternObject.invert = !!patternOptions.invert;

								if (patternOptions.name) {
									patternObject.name = patternOptions.name;
								}
							}

							var errorCode = ['string.regex', patternObject.invert ? '.invert' : '', patternObject.name ? '.name' : '.base'].join('');

							return this._test('regex', patternObject, function (value, state, options) {

								var patternMatch = patternObject.pattern.test(value);

								if (patternMatch ^ patternObject.invert) {
									return value;
								}

								return this.createError(errorCode, { name: patternObject.name, pattern: patternObject.pattern, value: value }, state, options);
							});
						};

						_class.prototype.alphanum = function alphanum() {

							return this._test('alphanum', undefined, function (value, state, options) {

								if (/^[a-zA-Z0-9]+$/.test(value)) {
									return value;
								}

								return this.createError('string.alphanum', { value: value }, state, options);
							});
						};

						_class.prototype.token = function token() {

							return this._test('token', undefined, function (value, state, options) {

								if (/^\w+$/.test(value)) {
									return value;
								}

								return this.createError('string.token', { value: value }, state, options);
							});
						};

						_class.prototype.email = function email(isEmailOptions) {

							if (isEmailOptions) {
								Hoek.assert((typeof isEmailOptions === 'undefined' ? 'undefined' : _typeof$$1(isEmailOptions)) === 'object', 'email options must be an object');
								Hoek.assert(typeof isEmailOptions.checkDNS === 'undefined', 'checkDNS option is not supported');
								Hoek.assert(typeof isEmailOptions.tldWhitelist === 'undefined' || _typeof$$1(isEmailOptions.tldWhitelist) === 'object', 'tldWhitelist must be an array or object');
								Hoek.assert(typeof isEmailOptions.minDomainAtoms === 'undefined' || Number.isSafeInteger(isEmailOptions.minDomainAtoms) && isEmailOptions.minDomainAtoms > 0, 'minDomainAtoms must be a positive integer');
								Hoek.assert(typeof isEmailOptions.errorLevel === 'undefined' || typeof isEmailOptions.errorLevel === 'boolean' || Number.isSafeInteger(isEmailOptions.errorLevel) && isEmailOptions.errorLevel >= 0, 'errorLevel must be a non-negative integer or boolean');
							}

							return this._test('email', isEmailOptions, function (value, state, options) {

								Isemail = Isemail || __webpack_require__(22);

								try {
									var result = Isemail.validate(value, isEmailOptions);
									if (result === true || result === 0) {
										return value;
									}
								} catch (e) {}

								return this.createError('string.email', { value: value }, state, options);
							});
						};

						_class.prototype.ip = function ip(ipOptions) {

							var regex = internals.ipRegex;
							ipOptions = ipOptions || {};
							Hoek.assert((typeof ipOptions === 'undefined' ? 'undefined' : _typeof$$1(ipOptions)) === 'object', 'options must be an object');

							if (ipOptions.cidr) {
								Hoek.assert(typeof ipOptions.cidr === 'string', 'cidr must be a string');
								ipOptions.cidr = ipOptions.cidr.toLowerCase();

								Hoek.assert(ipOptions.cidr in Ip.cidrs, 'cidr must be one of ' + Object.keys(Ip.cidrs).join(', '));

								// If we only received a `cidr` setting, create a regex for it. But we don't need to create one if `cidr` is "optional" since that is the default
								if (!ipOptions.version && ipOptions.cidr !== 'optional') {
									regex = Ip.createIpRegex(['ipv4', 'ipv6', 'ipvfuture'], ipOptions.cidr);
								}
							} else {

								// Set our default cidr strategy
								ipOptions.cidr = 'optional';
							}

							var versions = void 0;
							if (ipOptions.version) {
								if (!Array.isArray(ipOptions.version)) {
									ipOptions.version = [ipOptions.version];
								}

								Hoek.assert(ipOptions.version.length >= 1, 'version must have at least 1 version specified');

								versions = [];
								for (var i = 0; i < ipOptions.version.length; ++i) {
									var version = ipOptions.version[i];
									Hoek.assert(typeof version === 'string', 'version at position ' + i + ' must be a string');
									version = version.toLowerCase();
									Hoek.assert(Ip.versions[version], 'version at position ' + i + ' must be one of ' + Object.keys(Ip.versions).join(', '));
									versions.push(version);
								}

								// Make sure we have a set of versions
								versions = Hoek.unique(versions);

								regex = Ip.createIpRegex(versions, ipOptions.cidr);
							}

							return this._test('ip', ipOptions, function (value, state, options) {

								if (regex.test(value)) {
									return value;
								}

								if (versions) {
									return this.createError('string.ipVersion', { value: value, cidr: ipOptions.cidr, version: versions }, state, options);
								}

								return this.createError('string.ip', { value: value, cidr: ipOptions.cidr }, state, options);
							});
						};

						_class.prototype.uri = function uri(uriOptions) {

							var customScheme = '';
							var allowRelative = false;
							var relativeOnly = false;
							var regex = internals.uriRegex;

							if (uriOptions) {
								Hoek.assert((typeof uriOptions === 'undefined' ? 'undefined' : _typeof$$1(uriOptions)) === 'object', 'options must be an object');

								if (uriOptions.scheme) {
									Hoek.assert(uriOptions.scheme instanceof RegExp || typeof uriOptions.scheme === 'string' || Array.isArray(uriOptions.scheme), 'scheme must be a RegExp, String, or Array');

									if (!Array.isArray(uriOptions.scheme)) {
										uriOptions.scheme = [uriOptions.scheme];
									}

									Hoek.assert(uriOptions.scheme.length >= 1, 'scheme must have at least 1 scheme specified');

									// Flatten the array into a string to be used to match the schemes.
									for (var i = 0; i < uriOptions.scheme.length; ++i) {
										var scheme = uriOptions.scheme[i];
										Hoek.assert(scheme instanceof RegExp || typeof scheme === 'string', 'scheme at position ' + i + ' must be a RegExp or String');

										// Add OR separators if a value already exists
										customScheme = customScheme + (customScheme ? '|' : '');

										// If someone wants to match HTTP or HTTPS for example then we need to support both RegExp and String so we don't escape their pattern unknowingly.
										if (scheme instanceof RegExp) {
											customScheme = customScheme + scheme.source;
										} else {
											Hoek.assert(/[a-zA-Z][a-zA-Z0-9+-\.]*/.test(scheme), 'scheme at position ' + i + ' must be a valid scheme');
											customScheme = customScheme + Hoek.escapeRegex(scheme);
										}
									}
								}

								if (uriOptions.allowRelative) {
									allowRelative = true;
								}

								if (uriOptions.relativeOnly) {
									relativeOnly = true;
								}
							}

							if (customScheme || allowRelative || relativeOnly) {
								regex = Uri.createUriRegex(customScheme, allowRelative, relativeOnly);
							}

							return this._test('uri', uriOptions, function (value, state, options) {

								if (regex.test(value)) {
									return value;
								}

								if (relativeOnly) {
									return this.createError('string.uriRelativeOnly', { value: value }, state, options);
								}

								if (customScheme) {
									return this.createError('string.uriCustomScheme', { scheme: customScheme, value: value }, state, options);
								}

								return this.createError('string.uri', { value: value }, state, options);
							});
						};

						_class.prototype.isoDate = function isoDate() {

							return this._test('isoDate', undefined, function (value, state, options) {

								if (JoiDate._isIsoDate(value)) {
									return value;
								}

								return this.createError('string.isoDate', { value: value }, state, options);
							});
						};

						_class.prototype.guid = function guid(guidOptions) {

							var versionNumbers = '';

							if (guidOptions && guidOptions.version) {
								if (!Array.isArray(guidOptions.version)) {
									guidOptions.version = [guidOptions.version];
								}

								Hoek.assert(guidOptions.version.length >= 1, 'version must have at least 1 valid version specified');
								var versions = new Set();

								for (var i = 0; i < guidOptions.version.length; ++i) {
									var version = guidOptions.version[i];
									Hoek.assert(typeof version === 'string', 'version at position ' + i + ' must be a string');
									version = version.toLowerCase();
									var versionNumber = internals.guidVersions[version];
									Hoek.assert(versionNumber, 'version at position ' + i + ' must be one of ' + Object.keys(internals.guidVersions).join(', '));
									Hoek.assert(!versions.has(versionNumber), 'version at position ' + i + ' must not be a duplicate.');

									versionNumbers += versionNumber;
									versions.add(versionNumber);
								}
							}

							var guidRegex = new RegExp('^([\\[{\\(]?)[0-9A-F]{8}([:-]?)[0-9A-F]{4}\\2?[' + (versionNumbers || '0-9A-F') + '][0-9A-F]{3}\\2?[' + (versionNumbers ? '89AB' : '0-9A-F') + '][0-9A-F]{3}\\2?[0-9A-F]{12}([\\]}\\)]?)$', 'i');

							return this._test('guid', guidOptions, function (value, state, options) {

								var results = guidRegex.exec(value);

								if (!results) {
									return this.createError('string.guid', { value: value }, state, options);
								}

								// Matching braces
								if (internals.guidBrackets[results[1]] !== results[results.length - 1]) {
									return this.createError('string.guid', { value: value }, state, options);
								}

								return value;
							});
						};

						_class.prototype.hex = function hex() {

							var regex = /^[a-f0-9]+$/i;

							return this._test('hex', regex, function (value, state, options) {

								if (regex.test(value)) {
									return value;
								}

								return this.createError('string.hex', { value: value }, state, options);
							});
						};

						_class.prototype.base64 = function base64(base64Options) {

							base64Options = base64Options || {};

							// Validation.
							Hoek.assert((typeof base64Options === 'undefined' ? 'undefined' : _typeof$$1(base64Options)) === 'object', 'base64 options must be an object');
							Hoek.assert(typeof base64Options.paddingRequired === 'undefined' || typeof base64Options.paddingRequired === 'boolean', 'paddingRequired must be boolean');

							// Determine if padding is required.
							var paddingRequired = base64Options.paddingRequired === false ? base64Options.paddingRequired : base64Options.paddingRequired || true;

							// Set validation based on preference.
							var regex = paddingRequired ?
							// Padding is required.
							/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/
							// Padding is optional.
							: /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}(==)?|[A-Za-z0-9+\/]{3}=?)?$/;

							return this._test('base64', regex, function (value, state, options) {

								if (regex.test(value)) {
									return value;
								}

								return this.createError('string.base64', { value: value }, state, options);
							});
						};

						_class.prototype.hostname = function hostname() {

							var regex = /^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9])$/;

							return this._test('hostname', undefined, function (value, state, options) {

								if (value.length <= 255 && regex.test(value) || Net.isIPv6(value)) {

									return value;
								}

								return this.createError('string.hostname', { value: value }, state, options);
							});
						};

						_class.prototype.lowercase = function lowercase() {

							var obj = this._test('lowercase', undefined, function (value, state, options) {

								if (options.convert || value === value.toLocaleLowerCase()) {

									return value;
								}

								return this.createError('string.lowercase', { value: value }, state, options);
							});

							obj._flags.case = 'lower';
							return obj;
						};

						_class.prototype.uppercase = function uppercase() {

							var obj = this._test('uppercase', undefined, function (value, state, options) {

								if (options.convert || value === value.toLocaleUpperCase()) {

									return value;
								}

								return this.createError('string.uppercase', { value: value }, state, options);
							});

							obj._flags.case = 'upper';
							return obj;
						};

						_class.prototype.trim = function trim() {

							var obj = this._test('trim', undefined, function (value, state, options) {

								if (options.convert || value === value.trim()) {

									return value;
								}

								return this.createError('string.trim', { value: value }, state, options);
							});

							obj._flags.trim = true;
							return obj;
						};

						_class.prototype.replace = function replace(pattern, replacement) {

							if (typeof pattern === 'string') {
								pattern = new RegExp(Hoek.escapeRegex(pattern), 'g');
							}

							Hoek.assert(pattern instanceof RegExp, 'pattern must be a RegExp');
							Hoek.assert(typeof replacement === 'string', 'replacement must be a String');

							// This can not be considere a test like trim, we can't "reject"
							// anything from this rule, so just clone the current object
							var obj = this.clone();

							if (!obj._inner.replacements) {
								obj._inner.replacements = [];
							}

							obj._inner.replacements.push({
								pattern: pattern,
								replacement: replacement
							});

							return obj;
						};

						_class.prototype.truncate = function truncate(enabled) {

							var value = enabled === undefined ? true : !!enabled;

							if (this._flags.truncate === value) {
								return this;
							}

							var obj = this.clone();
							obj._flags.truncate = value;
							return obj;
						};

						return _class;
					}(Any);

					internals.compare = function (type, compare) {

						return function (limit, encoding) {

							var isRef = Ref.isRef(limit);

							Hoek.assert(Number.isSafeInteger(limit) && limit >= 0 || isRef, 'limit must be a positive integer or reference');
							Hoek.assert(!encoding || Buffer.isEncoding(encoding), 'Invalid encoding:', encoding);

							return this._test(type, limit, function (value, state, options) {

								var compareTo = void 0;
								if (isRef) {
									compareTo = limit(state.reference || state.parent, options);

									if (!Number.isSafeInteger(compareTo)) {
										return this.createError('string.ref', { ref: limit.key }, state, options);
									}
								} else {
									compareTo = limit;
								}

								if (compare(value, compareTo, encoding)) {
									return value;
								}

								return this.createError('string.' + type, { limit: compareTo, value: value, encoding: encoding }, state, options);
							});
						};
					};

					internals.String.prototype.min = internals.compare('min', function (value, limit, encoding) {

						var length = encoding ? Buffer.byteLength(value, encoding) : value.length;
						return length >= limit;
					});

					internals.String.prototype.max = internals.compare('max', function (value, limit, encoding) {

						var length = encoding ? Buffer.byteLength(value, encoding) : value.length;
						return length <= limit;
					});

					internals.String.prototype.length = internals.compare('length', function (value, limit, encoding) {

						var length = encoding ? Buffer.byteLength(value, encoding) : value.length;
						return length === limit;
					});

					// Aliases

					internals.String.prototype.uuid = internals.String.prototype.guid;

					module.exports = new internals.String();
					/* WEBPACK VAR INJECTION */
				}).call(exports, __webpack_require__(3).Buffer);

				/***/
			},
			/* 19 */
			/***/function (module, exports, __webpack_require__) {

				'use strict';

				// Load Modules

				var RFC3986 = __webpack_require__(20);

				// Declare internals

				var internals = {
					Uri: {
						createUriRegex: function createUriRegex(optionalScheme, allowRelative, relativeOnly) {

							var scheme = RFC3986.scheme;
							var prefix = void 0;

							if (relativeOnly) {
								prefix = '(?:' + RFC3986.relativeRef + ')';
							} else {
								// If we were passed a scheme, use it instead of the generic one
								if (optionalScheme) {

									// Have to put this in a non-capturing group to handle the OR statements
									scheme = '(?:' + optionalScheme + ')';
								}

								var withScheme = '(?:' + scheme + ':' + RFC3986.hierPart + ')';

								prefix = allowRelative ? '(?:' + withScheme + '|' + RFC3986.relativeRef + ')' : withScheme;
							}

							/**
        * URI = scheme ":" hier-part [ "?" query ] [ "#" fragment ]
        *
        * OR
        *
        * relative-ref = relative-part [ "?" query ] [ "#" fragment ]
        */
							return new RegExp('^' + prefix + '(?:\\?' + RFC3986.query + ')?' + '(?:#' + RFC3986.fragment + ')?$');
						}
					}
				};

				module.exports = internals.Uri;

				/***/
			},
			/* 20 */
			/***/function (module, exports) {

				'use strict';

				// Load modules


				// Delcare internals

				var internals = {
					rfc3986: {}
				};

				internals.generate = function () {

					/**
      * elements separated by forward slash ("/") are alternatives.
      */
					var or = '|';

					/**
      * DIGIT = %x30-39 ; 0-9
      */
					var digit = '0-9';
					var digitOnly = '[' + digit + ']';

					/**
      * ALPHA = %x41-5A / %x61-7A   ; A-Z / a-z
      */
					var alpha = 'a-zA-Z';
					var alphaOnly = '[' + alpha + ']';

					/**
      * cidr       = DIGIT                ; 0-9
      *            / %x31-32 DIGIT         ; 10-29
      *            / "3" %x30-32           ; 30-32
      */
					internals.rfc3986.cidr = digitOnly + or + '[1-2]' + digitOnly + or + '3' + '[0-2]';

					/**
      * HEXDIG = DIGIT / "A" / "B" / "C" / "D" / "E" / "F"
      */
					var hexDigit = digit + 'A-Fa-f';
					var hexDigitOnly = '[' + hexDigit + ']';

					/**
      * unreserved = ALPHA / DIGIT / "-" / "." / "_" / "~"
      */
					var unreserved = alpha + digit + '-\\._~';

					/**
      * sub-delims = "!" / "$" / "&" / "'" / "(" / ")" / "*" / "+" / "," / ";" / "="
      */
					var subDelims = '!\\$&\'\\(\\)\\*\\+,;=';

					/**
      * pct-encoded = "%" HEXDIG HEXDIG
      */
					var pctEncoded = '%' + hexDigit;

					/**
      * pchar = unreserved / pct-encoded / sub-delims / ":" / "@"
      */
					var pchar = unreserved + pctEncoded + subDelims + ':@';
					var pcharOnly = '[' + pchar + ']';

					/**
      * Rule to support zero-padded addresses.
      */
					var zeroPad = '0?';

					/**
      * dec-octet   = DIGIT                 ; 0-9
      *            / %x31-39 DIGIT         ; 10-99
      *            / "1" 2DIGIT            ; 100-199
      *            / "2" %x30-34 DIGIT     ; 200-249
      *            / "25" %x30-35          ; 250-255
      */
					var decOctect = '(?:' + zeroPad + zeroPad + digitOnly + or + zeroPad + '[1-9]' + digitOnly + or + '1' + digitOnly + digitOnly + or + '2' + '[0-4]' + digitOnly + or + '25' + '[0-5])';

					/**
      * IPv4address = dec-octet "." dec-octet "." dec-octet "." dec-octet
      */
					internals.rfc3986.IPv4address = '(?:' + decOctect + '\\.){3}' + decOctect;

					/**
      * h16 = 1*4HEXDIG ; 16 bits of address represented in hexadecimal
      * ls32 = ( h16 ":" h16 ) / IPv4address ; least-significant 32 bits of address
      * IPv6address =                            6( h16 ":" ) ls32
      *             /                       "::" 5( h16 ":" ) ls32
      *             / [               h16 ] "::" 4( h16 ":" ) ls32
      *             / [ *1( h16 ":" ) h16 ] "::" 3( h16 ":" ) ls32
      *             / [ *2( h16 ":" ) h16 ] "::" 2( h16 ":" ) ls32
      *             / [ *3( h16 ":" ) h16 ] "::"    h16 ":"   ls32
      *             / [ *4( h16 ":" ) h16 ] "::"              ls32
      *             / [ *5( h16 ":" ) h16 ] "::"              h16
      *             / [ *6( h16 ":" ) h16 ] "::"
      */
					var h16 = hexDigitOnly + '{1,4}';
					var ls32 = '(?:' + h16 + ':' + h16 + '|' + internals.rfc3986.IPv4address + ')';
					var IPv6SixHex = '(?:' + h16 + ':){6}' + ls32;
					var IPv6FiveHex = '::(?:' + h16 + ':){5}' + ls32;
					var IPv6FourHex = '(?:' + h16 + ')?::(?:' + h16 + ':){4}' + ls32;
					var IPv6ThreeHex = '(?:(?:' + h16 + ':){0,1}' + h16 + ')?::(?:' + h16 + ':){3}' + ls32;
					var IPv6TwoHex = '(?:(?:' + h16 + ':){0,2}' + h16 + ')?::(?:' + h16 + ':){2}' + ls32;
					var IPv6OneHex = '(?:(?:' + h16 + ':){0,3}' + h16 + ')?::' + h16 + ':' + ls32;
					var IPv6NoneHex = '(?:(?:' + h16 + ':){0,4}' + h16 + ')?::' + ls32;
					var IPv6NoneHex2 = '(?:(?:' + h16 + ':){0,5}' + h16 + ')?::' + h16;
					var IPv6NoneHex3 = '(?:(?:' + h16 + ':){0,6}' + h16 + ')?::';
					internals.rfc3986.IPv6address = '(?:' + IPv6SixHex + or + IPv6FiveHex + or + IPv6FourHex + or + IPv6ThreeHex + or + IPv6TwoHex + or + IPv6OneHex + or + IPv6NoneHex + or + IPv6NoneHex2 + or + IPv6NoneHex3 + ')';

					/**
      * IPvFuture = "v" 1*HEXDIG "." 1*( unreserved / sub-delims / ":" )
      */
					internals.rfc3986.IPvFuture = 'v' + hexDigitOnly + '+\\.[' + unreserved + subDelims + ':]+';

					/**
      * scheme = ALPHA *( ALPHA / DIGIT / "+" / "-" / "." )
      */
					internals.rfc3986.scheme = alphaOnly + '[' + alpha + digit + '+-\\.]*';

					/**
      * userinfo = *( unreserved / pct-encoded / sub-delims / ":" )
      */
					var userinfo = '[' + unreserved + pctEncoded + subDelims + ':]*';

					/**
      * IP-literal = "[" ( IPv6address / IPvFuture  ) "]"
      */
					var IPLiteral = '\\[(?:' + internals.rfc3986.IPv6address + or + internals.rfc3986.IPvFuture + ')\\]';

					/**
      * reg-name = *( unreserved / pct-encoded / sub-delims )
      */
					var regName = '[' + unreserved + pctEncoded + subDelims + ']{0,255}';

					/**
      * host = IP-literal / IPv4address / reg-name
      */
					var host = '(?:' + IPLiteral + or + internals.rfc3986.IPv4address + or + regName + ')';

					/**
      * port = *DIGIT
      */
					var port = digitOnly + '*';

					/**
      * authority   = [ userinfo "@" ] host [ ":" port ]
      */
					var authority = '(?:' + userinfo + '@)?' + host + '(?::' + port + ')?';

					/**
      * segment       = *pchar
      * segment-nz    = 1*pchar
      * path          = path-abempty    ; begins with "/" or is empty
      *               / path-absolute   ; begins with "/" but not "//"
      *               / path-noscheme   ; begins with a non-colon segment
      *               / path-rootless   ; begins with a segment
      *               / path-empty      ; zero characters
      * path-abempty  = *( "/" segment )
      * path-absolute = "/" [ segment-nz *( "/" segment ) ]
      * path-rootless = segment-nz *( "/" segment )
      */
					var segment = pcharOnly + '*';
					var segmentNz = pcharOnly + '+';
					var segmentNzNc = '[' + unreserved + pctEncoded + subDelims + '@' + ']+';
					var pathEmpty = '';
					var pathAbEmpty = '(?:\\/' + segment + ')*';
					var pathAbsolute = '\\/(?:' + segmentNz + pathAbEmpty + ')?';
					var pathRootless = segmentNz + pathAbEmpty;
					var pathNoScheme = segmentNzNc + pathAbEmpty;

					/**
      * hier-part = "//" authority path
      */
					internals.rfc3986.hierPart = '(?:' + '(?:\\/\\/' + authority + pathAbEmpty + ')' + or + pathAbsolute + or + pathRootless + ')';

					/**
      * relative-part = "//" authority path-abempty
      *                 / path-absolute
      *                 / path-noscheme
      *                 / path-empty
      */
					internals.rfc3986.relativeRef = '(?:' + '(?:\\/\\/' + authority + pathAbEmpty + ')' + or + pathAbsolute + or + pathNoScheme + or + pathEmpty + ')';

					/**
      * query = *( pchar / "/" / "?" )
      */
					internals.rfc3986.query = '[' + pchar + '\\/\\?]*(?=#|$)'; //Finish matching either at the fragment part or end of the line.

					/**
      * fragment = *( pchar / "/" / "?" )
      */
					internals.rfc3986.fragment = '[' + pchar + '\\/\\?]*';
				};

				internals.generate();

				module.exports = internals.rfc3986;

				/***/
			},
			/* 21 */
			/***/function (module, exports, __webpack_require__) {

				'use strict';

				// Load modules

				var RFC3986 = __webpack_require__(20);

				// Declare internals

				var internals = {
					Ip: {
						cidrs: {
							required: '\\/(?:' + RFC3986.cidr + ')',
							optional: '(?:\\/(?:' + RFC3986.cidr + '))?',
							forbidden: ''
						},
						versions: {
							ipv4: RFC3986.IPv4address,
							ipv6: RFC3986.IPv6address,
							ipvfuture: RFC3986.IPvFuture
						}
					}
				};

				internals.Ip.createIpRegex = function (versions, cidr) {

					var regex = void 0;
					for (var i = 0; i < versions.length; ++i) {
						var version = versions[i];
						if (!regex) {
							regex = '^(?:' + internals.Ip.versions[version];
						}
						regex = regex + '|' + internals.Ip.versions[version];
					}

					return new RegExp(regex + ')' + internals.Ip.cidrs[cidr] + '$');
				};

				module.exports = internals.Ip;

				/***/
			},
			/* 22 */
			/***/function (module, exports, __webpack_require__) {

				/* WEBPACK VAR INJECTION */(function (process) {
					'use strict';

					// Load modules

					var _typeof$$1 = typeof Symbol === "function" && _typeof(Symbol.iterator) === "symbol" ? function (obj) {
						return typeof obj === 'undefined' ? 'undefined' : _typeof(obj);
					} : function (obj) {
						return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === 'undefined' ? 'undefined' : _typeof(obj);
					};

					var Dns = __webpack_require__(5);

					// Declare internals

					var internals = {
						hasOwn: Object.prototype.hasOwnProperty,
						indexOf: Array.prototype.indexOf,
						defaultThreshold: 16,
						maxIPv6Groups: 8,

						categories: {
							valid: 1,
							dnsWarn: 7,
							rfc5321: 15,
							cfws: 31,
							deprecated: 63,
							rfc5322: 127,
							error: 255
						},

						diagnoses: {

							// Address is valid

							valid: 0,

							// Address is valid, but the DNS check failed

							dnsWarnNoMXRecord: 5,
							dnsWarnNoRecord: 6,

							// Address is valid for SMTP but has unusual elements

							rfc5321TLD: 9,
							rfc5321TLDNumeric: 10,
							rfc5321QuotedString: 11,
							rfc5321AddressLiteral: 12,

							// Address is valid for message, but must be modified for envelope

							cfwsComment: 17,
							cfwsFWS: 18,

							// Address contains deprecated elements, but may still be valid in some contexts

							deprecatedLocalPart: 33,
							deprecatedFWS: 34,
							deprecatedQTEXT: 35,
							deprecatedQP: 36,
							deprecatedComment: 37,
							deprecatedCTEXT: 38,
							deprecatedIPv6: 39,
							deprecatedCFWSNearAt: 49,

							// Address is only valid according to broad definition in RFC 5322, but is otherwise invalid

							rfc5322Domain: 65,
							rfc5322TooLong: 66,
							rfc5322LocalTooLong: 67,
							rfc5322DomainTooLong: 68,
							rfc5322LabelTooLong: 69,
							rfc5322DomainLiteral: 70,
							rfc5322DomainLiteralOBSDText: 71,
							rfc5322IPv6GroupCount: 72,
							rfc5322IPv62x2xColon: 73,
							rfc5322IPv6BadCharacter: 74,
							rfc5322IPv6MaxGroups: 75,
							rfc5322IPv6ColonStart: 76,
							rfc5322IPv6ColonEnd: 77,

							// Address is invalid for any purpose

							errExpectingDTEXT: 129,
							errNoLocalPart: 130,
							errNoDomain: 131,
							errConsecutiveDots: 132,
							errATEXTAfterCFWS: 133,
							errATEXTAfterQS: 134,
							errATEXTAfterDomainLiteral: 135,
							errExpectingQPair: 136,
							errExpectingATEXT: 137,
							errExpectingQTEXT: 138,
							errExpectingCTEXT: 139,
							errBackslashEnd: 140,
							errDotStart: 141,
							errDotEnd: 142,
							errDomainHyphenStart: 143,
							errDomainHyphenEnd: 144,
							errUnclosedQuotedString: 145,
							errUnclosedComment: 146,
							errUnclosedDomainLiteral: 147,
							errFWSCRLFx2: 148,
							errFWSCRLFEnd: 149,
							errCRNoLF: 150,
							errUnknownTLD: 160,
							errDomainTooShort: 161
						},

						components: {
							localpart: 0,
							domain: 1,
							literal: 2,
							contextComment: 3,
							contextFWS: 4,
							contextQuotedString: 5,
							contextQuotedPair: 6
						}
					};

					// $lab:coverage:off$
					internals.defer = typeof process !== 'undefined' && process && typeof process.nextTick === 'function' ? process.nextTick.bind(process) : function (callback) {

						return setTimeout(callback, 0);
					};
					// $lab:coverage:on$


					internals.specials = function () {

						var specials = '()<>[]:;@\\,."'; // US-ASCII visible characters not valid for atext (http://tools.ietf.org/html/rfc5322#section-3.2.3)
						var lookup = new Array(0x100);
						for (var i = 0xff; i >= 0; --i) {
							lookup[i] = false;
						}

						for (var _i = 0; _i < specials.length; ++_i) {
							lookup[specials.charCodeAt(_i)] = true;
						}

						return function (code) {

							return lookup[code];
						};
					}();

					internals.regex = {
						ipV4: /\b(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)$/,
						ipV6: /^[a-fA-F\d]{0,4}$/
					};

					internals.checkIpV6 = function (items) {

						return items.every(function (value) {
							return internals.regex.ipV6.test(value);
						});
					};

					internals.validDomain = function (tldAtom, options) {

						if (options.tldBlacklist) {
							if (Array.isArray(options.tldBlacklist)) {
								return internals.indexOf.call(options.tldBlacklist, tldAtom) === -1;
							}

							return !internals.hasOwn.call(options.tldBlacklist, tldAtom);
						}

						if (Array.isArray(options.tldWhitelist)) {
							return internals.indexOf.call(options.tldWhitelist, tldAtom) !== -1;
						}

						return internals.hasOwn.call(options.tldWhitelist, tldAtom);
					};

					/**
      * Check that an email address conforms to RFCs 5321, 5322 and others
      *
      * We distinguish clearly between a Mailbox as defined by RFC 5321 and an
      * addr-spec as defined by RFC 5322. Depending on the context, either can be
      * regarded as a valid email address. The RFC 5321 Mailbox specification is
      * more restrictive (comments, white space and obsolete forms are not allowed).
      *
      * @param {string} email The email address to check. See README for specifics.
      * @param {Object} options The (optional) options:
      *   {boolean} checkDNS If true then will check DNS for MX records. If
      *     true this call to isEmail _will_ be asynchronous.
      *   {*} errorLevel Determines the boundary between valid and invalid
      *     addresses.
      *   {*} tldBlacklist The set of domains to consider invalid.
      *   {*} tldWhitelist The set of domains to consider valid.
      *   {*} minDomainAtoms The minimum number of domain atoms which must be present
      *     for the address to be valid.
      * @param {function(number|boolean)} callback The (optional) callback handler.
      * @return {*}
      */

					exports.validate = internals.validate = function (email, options, callback) {

						options = options || {};

						if (typeof options === 'function') {
							callback = options;
							options = {};
						}

						if (typeof callback !== 'function') {
							if (options.checkDNS) {
								throw new TypeError('expected callback function for checkDNS option');
							}

							callback = null;
						}

						var diagnose = void 0;
						var threshold = void 0;

						if (typeof options.errorLevel === 'number') {
							diagnose = true;
							threshold = options.errorLevel;
						} else {
							diagnose = !!options.errorLevel;
							threshold = internals.diagnoses.valid;
						}

						if (options.tldWhitelist) {
							if (typeof options.tldWhitelist === 'string') {
								options.tldWhitelist = [options.tldWhitelist];
							} else if (_typeof$$1(options.tldWhitelist) !== 'object') {
								throw new TypeError('expected array or object tldWhitelist');
							}
						}

						if (options.tldBlacklist) {
							if (typeof options.tldBlacklist === 'string') {
								options.tldBlacklist = [options.tldBlacklist];
							} else if (_typeof$$1(options.tldBlacklist) !== 'object') {
								throw new TypeError('expected array or object tldBlacklist');
							}
						}

						if (options.minDomainAtoms && (options.minDomainAtoms !== (+options.minDomainAtoms | 0) || options.minDomainAtoms < 0)) {
							throw new TypeError('expected positive integer minDomainAtoms');
						}

						var maxResult = internals.diagnoses.valid;
						var updateResult = function updateResult(value) {

							if (value > maxResult) {
								maxResult = value;
							}
						};

						var context = {
							now: internals.components.localpart,
							prev: internals.components.localpart,
							stack: [internals.components.localpart]
						};

						var prevToken = '';

						var parseData = {
							local: '',
							domain: ''
						};
						var atomData = {
							locals: [''],
							domains: ['']
						};

						var elementCount = 0;
						var elementLength = 0;
						var crlfCount = 0;
						var charCode = void 0;

						var hyphenFlag = false;
						var assertEnd = false;

						var emailLength = email.length;

						var token = void 0; // Token is used outside the loop, must declare similarly
						for (var i = 0; i < emailLength; ++i) {
							token = email[i];

							switch (context.now) {
								// Local-part
								case internals.components.localpart:
									// http://tools.ietf.org/html/rfc5322#section-3.4.1
									//   local-part      =   dot-atom / quoted-string / obs-local-part
									//
									//   dot-atom        =   [CFWS] dot-atom-text [CFWS]
									//
									//   dot-atom-text   =   1*atext *("." 1*atext)
									//
									//   quoted-string   =   [CFWS]
									//                       DQUOTE *([FWS] qcontent) [FWS] DQUOTE
									//                       [CFWS]
									//
									//   obs-local-part  =   word *("." word)
									//
									//   word            =   atom / quoted-string
									//
									//   atom            =   [CFWS] 1*atext [CFWS]
									switch (token) {
										// Comment
										case '(':
											if (elementLength === 0) {
												// Comments are OK at the beginning of an element
												updateResult(elementCount === 0 ? internals.diagnoses.cfwsComment : internals.diagnoses.deprecatedComment);
											} else {
												updateResult(internals.diagnoses.cfwsComment);
												// Cannot start a comment in an element, should be end
												assertEnd = true;
											}

											context.stack.push(context.now);
											context.now = internals.components.contextComment;
											break;

										// Next dot-atom element
										case '.':
											if (elementLength === 0) {
												// Another dot, already?
												updateResult(elementCount === 0 ? internals.diagnoses.errDotStart : internals.diagnoses.errConsecutiveDots);
											} else {
												// The entire local-part can be a quoted string for RFC 5321; if one atom is quoted it's an RFC 5322 obsolete form
												if (assertEnd) {
													updateResult(internals.diagnoses.deprecatedLocalPart);
												}

												// CFWS & quoted strings are OK again now we're at the beginning of an element (although they are obsolete forms)
												assertEnd = false;
												elementLength = 0;
												++elementCount;
												parseData.local += token;
												atomData.locals[elementCount] = '';
											}

											break;

										// Quoted string
										case '"':
											if (elementLength === 0) {
												// The entire local-part can be a quoted string for RFC 5321; if one atom is quoted it's an RFC 5322 obsolete form
												updateResult(elementCount === 0 ? internals.diagnoses.rfc5321QuotedString : internals.diagnoses.deprecatedLocalPart);

												parseData.local += token;
												atomData.locals[elementCount] += token;
												++elementLength;

												// Quoted string must be the entire element
												assertEnd = true;
												context.stack.push(context.now);
												context.now = internals.components.contextQuotedString;
											} else {
												updateResult(internals.diagnoses.errExpectingATEXT);
											}

											break;

										// Folding white space
										case '\r':
											if (emailLength === ++i || email[i] !== '\n') {
												// Fatal error
												updateResult(internals.diagnoses.errCRNoLF);
												break;
											}

										// Fallthrough

										case ' ':
										case '\t':
											if (elementLength === 0) {
												updateResult(elementCount === 0 ? internals.diagnoses.cfwsFWS : internals.diagnoses.deprecatedFWS);
											} else {
												// We can't start FWS in the middle of an element, better be end
												assertEnd = true;
											}

											context.stack.push(context.now);
											context.now = internals.components.contextFWS;
											prevToken = token;
											break;

										case '@':
											// At this point we should have a valid local-part
											// $lab:coverage:off$
											if (context.stack.length !== 1) {
												throw new Error('unexpected item on context stack');
											}
											// $lab:coverage:on$

											if (parseData.local.length === 0) {
												// Fatal error
												updateResult(internals.diagnoses.errNoLocalPart);
											} else if (elementLength === 0) {
												// Fatal error
												updateResult(internals.diagnoses.errDotEnd);
											}
											// http://tools.ietf.org/html/rfc5321#section-4.5.3.1.1 the maximum total length of a user name or other local-part is 64
											//    octets
											else if (parseData.local.length > 64) {
													updateResult(internals.diagnoses.rfc5322LocalTooLong);
												}
												// http://tools.ietf.org/html/rfc5322#section-3.4.1 comments and folding white space SHOULD NOT be used around "@" in the
												//    addr-spec
												//
												// http://tools.ietf.org/html/rfc2119
												// 4. SHOULD NOT this phrase, or the phrase "NOT RECOMMENDED" mean that there may exist valid reasons in particular
												//    circumstances when the particular behavior is acceptable or even useful, but the full implications should be understood
												//    and the case carefully weighed before implementing any behavior described with this label.
												else if (context.prev === internals.components.contextComment || context.prev === internals.components.contextFWS) {
														updateResult(internals.diagnoses.deprecatedCFWSNearAt);
													}

											// Clear everything down for the domain parsing
											context.now = internals.components.domain;
											context.stack[0] = internals.components.domain;
											elementCount = 0;
											elementLength = 0;
											assertEnd = false; // CFWS can only appear at the end of the element
											break;

										// ATEXT
										default:
											// http://tools.ietf.org/html/rfc5322#section-3.2.3
											//    atext = ALPHA / DIGIT / ; Printable US-ASCII
											//            "!" / "#" /     ;  characters not including
											//            "$" / "%" /     ;  specials.  Used for atoms.
											//            "&" / "'" /
											//            "*" / "+" /
											//            "-" / "/" /
											//            "=" / "?" /
											//            "^" / "_" /
											//            "`" / "{" /
											//            "|" / "}" /
											//            "~"
											if (assertEnd) {
												// We have encountered atext where it is no longer valid
												switch (context.prev) {
													case internals.components.contextComment:
													case internals.components.contextFWS:
														updateResult(internals.diagnoses.errATEXTAfterCFWS);
														break;

													case internals.components.contextQuotedString:
														updateResult(internals.diagnoses.errATEXTAfterQS);
														break;

													// $lab:coverage:off$
													default:
														throw new Error('more atext found where none is allowed, but unrecognized prev context: ' + context.prev);
													// $lab:coverage:on$
												}
											} else {
												context.prev = context.now;
												charCode = token.charCodeAt(0);

												// Especially if charCode == 10
												if (charCode < 33 || charCode > 126 || internals.specials(charCode)) {

													// Fatal error
													updateResult(internals.diagnoses.errExpectingATEXT);
												}

												parseData.local += token;
												atomData.locals[elementCount] += token;
												++elementLength;
											}
									}

									break;

								case internals.components.domain:
									// http://tools.ietf.org/html/rfc5322#section-3.4.1
									//   domain          =   dot-atom / domain-literal / obs-domain
									//
									//   dot-atom        =   [CFWS] dot-atom-text [CFWS]
									//
									//   dot-atom-text   =   1*atext *("." 1*atext)
									//
									//   domain-literal  =   [CFWS] "[" *([FWS] dtext) [FWS] "]" [CFWS]
									//
									//   dtext           =   %d33-90 /          ; Printable US-ASCII
									//                       %d94-126 /         ;  characters not including
									//                       obs-dtext          ;  "[", "]", or "\"
									//
									//   obs-domain      =   atom *("." atom)
									//
									//   atom            =   [CFWS] 1*atext [CFWS]

									// http://tools.ietf.org/html/rfc5321#section-4.1.2
									//   Mailbox        = Local-part "@" ( Domain / address-literal )
									//
									//   Domain         = sub-domain *("." sub-domain)
									//
									//   address-literal  = "[" ( IPv4-address-literal /
									//                    IPv6-address-literal /
									//                    General-address-literal ) "]"
									//                    ; See Section 4.1.3

									// http://tools.ietf.org/html/rfc5322#section-3.4.1
									//      Note: A liberal syntax for the domain portion of addr-spec is
									//      given here.  However, the domain portion contains addressing
									//      information specified by and used in other protocols (e.g.,
									//      [RFC1034], [RFC1035], [RFC1123], [RFC5321]).  It is therefore
									//      incumbent upon implementations to conform to the syntax of
									//      addresses for the context in which they are used.
									//
									// is_email() author's note: it's not clear how to interpret this in
									// he context of a general email address validator. The conclusion I
									// have reached is this: "addressing information" must comply with
									// RFC 5321 (and in turn RFC 1035), anything that is "semantically
									// invisible" must comply only with RFC 5322.
									switch (token) {
										// Comment
										case '(':
											if (elementLength === 0) {
												// Comments at the start of the domain are deprecated in the text, comments at the start of a subdomain are obs-domain
												// http://tools.ietf.org/html/rfc5322#section-3.4.1
												updateResult(elementCount === 0 ? internals.diagnoses.deprecatedCFWSNearAt : internals.diagnoses.deprecatedComment);
											} else {
												// We can't start a comment mid-element, better be at the end
												assertEnd = true;
												updateResult(internals.diagnoses.cfwsComment);
											}

											context.stack.push(context.now);
											context.now = internals.components.contextComment;
											break;

										// Next dot-atom element
										case '.':
											if (elementLength === 0) {
												// Another dot, already? Fatal error.
												updateResult(elementCount === 0 ? internals.diagnoses.errDotStart : internals.diagnoses.errConsecutiveDots);
											} else if (hyphenFlag) {
												// Previous subdomain ended in a hyphen. Fatal error.
												updateResult(internals.diagnoses.errDomainHyphenEnd);
											} else if (elementLength > 63) {
												// Nowhere in RFC 5321 does it say explicitly that the domain part of a Mailbox must be a valid domain according to the
												// DNS standards set out in RFC 1035, but this *is* implied in several places. For instance, wherever the idea of host
												// routing is discussed the RFC says that the domain must be looked up in the DNS. This would be nonsense unless the
												// domain was designed to be a valid DNS domain. Hence we must conclude that the RFC 1035 restriction on label length
												// also applies to RFC 5321 domains.
												//
												// http://tools.ietf.org/html/rfc1035#section-2.3.4
												// labels          63 octets or less

												updateResult(internals.diagnoses.rfc5322LabelTooLong);
											}

											// CFWS is OK again now we're at the beginning of an element (although
											// it may be obsolete CFWS)
											assertEnd = false;
											elementLength = 0;
											++elementCount;
											atomData.domains[elementCount] = '';
											parseData.domain += token;

											break;

										// Domain literal
										case '[':
											if (parseData.domain.length === 0) {
												// Domain literal must be the only component
												assertEnd = true;
												++elementLength;
												context.stack.push(context.now);
												context.now = internals.components.literal;
												parseData.domain += token;
												atomData.domains[elementCount] += token;
												parseData.literal = '';
											} else {
												// Fatal error
												updateResult(internals.diagnoses.errExpectingATEXT);
											}

											break;

										// Folding white space
										case '\r':
											if (emailLength === ++i || email[i] !== '\n') {
												// Fatal error
												updateResult(internals.diagnoses.errCRNoLF);
												break;
											}

										// Fallthrough

										case ' ':
										case '\t':
											if (elementLength === 0) {
												updateResult(elementCount === 0 ? internals.diagnoses.deprecatedCFWSNearAt : internals.diagnoses.deprecatedFWS);
											} else {
												// We can't start FWS in the middle of an element, so this better be the end
												updateResult(internals.diagnoses.cfwsFWS);
												assertEnd = true;
											}

											context.stack.push(context.now);
											context.now = internals.components.contextFWS;
											prevToken = token;
											break;

										// This must be ATEXT
										default:
											// RFC 5322 allows any atext...
											// http://tools.ietf.org/html/rfc5322#section-3.2.3
											//    atext = ALPHA / DIGIT / ; Printable US-ASCII
											//            "!" / "#" /     ;  characters not including
											//            "$" / "%" /     ;  specials.  Used for atoms.
											//            "&" / "'" /
											//            "*" / "+" /
											//            "-" / "/" /
											//            "=" / "?" /
											//            "^" / "_" /
											//            "`" / "{" /
											//            "|" / "}" /
											//            "~"

											// But RFC 5321 only allows letter-digit-hyphen to comply with DNS rules
											//   (RFCs 1034 & 1123)
											// http://tools.ietf.org/html/rfc5321#section-4.1.2
											//   sub-domain     = Let-dig [Ldh-str]
											//
											//   Let-dig        = ALPHA / DIGIT
											//
											//   Ldh-str        = *( ALPHA / DIGIT / "-" ) Let-dig
											//
											if (assertEnd) {
												// We have encountered ATEXT where it is no longer valid
												switch (context.prev) {
													case internals.components.contextComment:
													case internals.components.contextFWS:
														updateResult(internals.diagnoses.errATEXTAfterCFWS);
														break;

													case internals.components.literal:
														updateResult(internals.diagnoses.errATEXTAfterDomainLiteral);
														break;

													// $lab:coverage:off$
													default:
														throw new Error('more atext found where none is allowed, but unrecognized prev context: ' + context.prev);
													// $lab:coverage:on$
												}
											}

											charCode = token.charCodeAt(0);
											// Assume this token isn't a hyphen unless we discover it is
											hyphenFlag = false;

											if (charCode < 33 || charCode > 126 || internals.specials(charCode)) {
												// Fatal error
												updateResult(internals.diagnoses.errExpectingATEXT);
											} else if (token === '-') {
												if (elementLength === 0) {
													// Hyphens cannot be at the beginning of a subdomain, fatal error
													updateResult(internals.diagnoses.errDomainHyphenStart);
												}

												hyphenFlag = true;
											}
											// Check if it's a neither a number nor a latin letter
											else if (charCode < 48 || charCode > 122 || charCode > 57 && charCode < 65 || charCode > 90 && charCode < 97) {
													// This is not an RFC 5321 subdomain, but still OK by RFC 5322
													updateResult(internals.diagnoses.rfc5322Domain);
												}

											parseData.domain += token;
											atomData.domains[elementCount] += token;
											++elementLength;
									}

									break;

								// Domain literal
								case internals.components.literal:
									// http://tools.ietf.org/html/rfc5322#section-3.4.1
									//   domain-literal  =   [CFWS] "[" *([FWS] dtext) [FWS] "]" [CFWS]
									//
									//   dtext           =   %d33-90 /          ; Printable US-ASCII
									//                       %d94-126 /         ;  characters not including
									//                       obs-dtext          ;  "[", "]", or "\"
									//
									//   obs-dtext       =   obs-NO-WS-CTL / quoted-pair
									switch (token) {
										// End of domain literal
										case ']':
											if (maxResult < internals.categories.deprecated) {
												// Could be a valid RFC 5321 address literal, so let's check

												// http://tools.ietf.org/html/rfc5321#section-4.1.2
												//   address-literal  = "[" ( IPv4-address-literal /
												//                    IPv6-address-literal /
												//                    General-address-literal ) "]"
												//                    ; See Section 4.1.3
												//
												// http://tools.ietf.org/html/rfc5321#section-4.1.3
												//   IPv4-address-literal  = Snum 3("."  Snum)
												//
												//   IPv6-address-literal  = "IPv6:" IPv6-addr
												//
												//   General-address-literal  = Standardized-tag ":" 1*dcontent
												//
												//   Standardized-tag  = Ldh-str
												//                     ; Standardized-tag MUST be specified in a
												//                     ; Standards-Track RFC and registered with IANA
												//
												//   dcontent      = %d33-90 / ; Printable US-ASCII
												//                 %d94-126 ; excl. "[", "\", "]"
												//
												//   Snum          = 1*3DIGIT
												//                 ; representing a decimal integer
												//                 ; value in the range 0 through 255
												//
												//   IPv6-addr     = IPv6-full / IPv6-comp / IPv6v4-full / IPv6v4-comp
												//
												//   IPv6-hex      = 1*4HEXDIG
												//
												//   IPv6-full     = IPv6-hex 7(":" IPv6-hex)
												//
												//   IPv6-comp     = [IPv6-hex *5(":" IPv6-hex)] "::"
												//                 [IPv6-hex *5(":" IPv6-hex)]
												//                 ; The "::" represents at least 2 16-bit groups of
												//                 ; zeros.  No more than 6 groups in addition to the
												//                 ; "::" may be present.
												//
												//   IPv6v4-full   = IPv6-hex 5(":" IPv6-hex) ":" IPv4-address-literal
												//
												//   IPv6v4-comp   = [IPv6-hex *3(":" IPv6-hex)] "::"
												//                 [IPv6-hex *3(":" IPv6-hex) ":"]
												//                 IPv4-address-literal
												//                 ; The "::" represents at least 2 16-bit groups of
												//                 ; zeros.  No more than 4 groups in addition to the
												//                 ; "::" and IPv4-address-literal may be present.

												var index = -1;
												var addressLiteral = parseData.literal;
												var matchesIP = internals.regex.ipV4.exec(addressLiteral);

												// Maybe extract IPv4 part from the end of the address-literal
												if (matchesIP) {
													index = matchesIP.index;
													if (index !== 0) {
														// Convert IPv4 part to IPv6 format for futher testing
														addressLiteral = addressLiteral.slice(0, index) + '0:0';
													}
												}

												if (index === 0) {
													// Nothing there except a valid IPv4 address, so...
													updateResult(internals.diagnoses.rfc5321AddressLiteral);
												} else if (addressLiteral.slice(0, 5).toLowerCase() !== 'ipv6:') {
													updateResult(internals.diagnoses.rfc5322DomainLiteral);
												} else {
													var match = addressLiteral.slice(5);
													var maxGroups = internals.maxIPv6Groups;
													var groups = match.split(':');
													index = match.indexOf('::');

													if (!~index) {
														// Need exactly the right number of groups
														if (groups.length !== maxGroups) {
															updateResult(internals.diagnoses.rfc5322IPv6GroupCount);
														}
													} else if (index !== match.lastIndexOf('::')) {
														updateResult(internals.diagnoses.rfc5322IPv62x2xColon);
													} else {
														if (index === 0 || index === match.length - 2) {
															// RFC 4291 allows :: at the start or end of an address with 7 other groups in addition
															++maxGroups;
														}

														if (groups.length > maxGroups) {
															updateResult(internals.diagnoses.rfc5322IPv6MaxGroups);
														} else if (groups.length === maxGroups) {
															// Eliding a single "::"
															updateResult(internals.diagnoses.deprecatedIPv6);
														}
													}

													// IPv6 testing strategy
													if (match[0] === ':' && match[1] !== ':') {
														updateResult(internals.diagnoses.rfc5322IPv6ColonStart);
													} else if (match[match.length - 1] === ':' && match[match.length - 2] !== ':') {
														updateResult(internals.diagnoses.rfc5322IPv6ColonEnd);
													} else if (internals.checkIpV6(groups)) {
														updateResult(internals.diagnoses.rfc5321AddressLiteral);
													} else {
														updateResult(internals.diagnoses.rfc5322IPv6BadCharacter);
													}
												}
											} else {
												updateResult(internals.diagnoses.rfc5322DomainLiteral);
											}

											parseData.domain += token;
											atomData.domains[elementCount] += token;
											++elementLength;
											context.prev = context.now;
											context.now = context.stack.pop();
											break;

										case '\\':
											updateResult(internals.diagnoses.rfc5322DomainLiteralOBSDText);
											context.stack.push(context.now);
											context.now = internals.components.contextQuotedPair;
											break;

										// Folding white space
										case '\r':
											if (emailLength === ++i || email[i] !== '\n') {
												updateResult(internals.diagnoses.errCRNoLF);
												break;
											}

										// Fallthrough

										case ' ':
										case '\t':
											updateResult(internals.diagnoses.cfwsFWS);

											context.stack.push(context.now);
											context.now = internals.components.contextFWS;
											prevToken = token;
											break;

										// DTEXT
										default:
											// http://tools.ietf.org/html/rfc5322#section-3.4.1
											//   dtext         =   %d33-90 /  ; Printable US-ASCII
											//                     %d94-126 / ;  characters not including
											//                     obs-dtext  ;  "[", "]", or "\"
											//
											//   obs-dtext     =   obs-NO-WS-CTL / quoted-pair
											//
											//   obs-NO-WS-CTL =   %d1-8 /    ; US-ASCII control
											//                     %d11 /     ;  characters that do not
											//                     %d12 /     ;  include the carriage
											//                     %d14-31 /  ;  return, line feed, and
											//                     %d127      ;  white space characters
											charCode = token.charCodeAt(0);

											// '\r', '\n', ' ', and '\t' have already been parsed above
											if (charCode > 127 || charCode === 0 || token === '[') {
												// Fatal error
												updateResult(internals.diagnoses.errExpectingDTEXT);
												break;
											} else if (charCode < 33 || charCode === 127) {
												updateResult(internals.diagnoses.rfc5322DomainLiteralOBSDText);
											}

											parseData.literal += token;
											parseData.domain += token;
											atomData.domains[elementCount] += token;
											++elementLength;
									}

									break;

								// Quoted string
								case internals.components.contextQuotedString:
									// http://tools.ietf.org/html/rfc5322#section-3.2.4
									//   quoted-string = [CFWS]
									//                   DQUOTE *([FWS] qcontent) [FWS] DQUOTE
									//                   [CFWS]
									//
									//   qcontent      = qtext / quoted-pair
									switch (token) {
										// Quoted pair
										case '\\':
											context.stack.push(context.now);
											context.now = internals.components.contextQuotedPair;
											break;

										// Folding white space. Spaces are allowed as regular characters inside a quoted string - it's only FWS if we include '\t' or '\r\n'
										case '\r':
											if (emailLength === ++i || email[i] !== '\n') {
												// Fatal error
												updateResult(internals.diagnoses.errCRNoLF);
												break;
											}

										// Fallthrough

										case '\t':
											// http://tools.ietf.org/html/rfc5322#section-3.2.2
											//   Runs of FWS, comment, or CFWS that occur between lexical tokens in
											//   a structured header field are semantically interpreted as a single
											//   space character.

											// http://tools.ietf.org/html/rfc5322#section-3.2.4
											//   the CRLF in any FWS/CFWS that appears within the quoted-string [is]
											//   semantically "invisible" and therefore not part of the
											//   quoted-string

											parseData.local += ' ';
											atomData.locals[elementCount] += ' ';
											++elementLength;

											updateResult(internals.diagnoses.cfwsFWS);
											context.stack.push(context.now);
											context.now = internals.components.contextFWS;
											prevToken = token;
											break;

										// End of quoted string
										case '"':
											parseData.local += token;
											atomData.locals[elementCount] += token;
											++elementLength;
											context.prev = context.now;
											context.now = context.stack.pop();
											break;

										// QTEXT
										default:
											// http://tools.ietf.org/html/rfc5322#section-3.2.4
											//   qtext          =   %d33 /             ; Printable US-ASCII
											//                      %d35-91 /          ;  characters not including
											//                      %d93-126 /         ;  "\" or the quote character
											//                      obs-qtext
											//
											//   obs-qtext      =   obs-NO-WS-CTL
											//
											//   obs-NO-WS-CTL  =   %d1-8 /            ; US-ASCII control
											//                      %d11 /             ;  characters that do not
											//                      %d12 /             ;  include the carriage
											//                      %d14-31 /          ;  return, line feed, and
											//                      %d127              ;  white space characters
											charCode = token.charCodeAt(0);

											if (charCode > 127 || charCode === 0 || charCode === 10) {
												updateResult(internals.diagnoses.errExpectingQTEXT);
											} else if (charCode < 32 || charCode === 127) {
												updateResult(internals.diagnoses.deprecatedQTEXT);
											}

											parseData.local += token;
											atomData.locals[elementCount] += token;
											++elementLength;
									}

									// http://tools.ietf.org/html/rfc5322#section-3.4.1
									//   If the string can be represented as a dot-atom (that is, it contains
									//   no characters other than atext characters or "." surrounded by atext
									//   characters), then the dot-atom form SHOULD be used and the quoted-
									//   string form SHOULD NOT be used.

									break;
								// Quoted pair
								case internals.components.contextQuotedPair:
									// http://tools.ietf.org/html/rfc5322#section-3.2.1
									//   quoted-pair     =   ("\" (VCHAR / WSP)) / obs-qp
									//
									//   VCHAR           =  %d33-126   ; visible (printing) characters
									//   WSP             =  SP / HTAB  ; white space
									//
									//   obs-qp          =   "\" (%d0 / obs-NO-WS-CTL / LF / CR)
									//
									//   obs-NO-WS-CTL   =   %d1-8 /   ; US-ASCII control
									//                       %d11 /    ;  characters that do not
									//                       %d12 /    ;  include the carriage
									//                       %d14-31 / ;  return, line feed, and
									//                       %d127     ;  white space characters
									//
									// i.e. obs-qp       =  "\" (%d0-8, %d10-31 / %d127)
									charCode = token.charCodeAt(0);

									if (charCode > 127) {
										// Fatal error
										updateResult(internals.diagnoses.errExpectingQPair);
									} else if (charCode < 31 && charCode !== 9 || charCode === 127) {
										// ' ' and '\t' are allowed
										updateResult(internals.diagnoses.deprecatedQP);
									}

									// At this point we know where this qpair occurred so we could check to see if the character actually needed to be quoted at all.
									// http://tools.ietf.org/html/rfc5321#section-4.1.2
									//   the sending system SHOULD transmit the form that uses the minimum quoting possible.

									context.prev = context.now;
									// End of qpair
									context.now = context.stack.pop();
									token = '\\' + token;

									switch (context.now) {
										case internals.components.contextComment:
											break;

										case internals.components.contextQuotedString:
											parseData.local += token;
											atomData.locals[elementCount] += token;

											// The maximum sizes specified by RFC 5321 are octet counts, so we must include the backslash
											elementLength += 2;
											break;

										case internals.components.literal:
											parseData.domain += token;
											atomData.domains[elementCount] += token;

											// The maximum sizes specified by RFC 5321 are octet counts, so we must include the backslash
											elementLength += 2;
											break;

										// $lab:coverage:off$
										default:
											throw new Error('quoted pair logic invoked in an invalid context: ' + context.now);
										// $lab:coverage:on$
									}
									break;

								// Comment
								case internals.components.contextComment:
									// http://tools.ietf.org/html/rfc5322#section-3.2.2
									//   comment  = "(" *([FWS] ccontent) [FWS] ")"
									//
									//   ccontent = ctext / quoted-pair / comment
									switch (token) {
										// Nested comment
										case '(':
											// Nested comments are ok
											context.stack.push(context.now);
											context.now = internals.components.contextComment;
											break;

										// End of comment
										case ')':
											context.prev = context.now;
											context.now = context.stack.pop();
											break;

										// Quoted pair
										case '\\':
											context.stack.push(context.now);
											context.now = internals.components.contextQuotedPair;
											break;

										// Folding white space
										case '\r':
											if (emailLength === ++i || email[i] !== '\n') {
												// Fatal error
												updateResult(internals.diagnoses.errCRNoLF);
												break;
											}

										// Fallthrough

										case ' ':
										case '\t':
											updateResult(internals.diagnoses.cfwsFWS);

											context.stack.push(context.now);
											context.now = internals.components.contextFWS;
											prevToken = token;
											break;

										// CTEXT
										default:
											// http://tools.ietf.org/html/rfc5322#section-3.2.3
											//   ctext         = %d33-39 /  ; Printable US-ASCII
											//                   %d42-91 /  ;  characters not including
											//                   %d93-126 / ;  "(", ")", or "\"
											//                   obs-ctext
											//
											//   obs-ctext     = obs-NO-WS-CTL
											//
											//   obs-NO-WS-CTL = %d1-8 /    ; US-ASCII control
											//                   %d11 /     ;  characters that do not
											//                   %d12 /     ;  include the carriage
											//                   %d14-31 /  ;  return, line feed, and
											//                   %d127      ;  white space characters
											charCode = token.charCodeAt(0);

											if (charCode > 127 || charCode === 0 || charCode === 10) {
												// Fatal error
												updateResult(internals.diagnoses.errExpectingCTEXT);
												break;
											} else if (charCode < 32 || charCode === 127) {
												updateResult(internals.diagnoses.deprecatedCTEXT);
											}
									}

									break;

								// Folding white space
								case internals.components.contextFWS:
									// http://tools.ietf.org/html/rfc5322#section-3.2.2
									//   FWS     =   ([*WSP CRLF] 1*WSP) /  obs-FWS
									//                                   ; Folding white space

									// But note the erratum:
									// http://www.rfc-editor.org/errata_search.php?rfc=5322&eid=1908:
									//   In the obsolete syntax, any amount of folding white space MAY be
									//   inserted where the obs-FWS rule is allowed.  This creates the
									//   possibility of having two consecutive "folds" in a line, and
									//   therefore the possibility that a line which makes up a folded header
									//   field could be composed entirely of white space.
									//
									//   obs-FWS =   1*([CRLF] WSP)

									if (prevToken === '\r') {
										if (token === '\r') {
											// Fatal error
											updateResult(internals.diagnoses.errFWSCRLFx2);
											break;
										}

										if (++crlfCount > 1) {
											// Multiple folds => obsolete FWS
											updateResult(internals.diagnoses.deprecatedFWS);
										} else {
											crlfCount = 1;
										}
									}

									switch (token) {
										case '\r':
											if (emailLength === ++i || email[i] !== '\n') {
												// Fatal error
												updateResult(internals.diagnoses.errCRNoLF);
											}

											break;

										case ' ':
										case '\t':
											break;

										default:
											if (prevToken === '\r') {
												// Fatal error
												updateResult(internals.diagnoses.errFWSCRLFEnd);
											}

											crlfCount = 0;

											// End of FWS
											context.prev = context.now;
											context.now = context.stack.pop();

											// Look at this token again in the parent context
											--i;
									}

									prevToken = token;
									break;

								// Unexpected context
								// $lab:coverage:off$
								default:
									throw new Error('unknown context: ' + context.now);
								// $lab:coverage:on$
							} // Primary state machine

							if (maxResult > internals.categories.rfc5322) {
								// Fatal error, no point continuing
								break;
							}
						} // Token loop

						// Check for errors
						if (maxResult < internals.categories.rfc5322) {
							// Fatal errors
							if (context.now === internals.components.contextQuotedString) {
								updateResult(internals.diagnoses.errUnclosedQuotedString);
							} else if (context.now === internals.components.contextQuotedPair) {
								updateResult(internals.diagnoses.errBackslashEnd);
							} else if (context.now === internals.components.contextComment) {
								updateResult(internals.diagnoses.errUnclosedComment);
							} else if (context.now === internals.components.literal) {
								updateResult(internals.diagnoses.errUnclosedDomainLiteral);
							} else if (token === '\r') {
								updateResult(internals.diagnoses.errFWSCRLFEnd);
							} else if (parseData.domain.length === 0) {
								updateResult(internals.diagnoses.errNoDomain);
							} else if (elementLength === 0) {
								updateResult(internals.diagnoses.errDotEnd);
							} else if (hyphenFlag) {
								updateResult(internals.diagnoses.errDomainHyphenEnd);
							}

							// Other errors
							else if (parseData.domain.length > 255) {
									// http://tools.ietf.org/html/rfc5321#section-4.5.3.1.2
									//   The maximum total length of a domain name or number is 255 octets.
									updateResult(internals.diagnoses.rfc5322DomainTooLong);
								} else if (parseData.local.length + parseData.domain.length + /* '@' */1 > 254) {
									// http://tools.ietf.org/html/rfc5321#section-4.1.2
									//   Forward-path   = Path
									//
									//   Path           = "<" [ A-d-l ":" ] Mailbox ">"
									//
									// http://tools.ietf.org/html/rfc5321#section-4.5.3.1.3
									//   The maximum total length of a reverse-path or forward-path is 256 octets (including the punctuation and element separators).
									//
									// Thus, even without (obsolete) routing information, the Mailbox can only be 254 characters long. This is confirmed by this verified
									// erratum to RFC 3696:
									//
									// http://www.rfc-editor.org/errata_search.php?rfc=3696&eid=1690
									//   However, there is a restriction in RFC 2821 on the length of an address in MAIL and RCPT commands of 254 characters.  Since
									//   addresses that do not fit in those fields are not normally useful, the upper limit on address lengths should normally be considered
									//   to be 254.
									updateResult(internals.diagnoses.rfc5322TooLong);
								} else if (elementLength > 63) {
									// http://tools.ietf.org/html/rfc1035#section-2.3.4
									// labels   63 octets or less
									updateResult(internals.diagnoses.rfc5322LabelTooLong);
								} else if (options.minDomainAtoms && atomData.domains.length < options.minDomainAtoms) {
									updateResult(internals.diagnoses.errDomainTooShort);
								} else if (options.tldWhitelist || options.tldBlacklist) {
									var tldAtom = atomData.domains[elementCount];

									if (!internals.validDomain(tldAtom, options)) {
										updateResult(internals.diagnoses.errUnknownTLD);
									}
								}
						} // Check for errors

						var dnsPositive = false;
						var finishImmediately = false;

						var finish = function finish() {

							if (!dnsPositive && maxResult < internals.categories.dnsWarn) {
								// Per RFC 5321, domain atoms are limited to letter-digit-hyphen, so we only need to check code <= 57 to check for a digit
								var code = atomData.domains[elementCount].charCodeAt(0);
								if (code <= 57) {
									updateResult(internals.diagnoses.rfc5321TLDNumeric);
								} else if (elementCount === 0) {
									updateResult(internals.diagnoses.rfc5321TLD);
								}
							}

							if (maxResult < threshold) {
								maxResult = internals.diagnoses.valid;
							}

							var finishResult = diagnose ? maxResult : maxResult < internals.defaultThreshold;

							if (callback) {
								if (finishImmediately) {
									callback(finishResult);
								} else {
									internals.defer(callback.bind(null, finishResult));
								}
							}

							return finishResult;
						}; // Finish

						if (options.checkDNS && maxResult < internals.categories.dnsWarn) {
							(function () {
								// http://tools.ietf.org/html/rfc5321#section-2.3.5
								//   Names that can be resolved to MX RRs or address (i.e., A or AAAA) RRs (as discussed in Section 5) are permitted, as are CNAME RRs whose
								//   targets can be resolved, in turn, to MX or address RRs.
								//
								// http://tools.ietf.org/html/rfc5321#section-5.1
								//   The lookup first attempts to locate an MX record associated with the name.  If a CNAME record is found, the resulting name is processed
								//   as if it were the initial name. ... If an empty list of MXs is returned, the address is treated as if it was associated with an implicit
								//   MX RR, with a preference of 0, pointing to that host.
								//
								// isEmail() author's note: We will regard the existence of a CNAME to be sufficient evidence of the domain's existence. For performance
								// reasons we will not repeat the DNS lookup for the CNAME's target, but we will raise a warning because we didn't immediately find an MX
								// record.
								if (elementCount === 0) {
									// Checking TLD DNS only works if you explicitly check from the root
									parseData.domain += '.';
								}

								var dnsDomain = parseData.domain;
								Dns.resolveMx(dnsDomain, function (err, mxRecords) {

									// If we have a fatal error, then we must assume that there are no records
									if (err && err.code !== Dns.NODATA) {
										updateResult(internals.diagnoses.dnsWarnNoRecord);
										return finish();
									}

									if (mxRecords && mxRecords.length) {
										dnsPositive = true;
										return finish();
									}

									var count = 3;
									var done = false;
									updateResult(internals.diagnoses.dnsWarnNoMXRecord);

									var handleRecords = function handleRecords(ignoreError, records) {

										if (done) {
											return;
										}

										--count;

										if (records && records.length) {
											done = true;
											return finish();
										}

										if (count === 0) {
											// No usable records for the domain can be found
											updateResult(internals.diagnoses.dnsWarnNoRecord);
											done = true;
											finish();
										}
									};

									Dns.resolveCname(dnsDomain, handleRecords);
									Dns.resolve4(dnsDomain, handleRecords);
									Dns.resolve6(dnsDomain, handleRecords);
								});

								finishImmediately = true;
							})();
						} else {
							var result = finish();
							finishImmediately = true;
							return result;
						} // CheckDNS
					};

					exports.diagnoses = internals.validate.diagnoses = function () {

						var diag = {};
						var keys = Object.keys(internals.diagnoses);
						for (var i = 0; i < keys.length; ++i) {
							var key = keys[i];
							diag[key] = internals.diagnoses[key];
						}

						return diag;
					}();
					/* WEBPACK VAR INJECTION */
				}).call(exports, __webpack_require__(4));

				/***/
			},
			/* 23 */
			/***/function (module, exports, __webpack_require__) {

				'use strict';

				// Load modules

				function _defaults(obj, defaults$$1) {
					var keys = Object.getOwnPropertyNames(defaults$$1);for (var i = 0; i < keys.length; i++) {
						var key = keys[i];var value = Object.getOwnPropertyDescriptor(defaults$$1, key);if (value && value.configurable && obj[key] === undefined) {
							Object.defineProperty(obj, key, value);
						}
					}return obj;
				}

				function _classCallCheck(instance, Constructor) {
					if (!(instance instanceof Constructor)) {
						throw new TypeError("Cannot call a class as a function");
					}
				}

				function _possibleConstructorReturn(self, call) {
					if (!self) {
						throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
					}return call && ((typeof call === 'undefined' ? 'undefined' : _typeof(call)) === "object" || typeof call === "function") ? call : self;
				}

				function _inherits(subClass, superClass) {
					if (typeof superClass !== "function" && superClass !== null) {
						throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));
					}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass);
				}

				var Any = __webpack_require__(11);
				var Ref = __webpack_require__(12);
				var Hoek = __webpack_require__(2);

				// Declare internals

				var internals = {
					precisionRx: /(?:\.(\d+))?(?:[eE]([+-]?\d+))?$/
				};

				internals.Number = function (_Any) {
					_inherits(_class, _Any);

					function _class() {
						_classCallCheck(this, _class);

						var _this = _possibleConstructorReturn(this, _Any.call(this));

						_this._type = 'number';
						_this._invalids.add(Infinity);
						_this._invalids.add(-Infinity);
						return _this;
					}

					_class.prototype._base = function _base(value, state, options) {

						var result = {
							errors: null,
							value: value
						};

						if (typeof value === 'string' && options.convert) {

							var number = parseFloat(value);
							result.value = isNaN(number) || !isFinite(value) ? NaN : number;
						}

						var isNumber = typeof result.value === 'number' && !isNaN(result.value);

						if (options.convert && 'precision' in this._flags && isNumber) {

							// This is conceptually equivalent to using toFixed but it should be much faster
							var precision = Math.pow(10, this._flags.precision);
							result.value = Math.round(result.value * precision) / precision;
						}

						result.errors = isNumber ? null : this.createError('number.base', null, state, options);
						return result;
					};

					_class.prototype.multiple = function multiple(base) {

						var isRef = Ref.isRef(base);

						if (!isRef) {
							Hoek.assert(typeof base === 'number' && isFinite(base), 'multiple must be a number');
							Hoek.assert(base > 0, 'multiple must be greater than 0');
						}

						return this._test('multiple', base, function (value, state, options) {

							var divisor = isRef ? base(state.reference || state.parent, options) : base;

							if (isRef && (typeof divisor !== 'number' || !isFinite(divisor))) {
								return this.createError('number.ref', { ref: base.key }, state, options);
							}

							if (value % divisor === 0) {
								return value;
							}

							return this.createError('number.multiple', { multiple: base, value: value }, state, options);
						});
					};

					_class.prototype.integer = function integer() {

						return this._test('integer', undefined, function (value, state, options) {

							return Number.isSafeInteger(value) ? value : this.createError('number.integer', { value: value }, state, options);
						});
					};

					_class.prototype.negative = function negative() {

						return this._test('negative', undefined, function (value, state, options) {

							if (value < 0) {
								return value;
							}

							return this.createError('number.negative', { value: value }, state, options);
						});
					};

					_class.prototype.positive = function positive() {

						return this._test('positive', undefined, function (value, state, options) {

							if (value > 0) {
								return value;
							}

							return this.createError('number.positive', { value: value }, state, options);
						});
					};

					_class.prototype.precision = function precision(limit) {

						Hoek.assert(Number.isSafeInteger(limit), 'limit must be an integer');
						Hoek.assert(!('precision' in this._flags), 'precision already set');

						var obj = this._test('precision', limit, function (value, state, options) {

							var places = value.toString().match(internals.precisionRx);
							var decimals = Math.max((places[1] ? places[1].length : 0) - (places[2] ? parseInt(places[2], 10) : 0), 0);
							if (decimals <= limit) {
								return value;
							}

							return this.createError('number.precision', { limit: limit, value: value }, state, options);
						});

						obj._flags.precision = limit;
						return obj;
					};

					return _class;
				}(Any);

				internals.compare = function (type, compare) {

					return function (limit) {

						var isRef = Ref.isRef(limit);
						var isNumber = typeof limit === 'number' && !isNaN(limit);

						Hoek.assert(isNumber || isRef, 'limit must be a number or reference');

						return this._test(type, limit, function (value, state, options) {

							var compareTo = void 0;
							if (isRef) {
								compareTo = limit(state.reference || state.parent, options);

								if (!(typeof compareTo === 'number' && !isNaN(compareTo))) {
									return this.createError('number.ref', { ref: limit.key }, state, options);
								}
							} else {
								compareTo = limit;
							}

							if (compare(value, compareTo)) {
								return value;
							}

							return this.createError('number.' + type, { limit: compareTo, value: value }, state, options);
						});
					};
				};

				internals.Number.prototype.min = internals.compare('min', function (value, limit) {
					return value >= limit;
				});
				internals.Number.prototype.max = internals.compare('max', function (value, limit) {
					return value <= limit;
				});
				internals.Number.prototype.greater = internals.compare('greater', function (value, limit) {
					return value > limit;
				});
				internals.Number.prototype.less = internals.compare('less', function (value, limit) {
					return value < limit;
				});

				module.exports = new internals.Number();

				/***/
			},
			/* 24 */
			/***/function (module, exports, __webpack_require__) {

				'use strict';

				// Load modules

				function _defaults(obj, defaults$$1) {
					var keys = Object.getOwnPropertyNames(defaults$$1);for (var i = 0; i < keys.length; i++) {
						var key = keys[i];var value = Object.getOwnPropertyDescriptor(defaults$$1, key);if (value && value.configurable && obj[key] === undefined) {
							Object.defineProperty(obj, key, value);
						}
					}return obj;
				}

				function _classCallCheck(instance, Constructor) {
					if (!(instance instanceof Constructor)) {
						throw new TypeError("Cannot call a class as a function");
					}
				}

				function _possibleConstructorReturn(self, call) {
					if (!self) {
						throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
					}return call && ((typeof call === 'undefined' ? 'undefined' : _typeof(call)) === "object" || typeof call === "function") ? call : self;
				}

				function _inherits(subClass, superClass) {
					if (typeof superClass !== "function" && superClass !== null) {
						throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));
					}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass);
				}

				var Any = __webpack_require__(11);
				var Hoek = __webpack_require__(2);

				// Declare internals

				var internals = {
					Set: __webpack_require__(15)
				};

				internals.Boolean = function (_Any) {
					_inherits(_class, _Any);

					function _class() {
						_classCallCheck(this, _class);

						var _this = _possibleConstructorReturn(this, _Any.call(this));

						_this._type = 'boolean';
						_this._flags.insensitive = true;
						_this._inner.truthySet = new internals.Set();
						_this._inner.falsySet = new internals.Set();
						return _this;
					}

					_class.prototype._base = function _base(value, state, options) {

						var result = {
							value: value
						};

						if (typeof value === 'string' && options.convert) {

							var normalized = this._flags.insensitive ? value.toLowerCase() : value;
							result.value = normalized === 'true' ? true : normalized === 'false' ? false : value;
						}

						if (typeof result.value !== 'boolean') {
							result.value = this._inner.truthySet.has(value, null, null, this._flags.insensitive) ? true : this._inner.falsySet.has(value, null, null, this._flags.insensitive) ? false : value;
						}

						result.errors = typeof result.value === 'boolean' ? null : this.createError('boolean.base', null, state, options);
						return result;
					};

					_class.prototype.truthy = function truthy() {

						var obj = this.clone();
						var values = Hoek.flatten(Array.prototype.slice.call(arguments));
						for (var i = 0; i < values.length; ++i) {
							var value = values[i];

							Hoek.assert(value !== undefined, 'Cannot call truthy with undefined');
							obj._inner.truthySet.add(value);
						}
						return obj;
					};

					_class.prototype.falsy = function falsy() {

						var obj = this.clone();
						var values = Hoek.flatten(Array.prototype.slice.call(arguments));
						for (var i = 0; i < values.length; ++i) {
							var value = values[i];

							Hoek.assert(value !== undefined, 'Cannot call falsy with undefined');
							obj._inner.falsySet.add(value);
						}
						return obj;
					};

					_class.prototype.insensitive = function insensitive(enabled) {

						var insensitive = enabled === undefined ? true : !!enabled;

						if (this._flags.insensitive === insensitive) {
							return this;
						}

						var obj = this.clone();
						obj._flags.insensitive = insensitive;
						return obj;
					};

					_class.prototype.describe = function describe() {

						var description = Any.prototype.describe.call(this);
						description.truthy = [true].concat(this._inner.truthySet.values());
						description.falsy = [false].concat(this._inner.falsySet.values());
						return description;
					};

					return _class;
				}(Any);

				module.exports = new internals.Boolean();

				/***/
			},
			/* 25 */
			/***/function (module, exports, __webpack_require__) {

				'use strict';

				// Load modules

				var _typeof$$1 = typeof Symbol === "function" && _typeof(Symbol.iterator) === "symbol" ? function (obj) {
					return typeof obj === 'undefined' ? 'undefined' : _typeof(obj);
				} : function (obj) {
					return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === 'undefined' ? 'undefined' : _typeof(obj);
				};

				function _defaults(obj, defaults$$1) {
					var keys = Object.getOwnPropertyNames(defaults$$1);for (var i = 0; i < keys.length; i++) {
						var key = keys[i];var value = Object.getOwnPropertyDescriptor(defaults$$1, key);if (value && value.configurable && obj[key] === undefined) {
							Object.defineProperty(obj, key, value);
						}
					}return obj;
				}

				function _classCallCheck(instance, Constructor) {
					if (!(instance instanceof Constructor)) {
						throw new TypeError("Cannot call a class as a function");
					}
				}

				function _possibleConstructorReturn(self, call) {
					if (!self) {
						throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
					}return call && ((typeof call === 'undefined' ? 'undefined' : _typeof(call)) === "object" || typeof call === "function") ? call : self;
				}

				function _inherits(subClass, superClass) {
					if (typeof superClass !== "function" && superClass !== null) {
						throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));
					}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass);
				}

				var Hoek = __webpack_require__(2);
				var Any = __webpack_require__(11);
				var Cast = __webpack_require__(16);
				var Ref = __webpack_require__(12);

				// Declare internals

				var internals = {};

				internals.Alternatives = function (_Any) {
					_inherits(_class, _Any);

					function _class() {
						_classCallCheck(this, _class);

						var _this = _possibleConstructorReturn(this, _Any.call(this));

						_this._type = 'alternatives';
						_this._invalids.remove(null);
						_this._inner.matches = [];
						return _this;
					}

					_class.prototype._base = function _base(value, state, options) {

						var errors = [];
						var il = this._inner.matches.length;
						var baseType = this._baseType;

						for (var i = 0; i < il; ++i) {
							var item = this._inner.matches[i];
							var schema = item.schema;
							if (!schema) {
								var failed = item.is._validate(item.ref(state.reference || state.parent, options), null, options, state.parent).errors;

								if (failed) {
									if (item.otherwise) {
										return item.otherwise._validate(value, state, options);
									}
								} else if (item.then) {
									return item.then._validate(value, state, options);
								}

								if (i === il - 1 && baseType) {
									return baseType._validate(value, state, options);
								}

								continue;
							}

							var result = schema._validate(value, state, options);
							if (!result.errors) {
								// Found a valid match
								return result;
							}

							errors = errors.concat(result.errors);
						}

						if (errors.length) {
							return { errors: this.createError('alternatives.child', { reason: errors }, state, options) };
						}

						return { errors: this.createError('alternatives.base', null, state, options) };
					};

					_class.prototype.try = function _try() /* schemas */{

						var schemas = Hoek.flatten(Array.prototype.slice.call(arguments));
						Hoek.assert(schemas.length, 'Cannot add other alternatives without at least one schema');

						var obj = this.clone();

						for (var i = 0; i < schemas.length; ++i) {
							var cast = Cast.schema(schemas[i]);
							if (cast._refs.length) {
								obj._refs = obj._refs.concat(cast._refs);
							}
							obj._inner.matches.push({ schema: cast });
						}

						return obj;
					};

					_class.prototype.when = function when(ref, options) {

						Hoek.assert(Ref.isRef(ref) || typeof ref === 'string', 'Invalid reference:', ref);
						Hoek.assert(options, 'Missing options');
						Hoek.assert((typeof options === 'undefined' ? 'undefined' : _typeof$$1(options)) === 'object', 'Invalid options');
						Hoek.assert(options.hasOwnProperty('is'), 'Missing "is" directive');
						Hoek.assert(options.then !== undefined || options.otherwise !== undefined, 'options must have at least one of "then" or "otherwise"');

						var obj = this.clone();
						var is = Cast.schema(options.is);

						if (options.is === null || !(Ref.isRef(options.is) || options.is instanceof Any)) {

							// Only apply required if this wasn't already a schema or a ref, we'll suppose people know what they're doing
							is = is.required();
						}

						var item = {
							ref: Cast.ref(ref),
							is: is,
							then: options.then !== undefined ? Cast.schema(options.then) : undefined,
							otherwise: options.otherwise !== undefined ? Cast.schema(options.otherwise) : undefined
						};

						if (obj._baseType) {

							item.then = item.then && obj._baseType.concat(item.then);
							item.otherwise = item.otherwise && obj._baseType.concat(item.otherwise);
						}

						Ref.push(obj._refs, item.ref);
						obj._refs = obj._refs.concat(item.is._refs);

						if (item.then && item.then._refs) {
							obj._refs = obj._refs.concat(item.then._refs);
						}

						if (item.otherwise && item.otherwise._refs) {
							obj._refs = obj._refs.concat(item.otherwise._refs);
						}

						obj._inner.matches.push(item);

						return obj;
					};

					_class.prototype.describe = function describe() {

						var description = Any.prototype.describe.call(this);
						var alternatives = [];
						for (var i = 0; i < this._inner.matches.length; ++i) {
							var item = this._inner.matches[i];
							if (item.schema) {

								// try()

								alternatives.push(item.schema.describe());
							} else {

								// when()

								var when = {
									ref: item.ref.toString(),
									is: item.is.describe()
								};

								if (item.then) {
									when.then = item.then.describe();
								}

								if (item.otherwise) {
									when.otherwise = item.otherwise.describe();
								}

								alternatives.push(when);
							}
						}

						description.alternatives = alternatives;
						return description;
					};

					return _class;
				}(Any);

				module.exports = new internals.Alternatives();

				/***/
			},
			/* 26 */
			/***/function (module, exports, __webpack_require__) {

				'use strict';

				// Load modules

				var _typeof$$1 = typeof Symbol === "function" && _typeof(Symbol.iterator) === "symbol" ? function (obj) {
					return typeof obj === 'undefined' ? 'undefined' : _typeof(obj);
				} : function (obj) {
					return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === 'undefined' ? 'undefined' : _typeof(obj);
				};

				function _defaults(obj, defaults$$1) {
					var keys = Object.getOwnPropertyNames(defaults$$1);for (var i = 0; i < keys.length; i++) {
						var key = keys[i];var value = Object.getOwnPropertyDescriptor(defaults$$1, key);if (value && value.configurable && obj[key] === undefined) {
							Object.defineProperty(obj, key, value);
						}
					}return obj;
				}

				function _classCallCheck(instance, Constructor) {
					if (!(instance instanceof Constructor)) {
						throw new TypeError("Cannot call a class as a function");
					}
				}

				function _possibleConstructorReturn(self, call) {
					if (!self) {
						throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
					}return call && ((typeof call === 'undefined' ? 'undefined' : _typeof(call)) === "object" || typeof call === "function") ? call : self;
				}

				function _inherits(subClass, superClass) {
					if (typeof superClass !== "function" && superClass !== null) {
						throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));
					}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass);
				}

				var Hoek = __webpack_require__(2);
				var Topo = __webpack_require__(27);
				var Any = __webpack_require__(11);
				var Errors = __webpack_require__(13);
				var Cast = __webpack_require__(16);
				var Ref = __webpack_require__(12);

				// Declare internals

				var internals = {};

				internals.Object = function (_Any) {
					_inherits(_class, _Any);

					function _class() {
						_classCallCheck(this, _class);

						var _this = _possibleConstructorReturn(this, _Any.call(this));

						_this._type = 'object';
						_this._inner.children = null;
						_this._inner.renames = [];
						_this._inner.dependencies = [];
						_this._inner.patterns = [];
						return _this;
					}

					_class.prototype._base = function _base(value, state, options) {

						var target = value;
						var errors = [];
						var finish = function finish() {

							return {
								value: target,
								errors: errors.length ? errors : null
							};
						};

						if (typeof value === 'string' && options.convert) {

							value = internals.safeParse(value);
						}

						var type = this._flags.func ? 'function' : 'object';
						if (!value || (typeof value === 'undefined' ? 'undefined' : _typeof$$1(value)) !== type || Array.isArray(value)) {

							errors.push(this.createError(type + '.base', null, state, options));
							return finish();
						}

						// Skip if there are no other rules to test

						if (!this._inner.renames.length && !this._inner.dependencies.length && !this._inner.children && // null allows any keys
						!this._inner.patterns.length) {

							target = value;
							return finish();
						}

						// Ensure target is a local copy (parsed) or shallow copy

						if (target === value) {
							if (type === 'object') {
								target = Object.create(Object.getPrototypeOf(value));
							} else {
								target = function target() {

									return value.apply(this, arguments);
								};

								target.prototype = Hoek.clone(value.prototype);
							}

							var valueKeys = Object.keys(value);
							for (var i = 0; i < valueKeys.length; ++i) {
								target[valueKeys[i]] = value[valueKeys[i]];
							}
						} else {
							target = value;
						}

						// Rename keys

						var renamed = {};
						for (var _i = 0; _i < this._inner.renames.length; ++_i) {
							var rename = this._inner.renames[_i];

							if (rename.options.ignoreUndefined && target[rename.from] === undefined) {
								continue;
							}

							if (!rename.options.multiple && renamed[rename.to]) {

								errors.push(this.createError('object.rename.multiple', { from: rename.from, to: rename.to }, state, options));
								if (options.abortEarly) {
									return finish();
								}
							}

							if (Object.prototype.hasOwnProperty.call(target, rename.to) && !rename.options.override && !renamed[rename.to]) {

								errors.push(this.createError('object.rename.override', { from: rename.from, to: rename.to }, state, options));
								if (options.abortEarly) {
									return finish();
								}
							}

							if (target[rename.from] === undefined) {
								delete target[rename.to];
							} else {
								target[rename.to] = target[rename.from];
							}

							renamed[rename.to] = true;

							if (!rename.options.alias) {
								delete target[rename.from];
							}
						}

						// Validate schema

						if (!this._inner.children && // null allows any keys
						!this._inner.patterns.length && !this._inner.dependencies.length) {

							return finish();
						}

						var unprocessed = Hoek.mapToObject(Object.keys(target));

						if (this._inner.children) {
							var stripProps = [];

							for (var _i2 = 0; _i2 < this._inner.children.length; ++_i2) {
								var child = this._inner.children[_i2];
								var key = child.key;
								var item = target[key];

								delete unprocessed[key];

								var localState = { key: key, path: (state.path || '') + (state.path && key ? '.' : '') + key, parent: target, reference: state.reference };
								var result = child.schema._validate(item, localState, options);
								if (result.errors) {
									errors.push(this.createError('object.child', { key: key, child: child.schema._getLabel(key), reason: result.errors }, localState, options));

									if (options.abortEarly) {
										return finish();
									}
								} else {
									if (child.schema._flags.strip || result.value === undefined && result.value !== item) {
										stripProps.push(key);
										target[key] = result.finalValue;
									} else if (result.value !== undefined) {
										target[key] = result.value;
									}
								}
							}

							for (var _i3 = 0; _i3 < stripProps.length; ++_i3) {
								delete target[stripProps[_i3]];
							}
						}

						// Unknown keys

						var unprocessedKeys = Object.keys(unprocessed);
						if (unprocessedKeys.length && this._inner.patterns.length) {

							for (var _i4 = 0; _i4 < unprocessedKeys.length; ++_i4) {
								var _key = unprocessedKeys[_i4];
								var _localState = { key: _key, path: (state.path ? state.path + '.' : '') + _key, parent: target, reference: state.reference };
								var _item = target[_key];

								for (var j = 0; j < this._inner.patterns.length; ++j) {
									var pattern = this._inner.patterns[j];

									if (pattern.regex.test(_key)) {
										delete unprocessed[_key];

										var _result = pattern.rule._validate(_item, _localState, options);
										if (_result.errors) {
											errors.push(this.createError('object.child', { key: _key, child: pattern.rule._getLabel(_key), reason: _result.errors }, _localState, options));

											if (options.abortEarly) {
												return finish();
											}
										}

										if (_result.value !== undefined) {
											target[_key] = _result.value;
										}
									}
								}
							}

							unprocessedKeys = Object.keys(unprocessed);
						}

						if ((this._inner.children || this._inner.patterns.length) && unprocessedKeys.length) {
							if (options.stripUnknown && this._flags.allowUnknown !== true || options.skipFunctions) {

								var stripUnknown = options.stripUnknown ? options.stripUnknown === true ? true : !!options.stripUnknown.objects : false;

								for (var _i5 = 0; _i5 < unprocessedKeys.length; ++_i5) {
									var _key2 = unprocessedKeys[_i5];

									if (stripUnknown) {
										delete target[_key2];
										delete unprocessed[_key2];
									} else if (typeof target[_key2] === 'function') {
										delete unprocessed[_key2];
									}
								}

								unprocessedKeys = Object.keys(unprocessed);
							}

							if (unprocessedKeys.length && (this._flags.allowUnknown !== undefined ? !this._flags.allowUnknown : !options.allowUnknown)) {

								for (var _i6 = 0; _i6 < unprocessedKeys.length; ++_i6) {
									var unprocessedKey = unprocessedKeys[_i6];
									errors.push(this.createError('object.allowUnknown', { child: unprocessedKey }, { key: unprocessedKey, path: state.path + (state.path ? '.' : '') + unprocessedKey }, options));
								}
							}
						}

						// Validate dependencies

						for (var _i7 = 0; _i7 < this._inner.dependencies.length; ++_i7) {
							var dep = this._inner.dependencies[_i7];
							var err = internals[dep.type].call(this, dep.key !== null && target[dep.key], dep.peers, target, { key: dep.key, path: (state.path || '') + (dep.key ? '.' + dep.key : '') }, options);
							if (err instanceof Errors.Err) {
								errors.push(err);
								if (options.abortEarly) {
									return finish();
								}
							}
						}

						return finish();
					};

					_class.prototype._func = function _func() {

						var obj = this.clone();
						obj._flags.func = true;
						return obj;
					};

					_class.prototype.keys = function keys(schema) {

						Hoek.assert(schema === null || schema === undefined || (typeof schema === 'undefined' ? 'undefined' : _typeof$$1(schema)) === 'object', 'Object schema must be a valid object');
						Hoek.assert(!schema || !(schema instanceof Any), 'Object schema cannot be a joi schema');

						var obj = this.clone();

						if (!schema) {
							obj._inner.children = null;
							return obj;
						}

						var children = Object.keys(schema);

						if (!children.length) {
							obj._inner.children = [];
							return obj;
						}

						var topo = new Topo();
						if (obj._inner.children) {
							for (var i = 0; i < obj._inner.children.length; ++i) {
								var child = obj._inner.children[i];

								// Only add the key if we are not going to replace it later
								if (children.indexOf(child.key) === -1) {
									topo.add(child, { after: child._refs, group: child.key });
								}
							}
						}

						for (var _i8 = 0; _i8 < children.length; ++_i8) {
							var key = children[_i8];
							var _child = schema[key];
							try {
								var cast = Cast.schema(_child);
								topo.add({ key: key, schema: cast }, { after: cast._refs, group: key });
							} catch (castErr) {
								if (castErr.hasOwnProperty('path')) {
									castErr.path = key + '.' + castErr.path;
								} else {
									castErr.path = key;
								}
								throw castErr;
							}
						}

						obj._inner.children = topo.nodes;

						return obj;
					};

					_class.prototype.unknown = function unknown(allow) {

						var value = allow !== false;

						if (this._flags.allowUnknown === value) {
							return this;
						}

						var obj = this.clone();
						obj._flags.allowUnknown = value;
						return obj;
					};

					_class.prototype.length = function length(limit) {

						Hoek.assert(Number.isSafeInteger(limit) && limit >= 0, 'limit must be a positive integer');

						return this._test('length', limit, function (value, state, options) {

							if (Object.keys(value).length === limit) {
								return value;
							}

							return this.createError('object.length', { limit: limit }, state, options);
						});
					};

					_class.prototype.arity = function arity(n) {

						Hoek.assert(Number.isSafeInteger(n) && n >= 0, 'n must be a positive integer');

						return this._test('arity', n, function (value, state, options) {

							if (value.length === n) {
								return value;
							}

							return this.createError('function.arity', { n: n }, state, options);
						});
					};

					_class.prototype.minArity = function minArity(n) {

						Hoek.assert(Number.isSafeInteger(n) && n > 0, 'n must be a strict positive integer');

						return this._test('minArity', n, function (value, state, options) {

							if (value.length >= n) {
								return value;
							}

							return this.createError('function.minArity', { n: n }, state, options);
						});
					};

					_class.prototype.maxArity = function maxArity(n) {

						Hoek.assert(Number.isSafeInteger(n) && n >= 0, 'n must be a positive integer');

						return this._test('maxArity', n, function (value, state, options) {

							if (value.length <= n) {
								return value;
							}

							return this.createError('function.maxArity', { n: n }, state, options);
						});
					};

					_class.prototype.min = function min(limit) {

						Hoek.assert(Number.isSafeInteger(limit) && limit >= 0, 'limit must be a positive integer');

						return this._test('min', limit, function (value, state, options) {

							if (Object.keys(value).length >= limit) {
								return value;
							}

							return this.createError('object.min', { limit: limit }, state, options);
						});
					};

					_class.prototype.max = function max(limit) {

						Hoek.assert(Number.isSafeInteger(limit) && limit >= 0, 'limit must be a positive integer');

						return this._test('max', limit, function (value, state, options) {

							if (Object.keys(value).length <= limit) {
								return value;
							}

							return this.createError('object.max', { limit: limit }, state, options);
						});
					};

					_class.prototype.pattern = function pattern(_pattern, schema) {

						Hoek.assert(_pattern instanceof RegExp, 'Invalid regular expression');
						Hoek.assert(schema !== undefined, 'Invalid rule');

						_pattern = new RegExp(_pattern.source, _pattern.ignoreCase ? 'i' : undefined); // Future version should break this and forbid unsupported regex flags

						try {
							schema = Cast.schema(schema);
						} catch (castErr) {
							if (castErr.hasOwnProperty('path')) {
								castErr.message = castErr.message + '(' + castErr.path + ')';
							}

							throw castErr;
						}

						var obj = this.clone();
						obj._inner.patterns.push({ regex: _pattern, rule: schema });
						return obj;
					};

					_class.prototype.schema = function schema() {

						return this._test('schema', null, function (value, state, options) {

							if (value instanceof Any) {
								return value;
							}

							return this.createError('object.schema', null, state, options);
						});
					};

					_class.prototype.with = function _with(key, peers) {

						return this._dependency('with', key, peers);
					};

					_class.prototype.without = function without(key, peers) {

						return this._dependency('without', key, peers);
					};

					_class.prototype.xor = function xor() {

						var peers = Hoek.flatten(Array.prototype.slice.call(arguments));
						return this._dependency('xor', null, peers);
					};

					_class.prototype.or = function or() {

						var peers = Hoek.flatten(Array.prototype.slice.call(arguments));
						return this._dependency('or', null, peers);
					};

					_class.prototype.and = function and() {

						var peers = Hoek.flatten(Array.prototype.slice.call(arguments));
						return this._dependency('and', null, peers);
					};

					_class.prototype.nand = function nand() {

						var peers = Hoek.flatten(Array.prototype.slice.call(arguments));
						return this._dependency('nand', null, peers);
					};

					_class.prototype.requiredKeys = function requiredKeys(children) {

						children = Hoek.flatten(Array.prototype.slice.call(arguments));
						return this.applyFunctionToChildren(children, 'required');
					};

					_class.prototype.optionalKeys = function optionalKeys(children) {

						children = Hoek.flatten(Array.prototype.slice.call(arguments));
						return this.applyFunctionToChildren(children, 'optional');
					};

					_class.prototype.forbiddenKeys = function forbiddenKeys(children) {

						children = Hoek.flatten(Array.prototype.slice.call(arguments));
						return this.applyFunctionToChildren(children, 'forbidden');
					};

					_class.prototype.rename = function rename(from, to, options) {

						Hoek.assert(typeof from === 'string', 'Rename missing the from argument');
						Hoek.assert(typeof to === 'string', 'Rename missing the to argument');
						Hoek.assert(to !== from, 'Cannot rename key to same name:', from);

						for (var i = 0; i < this._inner.renames.length; ++i) {
							Hoek.assert(this._inner.renames[i].from !== from, 'Cannot rename the same key multiple times');
						}

						var obj = this.clone();

						obj._inner.renames.push({
							from: from,
							to: to,
							options: Hoek.applyToDefaults(internals.renameDefaults, options || {})
						});

						return obj;
					};

					_class.prototype.applyFunctionToChildren = function applyFunctionToChildren(children, fn, args, root) {

						children = [].concat(children);
						Hoek.assert(children.length > 0, 'expected at least one children');

						var groupedChildren = internals.groupChildren(children);
						var obj = void 0;

						if ('' in groupedChildren) {
							obj = this[fn].apply(this, args);
							delete groupedChildren[''];
						} else {
							obj = this.clone();
						}

						if (obj._inner.children) {
							root = root ? root + '.' : '';

							for (var i = 0; i < obj._inner.children.length; ++i) {
								var child = obj._inner.children[i];
								var group = groupedChildren[child.key];

								if (group) {
									obj._inner.children[i] = {
										key: child.key,
										_refs: child._refs,
										schema: child.schema.applyFunctionToChildren(group, fn, args, root + child.key)
									};

									delete groupedChildren[child.key];
								}
							}
						}

						var remaining = Object.keys(groupedChildren);
						Hoek.assert(remaining.length === 0, 'unknown key(s)', remaining.join(', '));

						return obj;
					};

					_class.prototype._dependency = function _dependency(type, key, peers) {

						peers = [].concat(peers);
						for (var i = 0; i < peers.length; ++i) {
							Hoek.assert(typeof peers[i] === 'string', type, 'peers must be a string or array of strings');
						}

						var obj = this.clone();
						obj._inner.dependencies.push({ type: type, key: key, peers: peers });
						return obj;
					};

					_class.prototype.describe = function describe(shallow) {

						var description = Any.prototype.describe.call(this);

						if (description.rules) {
							for (var i = 0; i < description.rules.length; ++i) {
								var rule = description.rules[i];
								// Coverage off for future-proof descriptions, only object().assert() is use right now
								if ( /* $lab:coverage:off$ */rule.arg && _typeof$$1(rule.arg) === 'object' && rule.arg.schema && rule.arg.ref /* $lab:coverage:on$ */) {
										rule.arg = {
											schema: rule.arg.schema.describe(),
											ref: rule.arg.ref.toString()
										};
									}
							}
						}

						if (this._inner.children && !shallow) {

							description.children = {};
							for (var _i9 = 0; _i9 < this._inner.children.length; ++_i9) {
								var child = this._inner.children[_i9];
								description.children[child.key] = child.schema.describe();
							}
						}

						if (this._inner.dependencies.length) {
							description.dependencies = Hoek.clone(this._inner.dependencies);
						}

						if (this._inner.patterns.length) {
							description.patterns = [];

							for (var _i10 = 0; _i10 < this._inner.patterns.length; ++_i10) {
								var pattern = this._inner.patterns[_i10];
								description.patterns.push({ regex: pattern.regex.toString(), rule: pattern.rule.describe() });
							}
						}

						if (this._inner.renames.length > 0) {
							description.renames = Hoek.clone(this._inner.renames);
						}

						return description;
					};

					_class.prototype.assert = function assert(ref, schema, message) {

						ref = Cast.ref(ref);
						Hoek.assert(ref.isContext || ref.depth > 1, 'Cannot use assertions for root level references - use direct key rules instead');
						message = message || 'pass the assertion test';

						try {
							schema = Cast.schema(schema);
						} catch (castErr) {
							if (castErr.hasOwnProperty('path')) {
								castErr.message = castErr.message + '(' + castErr.path + ')';
							}

							throw castErr;
						}

						var key = ref.path[ref.path.length - 1];
						var path = ref.path.join('.');

						return this._test('assert', { schema: schema, ref: ref }, function (value, state, options) {

							var result = schema._validate(ref(value), null, options, value);
							if (!result.errors) {
								return value;
							}

							var localState = Hoek.merge({}, state);
							localState.key = key;
							localState.path = path;
							return this.createError('object.assert', { ref: localState.path, message: message }, localState, options);
						});
					};

					_class.prototype.type = function type(constructor, name) {

						Hoek.assert(typeof constructor === 'function', 'type must be a constructor function');
						var typeData = {
							name: name || constructor.name,
							ctor: constructor
						};

						return this._test('type', typeData, function (value, state, options) {

							if (value instanceof constructor) {
								return value;
							}

							return this.createError('object.type', { type: typeData.name }, state, options);
						});
					};

					_class.prototype.ref = function ref() {

						return this._test('ref', null, function (value, state, options) {

							if (Ref.isRef(value)) {
								return value;
							}

							return this.createError('function.ref', null, state, options);
						});
					};

					return _class;
				}(Any);

				internals.safeParse = function (value) {

					try {
						return JSON.parse(value);
					} catch (parseErr) {}

					return value;
				};

				internals.renameDefaults = {
					alias: false, // Keep old value in place
					multiple: false, // Allow renaming multiple keys into the same target
					override: false // Overrides an existing key
				};

				internals.groupChildren = function (children) {

					children.sort();

					var grouped = {};

					for (var i = 0; i < children.length; ++i) {
						var child = children[i];
						Hoek.assert(typeof child === 'string', 'children must be strings');
						var group = child.split('.')[0];
						var childGroup = grouped[group] = grouped[group] || [];
						childGroup.push(child.substring(group.length + 1));
					}

					return grouped;
				};

				internals.keysToLabels = function (schema, keys) {

					var children = schema._inner.children;

					if (!children) {
						return keys;
					}

					var findLabel = function findLabel(key) {

						var matchingChild = children.find(function (child) {
							return child.key === key;
						});
						return matchingChild ? matchingChild.schema._getLabel(key) : key;
					};

					if (Array.isArray(keys)) {
						return keys.map(findLabel);
					}

					return findLabel(keys);
				};

				internals.with = function (value, peers, parent, state, options) {

					if (value === undefined) {
						return value;
					}

					for (var i = 0; i < peers.length; ++i) {
						var peer = peers[i];
						if (!Object.prototype.hasOwnProperty.call(parent, peer) || parent[peer] === undefined) {

							return this.createError('object.with', {
								main: state.key,
								mainWithLabel: internals.keysToLabels(this, state.key),
								peer: peer,
								peerWithLabel: internals.keysToLabels(this, peer)
							}, state, options);
						}
					}

					return value;
				};

				internals.without = function (value, peers, parent, state, options) {

					if (value === undefined) {
						return value;
					}

					for (var i = 0; i < peers.length; ++i) {
						var peer = peers[i];
						if (Object.prototype.hasOwnProperty.call(parent, peer) && parent[peer] !== undefined) {

							return this.createError('object.without', {
								main: state.key,
								mainWithLabel: internals.keysToLabels(this, state.key),
								peer: peer,
								peerWithLabel: internals.keysToLabels(this, peer)
							}, state, options);
						}
					}

					return value;
				};

				internals.xor = function (value, peers, parent, state, options) {

					var present = [];
					for (var i = 0; i < peers.length; ++i) {
						var peer = peers[i];
						if (Object.prototype.hasOwnProperty.call(parent, peer) && parent[peer] !== undefined) {

							present.push(peer);
						}
					}

					if (present.length === 1) {
						return value;
					}

					var context = { peers: peers, peersWithLabels: internals.keysToLabels(this, peers) };

					if (present.length === 0) {
						return this.createError('object.missing', context, state, options);
					}

					return this.createError('object.xor', context, state, options);
				};

				internals.or = function (value, peers, parent, state, options) {

					for (var i = 0; i < peers.length; ++i) {
						var peer = peers[i];
						if (Object.prototype.hasOwnProperty.call(parent, peer) && parent[peer] !== undefined) {
							return value;
						}
					}

					return this.createError('object.missing', {
						peers: peers,
						peersWithLabels: internals.keysToLabels(this, peers)
					}, state, options);
				};

				internals.and = function (value, peers, parent, state, options) {

					var missing = [];
					var present = [];
					var count = peers.length;
					for (var i = 0; i < count; ++i) {
						var peer = peers[i];
						if (!Object.prototype.hasOwnProperty.call(parent, peer) || parent[peer] === undefined) {

							missing.push(peer);
						} else {
							present.push(peer);
						}
					}

					var aon = missing.length === count || present.length === count;

					if (!aon) {

						return this.createError('object.and', {
							present: present,
							presentWithLabels: internals.keysToLabels(this, present),
							missing: missing,
							missingWithLabels: internals.keysToLabels(this, missing)
						}, state, options);
					}
				};

				internals.nand = function (value, peers, parent, state, options) {

					var present = [];
					for (var i = 0; i < peers.length; ++i) {
						var peer = peers[i];
						if (Object.prototype.hasOwnProperty.call(parent, peer) && parent[peer] !== undefined) {

							present.push(peer);
						}
					}

					var values = Hoek.clone(peers);
					var main = values.splice(0, 1)[0];
					var allPresent = present.length === peers.length;
					return allPresent ? this.createError('object.nand', {
						main: main,
						mainWithLabel: internals.keysToLabels(this, main),
						peers: values,
						peersWithLabels: internals.keysToLabels(this, values)
					}, state, options) : null;
				};

				module.exports = new internals.Object();

				/***/
			},
			/* 27 */
			/***/function (module, exports, __webpack_require__) {

				'use strict';

				// Load modules

				var Hoek = __webpack_require__(2);

				// Declare internals

				var internals = {};

				exports = module.exports = internals.Topo = function () {

					this._items = [];
					this.nodes = [];
				};

				internals.Topo.prototype.add = function (nodes, options) {
					var _this = this;

					options = options || {};

					// Validate rules

					var before = [].concat(options.before || []);
					var after = [].concat(options.after || []);
					var group = options.group || '?';
					var sort = options.sort || 0; // Used for merging only

					Hoek.assert(before.indexOf(group) === -1, 'Item cannot come before itself:', group);
					Hoek.assert(before.indexOf('?') === -1, 'Item cannot come before unassociated items');
					Hoek.assert(after.indexOf(group) === -1, 'Item cannot come after itself:', group);
					Hoek.assert(after.indexOf('?') === -1, 'Item cannot come after unassociated items');

					[].concat(nodes).forEach(function (node, i) {

						var item = {
							seq: _this._items.length,
							sort: sort,
							before: before,
							after: after,
							group: group,
							node: node
						};

						_this._items.push(item);
					});

					// Insert event

					var error = this._sort();
					Hoek.assert(!error, 'item', group !== '?' ? 'added into group ' + group : '', 'created a dependencies error');

					return this.nodes;
				};

				internals.Topo.prototype.merge = function (others) {

					others = [].concat(others);
					for (var i = 0; i < others.length; ++i) {
						var other = others[i];
						if (other) {
							for (var j = 0; j < other._items.length; ++j) {
								var item = Hoek.shallow(other._items[j]);
								this._items.push(item);
							}
						}
					}

					// Sort items

					this._items.sort(internals.mergeSort);
					for (var _i = 0; _i < this._items.length; ++_i) {
						this._items[_i].seq = _i;
					}

					var error = this._sort();
					Hoek.assert(!error, 'merge created a dependencies error');

					return this.nodes;
				};

				internals.mergeSort = function (a, b) {

					return a.sort === b.sort ? 0 : a.sort < b.sort ? -1 : 1;
				};

				internals.Topo.prototype._sort = function () {

					// Construct graph

					var graph = {};
					var graphAfters = Object.create(null); // A prototype can bungle lookups w/ false positives
					var groups = Object.create(null);

					for (var i = 0; i < this._items.length; ++i) {
						var item = this._items[i];
						var seq = item.seq; // Unique across all items
						var group = item.group;

						// Determine Groups

						groups[group] = groups[group] || [];
						groups[group].push(seq);

						// Build intermediary graph using 'before'

						graph[seq] = item.before;

						// Build second intermediary graph with 'after'

						var after = item.after;
						for (var j = 0; j < after.length; ++j) {
							graphAfters[after[j]] = (graphAfters[after[j]] || []).concat(seq);
						}
					}

					// Expand intermediary graph

					var graphNodes = Object.keys(graph);
					for (var _i2 = 0; _i2 < graphNodes.length; ++_i2) {
						var node = graphNodes[_i2];
						var expandedGroups = [];

						var graphNodeItems = Object.keys(graph[node]);
						for (var _j = 0; _j < graphNodeItems.length; ++_j) {
							var _group = graph[node][graphNodeItems[_j]];
							groups[_group] = groups[_group] || [];

							for (var k = 0; k < groups[_group].length; ++k) {
								expandedGroups.push(groups[_group][k]);
							}
						}
						graph[node] = expandedGroups;
					}

					// Merge intermediary graph using graphAfters into final graph

					var afterNodes = Object.keys(graphAfters);
					for (var _i3 = 0; _i3 < afterNodes.length; ++_i3) {
						var _group2 = afterNodes[_i3];

						if (groups[_group2]) {
							for (var _j2 = 0; _j2 < groups[_group2].length; ++_j2) {
								var _node = groups[_group2][_j2];
								graph[_node] = graph[_node].concat(graphAfters[_group2]);
							}
						}
					}

					// Compile ancestors

					var children = void 0;
					var ancestors = {};
					graphNodes = Object.keys(graph);
					for (var _i4 = 0; _i4 < graphNodes.length; ++_i4) {
						var _node2 = graphNodes[_i4];
						children = graph[_node2];

						for (var _j3 = 0; _j3 < children.length; ++_j3) {
							ancestors[children[_j3]] = (ancestors[children[_j3]] || []).concat(_node2);
						}
					}

					// Topo sort

					var visited = {};
					var sorted = [];

					for (var _i5 = 0; _i5 < this._items.length; ++_i5) {
						var next = _i5;

						if (ancestors[_i5]) {
							next = null;
							for (var _j4 = 0; _j4 < this._items.length; ++_j4) {
								if (visited[_j4] === true) {
									continue;
								}

								if (!ancestors[_j4]) {
									ancestors[_j4] = [];
								}

								var shouldSeeCount = ancestors[_j4].length;
								var seenCount = 0;
								for (var _k = 0; _k < shouldSeeCount; ++_k) {
									if (sorted.indexOf(ancestors[_j4][_k]) >= 0) {
										++seenCount;
									}
								}

								if (seenCount === shouldSeeCount) {
									next = _j4;
									break;
								}
							}
						}

						if (next !== null) {
							next = next.toString(); // Normalize to string TODO: replace with seq
							visited[next] = true;
							sorted.push(next);
						}
					}

					if (sorted.length !== this._items.length) {
						return new Error('Invalid dependencies');
					}

					var seqIndex = {};
					for (var _i6 = 0; _i6 < this._items.length; ++_i6) {
						var _item = this._items[_i6];
						seqIndex[_item.seq] = _item;
					}

					var sortedNodes = [];
					this._items = sorted.map(function (value) {

						var sortedItem = seqIndex[value];
						sortedNodes.push(sortedItem.node);
						return sortedItem;
					});

					this.nodes = sortedNodes;
				};

				/***/
			},
			/* 28 */
			/***/function (module, exports, __webpack_require__) {

				'use strict';

				// Load modules

				var Joi = __webpack_require__(1);

				// Declare internals

				exports.options = Joi.object({
					abortEarly: Joi.boolean(),
					convert: Joi.boolean(),
					allowUnknown: Joi.boolean(),
					skipFunctions: Joi.boolean(),
					stripUnknown: [Joi.boolean(), Joi.object({ arrays: Joi.boolean(), objects: Joi.boolean() }).or('arrays', 'objects')],
					language: Joi.object(),
					presence: Joi.string().only('required', 'optional', 'forbidden', 'ignore'),
					raw: Joi.boolean(),
					context: Joi.object(),
					strip: Joi.boolean(),
					noDefaults: Joi.boolean()
				}).strict();

				/***/
			},
			/* 29 */
			/***/function (module, exports, __webpack_require__) {

				'use strict';

				// Load modules

				function _defaults(obj, defaults$$1) {
					var keys = Object.getOwnPropertyNames(defaults$$1);for (var i = 0; i < keys.length; i++) {
						var key = keys[i];var value = Object.getOwnPropertyDescriptor(defaults$$1, key);if (value && value.configurable && obj[key] === undefined) {
							Object.defineProperty(obj, key, value);
						}
					}return obj;
				}

				function _classCallCheck(instance, Constructor) {
					if (!(instance instanceof Constructor)) {
						throw new TypeError("Cannot call a class as a function");
					}
				}

				function _possibleConstructorReturn(self, call) {
					if (!self) {
						throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
					}return call && ((typeof call === 'undefined' ? 'undefined' : _typeof(call)) === "object" || typeof call === "function") ? call : self;
				}

				function _inherits(subClass, superClass) {
					if (typeof superClass !== "function" && superClass !== null) {
						throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));
					}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass);
				}

				var Any = __webpack_require__(11);
				var Hoek = __webpack_require__(2);

				// Declare internals

				var internals = {};

				internals.Lazy = function (_Any) {
					_inherits(_class, _Any);

					function _class() {
						_classCallCheck(this, _class);

						var _this = _possibleConstructorReturn(this, _Any.call(this));

						_this._type = 'lazy';
						return _this;
					}

					_class.prototype._base = function _base(value, state, options) {

						var result = { value: value };
						var lazy = this._flags.lazy;

						if (!lazy) {
							result.errors = this.createError('lazy.base', null, state, options);
							return result;
						}

						var schema = lazy();

						if (!(schema instanceof Any)) {
							result.errors = this.createError('lazy.schema', null, state, options);
							return result;
						}

						return schema._validate(value, state, options);
					};

					_class.prototype.set = function set(fn) {

						Hoek.assert(typeof fn === 'function', 'You must provide a function as first argument');

						var obj = this.clone();
						obj._flags.lazy = fn;
						return obj;
					};

					return _class;
				}(Any);

				module.exports = new internals.Lazy();

				/***/
			},
			/* 30 */
			/***/function (module, exports, __webpack_require__) {

				'use strict';

				// Load modules

				var _typeof$$1 = typeof Symbol === "function" && _typeof(Symbol.iterator) === "symbol" ? function (obj) {
					return typeof obj === 'undefined' ? 'undefined' : _typeof(obj);
				} : function (obj) {
					return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === 'undefined' ? 'undefined' : _typeof(obj);
				};

				function _defaults(obj, defaults$$1) {
					var keys = Object.getOwnPropertyNames(defaults$$1);for (var i = 0; i < keys.length; i++) {
						var key = keys[i];var value = Object.getOwnPropertyDescriptor(defaults$$1, key);if (value && value.configurable && obj[key] === undefined) {
							Object.defineProperty(obj, key, value);
						}
					}return obj;
				}

				function _classCallCheck(instance, Constructor) {
					if (!(instance instanceof Constructor)) {
						throw new TypeError("Cannot call a class as a function");
					}
				}

				function _possibleConstructorReturn(self, call) {
					if (!self) {
						throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
					}return call && ((typeof call === 'undefined' ? 'undefined' : _typeof(call)) === "object" || typeof call === "function") ? call : self;
				}

				function _inherits(subClass, superClass) {
					if (typeof superClass !== "function" && superClass !== null) {
						throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));
					}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass);
				}

				var Any = __webpack_require__(11);
				var Cast = __webpack_require__(16);
				var Ref = __webpack_require__(12);
				var Hoek = __webpack_require__(2);

				// Declare internals

				var internals = {};

				internals.fastSplice = function (arr, i) {

					var pos = i;
					while (pos < arr.length) {
						arr[pos++] = arr[pos];
					}

					--arr.length;
				};

				internals.Array = function (_Any) {
					_inherits(_class, _Any);

					function _class() {
						_classCallCheck(this, _class);

						var _this = _possibleConstructorReturn(this, _Any.call(this));

						_this._type = 'array';
						_this._inner.items = [];
						_this._inner.ordereds = [];
						_this._inner.inclusions = [];
						_this._inner.exclusions = [];
						_this._inner.requireds = [];
						_this._flags.sparse = false;
						return _this;
					}

					_class.prototype._base = function _base(value, state, options) {

						var result = {
							value: value
						};

						if (typeof value === 'string' && options.convert) {

							internals.safeParse(value, result);
						}

						var isArray = Array.isArray(result.value);
						var wasArray = isArray;
						if (options.convert && this._flags.single && !isArray) {
							result.value = [result.value];
							isArray = true;
						}

						if (!isArray) {
							result.errors = this.createError('array.base', null, state, options);
							return result;
						}

						if (this._inner.inclusions.length || this._inner.exclusions.length || this._inner.requireds.length || this._inner.ordereds.length || !this._flags.sparse) {

							// Clone the array so that we don't modify the original
							if (wasArray) {
								result.value = result.value.slice(0);
							}

							result.errors = this._checkItems.call(this, result.value, wasArray, state, options);

							if (result.errors && wasArray && options.convert && this._flags.single) {

								// Attempt a 2nd pass by putting the array inside one.
								var previousErrors = result.errors;

								result.value = [result.value];
								result.errors = this._checkItems.call(this, result.value, wasArray, state, options);

								if (result.errors) {

									// Restore previous errors and value since this didn't validate either.
									result.errors = previousErrors;
									result.value = result.value[0];
								}
							}
						}

						return result;
					};

					_class.prototype._checkItems = function _checkItems(items, wasArray, state, options) {

						var errors = [];
						var errored = void 0;

						var requireds = this._inner.requireds.slice();
						var ordereds = this._inner.ordereds.slice();
						var inclusions = this._inner.inclusions.concat(requireds);

						var il = items.length;
						for (var i = 0; i < il; ++i) {
							errored = false;
							var item = items[i];
							var isValid = false;
							var key = wasArray ? i : state.key;
							var path = wasArray ? (state.path ? state.path + '.' : '') + i : state.path;
							var localState = { key: key, path: path, parent: state.parent, reference: state.reference };
							var res = void 0;

							// Sparse

							if (!this._flags.sparse && item === undefined) {
								errors.push(this.createError('array.sparse', null, { key: state.key, path: localState.path, pos: i }, options));

								if (options.abortEarly) {
									return errors;
								}

								continue;
							}

							// Exclusions

							for (var j = 0; j < this._inner.exclusions.length; ++j) {
								res = this._inner.exclusions[j]._validate(item, localState, {}); // Not passing options to use defaults

								if (!res.errors) {
									errors.push(this.createError(wasArray ? 'array.excludes' : 'array.excludesSingle', { pos: i, value: item }, { key: state.key, path: localState.path }, options));
									errored = true;

									if (options.abortEarly) {
										return errors;
									}

									break;
								}
							}

							if (errored) {
								continue;
							}

							// Ordered
							if (this._inner.ordereds.length) {
								if (ordereds.length > 0) {
									var ordered = ordereds.shift();
									res = ordered._validate(item, localState, options);
									if (!res.errors) {
										if (ordered._flags.strip) {
											internals.fastSplice(items, i);
											--i;
											--il;
										} else if (!this._flags.sparse && res.value === undefined) {
											errors.push(this.createError('array.sparse', null, { key: state.key, path: localState.path, pos: i }, options));

											if (options.abortEarly) {
												return errors;
											}

											continue;
										} else {
											items[i] = res.value;
										}
									} else {
										errors.push(this.createError('array.ordered', { pos: i, reason: res.errors, value: item }, { key: state.key, path: localState.path }, options));
										if (options.abortEarly) {
											return errors;
										}
									}
									continue;
								} else if (!this._inner.items.length) {
									errors.push(this.createError('array.orderedLength', { pos: i, limit: this._inner.ordereds.length }, { key: state.key, path: localState.path }, options));
									if (options.abortEarly) {
										return errors;
									}
									continue;
								}
							}

							// Requireds

							var requiredChecks = [];
							var jl = requireds.length;
							for (var _j = 0; _j < jl; ++_j) {
								res = requiredChecks[_j] = requireds[_j]._validate(item, localState, options);
								if (!res.errors) {
									items[i] = res.value;
									isValid = true;
									internals.fastSplice(requireds, _j);
									--_j;
									--jl;

									if (!this._flags.sparse && res.value === undefined) {
										errors.push(this.createError('array.sparse', null, { key: state.key, path: localState.path, pos: i }, options));

										if (options.abortEarly) {
											return errors;
										}
									}

									break;
								}
							}

							if (isValid) {
								continue;
							}

							// Inclusions

							var stripUnknown = options.stripUnknown ? options.stripUnknown === true ? true : !!options.stripUnknown.arrays : false;

							jl = inclusions.length;
							for (var _j2 = 0; _j2 < jl; ++_j2) {
								var inclusion = inclusions[_j2];

								// Avoid re-running requireds that already didn't match in the previous loop
								var previousCheck = requireds.indexOf(inclusion);
								if (previousCheck !== -1) {
									res = requiredChecks[previousCheck];
								} else {
									res = inclusion._validate(item, localState, options);

									if (!res.errors) {
										if (inclusion._flags.strip) {
											internals.fastSplice(items, i);
											--i;
											--il;
										} else if (!this._flags.sparse && res.value === undefined) {
											errors.push(this.createError('array.sparse', null, { key: state.key, path: localState.path, pos: i }, options));
											errored = true;
										} else {
											items[i] = res.value;
										}
										isValid = true;
										break;
									}
								}

								// Return the actual error if only one inclusion defined
								if (jl === 1) {
									if (stripUnknown) {
										internals.fastSplice(items, i);
										--i;
										--il;
										isValid = true;
										break;
									}

									errors.push(this.createError(wasArray ? 'array.includesOne' : 'array.includesOneSingle', { pos: i, reason: res.errors, value: item }, { key: state.key, path: localState.path }, options));
									errored = true;

									if (options.abortEarly) {
										return errors;
									}

									break;
								}
							}

							if (errored) {
								continue;
							}

							if (this._inner.inclusions.length && !isValid) {
								if (stripUnknown) {
									internals.fastSplice(items, i);
									--i;
									--il;
									continue;
								}

								errors.push(this.createError(wasArray ? 'array.includes' : 'array.includesSingle', { pos: i, value: item }, { key: state.key, path: localState.path }, options));

								if (options.abortEarly) {
									return errors;
								}
							}
						}

						if (requireds.length) {
							this._fillMissedErrors.call(this, errors, requireds, state, options);
						}

						if (ordereds.length) {
							this._fillOrderedErrors.call(this, errors, ordereds, state, options);
						}

						return errors.length ? errors : null;
					};

					_class.prototype.describe = function describe() {

						var description = Any.prototype.describe.call(this);

						if (this._inner.ordereds.length) {
							description.orderedItems = [];

							for (var i = 0; i < this._inner.ordereds.length; ++i) {
								description.orderedItems.push(this._inner.ordereds[i].describe());
							}
						}

						if (this._inner.items.length) {
							description.items = [];

							for (var _i = 0; _i < this._inner.items.length; ++_i) {
								description.items.push(this._inner.items[_i].describe());
							}
						}

						return description;
					};

					_class.prototype.items = function items() {

						var obj = this.clone();

						Hoek.flatten(Array.prototype.slice.call(arguments)).forEach(function (type, index) {

							try {
								type = Cast.schema(type);
							} catch (castErr) {
								if (castErr.hasOwnProperty('path')) {
									castErr.path = index + '.' + castErr.path;
								} else {
									castErr.path = index;
								}
								castErr.message = castErr.message + '(' + castErr.path + ')';
								throw castErr;
							}

							obj._inner.items.push(type);

							if (type._flags.presence === 'required') {
								obj._inner.requireds.push(type);
							} else if (type._flags.presence === 'forbidden') {
								obj._inner.exclusions.push(type.optional());
							} else {
								obj._inner.inclusions.push(type);
							}
						});

						return obj;
					};

					_class.prototype.ordered = function ordered() {

						var obj = this.clone();

						Hoek.flatten(Array.prototype.slice.call(arguments)).forEach(function (type, index) {

							try {
								type = Cast.schema(type);
							} catch (castErr) {
								if (castErr.hasOwnProperty('path')) {
									castErr.path = index + '.' + castErr.path;
								} else {
									castErr.path = index;
								}
								castErr.message = castErr.message + '(' + castErr.path + ')';
								throw castErr;
							}
							obj._inner.ordereds.push(type);
						});

						return obj;
					};

					_class.prototype.min = function min(limit) {

						var isRef = Ref.isRef(limit);

						Hoek.assert(Number.isSafeInteger(limit) && limit >= 0 || isRef, 'limit must be a positive integer or reference');

						return this._test('min', limit, function (value, state, options) {

							var compareTo = void 0;
							if (isRef) {
								compareTo = limit(state.reference || state.parent, options);

								if (!(Number.isSafeInteger(compareTo) && compareTo >= 0)) {
									return this.createError('array.ref', { ref: limit.key }, state, options);
								}
							} else {
								compareTo = limit;
							}

							if (value.length >= compareTo) {
								return value;
							}

							return this.createError('array.min', { limit: limit, value: value }, state, options);
						});
					};

					_class.prototype.max = function max(limit) {

						var isRef = Ref.isRef(limit);

						Hoek.assert(Number.isSafeInteger(limit) && limit >= 0 || isRef, 'limit must be a positive integer or reference');

						return this._test('max', limit, function (value, state, options) {

							var compareTo = void 0;
							if (isRef) {
								compareTo = limit(state.reference || state.parent, options);

								if (!(Number.isSafeInteger(compareTo) && compareTo >= 0)) {
									return this.createError('array.ref', { ref: limit.key }, state, options);
								}
							} else {
								compareTo = limit;
							}

							if (value.length <= compareTo) {
								return value;
							}

							return this.createError('array.max', { limit: limit, value: value }, state, options);
						});
					};

					_class.prototype.length = function length(limit) {

						var isRef = Ref.isRef(limit);

						Hoek.assert(Number.isSafeInteger(limit) && limit >= 0 || isRef, 'limit must be a positive integer or reference');

						return this._test('length', limit, function (value, state, options) {

							var compareTo = void 0;
							if (isRef) {
								compareTo = limit(state.reference || state.parent, options);

								if (!(Number.isSafeInteger(compareTo) && compareTo >= 0)) {
									return this.createError('array.ref', { ref: limit.key }, state, options);
								}
							} else {
								compareTo = limit;
							}

							if (value.length === compareTo) {
								return value;
							}

							return this.createError('array.length', { limit: limit, value: value }, state, options);
						});
					};

					_class.prototype.unique = function unique(comparator) {

						Hoek.assert(comparator === undefined || typeof comparator === 'function' || typeof comparator === 'string', 'comparator must be a function or a string');

						var settings = {};

						if (typeof comparator === 'string') {
							settings.path = comparator;
						} else if (typeof comparator === 'function') {
							settings.comparator = comparator;
						}

						return this._test('unique', settings, function (value, state, options) {

							var found = {
								string: {},
								number: {},
								undefined: {},
								boolean: {},
								object: new Map(),
								function: new Map(),
								custom: new Map()
							};

							var compare = settings.comparator || Hoek.deepEqual;

							for (var i = 0; i < value.length; ++i) {
								var item = settings.path ? Hoek.reach(value[i], settings.path) : value[i];
								var records = settings.comparator ? found.custom : found[typeof item === 'undefined' ? 'undefined' : _typeof$$1(item)];

								// All available types are supported, so it's not possible to reach 100% coverage without ignoring this line.
								// I still want to keep the test for future js versions with new types (eg. Symbol).
								if ( /* $lab:coverage:off$ */records /* $lab:coverage:on$ */) {
										if (records instanceof Map) {
											var entries = records.entries();
											var current = void 0;
											while (!(current = entries.next()).done) {
												if (compare(current.value[0], item)) {
													var localState = {
														key: state.key,
														path: (state.path ? state.path + '.' : '') + i,
														parent: state.parent,
														reference: state.reference
													};

													var context = {
														pos: i,
														value: value[i],
														dupePos: current.value[1],
														dupeValue: value[current.value[1]]
													};

													if (settings.path) {
														context.path = settings.path;
													}

													return this.createError('array.unique', context, localState, options);
												}
											}

											records.set(item, i);
										} else {
											if (records[item] !== undefined) {
												var _localState = {
													key: state.key,
													path: (state.path ? state.path + '.' : '') + i,
													parent: state.parent,
													reference: state.reference
												};

												var _context = {
													pos: i,
													value: value[i],
													dupePos: records[item],
													dupeValue: value[records[item]]
												};

												if (settings.path) {
													_context.path = settings.path;
												}

												return this.createError('array.unique', _context, _localState, options);
											}

											records[item] = i;
										}
									}
							}

							return value;
						});
					};

					_class.prototype.sparse = function sparse(enabled) {

						var value = enabled === undefined ? true : !!enabled;

						if (this._flags.sparse === value) {
							return this;
						}

						var obj = this.clone();
						obj._flags.sparse = value;
						return obj;
					};

					_class.prototype.single = function single(enabled) {

						var value = enabled === undefined ? true : !!enabled;

						if (this._flags.single === value) {
							return this;
						}

						var obj = this.clone();
						obj._flags.single = value;
						return obj;
					};

					_class.prototype._fillMissedErrors = function _fillMissedErrors(errors, requireds, state, options) {

						var knownMisses = [];
						var unknownMisses = 0;
						for (var i = 0; i < requireds.length; ++i) {
							var label = requireds[i]._getLabel();
							if (label) {
								knownMisses.push(label);
							} else {
								++unknownMisses;
							}
						}

						if (knownMisses.length) {
							if (unknownMisses) {
								errors.push(this.createError('array.includesRequiredBoth', { knownMisses: knownMisses, unknownMisses: unknownMisses }, { key: state.key, path: state.path }, options));
							} else {
								errors.push(this.createError('array.includesRequiredKnowns', { knownMisses: knownMisses }, { key: state.key, path: state.path }, options));
							}
						} else {
							errors.push(this.createError('array.includesRequiredUnknowns', { unknownMisses: unknownMisses }, { key: state.key, path: state.path }, options));
						}
					};

					_class.prototype._fillOrderedErrors = function _fillOrderedErrors(errors, ordereds, state, options) {

						var requiredOrdereds = [];

						for (var i = 0; i < ordereds.length; ++i) {
							var presence = Hoek.reach(ordereds[i], '_flags.presence');
							if (presence === 'required') {
								requiredOrdereds.push(ordereds[i]);
							}
						}

						if (requiredOrdereds.length) {
							this._fillMissedErrors.call(this, errors, requiredOrdereds, state, options);
						}
					};

					return _class;
				}(Any);

				internals.safeParse = function (value, result) {

					try {
						var converted = JSON.parse(value);
						if (Array.isArray(converted)) {
							result.value = converted;
						}
					} catch (e) {}
				};

				module.exports = new internals.Array();

				/***/
			},
			/* 31 */
			/***/function (module, exports, __webpack_require__) {

				/* WEBPACK VAR INJECTION */(function (Buffer) {
					'use strict';

					// Load modules

					function _defaults(obj, defaults$$1) {
						var keys = Object.getOwnPropertyNames(defaults$$1);for (var i = 0; i < keys.length; i++) {
							var key = keys[i];var value = Object.getOwnPropertyDescriptor(defaults$$1, key);if (value && value.configurable && obj[key] === undefined) {
								Object.defineProperty(obj, key, value);
							}
						}return obj;
					}

					function _classCallCheck(instance, Constructor) {
						if (!(instance instanceof Constructor)) {
							throw new TypeError("Cannot call a class as a function");
						}
					}

					function _possibleConstructorReturn(self, call) {
						if (!self) {
							throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
						}return call && ((typeof call === 'undefined' ? 'undefined' : _typeof(call)) === "object" || typeof call === "function") ? call : self;
					}

					function _inherits(subClass, superClass) {
						if (typeof superClass !== "function" && superClass !== null) {
							throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));
						}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass);
					}

					var Any = __webpack_require__(11);
					var Hoek = __webpack_require__(2);

					// Declare internals

					var internals = {};

					internals.Binary = function (_Any) {
						_inherits(_class, _Any);

						function _class() {
							_classCallCheck(this, _class);

							var _this = _possibleConstructorReturn(this, _Any.call(this));

							_this._type = 'binary';
							return _this;
						}

						_class.prototype._base = function _base(value, state, options) {

							var result = {
								value: value
							};

							if (typeof value === 'string' && options.convert) {

								try {
									result.value = new Buffer(value, this._flags.encoding);
								} catch (e) {}
							}

							result.errors = Buffer.isBuffer(result.value) ? null : this.createError('binary.base', null, state, options);
							return result;
						};

						_class.prototype.encoding = function encoding(_encoding) {

							Hoek.assert(Buffer.isEncoding(_encoding), 'Invalid encoding:', _encoding);

							if (this._flags.encoding === _encoding) {
								return this;
							}

							var obj = this.clone();
							obj._flags.encoding = _encoding;
							return obj;
						};

						_class.prototype.min = function min(limit) {

							Hoek.assert(Number.isSafeInteger(limit) && limit >= 0, 'limit must be a positive integer');

							return this._test('min', limit, function (value, state, options) {

								if (value.length >= limit) {
									return value;
								}

								return this.createError('binary.min', { limit: limit, value: value }, state, options);
							});
						};

						_class.prototype.max = function max(limit) {

							Hoek.assert(Number.isSafeInteger(limit) && limit >= 0, 'limit must be a positive integer');

							return this._test('max', limit, function (value, state, options) {

								if (value.length <= limit) {
									return value;
								}

								return this.createError('binary.max', { limit: limit, value: value }, state, options);
							});
						};

						_class.prototype.length = function length(limit) {

							Hoek.assert(Number.isSafeInteger(limit) && limit >= 0, 'limit must be a positive integer');

							return this._test('length', limit, function (value, state, options) {

								if (value.length === limit) {
									return value;
								}

								return this.createError('binary.length', { limit: limit, value: value }, state, options);
							});
						};

						return _class;
					}(Any);

					module.exports = new internals.Binary();
					/* WEBPACK VAR INJECTION */
				}).call(exports, __webpack_require__(3).Buffer);

				/***/
			},
			/* 32 */
			/***/function (module, exports) {

				module.exports = {
					"_args": [[{
						"raw": "joi@10.6.0",
						"scope": null,
						"escapedName": "joi",
						"name": "joi",
						"rawSpec": "10.6.0",
						"spec": "10.6.0",
						"type": "version"
					}, "/Users/jeff/projects/joi-browser"]],
					"_from": "joi@10.6.0",
					"_id": "joi@10.6.0",
					"_inCache": true,
					"_location": "/joi",
					"_nodeVersion": "6.11.0",
					"_npmOperationalInternal": {
						"host": "s3://npm-registry-packages",
						"tmp": "tmp/joi-10.6.0.tgz_1497548465053_0.7665833418723196"
					},
					"_npmUser": {
						"name": "marsup",
						"email": "nicolas@morel.io"
					},
					"_npmVersion": "5.0.3",
					"_phantomChildren": {},
					"_requested": {
						"raw": "joi@10.6.0",
						"scope": null,
						"escapedName": "joi",
						"name": "joi",
						"rawSpec": "10.6.0",
						"spec": "10.6.0",
						"type": "version"
					},
					"_requiredBy": ["#DEV:/"],
					"_resolved": "https://registry.npmjs.org/joi/-/joi-10.6.0.tgz",
					"_shasum": "52587f02d52b8b75cdb0c74f0b164a191a0e1fc2",
					"_shrinkwrap": null,
					"_spec": "joi@10.6.0",
					"_where": "/Users/jeff/projects/joi-browser",
					"bugs": {
						"url": "https://github.com/hapijs/joi/issues"
					},
					"dependencies": {
						"hoek": "4.x.x",
						"isemail": "2.x.x",
						"items": "2.x.x",
						"topo": "2.x.x"
					},
					"description": "Object schema validation",
					"devDependencies": {
						"code": "4.x.x",
						"hapitoc": "1.x.x",
						"lab": "13.x.x"
					},
					"directories": {},
					"dist": {
						"integrity": "sha512-hBF3LcqyAid+9X/pwg+eXjD2QBZI5eXnBFJYaAkH4SK3mp9QSRiiQnDYlmlz5pccMvnLcJRS4whhDOTCkmsAdQ==",
						"shasum": "52587f02d52b8b75cdb0c74f0b164a191a0e1fc2",
						"tarball": "https://registry.npmjs.org/joi/-/joi-10.6.0.tgz"
					},
					"engines": {
						"node": ">=4.0.0"
					},
					"gitHead": "069bb6c04063cba202544dacf9da3bbe21fa3074",
					"homepage": "https://github.com/hapijs/joi",
					"keywords": ["hapi", "schema", "validation"],
					"license": "BSD-3-Clause",
					"main": "lib/index.js",
					"maintainers": [{
						"name": "hueniverse",
						"email": "eran@hammer.io"
					}, {
						"name": "marsup",
						"email": "nicolas@morel.io"
					}, {
						"name": "nlf",
						"email": "quitlahok@gmail.com"
					}, {
						"name": "wyatt",
						"email": "wpreul@gmail.com"
					}],
					"name": "joi",
					"optionalDependencies": {},
					"readme": "ERROR: No README data found!",
					"repository": {
						"type": "git",
						"url": "git://github.com/hapijs/joi.git"
					},
					"scripts": {
						"test": "lab -t 100 -a code -L",
						"test-cov-html": "lab -r html -o coverage.html -a code",
						"test-debug": "lab -a code",
						"toc": "hapitoc",
						"version": "npm run toc && git add API.md README.md"
					},
					"version": "10.6.0"
				};

				/***/
			}
			/******/])
		);
	});
	
});

/*
* Author   Jonathan Lurie - http://me.jonathanlurie.fr
* License  MIT
* Link      https://github.com/Pixpipe/pixpipejs
* Lab       MCIN - Montreal Neurological Institute
*/

// Object schema validation
/**
* PixpipeObject is the base object of all. It creates a uuid and has few
* generic attributes like type, name and description. Not all these attributes
* always useful;
*/

var PixpipeObject = function () {
  function PixpipeObject() {
    classCallCheck(this, PixpipeObject);

    // unique identifier
    this._uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
      var r = Math.random() * 16 | 0,
          v = c == 'x' ? r : r & 0x3 | 0x8;
      return v.toString(16);
    });

    // Metadata can be anything, a name, an ID, a description, a DOM element.
    // everything that is not an input but rather a setting
    this._metadata = {};

    // a joi schema to validate the _metadata integrity. If null, integrity not validated.
    // I has to be overloaded when a class inherits from PixpipeObject
    this._metadataSchema = this._buildMetadataSchema();

    this._type = PixpipeObject.TYPE();

    // to leasure time. The 2 default values are added by _beforeRun and _afterRun
    // under the name of "begin" and "end"
    this._timer = {};
  }

  /**
  * Acces it like a static attribute.
  * Must be overloaded.
  */


  createClass(PixpipeObject, [{
    key: 'isOfType',


    /**
    * Compare a give type to the type of this object.
    * @param {String} t - a type, better to call the static method of each object, like Image.TYPE()
    */
    value: function isOfType(t) {
      return !this._type.localeCompare(t);
    }

    /**
    * Get type of object.
    * @return {String} the type
    */

  }, {
    key: 'getType',
    value: function getType() {
      this._type;
    }

    /**
    * Return a copy of the uuid
    */

  }, {
    key: 'getUuid',
    value: function getUuid() {
      return this._uuid.slice();
    }

    /**
    * Set a metadata using a pair of key and value.
    * @param {String} key - the ID of the metadata
    * @param {Object} value - can be a string, Number or Object
    */

  }, {
    key: 'setMetadata',
    value: function setMetadata(key, value) {
      if (typeof key === 'string' || key instanceof String) {
        this._metadata[key] = value;
      } else {
        console.warn("The given key must be a String Object.");
      }
    }

    /**
    * Retrieve a metadata using a key.
    * @param {String} key - the ID of the metadata
    * @return {Object} the metadata object - or null if non existent
    */

  }, {
    key: 'getMetadata',
    value: function getMetadata(key) {
      if (key in this._metadata) {
        return this._metadata[key];
      } else {
        console.warn("The metadata with key: " + key + " doe not exist.");
        return null;
      }
    }

    /**
    * Check if the metadata with the given key exists.
    * @param {String} key - the key to look up in the metadata collection
    * @return {Boolean} true if the metadata with the given is present, false if not.
    */

  }, {
    key: 'hasMetadata',
    value: function hasMetadata(key) {
      return key in this._metadata;
    }

    /**
    * @return {Array} of Strings where each is a key of an existing metadata record
    */

  }, {
    key: 'getMetadataKeys',
    value: function getMetadataKeys() {
      return Object.keys(this._metadata);
    }

    /**
    * Copy all the metadata from the object in argument to this.
    * A deep copy by serialization is perform.
    * The metadata that exist only in _this_ are kept.
    * @param {PixpipeObject} otherObject - the object to copy metadata from
    */

  }, {
    key: 'copyMetadataFrom',
    value: function copyMetadataFrom(otherObject) {
      var that = this;

      otherObject.getMetadataKeys().forEach(function (key) {
        try {
          var metadataObjectCopy = JSON.parse(JSON.stringify(otherObject.getMetadata(key)));
          that.setMetadata(key, metadataObjectCopy);
        } catch (e) {
          console.error(e);
        }
      });
    }

    /**
    * Get a copy of the metadata object using a serialization middle step (no reference shared).
    * @return {Object} a copy of local metadata
    */

  }, {
    key: 'getMetadataCopy',
    value: function getMetadataCopy() {
      return JSON.parse(JSON.stringify(this._metadata));
    }

    /**
    * Associate the internal metadata object with the one in args.
    * @param {Object} m - metadata. Should NOT contain TypedArray
    */

  }, {
    key: 'setRawMetadata',
    value: function setRawMetadata(m) {
      this._metadata = m;
      this._metadataRawCopied();
    }

    /**
    * Called just after metadata were raw-copied. Useful to perform checkings and pre processing.
    * To be overwriten
    */

  }, {
    key: '_metadataRawCopied',
    value: function _metadataRawCopied() {}
    /*
          *** TO BE OVERWRITTEN ***
    */


    /**
    * [PRIVATE]
    * Deal with an option object (usually as an argument of a constructor).
    * @param {Object} optionsObject - the option object
    * @param {String} key - a property name in this optionObject
    * @param {Object} defaultValue - the value to return if the key in the optionObject was not found
    * @return {Object} the value from the optionObject that has the property name key, unless this property does not exist, then it returns the defaultValue.
    */

  }, {
    key: '_getOption',
    value: function _getOption(optionsObject, key, defaultValue) {
      if (!optionsObject) return defaultValue;

      return optionsObject[key] || defaultValue;
    }

    /**
    * Verifies if the metadata object contain a cyclic object.
    * @return {Boolean} true if metadata is cyclic, false if not
    */

  }, {
    key: 'isMetadataCyclic',
    value: function isMetadataCyclic() {
      try {
        
      } catch (e) {
        return true;
      }

      return false;
    }

    /**
    * Set a time measurement (from an arbitrary starting point)
    * @param {String} recordName - name of the record
    */

  }, {
    key: 'addTimeRecord',
    value: function addTimeRecord(recordName) {
      this._timer[recordName] = performance.now();
    }

    /**
    * @return {Number} the elapsed time in ms between fromRecord and toRecord.
    * Return -1 if one or both time record
    */

  }, {
    key: 'getTime',
    value: function getTime(fromRecord, toRecord) {
      var print = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

      if (fromRecord in this._timer && toRecord in this._timer) {
        var t = Math.abs(this._timer[toRecord] - this._timer[fromRecord]);

        if (print) {
          console.log("> Time: [" + fromRecord + " , " + toRecord + "] is " + t + " millisec.");
        }

        return t;
      } else {
        console.warn("The two given record name must exist in the time record table.");
        return -1;
      }
    }

    /**
    * Build the joi validation schema for the _metadata object.
    * This method has to be overwriten and return a proper validation object, though
    * this metadata check is optional.
    * If not overwriten, metadata will always be considered valid
    * @return {Object} the joi schema
    */

  }, {
    key: '_buildMetadataSchema',
    value: function _buildMetadataSchema() {
      /*
            *** TO BE OVERWRITTEN ***
      */
      return null;
    }

    /**
    * Performs an inetgrity check of a metadata object. If none is given in argument,
    * integrity check is performed on this._metadata.
    * @param {Object} a metadata object to perform the integrity check on.
    * @return {Boolean} true if metadata obj is valid, false if not.
    */

  }, {
    key: 'metadataIntegrityCheck',
    value: function metadataIntegrityCheck() {
      var metadataObj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

      if (metadataObj == null) {
        metadataObj = this._metadata;
      }

      if (metadataObj) {
        var validationResults = joiBrowser.validate(metadataObj, this._metadataSchema);
        if (validationResults.error) {
          console.warn("SCHEMA VALIDATION: " + validationResults.error);
          return false;
        }
        return true;
      } else {
        console.warn("Validation schema not available. Metadata considered to be valid.");
        return true;
      }
    }

    /**
    * Get a clone of the _metadata object. Deep copy, no reference in common.
    */

  }, {
    key: 'getMetadataClone',
    value: function getMetadataClone() {
      if (this.metadataIntegrityCheck()) {
        return JSON.parse(JSON.stringify(this._metadata));
      }
      return null;
    }
  }], [{
    key: 'TYPE',
    value: function TYPE() {
      return "GENERIC";
    }
  }]);
  return PixpipeObject;
}();

/*
* Author   Jonathan Lurie - http://me.jonathanlurie.fr
* License  MIT
* Link      https://github.com/Pixpipe/pixpipejs
* Lab       MCIN - Montreal Neurological Institute
*/

/**
* Filter is a base class and must be inherited to be used properly.
* A filter takes one or more Image instances as input and returns one or more
* instances of images as output.
* Every filter has a addInput(), a getOutput() and a update() methods.
* Every input and output can be arranged by category, so that internaly, a filter
* can use and output diferent kind of data.
*
* **Usage**
* - [examples/fileToArrayBuffer.html](../examples/fileToArrayBuffer.html)
*
*/

var Filter = function (_PixpipeObject) {
  inherits(Filter, _PixpipeObject);

  function Filter() {
    classCallCheck(this, Filter);

    var _this = possibleConstructorReturn(this, (Filter.__proto__ || Object.getPrototypeOf(Filter)).call(this));

    _this._type = Filter.TYPE();

    // a bunch of event to be defined. Empty by default.
    _this._events = {};

    _this._inputValidator = {};

    _this._allValidator = null;

    _this._input = {
      //"0": []
    };

    _this._output = {
      //"0" : []
    };

    _this._isOutputReady = false;
    _this.setMetadata("time", true);
    return _this;
  }

  /**
  * Hardcode the datatype
  */


  createClass(Filter, [{
    key: "addInput",


    /**
    * Set an input, potentially associated to a category.
    * @param {Image2D} inputObject - most likely an instance of Image2D but can also be HTML5 File or Image3D
    * @param {Number} category - in case we want to get data from diferent categories.
    */
    value: function addInput(inputObject) {
      var category = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;


      if (!inputObject) {
        console.warn("A null input cannot be added.");
        return;
      }

      // the category may not exist, we create it
      if (!(category in this._input)) {
        this._input[category] = null;
      }

      this._input[category] = inputObject;

      this._isOutputReady = false;
    }

    /**
    * Return outputs from a category (default category: 0)
    * @param {Number} category - a category of output.
    * @return {Object} or null if no output can be returned.
    */

  }, {
    key: "getOutput",
    value: function getOutput() {
      var category = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

      if (category in this._output) {
        return this._output[category];
      } else {
        return null;
      }
    }

    /**
    * Perform an action for each output. Within the callback, "this" is this filter.
    * @param {function} cb - callback function called for evey single output
    * with 2 args: the output category and the outpub object.
    */

  }, {
    key: "forEachOutput",
    value: function forEachOutput(cb) {
      if (!cb) {
        console.warn("forEachOutput requires a callback.");
        return;
      }
      var outputCategories = this.getOutputCategories();

      for (var o = 0; o < outputCategories.length; o++) {
        cb.call(this, outputCategories[o], this.getOutput(outputCategories[o]));
      }
    }

    /**
    * [PRIVATE]
    * Perform an action for each input. Within the callback, "this" is this filter.
    * @param {function} cb - callback function to call for every single input
    * with 2 args: the output category and the outpub object.
    */

  }, {
    key: "_forEachInput",
    value: function _forEachInput(cb) {
      if (!cb) {
        console.warn("forEachOutput requires a callback.");
        return;
      }

      var inputCategories = this.getInputCategories();

      for (var i = 0; i < inputCategories.length; i++) {
        cb.call(this, inputCategories[i], this._getInput(inputCategories[i]));
      }
    }

    /**
    * [PRIVATE]
    * Internal way to setup an output for this filter. Acts like a singleton in a sens
    * that if an output of a given category was already Initialized, it returns it.
    * If no input was Initialized, it creates one.
    * @param {type} dataType - type of object, i.e. Image2D (this is NOT a String!)
    * @param {Number} category - in case we want to get data from different categories.
    * @returns {Object} of given type.
    */

  }, {
    key: "_addOutput",
    value: function _addOutput(dataType) {
      var category = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

      var outputObject = null;

      // the category may not exist, we create it
      if (!(category in this._output)) {
        var outputObject = new dataType();
        this._output[category] = outputObject;

        //console.log(this._output);
        console.log("filter " + this.constructor.name + " creates a new output.");
      } else {
        // TODO: if output object exists but is not from dataType: error!
        //outputObject = this._output[category];
        console.warn("An output of category " + category + " was already defined. Nothing to be done.");
      }

      return outputObject;
    }

    /**
    * [PRIVATE]
    * should noly be used by the class that inherit Filter.
    * @param {Number} category - in case we want to get data from different categories.
    * @return {Object} or null if no input can be returned
    */

  }, {
    key: "_getInput",
    value: function _getInput() {
      var category = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

      if (category in this._input) {
        return this._input[category];
      } else {
        return null;
      }
    }

    /**
    * Look up the input to check if an input of a given category is present
    * @param {String} category - a category to look for.
    * @return {Boolean} true if an input of the given
    */

  }, {
    key: "hasInputOfCategory",
    value: function hasInputOfCategory(category) {
      return category in this._input;
    }

    /**
    * @return {Array} all the input categories as an array of string
    */

  }, {
    key: "getInputCategories",
    value: function getInputCategories() {
      return Object.keys(this._input);
    }

    /**
    * @return {Array} all the output categories as an array of string
    */

  }, {
    key: "getOutputCategories",
    value: function getOutputCategories() {
      return Object.keys(this._output);
    }

    /**
    * Same as PixpipeObject.setMetadata but add the _isOutputReady to false.
    */

  }, {
    key: "setMetadata",
    value: function setMetadata(key, value) {
      get(Filter.prototype.__proto__ || Object.getPrototypeOf(Filter.prototype), "setMetadata", this).call(this, key, value);
      this._isOutputReady = false;
    }
  }, {
    key: "hasOutputReady",
    value: function hasOutputReady() {
      return this._isOutputReady;
    }
  }, {
    key: "setOutputAsReady",
    value: function setOutputAsReady() {
      this._isOutputReady = true;
    }

    /**
    * Add an entry to the input validator. Made for be used with hasValidInput
    * @param {String} category - category of input (can also be integer)
    * @param {Type} InputType - the type of the expected input, like Image2D, Image3D, etc. without quotes
    */

  }, {
    key: "addInputValidator",
    value: function addInputValidator(category, InputType) {
      if ("TYPE" in InputType) {
        if (category === 'ALL') {
          this._allValidator = InputType.TYPE();
          return;
        }
        this._inputValidator[category] = InputType.TYPE();
      } else {
        if (category === 'ALL') {
          this._allValidator = InputType;
          return;
        }
        this._inputValidator[category] = InputType;
      }
    }

    /**
    * Validate the input data using a model defined in _inputValidator.
    * Every class that implement Filter must implement their own _inputValidator.
    * Not mandatory to use, still a good practice.
    */

  }, {
    key: "hasValidInput",
    value: function hasValidInput() {
      var that = this;
      var inputCategories = this.getInputCategories();
      var valid = true;
      if (inputCategories.length === 0) {
        valid = false;
        console.warn("No input validator was added. Filter cannot run. Use addInputValidator(...) to specify input types.");
      }
      inputCategories.forEach(function (key) {
        var inputOfCategory = that._getInput(key);

        if (inputOfCategory) {
          if ("isOfType" in inputOfCategory) {
            if (that._inputValidator[key]) {
              valid = valid && inputOfCategory.isOfType(that._inputValidator[key]);
            }
            if (that._allValidator) {
              valid = valid && inputOfCategory.isOfType(that._allValidator);
            }
          } else {
            try {
              if (that._inputValidator[key]) {
                valid = valid && inputOfCategory instanceof that._inputValidator[key];
              }
              if (that._allValidator) {
                valid = valid && inputOfCategory instanceof that._allValidator;
              }
            } catch (e) {
              valid = false;
            }
          }
        }
        // input simply not existing!
        else {
            valid = false;
          }
      });

      if (!valid) {
        console.warn("The input is not valid.");
      }

      return valid;
    }

    /**
    * MUST be implemented by the class that inherit this.
    * Launch the process.
    */

  }, {
    key: "update",
    value: function update() {
      // flush any existing output previously computed. Usefull when a filter is ran more than once.
      // If no output is created the second time, the output from the previous time cannot be used instead
      // (leading the user to think the second run created an output while it's actually the one from the first run) 
      this._output = {};

      if (this._metadata.time) {
        this.addTimeRecord("begin");
        this._run();
        this.addTimeRecord("end");
        console.log("Running time for filter " + this.constructor.name + ": " + this.getTime("begin", "end") + "ms.");
      } else {
        this._run();
      }

      if (this.getNumberOfOutputs()) {
        this.setOutputAsReady();
      }
    }

    /**
    *
    */

  }, {
    key: "_run",
    value: function _run() {
      console.error("The update() method has not been written, this filter is not valid.");
    }

    /**
    * Defines a callback. By defautl, no callback is called.
    */

  }, {
    key: "on",
    value: function on(eventId, callback) {
      this._events[eventId] = callback;
    }

    /**
    * Call an event with arguments.
    * Inside the callback, the "this" object will be the filter.
    * @param {String} eventName - name of the event to trigger
    * @param {Object} any other param can follow
    */

  }, {
    key: "triggerEvent",
    value: function triggerEvent(eventName /* any other arguments to follow */) {
      var returnValue = null;

      if (this.hasEvent(eventName)) {
        if (arguments.length > 1) {

          // a-la-mano slicing argument array to comply with V8 JS engine optimization...
          var argToSend = [];
          for (var i = 1; i < arguments.length; i++) {
            argToSend.push(arguments[i]);
          }

          returnValue = this._events[eventName].apply(this, argToSend);
        } else {
          returnValue = this._events[eventName].call(this);
        }
      } else {
        console.warn("The event " + eventName + " does not exist.");
      }

      return returnValue;
    }

    /**
    * Tells if an event of such name was registered
    * @return {Boolean} true if registred, false if not
    */

  }, {
    key: "hasEvent",
    value: function hasEvent(eventName) {
      return eventName in this._events;
    }

    /**
    * @return {Number} the number of inputs
    */

  }, {
    key: "getNumberOfInputs",
    value: function getNumberOfInputs() {
      return Object.keys(this._input).length;
    }

    /**
    * @return {Number} the number of outputs
    */

  }, {
    key: "getNumberOfOutputs",
    value: function getNumberOfOutputs() {
      return Object.keys(this._output).length;
    }

    /**
    * Remove all the inputs given so far.
    */

  }, {
    key: "clearAllInputs",
    value: function clearAllInputs() {
      this._input = {};
    }
  }], [{
    key: "TYPE",
    value: function TYPE() {
      return "FILTER";
    }
  }]);
  return Filter;
}(PixpipeObject); /* END class Filter */

/*
* Author   Jonathan Lurie - http://me.jonathanlurie.fr
* License  MIT
* Link      https://github.com/Pixpipe/pixpipejs
* Lab       MCIN - Montreal Neurological Institute
*/

/**
* PixpipeContainer is a common interface for Image2D and Image3D
* (and possibly some other future formats).
* Should not be used as-is.
*/

var PixpipeContainer = function (_PixpipeObject) {
  inherits(PixpipeContainer, _PixpipeObject);

  function PixpipeContainer() {
    classCallCheck(this, PixpipeContainer);

    var _this = possibleConstructorReturn(this, (PixpipeContainer.__proto__ || Object.getPrototypeOf(PixpipeContainer)).call(this));

    _this._data = null;
    return _this;
  }

  /**
  * Associate d with the internal data object by pointer copy (if Object or Array)
  * @param {TypedArray} d - pixel or voxel data. If multi-band, should be rgbargba...
  */


  createClass(PixpipeContainer, [{
    key: 'setRawData',
    value: function setRawData(d) {
      this._data = d;
    }
  }]);
  return PixpipeContainer;
}(PixpipeObject); /* END of class PixpipeContainer */

/*
 * Author   Armin Taheri - https://github.com/ArminTaheri
 * License  MIT
 * Link     https://github.com/Pixpipe/pixpipejs
 * Lab      MCIN - Montreal Neurological Institute
 */

var Signal1D = function (_PixpipeContainer) {
  inherits(Signal1D, _PixpipeContainer);

  function Signal1D() {
    classCallCheck(this, Signal1D);

    var _this = possibleConstructorReturn(this, (Signal1D.__proto__ || Object.getPrototypeOf(Signal1D)).call(this));

    _this._type = Signal1D.TYPE();
    _this.setMetadata('length', 0);
    return _this;
  }

  createClass(Signal1D, [{
    key: 'getData',
    value: function getData() {
      return this._data;
    }
  }, {
    key: 'setData',
    value: function setData(array) {
      var deepCopy = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      if (deepCopy) {
        this._data = new array.constructor(array);
      } else {
        this._data = array;
      }

      this.setMetadata('length', array.length);
    }
  }, {
    key: 'clone',
    value: function clone() {
      var copy = new Signal1D();
      if (this._data) {
        copy.setData(this._data, true);
      }
      return copy;
    }
  }, {
    key: 'hollowClone',
    value: function hollowClone() {
      var copy = new Signal1D();
      var length = this.getMetadata('length');
      copy.setData(new Float32Array(length).fill(0));
      return copy;
    }
  }], [{
    key: 'TYPE',
    value: function TYPE() {
      return 'SIGNAL1D';
    }
  }]);
  return Signal1D;
}(PixpipeContainer);

// register this type as a CoreType


CoreTypes.addCoreType(Signal1D);

/*
* Author   Jonathan Lurie - http://me.jonathanlurie.fr
* License  MIT
* Link      https://github.com/Pixpipe/pixpipejs
* Lab       MCIN - Montreal Neurological Institute
*/

/**
* Image2D class is one of the few base element of Pixpipejs.
* It is always considered to be 4 channels (RGBA) and stored as a Float32Array
* typed array.
*
* **Usage**
* - [examples/image2DToCanvas.html](../examples/image2DToCanvas.html)
*/

var Image2D = function (_PixpipeContainer) {
  inherits(Image2D, _PixpipeContainer);

  /**
  * Constructor of an Image2D instance. If no options, no array is allocated.
  * @param {Object} options - if present:
  *   - options.width {Number} width in pixel
  *   - options.height {Number} height in pixel
  *   - options.color {Array} can be [r, g, b, a] or just [i]. Optional.
  */
  function Image2D() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    classCallCheck(this, Image2D);

    var _this = possibleConstructorReturn(this, (Image2D.__proto__ || Object.getPrototypeOf(Image2D)).call(this));

    _this._type = Image2D.TYPE();

    // default number of components per pixel
    _this.setMetadata("ncpp", 4);

    // allocate the array if size is specified
    if (options && "width" in options && "height" in options) {

      if (options.width > 0 && options.height > 0) {
        _this.setMetadata("width", options.width);
        _this.setMetadata("height", options.height);

        if ("color" in options) {
          _this.setMetadata("ncpp", options.color.length);
        }

        _this._data = new Float32Array(options.width * options.height * _this.getMetadata("ncpp"));
        var ncpp = _this.getMetadata("ncpp");

        // init with the given color
        if ("color" in options) {
          var color = options.color;
          for (var i = 0; i < _this._data.length; i++) {
            _this._data[i] = color[i % ncpp];
          }
          //this.computeSimpleStat();
        } else {
          _this._data.fill(0);
        }
      }
    }

    return _this;
  }

  /**
  * Hardcode the datatype
  */


  createClass(Image2D, [{
    key: 'clone',


    /**
    * @return {Image2D} a deep copy instance of this Image2D
    */
    value: function clone() {
      var cpImg = new Image2D();
      cpImg.setData(this._data, this.getMetadata("width"), this.getMetadata("height"), this.getMetadata("ncpp"), true);
      cpImg.copyMetadataFrom(this);
      return cpImg;
    }

    /**
    * Get an empty copy of an image. Like a clone but the array of data is filled
    * with zeros and no metadata.
    * @return {Image2D}
    */

  }, {
    key: 'hollowClone',
    value: function hollowClone() {
      var cpImg = new Image2D();
      var ncpp = this.getMetadata("ncpp");
      var width = this.getMetadata("width");
      var height = this.getMetadata("height");

      cpImg.setData(new Float32Array(width * height * ncpp).fill(0), width, height, ncpp);
      return cpImg;
    }

    /**
    * Create a clone of this image that ensure data are encoded in a Float32Array.
    * @return {Image2D} the F32 clone
    */

  }, {
    key: 'float32Clone',
    value: function float32Clone() {
      var cpImg = new Image2D();
      var ncpp = this.getMetadata("ncpp");
      var width = this.getMetadata("width");
      var height = this.getMetadata("height");

      cpImg.setData(new Float32Array(this._data), width, height, ncpp);
      cpImg.copyMetadataFrom(this);
      return cpImg;
    }

    /**
    *  Set the data to this Image2D.
    * @param {Float32Array} array - 1D array of raw data stored as RGBARGBA...
    * @param {Number} width - width of the Image2D
    * @param {Number} height - height of the Image2D
    * @param {Number} ncpp - number of components per pixel (default: 4)
    * @param {Boolean} deepCopy - if true, a copy of the data is given, if false we jsut give the pointer
    */

  }, {
    key: 'setData',
    value: function setData(array, width, height) {
      var ncpp = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 4;
      var deepCopy = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;

      this.setMetadata("ncpp", ncpp);

      if (array.length != width * height * ncpp) {
        console.warn("The array size does not match the width and height. Cannot init the Image2D.");
        return;
      }

      if (deepCopy) {
        this._data = new array.constructor(array);
      } else {
        this._data = array;
      }

      this.setMetadata("width", width);
      this.setMetadata("height", height);

      this.computeSimpleStat();
    }

    /**
    * Modify the color of a given pixel.
    * @param {Object} position - 2D position in form {x, y}
    * @param {Array} color - color, must have the same numb of components per pix than the image
    */

  }, {
    key: 'setPixel',
    value: function setPixel(position, color) {
      var computeStat = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;


      if (!this._data) {
        console.warn("The image is empty");
        return;
      }

      var ncpp = this._metadata.ncpp;

      if ("x" in position && position.x >= 0 && position.x < this._metadata.width && "y" in position && position.y >= 0 && position.y < this._metadata.height) {

        if (color.length == ncpp) {
          var pos1D = this.get1dIndexFrom2dPosition(position);

          if (ncpp == 1) {
            this._data[pos1D] = color[0];
          } else {
            pos1D *= ncpp;
            for (var i = 0; i < ncpp; i++) {
              this._data[pos1D + i] = color[i];
            }
          }
        } else
          // we gave a RGB color instead of a RGBA, it's ok...
          if (color.length == 3 && ncpp == 4) {
            var pos1D = this.get1dIndexFrom2dPosition(position);
            pos1D *= ncpp;
            for (var i = 0; i < color.length; i++) {
              this._data[pos1D + i] = color[i];
            }
          }

        if (computeStat) {
          this.computeSimpleStat();
        }
      } else {
        //console.error("x and y position have to be within the image dimensions and color size must be the same as the original image.");
      }
    }

    /**
    * @param {Object} position - 2D positoin like {x: Number, y: Number}
    * @return {Array} the color of the given pixel.
    */

  }, {
    key: 'getPixel',
    value: function getPixel(position) {
      if (!this._data) {
        console.warn("The image is empty");
        return;
      }

      if ("x" in position && position.x >= 0 && position.x < this._metadata.width && "y" in position && position.y >= 0 && position.y < this._metadata.height) {
        //var ncpp = this.getMetadata("ncpp");
        var ncpp = this._metadata.ncpp;
        var color = null;
        var pos1D = this.get1dIndexFrom2dPosition(position);

        //
        if (ncpp == 1) {
          color = [this._data[pos1D]];
        } else {
          pos1D *= ncpp;
          color = this._data.slice(pos1D, pos1D + ncpp);
        }

        return color;
      } else {
        console.warn("The requested position is outside the image.");
        return null;
      }
    }

    /**
    * Get the width of the image
    * @return {Number} the width of the Image2D
    */

  }, {
    key: 'getWidth',
    value: function getWidth() {
      return this._metadata.width;
    }

    /**
    * Get the height of the image
    * @return {Number} the height of the Image2D
    */

  }, {
    key: 'getHeight',
    value: function getHeight() {
      return this._metadata.height;
    }

    /**
    * Get the number of components per pixel
    * @return {Number} the number of components per pixel
    */

  }, {
    key: 'getComponentsPerPixel',
    value: function getComponentsPerPixel() {
      return this._metadata.ncpp;
    }

    /**
    * Alias to getComponentsPerPixel. Return the number of components per pixel.
    * @return {Number} ncpp
    */

  }, {
    key: 'getNcpp',
    value: function getNcpp() {
      return this.getComponentsPerPixel();
    }

    /**
    * Get the internal image data (pointer)
    * @return {TypedArray} the original data (most likely a Float32Array), dont mess up with this one.
    * in case of doubt, use  getDataCopy()
    */

  }, {
    key: 'getData',
    value: function getData() {
      return this._data; // return the actual array, editable!
    }

    /**
    * Get a copy of the data
    * @return {TypedArray} a deep copy of the data (most likely a Float32Array)
    */

  }, {
    key: 'getDataCopy',
    value: function getDataCopy() {
      return new this._data.constructor(this._data);
    }

    /**
    * No matter the original type of the internal data, scale it into a [0, 255] uInt8Array
    * @return {Uint8Array} scaled data
    */

  }, {
    key: 'getDataAsUInt8Array',
    value: function getDataAsUInt8Array() {
      if (!this._data) {
        console.warn("No data, cannot make a copy of it.");
        return;
      }

      var min = this.getMin();
      var max = this.getMax();

      var uintData = new Uint8Array(this._data.length);

      for (var i = 0; i < this._data.length; i++) {
        uintData[i] = (this._data[i] - min) / max * 256;
      }

      return uintData;
    }

    /**
    * Get a copy of the data but forced as Float 32 (no scaling is done)
    * @return {Float32Array} the casted array
    */

  }, {
    key: 'getDataAsFloat32Array',
    value: function getDataAsFloat32Array() {
      if (!this._data) {
        console.warn("No data, cannot make a copy of it.");
        return;
      }

      return new Float32Array(this._data);
    }

    /**
    * Compute the (x, y) position from a position in a 1D array.
    * This has nothing to do with the number of components per pixel.
    * @param {Number} i - the index of a pixel.
    * @return {Object} coordinate as {x, y}
    */

  }, {
    key: 'get2dPositionFrom1dIndex',
    value: function get2dPositionFrom1dIndex(i) {
      return {
        x: i % this._metadata.width,
        y: Math.floor(i / this._metadata.width)
      };
    }

    /**
    * Compute the 1D index within the data buffer from a 2D position {x, y}.
    * This has nothing to do with the number of components per pixel.
    * @param {Object} position - 2D coord like {x, y}
    * @return {Number} the 1D position within the buffer
    */

  }, {
    key: 'get1dIndexFrom2dPosition',
    value: function get1dIndexFrom2dPosition(position) {
      //return (position.x + position.y*this.getMetadata("width"));
      return position.x + position.y * this._metadata.width; // faster when querried a lot
    }

    /**
    * Compute "min" "max" and "avg" and store them in metadata
    */

  }, {
    key: 'computeSimpleStat',
    value: function computeSimpleStat() {
      if (!this._data) {
        console.warn("The image is empty");
        return;
      }

      var min = +Infinity;
      var max = -Infinity;
      var total = 0;

      for (var i = 0; i < this._data.length; i++) {
        min = Math.min(min, this._data[i]);
        max = Math.max(min, this._data[i]);
        total += this._data[i];
      }

      this.setMetadata("min", min);
      this.setMetadata("max", max);
      this.setMetadata("avg", total / this._data.length);
    }

    /**
    * Get the lowest intensity of the image
    * @return {Number} the minimum value of the data
    */

  }, {
    key: 'getMin',
    value: function getMin() {
      if (!this.hasMetadata("min")) {
        this.computeSimpleStat();
      }
      return this.getMetadata("min");
    }

    /**
    * Get the highest intensity of the image
    * @return {Number} the maximum value of the data
    */

  }, {
    key: 'getMax',
    value: function getMax() {
      if (!this.hasMetadata("max")) {
        this.computeSimpleStat();
      }
      return this.getMetadata("max");
    }

    /**
    * Get the average intensity of the image
    * @return {Number} the average value of the data
    */

  }, {
    key: 'getAvg',
    value: function getAvg() {
      if (!this.hasMetadata("avg")) {
        this.computeSimpleStat();
      }
      return this.getMetadata("avg");
    }

    /**
    * Tells if a given point is inside or outside the image
    * @param {Object} pos - position like {x: Number, y: Number}
    * @return {Boolean} true for inside, false for outside
    */

  }, {
    key: 'isInside',
    value: function isInside(pos) {
      return pos.x >= 0 && pos.x < this._metadata.width && pos.y >= 0 && pos.y < this._metadata.height;
    }

    /**
    * Sample the color along a segment
    * @param {Object} posFrom - starting position of type {x: Number, y: Number}
    * @param {Object} posFrom - ending position of type {x: Number, y: Number}
    * @return {Object} array of Array like that: {
                                                    positions: [
                                                      {x: x0, y: y0},
                                                      {x: x1, y: y1},
                                                      {x: x2, y: y2},
                                                      ...
                                                    ],
                                                    labels: [
                                                      "(x0, y0)", "(x1, y1)", "(x2, y2)", ...
                                                    ],
                                                    colors: [
                                                              [r0, r1, r2 ...],
                                                              [g0, g1, g2 ...],
                                                              [b0, b1, b2 ...]
                                                    ]
                                                  }
       return null if posFrom or posTo is outside
    */

  }, {
    key: 'getSegmentSample',
    value: function getSegmentSample(posFrom, posTo) {
      // both position must be inside the image
      if (!this.isInside(posFrom) || !this.isInside(posTo)) return null;

      var dx = posTo.x - posFrom.x;
      var dy = posTo.y - posFrom.y;
      var euclidianDistance = Math.sqrt(Math.pow(dx, 2) + Math.pow(dy, 2));
      var numberOfSamples = Math.floor(euclidianDistance + 1);

      // we want to sample every unit distance along the segment
      var stepX = dx / euclidianDistance;
      var stepY = dy / euclidianDistance;

      var ncpp = this._metadata.ncpp;
      var positions = new Array(numberOfSamples).fill(0);
      var colors = new Array(ncpp).fill(0);
      var labels = new Array(numberOfSamples).fill(0);

      // creating empty arrays for colors
      for (var c = 0; c < ncpp; c++) {
        colors[c] = new Array(numberOfSamples).fill(0);
      }

      // walk along the segment, from posFrom to posTo
      for (var i = 0; i < numberOfSamples; i++) {
        var currentPos = { x: Math.round(posFrom.x + i * stepX), y: Math.round(posFrom.y + i * stepY) };
        positions[i] = currentPos;
        labels[i] = "(" + currentPos.x + ", " + currentPos.y + ")";

        var pixValue = this.getPixel(currentPos);

        // each channel is dispatched in its array
        for (var c = 0; c < ncpp; c++) {
          colors[c][i] = pixValue[c];
        }
      }

      return {
        positions: positions,
        labels: labels,
        colors: colors
      };
    } /* END of method getLineSample */

  }], [{
    key: 'TYPE',
    value: function TYPE() {
      return "IMAGE2D";
    }
  }]);
  return Image2D;
}(PixpipeContainer); /* END of class Image2D */

// register this type as a CoreType


CoreTypes.addCoreType(Image2D);

/*
* Author   Jonathan Lurie - http://me.jonathanlurie.fr
* License  MIT
* Link      https://github.com/Pixpipe/pixpipejs
* Lab       MCIN - Montreal Neurological Institute
*/

/**
* Image3D class is one of the few base element of Pixpipejs.
* It is always considered to be 4 channels (RGBA) and stored as a Float32Array
* typed array.
*/

var Image3D = function (_PixpipeContainer) {
  inherits(Image3D, _PixpipeContainer);

  /**
  * Constructor of an Image3D instance. If no options, no array is allocated.
  * @param {Object} options - may contain the following:
  *   - options.xSize {Number} space length along x axis
  *   - options.ySize {Number} space length along y axis
  *   - option.zSize {Number} space length along z axis
  *   - options.ncpp {Number} number of components per pixel. Default = 1
  *   - options.order {Array} dimensionality order. default = ["zspace", "yspace", "xspace"]
  */
  function Image3D() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    classCallCheck(this, Image3D);

    var _this = possibleConstructorReturn(this, (Image3D.__proto__ || Object.getPrototypeOf(Image3D)).call(this));

    _this._type = Image3D.TYPE();

    // number of component per pixel, for color OR time series
    _this.setMetadata("ncpp", 1);

    // dimensionality order
    if (options && "order" in options) {
      _this.setMetadata("order", options.order);
    } else {
      _this.setMetadata("order", ["zspace", "yspace", "xspace"]);
    }

    var xspace = {
      offset: 1,
      step: 1
    };

    var yspace = {
      step: 1
    };

    var zspace = {
      step: 1
    };

    var time = {
      offset: 0,
      space_length: 1
    };

    _this.setMetadata("xspace", xspace);
    _this.setMetadata("yspace", yspace);
    _this.setMetadata("zspace", zspace);
    _this.setMetadata("time", time);

    // replacing default value for ncpp
    if (options && "ncpp" in options) {
      _this.setMetadata("ncpp", options.ncpp);
    }

    // allocate the array if size is specified
    if (options && "xSize" in options && "ySize" in options && "zSize" in options) {

      if (options.xSize > 0 && options.ySize > 0 && options.zSize > 0) {
        xspace.space_length = options.xSize;
        yspace.space_length = options.ySize;
        zspace.space_length = options.zSize;

        yspace.offset = xspace.space_length;
        zspace.offset = xspace.space_length * yspace.space_length;

        _this._data = new Float32Array(options.xSize * options.ySize * options.zSize * _this.getMetadata("ncpp"));
        _this._data.fill(0);

        _this._scanDataRange();
        _this._finishHeader();
      }
    }
    return _this;
  }

  /**
  * Hardcode the datatype
  */


  createClass(Image3D, [{
    key: 'clone',


    /**
    * @return {Image3D} a deep copy instance of this Image3D
    */
    value: function clone() {
      var cpImg = new Image3D();

      cpImg.setData(this._data, this.getMetadata("xspace").space_length, this.getMetadata("yspace").space_length, this.getMetadata("zspace").space_length, {
        ncpp: this.getMetadata("ncpp"),
        order: this.getMetadata("order").slice(),
        deepCopy: true
      });

      cpImg.copyMetadataFrom(this);

      return cpImg;
    }

    /**
    *  Set the data to this Image3D.
    * @param {Float32Array} array - 1D array of raw data stored as RGBARGBA...
    * @param {Number} xSize - length along x dimension of the Image3D
    * @param {Number} ySize - length along y dimension of the Image3D
    * @param {Number} zSize - length along z dimension of the Image3D
    * @param {Number} ncpp - number of components per pixel (default: 4)
    * @param {Boolean} deepCopy - if true, a copy of the data is given, if false we jsut give the pointer
    * @param {Object} options, among them:
    *   - ncpp {Number} number of components per pixel. Default = 1
    *   - order {Array} dimensionality order. Default = ["zspace", "yspace", "xspace"]
    *   - deepCopy {Boolean} copy the whole array if true, or just the pointer if false. Default = false
    *
    */

  }, {
    key: 'setData',
    value: function setData(array, xSize, ySize, zSize, options) {
      var ncpp = 1;

      // number of components per pixel
      if (options && "ncpp" in options) {
        ncpp = options.ncpp;
      }

      if (array.length != xSize * ySize * zSize * ncpp) {
        console.warn("The array size does not match the width and height. Cannot init the Image3D.");
        return;
      }

      // number of components per pixel
      if (options && "ncpp" in options) {
        this.setMetadata("ncpp", options.ncpp);
      }

      // dimensionality order
      if (options && "order" in options) {
        this.setMetadata("order", options.order);
      }

      // deep of shallow copy
      if (options && "deepCopy" in options && options.deepCopy) {
        this._data = new array.constructor(array);
      } else {
        this._data = array;
      }

      var xspace = this.getMetadata("xspace");
      var yspace = this.getMetadata("yspace");
      var zspace = this.getMetadata("zspace");

      xspace.space_length = xSize;
      yspace.space_length = ySize;
      zspace.space_length = zSize;

      yspace.offset = xspace.space_length;
      zspace.offset = xspace.space_length * yspace.space_length;

      this._scanDataRange();
      this._finishHeader();
    }

    /**
    * [PRIVATE]
    * Creates common fields all headers must contain.
    */

  }, {
    key: '_finishHeader',
    value: function _finishHeader() {
      var xspace = this.getMetadata("xspace");
      var yspace = this.getMetadata("yspace");
      var zspace = this.getMetadata("zspace");

      xspace.name = "xspace";
      yspace.name = "yspace";
      zspace.name = "zspace";

      xspace.width_space = JSON.parse(JSON.stringify(yspace)); //yspace;
      xspace.width = yspace.space_length;
      xspace.height_space = JSON.parse(JSON.stringify(zspace)); //zspace;
      xspace.height = zspace.space_length;

      yspace.width_space = JSON.parse(JSON.stringify(xspace)); //xspace;
      yspace.width = xspace.space_length;
      yspace.height_space = JSON.parse(JSON.stringify(zspace)); //zspace;
      yspace.height = zspace.space_length;

      zspace.width_space = JSON.parse(JSON.stringify(xspace)); //xspace;
      zspace.width = xspace.space_length;
      zspace.height_space = JSON.parse(JSON.stringify(yspace)); //yspace;
      zspace.height = yspace.space_length;
    }

    /**
    * [PRIVATE]
    * Look for min and max on the dataset and add them to the header metadata
    */

  }, {
    key: '_scanDataRange',
    value: function _scanDataRange() {
      var min = +Infinity;
      var max = -Infinity;

      for (var i = 0; i < this._data.length; i++) {
        min = Math.min(min, this._data[i]);
        max = Math.max(max, this._data[i]);
      }

      this.setMetadata("voxel_min", min);
      this.setMetadata("voxel_max", max);
    }

    /**
    * Modify the color of a given pixel.
    * @param {Object} position - 3D position in the form {x, y, z}
    * @param {Array} color - color, must have the same number of components per pixel than the image
    */

  }, {
    key: 'setPixel',
    value: function setPixel(position, color) {}
    // TODO: to implement using order offset


    /**
    * Same as getIntensity_xyz, get a pixel/voxel value using (x, y, z) position
    * @param {Object} position - 3D position like {x, y, z}
    * @return {Array} the color of the given pixel.
    */

  }, {
    key: 'getPixel',
    value: function getPixel(position) {
      return this.getIntensity_xyz(position.x, position.y, position.z);
    }

    /**
    * @param {String} space - "xspace", "yspace" or "zspace"
    * @return {Number} the size of the Image3D along the given space
    */

  }, {
    key: 'getSize',
    value: function getSize(space) {
      if (this.hasMetadata(space)) {
        return this.getMetadata(space).space_length;
      } else {
        console.warn("The space must be \"xspace\", \"yspace\" or \"zspace\".");
        return null;
      }
    }

    /**
    * @return {Float32Array} the original data, dont mess up with this one.
    * in case of doubt, use  getDataCopy()
    */

  }, {
    key: 'getData',
    value: function getData() {
      return this._data; // return the actual array, editable!
    }

    /**
    * @return {Float32Array} a deep copy of the data
    */

  }, {
    key: 'getDataCopy',
    value: function getDataCopy() {
      return new this._data.constructor(this._data);
    }

    /**
    * Compute the 1D index within the data buffer from a 3D position {x, y, z}.
    * This has nothing to do with the number of components per pixel.
    * @param {Object} position - 3D coord like {x, y, z}
    * @return {Number} the 1D position within the buffer
    */

  }, {
    key: 'get1dIndexFrom3dPosition',
    value: function get1dIndexFrom3dPosition(position) {}
    //return (position.x + position.y*this._width);
    //return this._xSize * this._ySize * position.z + this._xSize * position.y + position.x;
    // TODO: to implement using order offset


    /**
    * [PRIVATE]
    * Return a slice from the minc cube as a 1D typed array,
    * along with some relative data (slice size, step, etc.)
    * args:
    * @param {String} axis - "xspace", "yspace" or zspace (mandatory)
    * @param {Number} slice_num - index of the slice [0; length-1] (optional, default: length-1)
    * @param {Number} time - index of time (optional, default: 0)
    * TODO: add some method to a slice (get value) because it's a 1D array... and compare with Python
    */

  }, {
    key: 'getSlice',
    value: function getSlice(axis) {
      var slice_num = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var time = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

      if (!this.hasMetadata(axis)) {
        console.warn("The axis " + axis + " does not exist.");
        return null;
      }

      var time_offset = this.hasMetadata("time") ? time * this.getMetadata("time").offset : 0;

      var axis_space = this.getMetadata(axis);
      var width_space = axis_space.width_space;
      var height_space = axis_space.height_space;

      var width = axis_space.width;
      var height = axis_space.height;

      var axis_space_offset = axis_space.offset;
      var width_space_offset = width_space.offset;
      var height_space_offset = height_space.offset;

      // Calling the volume data's constructor guarantees that the
      // slice data buffer has the same type as the volume.
      //
      //var slice_data = new this._data.constructor(width * height);
      var slice_data = new this._data.constructor(width * height);

      // Rows and colums of the result slice.
      var row, col;

      // Indexes into the volume, relative to the slice.
      // NOT xspace, yspace, zspace coordinates!!!
      var x, y, z;

      // Linear offsets into volume considering an
      // increasing number of axes: (t) time,
      // (z) z-axis, (y) y-axis, (x) x-axis.
      var tz_offset, tzy_offset, tzyx_offset;

      // Whether the dimension steps positively or negatively.
      var x_positive = width_space.step > 0;
      var y_positive = height_space.step > 0;
      var z_positive = axis_space.step > 0;

      // iterator for the result slice.
      var i = 0;
      var intensity = 0;
      var intensitySum = 0;
      var min = Infinity;
      var max = -Infinity;

      var maxOfVolume = this.getMetadata("voxel_max");

      z = z_positive ? slice_num : axis_space.space_length - slice_num - 1;
      if (z >= 0 && z < axis_space.space_length) {
        tz_offset = time_offset + z * axis_space_offset;

        for (row = height - 1; row >= 0; row--) {
          y = y_positive ? row : height - row - 1;
          tzy_offset = tz_offset + y * height_space_offset;

          for (col = 0; col < width; col++) {
            x = x_positive ? col : width - col - 1;
            tzyx_offset = tzy_offset + x * width_space_offset;

            intensity = this._data[tzyx_offset];

            min = Math.min(min, intensity);
            max = Math.max(max, intensity);
            intensitySum += intensity;

            slice_data[i++] = intensity;
          }
        }
      }

      var outputImage = new Image2D();
      outputImage.setData(slice_data, width, height, 1);
      outputImage.setMetadata("min", min);
      outputImage.setMetadata("max", max);
      outputImage.setMetadata("avg", intensitySum / (i - 1));
      return outputImage;
    }

    /**
    * Get the intensity of a given voxel, addressed by dimensionality order.
    * In case of doubt, use getIntensity_xyz instead.
    * @param {Number} i - Position within the biggest dimensionality order
    * @param {Number} j - Position within the in-the-middle dimensionality order
    * @param {Number} k - Position within the smallest dimensionality order
    */

  }, {
    key: 'getIntensity_ijk',
    value: function getIntensity_ijk(i, j, k) {
      var time = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;

      var order = this.getMetadata("order");

      if (i < 0 || i >= this.getMetadata(order[0]).space_length || j < 0 || j >= this.getMetadata(order[1]).space_length || k < 0 || k >= this.getMetadata(order[2]).space_length) {
        console.warn("getIntensity_ijk position is out of range.");
        return 0;
      }

      //var time_offset = this.hasMetadata( "time" ) ? time * this.getMetadata( "time" ).offset : 0;
      var time_offset = this._metadata.time.offset * time;

      var xyzt_offset = i * this.getMetadata(order[0]).offset + j * this.getMetadata(order[1]).offset + k * this.getMetadata(order[2]).offset + time_offset;

      return this._data[xyzt_offset];
    }

    /**
    * Get the intensity of a given voxel, addressed by dimension names.
    * @param {Number} x - position within xspace
    * @param {Number} y - position within yspace
    * @param {Number} z - position within zspace
    * @param {Number} time - position in time (optional)
    */

  }, {
    key: 'getIntensity_xyz',
    value: function getIntensity_xyz(x, y, z) {
      var time = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;


      if (x < 0 || x >= this._metadata.xspace.space_length || y < 0 || y >= this._metadata.yspace.space_length || z < 0 || z >= this._metadata.zspace.space_length) {
        console.warn("getIntensity_xyz position is out of range.");
        return 0;
      }

      //var time_offset = this.hasMetadata( "time" ) ? time * this.getMetadata( "time" ).offset : 0;
      var time_offset = this._metadata.time.offset * time;

      var xyzt_offset = x * this._metadata.xspace.offset + y * this._metadata.yspace.offset + z * this._metadata.zspace.offset + time_offset;

      return this._data[xyzt_offset];
    }
  }, {
    key: 'getIntensity_xyzOrientation',
    value: function getIntensity_xyzOrientation(x, y, z) {
      var time = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;

      var time_offset = this.hasMetadata("time") ? time * this.getMetadata("time").offset : 0;

      if (x == 10 && y == 30 && z == 20) {
        console.log("stop");
      }

      var xspace = this.getMetadata("xspace");
      var yspace = this.getMetadata("yspace");
      var zspace = this.getMetadata("zspace");

      // Whether the dimension steps positively or negatively.
      var x_positive = xspace.step > 0;
      var y_positive = yspace.step > 0;
      var z_positive = zspace.step > 0;

      var xOrent = x_positive ? x : xspace.space_length - x - 1;
      var yOrent = y_positive ? y : yspace.space_length - y - 1;
      //var yOrent = y_positive ? yspace.space_length - y - 1 : y;
      var zOrent = z_positive ? z : zspace.space_length - z - 1;

      if (x >= 0 && x < xspace.space_length && y >= 0 && y < yspace.space_length && z >= 0 && z < zspace.space_length) {
        var offset = time_offset + xOrent * xspace.offset + yOrent * yspace.offset + zOrent * zspace.offset;
        return this._data[offset];
      } else {
        return null;
      }
    }

    /**
    * Get the number of samples over time
    */

  }, {
    key: 'getTimeLength',
    value: function getTimeLength() {
      return this.hasMetadata("time") ? this.getMetadata("time").space_length : 1;
    }

    /**
    * Tells if a given point is inside or outside the image
    * @param {Object} pos - position like {x: Number, y: Number, z: Number}
    * @return {Boolean} true for inside, false for outside
    */

  }, {
    key: 'isInside',
    value: function isInside(pos) {
      return !(pos.x < 0 || pos.x >= this._metadata.xspace.space_length || pos.y < 0 || pos.y >= this._metadata.yspace.space_length || pos.z < 0 || pos.z >= this._metadata.zspace.space_length);
    }

    /**
    * Sample the color along a segment
    * @param {Object} posFrom - starting position of type {x: Number, y: Number, z: Number}
    * @param {Object} posFrom - ending position of type {x: Number, y: Number, z: Number}
    * @return {Object} array of Array like that: {
                                                    positions: [
                                                      {x: x0, y: y0, z: z0},
                                                      {x: x1, y: y1, z: z1},
                                                      {x: x2, y: y2, z: z2},
                                                      ...
                                                    ],
                                                    labels: [
                                                      "(x0, y0, z0)", "(x1, y1, z1)", "(x2, y2, z2)", ...
                                                    ],
                                                    colors: [
                                                              [r0, r1, r2 ...],
                                                              [g0, g1, g2 ...],
                                                              [b0, b1, b2 ...]
                                                    ]
                                                  }
       return null if posFrom or posTo is outside
    */

  }, {
    key: 'getSegmentSample',
    value: function getSegmentSample(posFrom, posTo) {
      if (!this.isInside(posFrom) || !this.isInside(posTo)) return null;

      var dx = posTo.x - posFrom.x;
      var dy = posTo.y - posFrom.y;
      var dz = posTo.z - posFrom.z;
      var euclidianDistance = Math.sqrt(Math.pow(dx, 2) + Math.pow(dy, 2) + Math.pow(dz, 2));
      var numberOfSamples = Math.floor(euclidianDistance + 1);

      // we want to sample every unit distance along the segment
      var stepX = dx / euclidianDistance;
      var stepY = dy / euclidianDistance;
      var stepZ = dz / euclidianDistance;

      var ncpp = this._metadata.ncpp;
      var positions = new Array(numberOfSamples).fill(0);
      var colors = new Array(ncpp).fill(0);
      var labels = new Array(numberOfSamples).fill(0);

      // creating empty arrays for colors
      for (var c = 0; c < ncpp; c++) {
        colors[c] = new Array(numberOfSamples).fill(0);
      }

      // walk along the segment, from posFrom to posTo
      for (var i = 0; i < numberOfSamples; i++) {
        var currentPos = {
          x: Math.round(posFrom.x + i * stepX),
          y: Math.round(posFrom.y + i * stepY),
          z: Math.round(posFrom.z + i * stepZ)
        };

        positions[i] = currentPos;
        labels[i] = "(" + currentPos.x + ", " + currentPos.y + ", " + currentPos.z + ")";

        var pixValue = [this.getIntensity_xyz(currentPos.x, currentPos.y, currentPos.z)];

        // each channel is dispatched in its array
        for (var c = 0; c < ncpp; c++) {
          colors[c][i] = pixValue[c];
        }
      }

      return {
        positions: positions,
        labels: labels,
        colors: colors
      };
    } /* END of method getLineSample */

  }], [{
    key: 'TYPE',
    value: function TYPE() {
      return "IMAGE3D";
    }
  }]);
  return Image3D;
}(PixpipeContainer); /* END of class Image3D */

// register this type as a CoreType


CoreTypes.addCoreType(Image3D);

/*
* Author   Jonathan Lurie - http://me.jonathanlurie.fr
* License  MIT
* Link      https://github.com/Pixpipe/pixpipejs
* Lab       MCIN - Montreal Neurological Institute
*/

/**
* ImageToImageFilter is not to be used as-is but rather as a base class for any
* filter that input a single Image2D and output a single Image2D.
* This class does not overload the update() method.
*/

var ImageToImageFilter = function (_Filter) {
  inherits(ImageToImageFilter, _Filter);

  function ImageToImageFilter() {
    classCallCheck(this, ImageToImageFilter);
    return possibleConstructorReturn(this, (ImageToImageFilter.__proto__ || Object.getPrototypeOf(ImageToImageFilter)).call(this));
  }

  /**
  * Check if all input image have the same size.
  * @return {Boolean} true is same size, false if not.
  */


  createClass(ImageToImageFilter, [{
    key: 'hasSameSizeInput',
    value: function hasSameSizeInput() {
      var that = this;
      var inputCategories = Object.keys(this._input);
      var sameSize = true;

      var widths = [];
      var heights = [];

      inputCategories.forEach(function (key) {
        widths.push(that._getInput(key).getWidth());
        heights.push(that._getInput(key).getHeight());
      });

      // if all input have the same size
      if (widths.length) {
        widths.sort();
        heights.sort();
        sameSize = widths[0] == widths[widths.length - 1] && heights[0] == heights[heights.length - 1];

        if (!sameSize) {
          console.warn("Input image do not all have the same size. Filter not valid");
        }
      }

      return sameSize;
    }

    /**
    * Check if all the inputs have the same number of component per pixel.
    * @return {Boolean} true if the ncpp are the same for all input image
    */

  }, {
    key: 'hasSameNcppInput',
    value: function hasSameNcppInput() {
      var inputCategories = Object.keys(this._input);

      // if no input, return false
      if (!inputCategories.length) return false;

      var ncpp = this._getInput(inputCategories[0]).getComponentsPerPixel();

      for (var i = 0; i < inputCategories.length; i++) {
        if (ncpp != this._getInput(inputCategories[i]).getComponentsPerPixel()) {
          console.warn("Input image do not all have the same number of components per pixel. Filter not valid");
          return false;
        }
      }

      return true;
    }
  }]);
  return ImageToImageFilter;
}(Filter); /* END class ImageToImageFilter */

/*
* Author   Jonathan Lurie - http://me.jonathanlurie.fr
* License  MIT
* Link      https://github.com/Pixpipe/pixpipejs
* Lab       MCIN - Montreal Neurological Institute
*/

/**
* MniVolume instance are like Image3D but include some brain things
*/

var MniVolume = function (_Image3D) {
  inherits(MniVolume, _Image3D);

  /**
  * Constructor of an Image3D instance. If no options, no array is allocated.
  * @param {Object} options - if present, must have options.xSize, options.ySize, option.zSize.
  * Also options.ncpp to set the number of components per pixel. (possibly for using time series)
  */
  function MniVolume() {
    classCallCheck(this, MniVolume);
    return possibleConstructorReturn(this, (MniVolume.__proto__ || Object.getPrototypeOf(MniVolume)).call(this));
  }

  /**
  * [STATIC]
  * mainly used by the ouside world (like from Nifti)
  */


  createClass(MniVolume, [{
    key: 'setData',


    /**
    * Initialize a MniVolume with the data and the header.
    * @param {Array} data - TypedArray containing the data
    */
    value: function setData(data, header) {
      var that = this;
      this._data = data;

      this.setMetadata("position", {});
      this.setMetadata("current_time", 0);

      // copying header into metadata
      var headerKeys = Object.keys(header);
      headerKeys.forEach(function (key) {
        that.setMetadata(key, header[key]);
      });

      // find min/max
      this._scanDataRange();

      // set W2v matrix
      this._saveOriginAndTransform();

      // adding some fields to metadata header
      this._finishHeader();

      console.log(this);
    }

    /**
    * [PRIVATE}
    * Calculate the world to voxel transform and save it, so we
    * can access it efficiently. The transform is:
    * cxx / stepx | cxy / stepx | cxz / stepx | (-o.x * cxx - o.y * cxy - o.z * cxz) / stepx
    * cyx / stepy | cyy / stepy | cyz / stepy | (-o.x * cyx - o.y * cyy - o.z * cyz) / stepy
    * czx / stepz | czy / stepz | czz / stepz | (-o.x * czx - o.y * czy - o.z * czz) / stepz
    * 0           | 0           | 0           | 1
    *
    * Origin equation taken from (http://www.bic.mni.mcgill.ca/software/minc/minc2_format/node4.html)
    */

  }, {
    key: '_saveOriginAndTransform',
    value: function _saveOriginAndTransform() {

      var xspace = this.getMetadata("xspace");
      var yspace = this.getMetadata("yspace");
      var zspace = this.getMetadata("zspace");

      var startx = xspace.start;
      var starty = yspace.start;
      var startz = zspace.start;
      var cx = xspace.direction_cosines;
      var cy = yspace.direction_cosines;
      var cz = zspace.direction_cosines;
      var stepx = xspace.step;
      var stepy = yspace.step;
      var stepz = zspace.step;

      // voxel_origin
      var o = {
        x: startx * cx[0] + starty * cy[0] + startz * cz[0],
        y: startx * cx[1] + starty * cy[1] + startz * cz[1],
        z: startx * cx[2] + starty * cy[2] + startz * cz[2]
      };

      this.setMetadata("voxel_origin", o);

      var tx = (-o.x * cx[0] - o.y * cx[1] - o.z * cx[2]) / stepx;
      var ty = (-o.x * cy[0] - o.y * cy[1] - o.z * cy[2]) / stepy;
      var tz = (-o.x * cz[0] - o.y * cz[1] - o.z * cz[2]) / stepz;

      var w2v = [[cx[0] / stepx, cx[1] / stepx, cx[2] / stepx, tx], [cy[0] / stepy, cy[1] / stepy, cy[2] / stepy, ty], [cz[0] / stepz, cz[1] / stepz, cz[2] / stepz, tz]];

      this.setMetadata("w2v", w2v);
    }
  }], [{
    key: 'transformToMinc',
    value: function transformToMinc(transform, header) {
      var x_dir_cosines = [];
      var y_dir_cosines = [];
      var z_dir_cosines = [];

      // A tiny helper function to calculate the magnitude of the rotational
      // part of the transform.
      //
      function magnitude(v) {
        var dotprod = v[0] * v[0] + v[1] * v[1] + v[2] * v[2];
        if (dotprod <= 0) {
          dotprod = 1.0;
        }
        return Math.sqrt(dotprod);
      }

      // Calculate the determinant of a 3x3 matrix, from:
      // http://www.mathworks.com/help/aeroblks/determinantof3x3matrix.html
      //
      // det(A) = A_{11} (A_{22}A_{33} - A_{23}A_{32}) -
      //          A_{12} (A_{21}A_{33} - A_{23}A_{31}) +
      //          A_{13} (A_{21}A_{32} - A_{22}A_{31})
      //
      // Of course, I had to change the indices from 1-based to 0-based.
      //
      function determinant(c0, c1, c2) {
        return c0[0] * (c1[1] * c2[2] - c1[2] * c2[1]) - c0[1] * (c1[0] * c2[2] - c1[2] * c2[0]) + c0[2] * (c1[0] * c2[1] - c1[1] * c2[0]);
      }

      // Now that we have the transform, need to convert it to MINC-like
      // steps and direction_cosines.

      var xmag = magnitude(transform[0]);
      var ymag = magnitude(transform[1]);
      var zmag = magnitude(transform[2]);

      var xstep = transform[0][0] < 0 ? -xmag : xmag;
      var ystep = transform[1][1] < 0 ? -ymag : ymag;
      var zstep = transform[2][2] < 0 ? -zmag : zmag;

      for (var i = 0; i < 3; i++) {
        x_dir_cosines[i] = transform[i][0] / xstep;
        y_dir_cosines[i] = transform[i][1] / ystep;
        z_dir_cosines[i] = transform[i][2] / zstep;
      }

      header.xspace.step = xstep;
      header.yspace.step = ystep;
      header.zspace.step = zstep;

      // Calculate the corrected start values.
      var starts = [transform[0][3], transform[1][3], transform[2][3]];

      // (bert): I believe that the determinant of the direction
      // cosines should always work out to 1, so the calculation of
      // this value should not be needed. But I have no idea if NIfTI
      // enforces this when sform transforms are written.
      var denom = determinant(x_dir_cosines, y_dir_cosines, z_dir_cosines);
      var xstart = determinant(starts, y_dir_cosines, z_dir_cosines);
      var ystart = determinant(x_dir_cosines, starts, z_dir_cosines);
      var zstart = determinant(x_dir_cosines, y_dir_cosines, starts);

      header.xspace.start = xstart / denom;
      header.yspace.start = ystart / denom;
      header.zspace.start = zstart / denom;

      header.xspace.direction_cosines = x_dir_cosines;
      header.yspace.direction_cosines = y_dir_cosines;
      header.zspace.direction_cosines = z_dir_cosines;
    }
  }, {
    key: 'swapn',


    /**
    * [STATIC]
    * swap the data to be used from the outside (ie. nifti)
    */
    value: function swapn(byte_data, n_per_item) {
      for (var d = 0; d < byte_data.length; d += n_per_item) {
        var hi_offset = n_per_item - 1;
        var lo_offset = 0;
        while (hi_offset > lo_offset) {
          var tmp = byte_data[d + hi_offset];
          byte_data[d + hi_offset] = byte_data[d + lo_offset];
          byte_data[d + lo_offset] = tmp;
          hi_offset--;
          lo_offset++;
        }
      }
    }
  }]);
  return MniVolume;
}(Image3D); /* END of class Image3D */

// register this type as a CoreType


CoreTypes.addCoreType(MniVolume);

/*
* Author   Jonathan Lurie - http://me.jonathanlurie.fr
* License  MIT
* Link      https://github.com/Pixpipe/pixpipejs
* Lab       MCIN - Montreal Neurological Institute
*/

/**
* A LineString is a vectorial reprensation of a line or polyline, open or closed.
* When closed, it can be considered as a polygon.  
* By default, a LineString is 2 dimensional but the dimension can be changed when
* using the `.setData(...)` method or before any point addition with `.setNod()`.
* To close a LineString, use `.setMetadata("closed", true);`, this will not add
* any point but will flag this LineString as "closed".
*
*/

var LineString = function (_PixpipeContainer) {
  inherits(LineString, _PixpipeContainer);

  function LineString() {
    classCallCheck(this, LineString);

    var _this = possibleConstructorReturn(this, (LineString.__proto__ || Object.getPrototypeOf(LineString)).call(this));

    _this.setMetadata("closed", false);
    _this.setMetadata("defaultNod", 2);
    _this.setMetadata("nod", 2);

    _this._type = LineString.TYPE();

    // local record for saving the last point
    _this._lastPoint = null;
    return _this;
  }

  /**
  * Hardcode the datatype
  */


  createClass(LineString, [{
    key: 'setData',


    /**
    * Set/replace the point data.
    * @param {points} points - 1D array containing coord [x, y, x, y, x, y, ...]
    * @param {Number} nod - Number of Dimensions, default = 2
    * @param {Boolean} deepCopy - pointer copy if false, deep copy if true.
    */
    value: function setData(points) {
      var nod = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;
      var deepCopy = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

      if (nod != -1) {
        this.setMetadata("nod", nod);
      }

      if (points.length % this.getMetadata("nod") != 0) {
        console.warn("The number of points is not compatible with the number of dimensions (nod).");
        return;
      }

      if (deepCopy) {
        this._data = new points.constructor(points);
      } else {
        this._data = points;
      }

      this._setLastPoint();
    }

    /**
    * Define the number of dimensions. This can be done only when this LineString
    * is still empty.
    * @param {Number} nod - Number of dimensions
    */

  }, {
    key: 'setNod',
    value: function setNod(nod) {
      if (!this._data || !this._data.length) {
        console.warn("The number of dimension can be set only when this LineString is empty.");
        return;
      }

      this.setMetadata("nod", nod);
    }

    /**
    * Get the number of dimensions
    * @return {Number} the nod
    */

  }, {
    key: 'getNod',
    value: function getNod() {
      return this.getMetadata("nod");
    }

    /**
    * Get the internal image data (pointer)
    * @return {Array} the original data, dont mess up with this one.
    * in case of doubt, use  getDataCopy()
    */

  }, {
    key: 'getData',
    value: function getData() {
      return this._data; // return the actual array, editable!
    }

    /**
    * Get a copy of the data
    * @return {Array} a deep copy of the data
    */

  }, {
    key: 'getDataCopy',
    value: function getDataCopy() {
      return new this._data.constructor(this._data);
    }

    /**
    * Get the number of points in this linestring
    * @return {Number} nb of points
    */

  }, {
    key: 'getNumberOfPoints',
    value: function getNumberOfPoints() {
      if (!this._data) {
        return 0;
      }

      return this._data.length / this.getMetadata("nod");
    }

    /**
    * Get a point of this LineString
    * @return {Array} a point, being [x, y] if 2D or [x, y, z] if 3D
    */

  }, {
    key: 'getPoint',
    value: function getPoint(index) {
      if (index >= 0 && index < getNumberOfPoints) {
        var nod = this._metadata.nod;
        return this._data.slice(index * nod, index * nod + nod);
      } else {
        console.warn("Index of point is out of range.");
        return null;
      }
    }

    /**
    * Considere this LineString as closed, making it a polygon
    */

  }, {
    key: 'close',
    value: function close() {
      this.setMetadata("closed", true);
    }

    /**
    * Considere this LineString as open
    */

  }, {
    key: 'open',
    value: function open() {
      this.setMetadata("closed", false);
    }

    /**
    * Add a point at the end of the LineString. Keeps the polygon open.
    * @param {Array} position - [x, y] if 2D or [x, y, z] if 3D
    */

  }, {
    key: 'addPoint',
    value: function addPoint(position) {
      if (position.length != this._metadata.nod) {
        console.warn("Cannot add the point becase it has a diferent number of dimensions.");
        return;
      }

      if (!this._data) {
        this._data = new Array();
      }

      for (var i = 0; i < position.length; i++) {
        this._data.push(position[i]);
      }

      // we keep it for easy access
      this._lastPoint = position;
    }

    /**
    * Get the last point but does not pop it out
    * @return {Array} the point as [x, y] or [x, y, z]
    */

  }, {
    key: 'peekPoint',
    value: function peekPoint() {
      if (!this._data) {
        return null;
      }

      if (this._lastPoint) {
        return this._lastPoint;
      }

      this._setLastPoint();
      return this._lastPoint;
    }

    /**
    * [PRIVATE]
    * define the last point
    */

  }, {
    key: '_setLastPoint',
    value: function _setLastPoint() {
      this._lastPoint = this._data.slice(-this._metadata.nod);
      if (this._lastPoint.length == 0) {
        this._lastPoint = null;
      }
    }

    /**
    * Get the last point and remove it from this LineString
    * @return {Array} like [x, y] or [x, y, z] or null if no more point
    */

  }, {
    key: 'popPoint',
    value: function popPoint() {
      if (!this._data) {
        console.warn("This LineString was not added any point.");
        return null;
      }

      if (!this._data.length) {
        console.warn("No more point in this LineString.");
        return null;
      }

      this._lastPoint.length = this._lastPoint.length - this._metadata.nod;
      this._setLastPoint();
    }

    /**
    * Checks if a given point is part of this LineString
    * @param {Array} p - point coords like [x, y] for 2D or [x, y, z] for 3D
    * @return {Boolean} truee if the given point is in this LineString, false if not.
    */

  }, {
    key: 'hasPoint',
    value: function hasPoint(p) {
      var nod = this.getMetadata("nod");

      if (p.length != nod) {
        console.warn("The given point does not have the same number of dimensions as the LineString.");
        return false;
      }

      for (var i = 0; i < this._data.length - 1; i += 2) {
        if (this._data[i] == p[0] && this._data[i + 1] == p[1]) {
          return true;
        }
      }

      return false;
    }
  }], [{
    key: 'TYPE',
    value: function TYPE() {
      return "LINESTRING";
    }
  }]);
  return LineString;
}(PixpipeContainer); /* END of class LineString */

// register this type as a CoreType


CoreTypes.addCoreType(LineString);

/*
* Author    Jonathan Lurie - http://me.jonathanlurie.fr
*
* License   MIT
* Link      https://github.com/Pixpipe/pixpipejs
* Lab       MCIN - Montreal Neurological Institute
*/

/**
* MatrixTricks contains only static functions that add features to glMatrix.
* Like in glMatrix, all the matrices arrays are expected to be column major.
*/

var MatrixTricks = function () {
  function MatrixTricks() {
    classCallCheck(this, MatrixTricks);
  }

  createClass(MatrixTricks, null, [{
    key: "setValueMatrix44",


    /**
    * Set a value in the matrix, at a given row/col position
    * @param {Array} matrix - 4x4 matrix in a 1D Array[16] arranged as column-major
    * @param {Number} colIndex - position in column (x)
    * @param {Number} rowIndex - position in row (y)
    * @param {Number} value - value to be set in the matrix
    */
    value: function setValueMatrix44(matrix, colIndex, rowIndex, value) {
      MatrixTricks.setValueSquareMatrix(matrix, 4, colIndex, rowIndex, value);
    }

    /**
    * Set a value in the matrix, at a given row/col position
    * @param {Array} matrix - 3x3 matrix in a 1D Array[9] arranged as column-major
    * @param {Number} colIndex - position in column (x)
    * @param {Number} rowIndex - position in row (y)
    * @param {Number} value - value to be set in the matrix
    */

  }, {
    key: "setValueMatrix33",
    value: function setValueMatrix33(matrix, colIndex, rowIndex, value) {
      MatrixTricks.setValueSquareMatrix(matrix, 3, colIndex, rowIndex, value);
    }

    /**
    * Set a value in the square matrix, at a given row/col position
    * @param {Array} matrix - nxn matrix in a 1D Array[nxn] arranged as column-major
    * @param {Number} sideSize - size of a side, 4 for a 4x4 or 3 for a 3x3 matrix
    * @param {Number} colIndex - position in column (x)
    * @param {Number} rowIndex - position in row (y)
    * @param {Number} value - value to be set in the matrix
    */

  }, {
    key: "setValueSquareMatrix",
    value: function setValueSquareMatrix(matrix, sideSize, colIndex, rowIndex, value) {
      // since they are column-major: colIndex * height + rowIndex;
      var arrayIndex = colIndex * sideSize + rowIndex;
      matrix[arrayIndex] = value;
    }

    /**
    * Get a value in the matrix, at a given row/col position.
    * @param {Array} matrix - 4x4 matrix in a 1D Array[16] arranged as column-major
    * @param {Number} colIndex - position in column (x)
    * @param {Number} rowIndex - position in row (y)
    * @return {Number} value in the matrix
    */

  }, {
    key: "getValueMatrix44",
    value: function getValueMatrix44(matrix, colIndex, rowIndex) {
      return MatrixTricks.getValueSquareMatrix(matrix, 4, colIndex, rowIndex);
    }

    /**
    * Get a value in the matrix, at a given row/col position.
    * @param {Array} matrix - 3x3 matrix in a 1D Array[9] arranged as column-major
    * @param {Number} colIndex - position in column (x)
    * @param {Number} rowIndex - position in row (y)
    * @return {Number} value in the matrix
    */

  }, {
    key: "getValueMatrix33",
    value: function getValueMatrix33(matrix, colIndex, rowIndex) {
      return MatrixTricks.getValueSquareMatrix(matrix, 3, colIndex, rowIndex);
    }

    /**
    * Get a value in the matrix, at a given row/col position.
    * @param {Array} matrix - nxn matrix in a 1D Array[nxn] arranged as column-major
    * @param {Number} sideSize - size of a side, 4 for a 4x4 or 3 for a 3x3 matrix
    * @param {Number} colIndex - position in column (x)
    * @param {Number} rowIndex - position in row (y)
    * @return {Number} value in the matrix
    */

  }, {
    key: "getValueSquareMatrix",
    value: function getValueSquareMatrix(matrix, sideSize, colIndex, rowIndex) {
      // since they are column-major: colIndex * height + rowIndex;
      var arrayIndex = colIndex * sideSize + rowIndex;
      return matrix[arrayIndex];
    }

    /**
    * Create a new 4x4 matrix that is the horizontal flip of the given one
    * @param {Array} matrix - 4x4 matrix in a 1D Array[16] arranged as column-major
    * @return {Array} the flipped 4x4 matrix in a 1D Array[16] arranged as column-major
    */

  }, {
    key: "getHorizontalFlipMatrix44",
    value: function getHorizontalFlipMatrix44(matrix) {
      return MatrixTricks.getHorizontalFlipSquareMatrix(matrix, 4);
    }

    /**
    * Create a new 4x4 matrix that is the horizontal flip of the given one
    * @param {Array} matrix - 4x4 matrix in a 1D Array[16] arranged as column-major
    * @return {Array} the flipped 4x4 matrix in a 1D Array[16] arranged as column-major
    */

  }, {
    key: "getHorizontalFlipMatrix33",
    value: function getHorizontalFlipMatrix33(matrix) {
      return MatrixTricks.getHorizontalFlipSquareMatrix(matrix, 3);
    }

    /**
    * Create a new 4x4 matrix that is the horizontal flip of the given one
    * @param {Array} matrix - nxn matrix in a 1D Array[nxn] arranged as column-major
    * @return {Array} the flipped nxn matrix in a 1D Array[nxn] arranged as column-major
    */

  }, {
    key: "getHorizontalFlipSquareMatrix",
    value: function getHorizontalFlipSquareMatrix(matrix, sideSize) {
      var flippedMat = new Array(sideSize * sideSize).fill(0);
      for (var r = 0; r < sideSize; r++) {
        for (var c = 0; c < sideSize; c++) {
          var value = MatrixTricks.getValueSquareMatrix(matrix, sideSize, c, r);
          MatrixTricks.setValueSquareMatrix(flippedMat, sideSize, sideSize - 1 - c, r, value);
        }
      }
      return flippedMat;
    }

    /**
    * Expand a 3x3 matrix into a 4x4 matrix. Does not alter the input.
    * @param {Array} matrix - 3x3 matrix in a 1D Array[9] arranged as column-major
    * @param {String} horizontalStick - "LEFT" to stick the 3x3 matrix at the left of the 4x4, "RIGHT" to stick to the right
    * @param {String} verticalStick - "TOP" to stick the 3x3 matrix at the top of the 4x4, "BOTTOM" to stick to the bottom  
    * @return {Array} the flipped 4x4 matrix in a 1D Array[16] arranged as column-major
    */

  }, {
    key: "getExpandedMatrix3x3To4x4",
    value: function getExpandedMatrix3x3To4x4(matrix) {
      var horizontalStick = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "LEFT";
      var verticalStick = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "TOP";

      var colOffset = horizontalStick === "RIGHT" ? 1 : 0;
      var rowOffset = verticalStick === "BOTTOM" ? 1 : 0;
      var expandedMat = new Array(16).fill(0);

      for (var r = 0; r < 3; r++) {
        for (var c = 0; c < 3; c++) {
          var value = MatrixTricks.getValueMatrix33(matrix, c, r);
          MatrixTricks.setValueMatrix44(expandedMat, colOffset + c, rowOffset + r, value);
        }
      }
      return expandedMat;
    }
  }]);
  return MatrixTricks;
}(); /* END of class MatrixTricks */

/*
* Author   Jonathan Lurie - http://me.jonathanlurie.fr
* License  MIT
* Link      https://github.com/Pixpipe/pixpipejs
* Lab       MCIN - Montreal Neurological Institute
*/

/**
* Image3DAlt class is one of the few base element of Pixpipejs.
* It is always considered to be 4 channels (RGBA) and stored as a Float32Array
* typed array.
*/

var Image3DAlt = function (_PixpipeContainer) {
  inherits(Image3DAlt, _PixpipeContainer);

  /**
  * Constructor of an Image3DAlt instance. If no options, no array is allocated.
  * @param {Object} options - may contain the following:
  *   - options.xSize {Number} space length along x axis
  *   - options.ySize {Number} space length along y axis
  *   - options.zSize {Number} space length along z axis
  *   - options.tSize {Number} space length along t axis (time)
  *   - options.ncpp {Number} number of components per pixel. Default = 1
  * If at least xSize, ySize and zSize are specified, a buffer is automatically initialized with the value 0.
  */
  function Image3DAlt() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    classCallCheck(this, Image3DAlt);

    var _this = possibleConstructorReturn(this, (Image3DAlt.__proto__ || Object.getPrototypeOf(Image3DAlt)).call(this));

    _this._type = Image3DAlt.TYPE();

    // default metadata values
    _this._initMetadata();

    // since dimensions from metadata is an array (where order matters),
    // we also build LUTs where the key is are dimension's names
    _this._dimensionsWorldLUT = {};
    _this._dimensionsVoxelLUT = {};

    // allocate data if the propers options are given
    _this._initData(options);
    return _this;
  }

  /**
  * Hardcode the datatype
  */


  createClass(Image3DAlt, [{
    key: '_buildMetadataSchema',


    /**
    * [SUPER OVERWRITE - PipxpipeObject]
    * [PRIVATE]
    */
    value: function _buildMetadataSchema() {
      var metadataSchema = joiBrowser.object({

        // required
        ncpp: joiBrowser.number().integer().min(1).required(),

        // required
        dimensions: joiBrowser.array().min(3).max(4).items(joiBrowser.object({
          length: joiBrowser.number().integer().min(1).required(),
          widthDimension: joiBrowser.number().integer().min(-1).max(2).required(), // -1 means "does not apply" --> time series
          heightDimension: joiBrowser.number().integer().min(-1).max(2).required(), // idem
          nameVoxelSpace: joiBrowser.string().regex(/(i|j|k|t)/).required(),
          nameWorldSpace: joiBrowser.string().regex(/(x|y|z|t)/).required(),
          worldUnitSize: joiBrowser.number().required(),
          stride: joiBrowser.number().integer().min(1).required(),
          step: joiBrowser.number().required()
        }).unknown()),

        // required, some prop can be added to the list
        statistics: joiBrowser.object({
          upToDate: joiBrowser.boolean().required(),
          min: joiBrowser.number().required(),
          max: joiBrowser.number().required()
        }).required().unknown(), // = we can have more stats but min/max are necessary

        // required but can be an empty object
        transformations: joiBrowser.object().unknown().pattern(/.+/, joiBrowser.array().length(16).items(joiBrowser.number())).required(),

        // optional
        description: joiBrowser.string().allow(''),

        // optional
        spatialUnit: joiBrowser.string().allow(''),

        // optional
        temporalUnit: joiBrowser.string().allow(''),

        // optional
        format: joiBrowser.string().allow(''),

        // optional, some prop can be added to the list
        formatSpecific: joiBrowser.object().unknown()
      }).unknown(); // = we can add other properties

      return metadataSchema;
    }

    /**
    * [SUPER OVERWRITE - PipxpipeObject]
    * [PRIVATE]
    * This method is called at the end of setRawMetadata
    */

  }, {
    key: '_metadataRawCopied',
    value: function _metadataRawCopied() {
      this._buildDimensionsLUT();
    }

    /**
    * [PRIVATE]
    * Build the LUT to fetch dimensions easier = using their name as index rather than just a their index
    */

  }, {
    key: '_buildDimensionsLUT',
    value: function _buildDimensionsLUT() {
      this._dimensionsWorldLUT = {};
      this._dimensionsVoxelLUT = {};
      var worldAxisNames = ["x", "y", "z"];
      var dimensions = this._metadata.dimensions;

      // At what position are "x", "y" and "z" in the array of dimensions?
      // e.g. if we have nameWorldSpace in dimensions that are [y z x], then this array
      // would be [2, 0, 1]
      this._worldPositionIndex = Array(3);

      // what is the order of the nameWorldSpace in dimensions when compare to the ordered dimname ["x", "y", "z"]?
      // e.g. if we have nameWorldSpace in dimensions that are [y z x], then this array
      // would be [1, 2, 0]
      this._worldPositionOrder = Array(3);

      function positionOf(dimName) {
        return dimensions[0].nameWorldSpace === dimName ? 0 : dimensions[1].nameWorldSpace === dimName ? 1 : dimensions[2].nameWorldSpace === dimName ? 2 : -1;
      }

      var correctOrder = [0, 1, 2];
      this._hasNativeCorrectOrder = true;

      for (var i = 0; i < dimensions.length; i++) {
        this._dimensionsWorldLUT[dimensions[i].nameWorldSpace] = i;
        this._dimensionsVoxelLUT[dimensions[i].nameVoxelSpace] = i;

        this._worldPositionIndex[i] = positionOf(worldAxisNames[i]);
        this._worldPositionOrder[i] = worldAxisNames.indexOf(dimensions[i].nameWorldSpace);

        this._hasNativeCorrectOrder = this._hasNativeCorrectOrder && this._worldPositionIndex[i] === correctOrder[i];
      }
    }

    /**
    * Get the index of a dimension, given its name.
    * Looks up in the world dim and then in the voxel-based coord
    * @param {String} name - Name of a dimension
    * @return {Number} index or the dim. -1 if not found
    */

  }, {
    key: 'getDimensionIndexFromName',
    value: function getDimensionIndexFromName(name) {
      if (name in this._dimensionsWorldLUT) {
        return this._dimensionsWorldLUT[name];
      } else if (name in this._dimensionsVoxelLUT) {
        return this._dimensionsVoxelLUT[name];
      } else {
        return -1;
      }
    }

    /**
    * [PRIVATE]
    * initialize some defualt values for metadata
    */

  }, {
    key: '_initMetadata',
    value: function _initMetadata() {
      var metaStat = { upToDate: true, min: NaN, max: NaN };

      this.setMetadata("description", "");

      this.setMetadata("statistics", metaStat);

      // number of component per pixel, for color OR time series
      this.setMetadata("ncpp", 1);

      // no special unit for space and time
      this.setMetadata("spatialUnit", "Voxel");
      this.setMetadata("temporalUnit", "Time");

      // So far, this instance does not come from a file decoding
      this.setMetadata("format", "generic");

      // this field is to hold original metadata from a reader (eg. NIfTI)
      this.setMetadata("formatSpecific", {});

      // possibly contains no transformations
      this.setMetadata("transformations", {});
    }

    /**
    * @return {Image3DAlt} a deep copy instance of this Image3DAlt
    */

  }, {
    key: 'clone',
    value: function clone$$1() {
      var cpImg = new Image3DAlt();
      cpImg.setRawData(new this._data.constructor(this._data));
      cpImg.copyMetadataFrom(this);
      return cpImg;
    }

    /**
    * Initialize _this_ with some data and appropriate size
    * @param {Float32Array} buffer - the raw data
    * @param {Object} options - may contain the following:
    *   - options.xSize {Number} space length along x axis
    *   - options.ySize {Number} space length along y axis
    *   - options.zSize {Number} space length along z axis
    *   - options.tSize {Number} space length along t axis (time)
    *   - options.ncpp {Number} number of components per pixel. Default = 1
    *   - options.deepCopy {Boolean} perform a deep copy if true. Simple association if false
    */

  }, {
    key: 'setData',
    value: function setData(buffer, options) {
      this._initData(options, buffer);
      this.scanDataRange();
    }

    /**
    * [PRIVATE]
    * Get an 4x4 identity matrix. This is used as the default transformations w2v
    * and v2w, which means "no transformation"
    * @return {Array} the 4x4 identity as a 1D array
    */

  }, {
    key: '_get4x4IdentityMatrix',
    value: function _get4x4IdentityMatrix() {
      return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
    }

    /**
    * [PRIVATE]
    * Called from the constructor or the setData method
    */

  }, {
    key: '_initData',
    value: function _initData(options) {
      var buffer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

      if (options) {
        // replacing default value for ncpp
        if ("ncpp" in options) {
          this.setMetadata("ncpp", options.ncpp);
        }

        // init default ordered dimensions based on the give sizes
        if ("xSize" in options && "ySize" in options && "zSize" in options) {

          var dimensions = [{
            length: xSize,
            widthDimension: 1,
            heightDimension: 2,
            nameVoxelSpace: "k",
            nameWorldSpace: "x",
            worldUnitSize: 1,
            stride: 1
          }, {
            length: ySize,
            widthDimension: 0,
            heightDimension: 2,
            nameVoxelSpace: "j",
            nameWorldSpace: "y",
            worldUnitSize: 1,
            stride: xSize
          }, {
            length: zSize,
            widthDimension: 0,
            heightDimension: 1,
            nameVoxelSpace: "i",
            nameWorldSpace: "z",
            worldUnitSize: 1,
            stride: xSize * ySize
          }];

          var bufferSize = xSize * ySize * zSize * this.getMetadata("ncpp");

          // if we get time dimension info, let's add it too
          if ("tSize" in options) {
            var timeDim = {
              length: tSize,
              widthDimension: -1, // could remove
              heightDimension: -1,
              nameVoxelSpace: "l",
              worldSpaceName: "t",
              worldUnitSize: "",
              stride: xSize * ySize * zSize,
              step: 1
            };
            bufferSize *= tSize;

            dimensions.push(timeDim);
            this.setMetadata("dimensions", dimensions);
          }

          // default transformations
          var transformations = {
            "v2w": this._get4x4IdentityMatrix(),
            "w2v": this._get4x4IdentityMatrix()
          };
          this.setMetadata("transformations", transformations);

          // if a buffer is provided, we perform a size-check
          if (buffer) {
            if (buffer.length == bufferSize) {

              // perform a deep copy
              if ("deepCopy" in options && options.deepCopy) {
                this._data = new buffer.constructor(buffer);
              }
              // perform a simple association
              else {
                  this._data = buffer;
                }
            } else {
              console.warn("The buffer provided has a wrong size.");
              return false;
            }
          } else {
            // Allocating the buffer
            this._data = new Float32Array(bufferSize);
            var metaStat = this.getMetadata("statistics");
            metaStat.min = 0;
            metaStat.max = 0;
          }

          this._buildDimensionsLUT();
          return this.metadataIntegrityCheck();
        } else {
          console.warn("The necessary options xSize, ySize and zSize were not provided.");
          return false;
        }
      } else {
        return false;
      }
    }

    /**
    * [PRIVATE]
    * Look for min and max on the dataset and add them to the header metadata
    */

  }, {
    key: 'scanDataRange',
    value: function scanDataRange() {
      var min$$1 = +Infinity;
      var max$$1 = -Infinity;

      for (var i = 0; i < this._data.length; i++) {
        min$$1 = Math.min(min$$1, this._data[i]);
        max$$1 = Math.max(max$$1, this._data[i]);
      }

      var metaStat = this.getMetadata("statistics");
      if (!metaStat) {
        this.setMetadata("statistics", {});
        metaStat = this.getMetadata("statistics");
      }
      metaStat.min = min$$1;
      metaStat.max = max$$1;
      metaStat.upToDate = true;
    }

    /**
    * Get the minimum voxel value. If stats are not up to date, scanDataRange() is called.
    * Hook to metadata.
    * @return {Number} the minimum
    */

  }, {
    key: 'getMinValue',
    value: function getMinValue() {
      if (!this._metadata.statistics.upToDate) {
        this.scanDataRange();
      }
      return this._metadata.statistics.min;
    }

    /**
    * Get the maximum voxel value. If stats are not up to date, scanDataRange() is called.
    * Hook to metadata.
    * @return {Number} the minimum
    */

  }, {
    key: 'getMaxValue',
    value: function getMaxValue() {
      if (!this._metadata.statistics.upToDate) {
        this.scanDataRange();
      }
      return this._metadata.statistics.max;
    }

    /**
    * Get the voxel value from a voxel position (in a voxel-coordinate sytem) with NO
    * regards towards how the data is supposed to be read. In other word, dimension.direction
    * is ignored.
    * @param {Object} position - 3D position like {i, j, k}, i being the fastest varying, k being the slowest varying
    * @param {Number} time - position along T axis (time dim, the very slowest varying dim when present)
     * @return {Number} the value at a given position.
    */

  }, {
    key: 'getVoxel',
    value: function getVoxel(position) {
      var time = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

      var dimensions = this._metadata.dimensions;
      var i = position.i;
      var j = position.j;
      var k = position.k;

      if (i < 0 || j < 0 || k < 0 || time < 0 || i >= dimensions[2].length || j >= dimensions[1].length || k >= dimensions[0].length || dimensions.length > 3 && time >= dimensions[3].length) {
        console.warn('Voxel {i:' + position.i + ', j:' + position.j + ', k:' + position.k + '} is out of bound.');
        return null;
      }

      var ncpp = this._metadata.ncpp;

      var tOffset = dimensions.length > 3 ? time * dimensions[3].stride * time : 0;
      var iOffset = i * dimensions[2].stride;
      var jOffset = j * dimensions[1].stride;
      var kOffset = k * dimensions[0].stride;

      var positionBuffer = tOffset + iOffset + jOffset + kOffset;
      positionBuffer *= ncpp;
      return this._data[positionBuffer];
    }

    /**
    * Set the value of a voxel
    * @param {Object} position - 3D position like {i, j, k}, i being the fastest varying, k being the slowest varying
    * @param {Number} value - the value to give to this voxel
    * @param {Number} time - position along T axis (time dim, the very slowest varying dim when present)
    */

  }, {
    key: 'setVoxel',
    value: function setVoxel(position, value) {
      var time = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

      var dimensions = this._metadata.dimensions;
      var i = position.i;
      var j = position.j;
      var k = position.k;

      if (i < 0 || j < 0 || k < 0 || time < 0 || i >= dimensions[0].length || j >= dimensions[1].length || k >= dimensions[2].length || dimensions.length > 3 && time >= dimensions[3].length) {
        console.warn("Voxel query is out of bound.");
        return null;
      }

      var ncpp = this._metadata.ncpp;

      var tOffset = dimensions.length > 3 ? time * dimensions[3].stride * time : 0;
      var iOffset = i * dimensions[2].stride;
      var jOffset = j * dimensions[1].stride;
      var kOffset = k * dimensions[0].stride;

      var positionBuffer = tOffset + iOffset + jOffset + kOffset;
      positionBuffer *= ncpp;
      this._data[positionBuffer] = value;

      // updating range
      if (value > this._metadata.statistics.max) {
        this._metadata.statistics.max = value;
      } else if (value < this._metadata.statistics.min) {
        this._metadata.statistics.min = value;
      }
    }

    /**
    * [DON'T USE]
    * Get a voxel value at a given position with regards of the direction the data are
    * supposed to be read. In other word, dimension.step is taken into account.
    * @param {Object} position - 3D position like {i, j, k}, i being the fastest varying, k being the slowest varying
    * @param {Number} time - position along T axis (time dim, the very slowest varying dim when present)
    */

  }, {
    key: 'getVoxelSafe',
    value: function getVoxelSafe(position) {
      var time = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

      var dimensions = this._metadata.dimensions;
      var i = position.i;
      var j = position.j;
      var k = position.k;

      if (i < 0 || j < 0 || k < 0 || time < 0 || i >= dimensions[0].length || j >= dimensions[1].length || k >= dimensions[2].length || dimensions.length > 3 && time >= dimensions[3].length) {
        console.warn("Voxel query is out of bound.");
        return null;
      }

      var tOffset = dimensions.length > 3 ? time * dimensions[3].stride * time : 0;
      var iOffset = (dimensions[2].step < 0 ? dimensions[2].length - i - 1 : i) * dimensions[2].stride;
      var jOffset = (dimensions[1].step < 0 ? dimensions[1].length - j - 1 : j) * dimensions[1].stride;
      var kOffset = (dimensions[0].step < 0 ? dimensions[0].length - k - 1 : k) * dimensions[0].stride;

      var positionBuffer = tOffset + iOffset + jOffset + kOffset;
      return this._data[positionBuffer];
    }

    /**
    * Get the size of a dimension in number of voxel (or in number of time samples in case of "t" or 3)
    * @param {Number|String} dimIndex - can be 0, 1, 2, 3 or "i", "j", "k", "t", or "x", "y", "z", "t"
    * @return {Number} the length of this dimension
    */

  }, {
    key: 'getDimensionSize',
    value: function getDimensionSize(dimIndex) {
      if (typeof dimIndex === "string") {
        // if string/name replace by its equivalent numerical index
        dimIndex = this.getDimensionIndexFromName(dimIndex);
        if (dimIndex == -1) {
          console.warn("dimensions " + dimIndex + " does not exist.");
          return;
        }
      }

      var dimensions = this._metadata.dimensions;
      if (dimIndex < dimensions.length) {
        return dimensions[dimIndex].length;
      } else {
        console.warn("A dimensions of such index does not exist.");
        return null;
      }
    }

    /**
    * @return {Float32Array} the original data, dont mess up with this one.
    * in case of doubt, use  getDataCopy()
    */

  }, {
    key: 'getData',
    value: function getData() {
      return this._data; // return the actual array, editable!
    }

    /**
    * @return {Float32Array} a deep copy of the data
    */

  }, {
    key: 'getDataCopy',
    value: function getDataCopy() {
      return new this._data.constructor(this._data);
    }

    /**
    * Get data scaled as a uint8 taking in consideration the actual min-max range of the data
    * (and not the possible min-max rage allowed by the data type)
    * Notice: values are rounded
    * @return {Uint8Array} the scaled data
    */

  }, {
    key: 'getDataUint8',
    value: function getDataUint8() {
      var data = this._data;
      var min$$1 = this.getMinValue();
      var max$$1 = this.getMaxValue();
      var range = max$$1 - min$$1;
      var uint8Buff = new Uint8Array(data.length);
      for (var i = 0; i < uint8Buff.length; i++) {
        uint8Buff[i] = Math.round((data[i] - min$$1) / range * 256);
      }
      return uint8Buff;
    }

    /**
    * Does this volume has the given transform registered?
    * @param {String} transformName - the name of the transformation matrix to check
    * @return {Boolean} true if has, false if hasnt
    */

  }, {
    key: 'hasTransform',
    value: function hasTransform(transformName) {
      return transformName in this._metadata.transformations;
    }

    /**
    * [PRIVATE]
    * Convert a position from a coordinate system to another. Should be called by a method that makes sure of the
    * order of the dimensions.
    * @param {Array} positionArr - 3D position, could be [x, y, z] or in voxel coord not necessary ordered [i, j, k]
    * because this depends on the orders of the dimension.
    * @param {String} transformName - name of the transformation registered in the metadata
    * @return {Array} coordinate
    */

  }, {
    key: '_getTransformedPosition',
    value: function _getTransformedPosition(positionArr, transformName) {
      var transformations = this._metadata.transformations;

      if (!(transformName in transformations)) {
        console.warn("No transform named " + transformName);
        return null;
      }

      var transform = transformations[transformName];
      var origPos = fromValues$6(positionArr[0], positionArr[1], positionArr[2], 1);
      var transPos = create$6();
      transformMat4$1(transPos, origPos, transform);
      return transPos;
    }

    /**
    * Convert a position from voxel coordinates to another space
    * @param {Object} voxelPosition - voxel coordinates like {i: Number, j: Number, k: Number} where i is the slowest varying and k is the fastest varying
    * @param {String} transformName - name of a transformation registered in the metadata as a child property of "transformations", "v2*"
    * @return {Object} coordinates {x: Number, y: Number, z: Number} in the space coorinate given in argument
    */

  }, {
    key: 'getPositionFromVoxelSpaceToTransfoSpace',
    value: function getPositionFromVoxelSpaceToTransfoSpace(voxelPosition, transformName) {
      var inputPosArray = [voxelPosition.i, voxelPosition.j, voxelPosition.k];
      var reOrderedInput = [inputPosArray[this._worldPositionOrder[2]], inputPosArray[this._worldPositionOrder[1]], inputPosArray[this._worldPositionOrder[0]]];
      var transPosUnordered = this._getTransformedPosition(reOrderedInput, transformName);

      return {
        x: transPosUnordered[0],
        y: transPosUnordered[1],
        z: transPosUnordered[2]
      };
    }

    /**
    * Convert coordinates from a a given (non-voxel based) position into a voxel based coord
    * @param {Object} spacePosition - a non-voxel based coordinate as {x: Number, y: Number, z: Number}
    * @param {String} transformName - name of the transformation to use, "*2v"
    * @param {Boolean} round - round to the closest voxel coord integer (default: true)
    * @return {Object} coordinates {i: Number, j: Number, k: Number} in the space coorinate given in argument
    */

  }, {
    key: 'getPositionFromTransfoSpaceToVoxelSpace',
    value: function getPositionFromTransfoSpaceToVoxelSpace(spacePosition, transformName) {
      var round$$1 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

      var inputPosArray = [spacePosition.x, spacePosition.y, spacePosition.z];
      var transPosUnordered = this._getTransformedPosition(inputPosArray, transformName);
      var posOrdered = {
        i: transPosUnordered[this._worldPositionOrder[2]],
        j: transPosUnordered[this._worldPositionOrder[1]],
        k: transPosUnordered[this._worldPositionOrder[0]]
      };

      if (round$$1) {
        posOrdered.i = Math.round(posOrdered.i);
        posOrdered.j = Math.round(posOrdered.j);
        posOrdered.k = Math.round(posOrdered.k);
      }

      return posOrdered;
    }

    /**
    * For external use (e.g. in a shader).
    * Get the matrix for swapping voxel coordinates before converting to world coord
    * or after having converted from world. To serve multiple purposes, this method
    * can output a 3x3 matrix (default case) or it can output a 4x4 affine transform matrix
    * with a weight of 1 at its bottom-right position.
    * This matrix can be used in two cases:
    * - swap [i, j, k] voxel coordinates **before** multiplying them by a "v2*" matrix
    * - swap voxel coordinates **after** multiplying [x, y, z] world coorinates by a "*2v" matrix
    * @param {Boolean} hflip - if true, horizontally flip the swap matrix. We usualy need to horizontaly flip this matrix because otherwise the voxel coordinates will be given as kji instead of ijk.
    * @param {Boolean} output4x4 - optional, output a 4x4 if true, or a 3x3 if false (default: false)
    * @return {Array} the 3x3 matrix in a 1D Array[9] arranged as column-major
    */

  }, {
    key: 'getVoxelCoordinatesSwapMatrix',
    value: function getVoxelCoordinatesSwapMatrix() {
      var hflip = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
      var output4x4 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;


      var mat33 = new Array(9).fill(0);
      MatrixTricks.setValueMatrix33(mat33, 0, this._worldPositionOrder[0], 1);
      MatrixTricks.setValueMatrix33(mat33, 1, this._worldPositionOrder[1], 1);
      MatrixTricks.setValueMatrix33(mat33, 2, this._worldPositionOrder[2], 1);
      var outputMat = mat33;

      if (hflip) {
        var mat33Flipped = MatrixTricks.getHorizontalFlipMatrix33(mat33);
        outputMat = mat33Flipped;
      }

      if (output4x4) {
        outputMat = MatrixTricks.getExpandedMatrix3x3To4x4(mat33Flipped);
        MatrixTricks.setValueMatrix33(outputMat, 3, 3, 1);
      }

      return outputMat;
    }

    /**
    * Get a value from the dataset using {x, y, z} coordinates of a transformed space.
    * Keep in mind world (or subject) are floating point but voxel coordinates are integers.
    * This does not perform interpolation.
    * @param {String} spaceToVoxelTransfoName - name of the affine transformation "*2v" - must exist
    * @param {Object} spacePosition - non-voxel-space 3D coordinates, most likely world coordinates {x: Number, y: Number, z: Number}
    * @param {Number} time - Position on time (default: 0)
    * @return {Number} value at this position
    */

  }, {
    key: 'getVoxelTransfoSpace',
    value: function getVoxelTransfoSpace(spaceToVoxelTransfoName, spacePosition) {
      var time = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

      // transform to voxel space
      var voxPos = this.getPositionFromTransfoSpaceToVoxelSpace(spacePosition, spaceToVoxelTransfoName);
      var color = this.getVoxel(voxPos, time);
      return color;
    }

    /**
    * Get a value from the dataset using {x, y, z} coordinates of a transformed space.
    * Keep in mind world (or subject) are floating point but voxel coordinates are integers.
    * This does not perform interpolation.
    * @param {String} spaceToVoxelTransfoName - name of the affine transformation "*2v" - must exist
    * @param {Object} spacePosition - non-voxel-space 3D coordinates, most likely world coordinates {x: Number, y: Number, z: Number}
    * @param {Number} time - Position on time (default: 0)
    */

  }, {
    key: 'setVoxelTransfoSpace',
    value: function setVoxelTransfoSpace(spaceToVoxelTransfoName, spacePosition, value) {
      var time = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;

      var voxPos = this.getPositionFromTransfoSpaceToVoxelSpace(spacePosition, spaceToVoxelTransfoName);
      this.setVoxel(voxPos, value, time);
    }

    /**
    * Add a transformation to the collection
    * @param {Array} transform - a 4x4 matrix in a shape of a 1D array of size 16 column-major
    * @param {String} name - Name to give to this transformation
    */

  }, {
    key: 'addTransformation',
    value: function addTransformation(transform, name) {
      var transformations = this._metadata.transformations;

      var schema = joiBrowser.array().length(16).items(joiBrowser.number());
      var isValid = joiBrowser.validate(transform, schema);

      if (isValid.error) {
        console.warn("Invalid transformation: " + isValid.error);
        return;
      }
      transformations[name] = transform;
    }

    /**
    * Get a slice from the dataset
    * @param {Number|String} dimIndex - can be 0, 1, 2 or "i", "j", "k"
    * @param {Number} normalAxis - the index of the slice (default: 0)
    * @param {Number} time - time position (default:0 , only relevant in a 3D + t dataset)
    * @return {image2D} the slice
    */

  }, {
    key: 'getSlice',
    value: function getSlice(normalAxis) {
      var sliceIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var time = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

      if (typeof normalAxis === "string") {
        // if string/name replace by its equivalent numerical index
        normalAxis = this.getDimensionIndexFromName(normalAxis);
        if (normalAxis == -1) {
          console.warn("dimensions " + normalAxis + " does not exist.");
          return;
        }
      }

      var dimensions = this._metadata.dimensions;

      // The dimension of the normalAxis must exist (and not be time)
      if (normalAxis > 2) {
        console.warn("The dimension of a slice should be lower than 3.");
        return null;
      }

      // the final slice image has for normal vector the sliceDimension.
      // In other words, the width and height of the slice will be the "lenght" of
      // the sliceDimension.widthDimension and sliceDimension.heightDimension respectively
      var sliceDimension = dimensions[normalAxis];
      var widthDimension = dimensions[sliceDimension.widthDimension];
      var heightDimension = dimensions[sliceDimension.heightDimension];

      // Slice index checking
      if (sliceIndex < 0 || sliceIndex >= sliceDimension.length) {
        console.warn("The slice required is out of bound.");
        return null;
      }

      var Img2dData = new this._data.constructor(widthDimension.length * heightDimension.length);
      var timeOffset = dimensions.length > 3 ? dimensions[3].stride * time : 0;
      var sliceOffset = (sliceDimension.step < 0 ? sliceDimension.length - sliceIndex - 1 : sliceIndex) * sliceDimension.stride;

      var pixelCounter = 0;
      // this axis is always fliped by default (not sure why)
      for (var r = heightDimension.length - 1; r >= 0; r--) {
        var heighDimOffset = (heightDimension.step < 0 ? heightDimension.length - r - 1 : r) * heightDimension.stride;

        for (var c = 0; c < widthDimension.length; c++) {
          var widthDimOffset = (widthDimension.step < 0 ? widthDimension.length - c - 1 : c) * widthDimension.stride;

          var offset = sliceOffset + timeOffset + heighDimOffset + widthDimOffset;

          Img2dData[pixelCounter] = this._data[offset];
          pixelCounter++;
        }
      }

      var outputImage = new Image2D();
      outputImage.setData(Img2dData, widthDimension.length, heightDimension.length, 1);
      return outputImage;
    }

    /**
    * Get the size (width and height) of a slice along a given axis
    * @param {Number|String} dimIndex - can be 0, 1, 2 or "i", "j", "k" or "x", "y", "z"
    * @return {Object} width and height as an object like {w: Number, h: Number};
    */

  }, {
    key: 'getSliceSize',
    value: function getSliceSize(normalAxis) {
      if (typeof normalAxis === "string") {
        // if string/name replace by its equivalent numerical index
        normalAxis = this.getDimensionIndexFromName(normalAxis);
        if (normalAxis == -1) {
          console.warn("dimensions " + normalAxis + " does not exist.");
          return;
        }
      }

      var dimensions = this._metadata.dimensions;

      // The dimension of the normalAxis must exist (and not be time)
      if (normalAxis > 2) {
        console.warn("The dimension of a slice should be lower than 3.");
        return null;
      }

      // the final slice image has for normal vector the sliceDimension.
      // In other words, the width and height of the slice will be the "lenght" of
      // the sliceDimension.widthDimension and sliceDimension.heightDimension respectively
      var sliceDimension = dimensions[normalAxis];
      var widthDimension = dimensions[sliceDimension.widthDimension];
      var heightDimension = dimensions[sliceDimension.heightDimension];

      return { w: widthDimension.length, h: heightDimension.length };
    }

    /**
    * Get the number of slices along a given axis
    * @param {Number|String} dimIndex - can be 0, 1, 2 or "i", "j", "k"
    * @return {Number} number of slices
    */

  }, {
    key: 'getNumberOfSlices',
    value: function getNumberOfSlices(normalAxis) {
      if (typeof normalAxis === "string") {
        // if string/name replace by its equivalent numerical index
        normalAxis = this.getDimensionIndexFromName(normalAxis);
        if (normalAxis == -1) {
          console.warn("dimensions " + normalAxis + " does not exist.");
          return;
        }
      }

      var dimensions = this._metadata.dimensions;

      // The dimension of the normalAxis must exist (and not be time)
      if (normalAxis > 2) {
        console.warn("The dimension of a slice should be lower than 3.");
        return null;
      }

      // the final slice image has for normal vector the sliceDimension.
      // In other words, the width and height of the slice will be the "lenght" of
      // the sliceDimension.widthDimension and sliceDimension.heightDimension respectively
      var sliceDimension = dimensions[normalAxis];

      return sliceDimension.length;
    }

    /**
    * Get the number of samples over time
    * @return {number} the number of time samples
    */

  }, {
    key: 'getTimeLength',
    value: function getTimeLength() {
      var dimensions = this._metadata.dimensions;
      return dimensions.length == 4 ? dimensions[3].length : 1;
    }

    /**
    * Tells whether or not the given position is within the boundaries or the datacube.
    * This works with voxel coordinates ijk
    * @param {Object} pos - Voxel coordinates as {i: Number, j: Number, k: Number}
    * where i is along the slowest varying dimension and k is along the fastest.
    * @return {Boolean} true if inside, false if outside
    */

  }, {
    key: 'isInsideVoxelSpace',
    value: function isInsideVoxelSpace(pos) {
      var dimensions = this._metadata.dimensions;
      var isInside = false;

      try {
        isInside = !(pos.i < 0 || pos.i >= dimensions[2].length || pos.j < 0 || pos.j >= dimensions[1].length || pos.k < 0 || pos.k >= dimensions[0].length);
      } catch (e) {
        console.warn(e);
      }
      return isInside;
    }

    /**
    * Is the given point in a transform coordinates system (world or subject) inside the dataset?
    * This is achieved by converting the transformed coordinates into voxel coordinates.
    * @param {Object} pos - transformed coordinates (world or subject) as {x: Number, y: Number, z: Number}
    * @param {String} transformName - id or a registered transformation "*2v"
    */

  }, {
    key: 'isInsideTransfoSpace',
    value: function isInsideTransfoSpace(pos, transformName) {
      var voxelSpacePosition = this.getPositionFromTransfoSpaceToVoxelSpace(pos, transformName);
      return this.isInsideVoxelSpace(voxelSpacePosition);
    }

    /**
    * Sample the color along a segment
    * @param {Object} posFrom - starting position of type {i: Number, j: Number, k: Number}
    * @param {Object} posFrom - ending position of type {i: Number, j: Number, k: Number}
    * @return {Object} array of Array like that: {
                                                    positions: [
                                                      {i: i0, j: j0, k: k0},
                                                      {i: i1, j: j1, k: k1},
                                                      {i: i2, j: j2, k: k2},
                                                      ...
                                                    ],
                                                    labels: [
                                                      "(i0, j0, k0)", "(i1, j1, k1)", "(i2, j2, k2)", ...
                                                    ],
                                                    colors: [
                                                              [r0, r1, r2 ...],
                                                              [g0, g1, g2 ...],
                                                              [b0, b1, b2 ...]
                                                    ]
                                                  }
       return null if posFrom or posTo is outside
    */

  }, {
    key: 'getSegmentSampleVoxelSpace',
    value: function getSegmentSampleVoxelSpace(posFrom, posTo) {
      var time = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

      // both position must be inside the image
      //if( !this.isInsideVoxelSpace(posFrom) || !this.isInsideVoxelSpace(posTo) )
      //  return null;

      var dx = posTo.i - posFrom.i;
      var dy = posTo.j - posFrom.j;
      var dz = posTo.k - posFrom.k;
      var euclidianDistance = Math.sqrt(Math.pow(dx, 2) + Math.pow(dy, 2) + Math.pow(dz, 2));
      var numberOfSamples = Math.floor(euclidianDistance + 1);

      // we want to sample every unit distance along the segment
      var stepX = dx / euclidianDistance;
      var stepY = dy / euclidianDistance;
      var stepZ = dz / euclidianDistance;

      var ncpp = this._metadata.ncpp;
      var positions = new Array(numberOfSamples).fill(0);
      var colors = new Array(ncpp).fill(0);
      var labels = new Array(numberOfSamples).fill(0);

      // creating empty arrays for colors
      for (var c = 0; c < ncpp; c++) {
        colors[c] = new Array(numberOfSamples).fill(0);
      }

      // walk along the segment, from posFrom to posTo
      for (var i = 0; i < numberOfSamples; i++) {
        var currentPos = {
          i: Math.round(posFrom.i + i * stepX),
          j: Math.round(posFrom.j + i * stepY),
          k: Math.round(posFrom.k + i * stepZ)
        };

        positions[i] = currentPos;
        labels[i] = "(" + currentPos.i + ", " + currentPos.j + ", " + currentPos.k + ")";

        var pixValue = [this.getVoxel(currentPos, time)];

        // each channel is dispatched in its array
        for (var c = 0; c < ncpp; c++) {
          colors[c][i] = pixValue[c];
        }
      }

      return {
        positions: positions,
        labels: labels,
        colors: colors
      };
    } /* END of method getLineSample */

    /**
    * Sample voxels along a segment in a transform coordinates system (world or subject).
    * This is achieved by converting the transformed coordinates into voxel coordinates, 
    * then samples are taken respecting a voxel unit rather than the transform unit so that
    * it is more fine.
    * @param {String} space2voxelTransformName - id of a registered transformation that goes from arbitrary space to voxel space (aka. "*2v")
    * @param {String} voxel2spaceTransformName - id of a registered transformation that goes from voxel space to arbitrary space (aka. "v2*" or the inverse of space2voxelTransformName)
    * @param {Object} posFrom - starting sampling point in transformed coordinates (world or subject) as {x: Number, y: Number, z: Number}
    * @param {Object} posTo - end sampling point in transformed coordinates (world or subject) as {x: Number, y: Number, z: Number}
    * @param {Number} time - time sample index to sample (default: 0)
    * @return {Object} array of Array like that: {
                                                    positions: [
                                                      {x: x0, y: y0, z: z0},
                                                      {x: x1, y: y1, z: z1},
                                                      {x: x2, y: y2, z: z2},
                                                      ...
                                                    ],
                                                    labels: [
                                                      "(x0, y0, z0)", "(x1, y1, z1)", "(x2, y2, z2)", ...
                                                    ],
                                                    colors: [
                                                              [r0, r1, r2 ...],
                                                              [g0, g1, g2 ...],
                                                              [b0, b1, b2 ...]
                                                    ]
                                                  }
       return null if posFrom or posTo is outside
    */

  }, {
    key: 'getSegmentSampleTransfoSpace',
    value: function getSegmentSampleTransfoSpace(space2voxelTransformName, voxel2spaceTransformName, posFrom, posTo) {
      var time = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;

      if (!this.hasTransform(space2voxelTransformName)) {
        console.warn('The transform ' + space2voxelTransformName + ' is not available.');
        return null;
      }

      var posFromVoxel = this.getPositionFromTransfoSpaceToVoxelSpace(posFrom, space2voxelTransformName, false);
      var posToVoxel = this.getPositionFromTransfoSpaceToVoxelSpace(posTo, space2voxelTransformName, false);

      console.log('voxelFrom {' + posFromVoxel.i + ', ' + posFromVoxel.j + ', ' + posFromVoxel.k + '} voxelTo {' + posToVoxel.i + ', ' + posToVoxel.j + ', ' + posToVoxel.k + '}');

      var segmentSample = this.getSegmentSampleVoxelSpace(posFromVoxel, posToVoxel, time);

      if (!segmentSample) return null;

      // re-writing the coord in the given transform space
      for (var i = 0; i < segmentSample.positions.length; i++) {
        var voxelPos = segmentSample.positions[i];
        var spacePos = this.getPositionFromVoxelSpaceToTransfoSpace(voxelPos, voxel2spaceTransformName);
        //console.log(`voxel {${voxelPos.i}, ${voxelPos.j}, ${voxelPos.k}} to world {${spacePos.x}, ${spacePos.y}, ${spacePos.z}}`);
        segmentSample.positions[i] = spacePos;
        segmentSample.labels[i] = "(" + Math.round(spacePos.x * 100) / 100 + ", " + Math.round(spacePos.y * 100) / 100 + ", " + Math.round(spacePos.z * 100) / 100 + ")";
      }

      return segmentSample;
    }

    /**
    * Get the voxel box, min-max for each dimension. The max values are not included.
    * @return {Object} Box of shape {min: {i:Number, j:Number, k:Number, t:Number}, max: {i:Number, j:Number, k:Number, t:Number} }
    */

  }, {
    key: 'getVoxelBox',
    value: function getVoxelBox() {
      return {
        min: { i: 0, j: 0, k: 0, t: 0 },
        max: {
          i: this.getDimensionSize("i"),
          j: this.getDimensionSize("j"),
          k: this.getDimensionSize("k"),
          t: this.getDimensionSize("t")
        }
      };
    }

    /**
    * Get the corners of the volume in the given space coordinates
    * @param {String} transformName - id of a registered transformation that goes from voxel space to arbitrary space (aka. "v2*")
    * @return {Array} array of 8 elements like {x:Number, y:Number, z:Number}
    */

  }, {
    key: 'getTransfoVolumeCorners',
    value: function getTransfoVolumeCorners(transformName) {
      if (!this.hasTransform(transformName)) {
        console.warn('The transform ' + transformName + ' is not available.');
        return null;
      }

      var corners = [this.getPositionFromVoxelSpaceToTransfoSpace({ i: 0, j: 0, k: 0 }, transformName), this.getPositionFromVoxelSpaceToTransfoSpace({ i: this.getDimensionSize("i") - 1, j: 0, k: 0 }, transformName), this.getPositionFromVoxelSpaceToTransfoSpace({ i: this.getDimensionSize("i") - 1, j: this.getDimensionSize("j") - 1, k: 0 }, transformName), this.getPositionFromVoxelSpaceToTransfoSpace({ i: 0, j: this.getDimensionSize("j") - 1, k: 0 }, transformName), this.getPositionFromVoxelSpaceToTransfoSpace({ i: 0, j: 0, k: this.getDimensionSize("j") - 1 }, transformName), this.getPositionFromVoxelSpaceToTransfoSpace({ i: this.getDimensionSize("i") - 1, j: 0, k: this.getDimensionSize("k") - 1 }, transformName), this.getPositionFromVoxelSpaceToTransfoSpace({ i: this.getDimensionSize("i") - 1, j: this.getDimensionSize("j") - 1, k: this.getDimensionSize("k") - 1 }, transformName), this.getPositionFromVoxelSpaceToTransfoSpace({ i: 0, j: this.getDimensionSize("j") - 1, k: this.getDimensionSize("k") - 1 }, transformName)];
      return corners;
    }

    /**
    * Get the space box in a the given transform space coordinates. Due a possible rotation
    * involved in a affine transformation, the box will possibly have some void space on the sides.
    * To get the actual volume corners in a transfo space, use the method `getTransfoVolumeCorners()`.
    * @param {String} transformName - id of a registered transformation that goes from voxel space to arbitrary space (aka. "v2*")
    * @return {Object} Box of shape {min: {x:Number, y:Number, z:Number, t:Number}, max: {x:Number, y:Number, z:Number, t:Number} }
    */

  }, {
    key: 'getTransfoBox',
    value: function getTransfoBox(transformName) {
      if (!this.hasTransform(space2voxelTransformName)) {
        console.warn('The transform ' + transformName + ' is not available.');
        return null;
      }

      var corners = this.getTransfoVolumeCorners();
      var min$$1 = {
        x: +Infinity,
        y: +Infinity,
        z: +Infinity
      };
      var max$$1 = {
        x: -Infinity,
        y: -Infinity,
        z: -Infinity
      };

      for (var i = 0; i < corners.length; i++) {
        min$$1.x = Math.min(min$$1.x, corners[i].x);
        min$$1.y = Math.min(min$$1.y, corners[i].y);
        min$$1.z = Math.min(min$$1.z, corners[i].z);
        max$$1.x = Math.max(max$$1.x, corners[i].x);
        max$$1.y = Math.max(max$$1.y, corners[i].y);
        max$$1.z = Math.max(max$$1.z, corners[i].z);
      }

      var spaceBox = {
        min: {
          x: min$$1.x,
          y: min$$1.y,
          z: min$$1.z,
          t: 0
        },
        max: {
          x: max$$1.x,
          y: max$$1.y,
          z: max$$1.z,
          t: this.getDimensionSize("t")
        }
      };

      return spaceBox;
    }
  }], [{
    key: 'TYPE',
    value: function TYPE() {
      return "IMAGE3DALT";
    }
  }]);
  return Image3DAlt;
}(PixpipeContainer); /* END of class Image3DAlt */

// register this type as a CoreType


CoreTypes.addCoreType(Image3DAlt);

/*
* Author   Jonathan Lurie - http://me.jonathanlurie.fr
* License  MIT
* Link      https://github.com/Pixpipe/pixpipejs
* Lab       MCIN - Montreal Neurological Institute
*/

/**
* PixpipeContainerMultiData is a generic container very close from PixpipeContainer
* (from which it inherits). The main diference is that an instance of PixpipeContainerMultiData
* can contain multiple dataset since the _data property is an Array. This is particularly
* convenient when storing large arrays of numbers that must be split in multiple collections
* such as meshes (a typed array for vertices positions, another typed array for grouping as
* triangle, another one for colors, etc.)
* The class PixpipeContainerMultiData should not be used as-is and should be iherited
* by a more specific datastructure.
*/

var PixpipeContainerMultiData = function (_PixpipeContainer) {
  inherits(PixpipeContainerMultiData, _PixpipeContainer);

  function PixpipeContainerMultiData() {
    classCallCheck(this, PixpipeContainerMultiData);

    var _this = possibleConstructorReturn(this, (PixpipeContainerMultiData.__proto__ || Object.getPrototypeOf(PixpipeContainerMultiData)).call(this));

    _this._data = [];

    // the 'dataIndex' metadata provides an indexing to the _data Array.
    // it is an index to find what kind of sub-dataset is at what index of _data
    _this.setMetadata("dataIndex", {});

    // This provides a list of Strings that identify all the mandatory dataset
    // to achieve a certain level of integrity. By default, this list is empty but
    // as soon as a class inherits from PixpipeContainerMultiData, a list of names
    // should be mentioned (hardcoded in constructor). This will then allow to 
    // perform an integrity check.
    _this.setMetadata("mandatoryDataset", []);
    return _this;
  }

  /**
  * Get a sub-dataset given its name.  
  * Notice: This gives a pointer, not a copy. Modifying the returns array will affect this object.
  * @param {String} name - name of the sub-dataset
  * @return {TypedArray} a pointer to the typed array of the sub-dataset
  */


  createClass(PixpipeContainerMultiData, [{
    key: "getData",
    value: function getData(name) {
      var index = this.getDataIndex(name);
      if (index !== -1) {
        return this._data[index];
      }

      return null;
    }

    /**
    * Get a copy of a sub-dataset given its name.  
    * Notice: This gives a copy of a typed array. Modifying the returns array will NOT affect this object.
    * @param {String} name - name of the sub-dataset
    * @return {TypedArray} a copy of the typed array of the sub-dataset
    */

  }, {
    key: "getDataCopy",
    value: function getDataCopy(name) {
      var data = this.getData(name);
      if (data) {
        return new data.constructor(data);
      }

      return null;
    }

    /**
    * Get the index of a sub-dataset within the _data list, giving its name.
    * @param {String} name - name of the sub-dataset
    * @return {Number} Index of -1 if non existant 
    */

  }, {
    key: "getDataIndex",
    value: function getDataIndex(name) {
      var index = -1;
      var dataIndex = this._metadata.dataIndex;

      if (name in dataIndex) {
        index = dataIndex[name];
      }
      return index;
    }

    /**
    * Return wether or not a sub-dataset exists given its name
    * @param {String} name - name of the sub-dataset
    * @return {Boolean} true if sub-data exists, false if not
    */

  }, {
    key: "doesDataExist",
    value: function doesDataExist(name) {
      return this.getDataIndex(name) !== -1;
    }

    /**
    * Associate d with the internal sub-dataset by pointer copy (if Object or Array).
    * A name is necessary so that the internal structure can indentify the sub-dataset,
    * to process it of to retrieve it.
    * @param {TypedArray} d - array of data to associate (not a deep copy)
    * @param {String} name - name to give to thissub-dataset
    */

  }, {
    key: "setRawData",
    value: function setRawData(d, name) {
      if (!d) {
        console.warn("Cannot add null as a dataset.");
        return;
      }

      var index = this.getDataIndex(name);
      var dataIndex = this._metadata.dataIndex;

      // if replacing data at a given position
      if (index !== -1) {
        this._data[index] = d;
      } else {
        index = this._data.length;
        this._data.push(d);
        dataIndex[name] = index;
      }
    }

    /**
    * Performs an integrity check of eixisting sub-dataset Vs mandatory sub-dataset
    * @return {Boolean} true if integrity is ok, false if not
    */

  }, {
    key: "checkIntegrity",
    value: function checkIntegrity() {
      var isOk = true;

      var mandatoryDataset = this.getMetadata("mandatoryDataset");
      for (var i = 0; i < mandatoryDataset.length; i++) {
        var exists = this.doesDataExist(mandatoryDataset[i]);
        isOk = isOk && exists;
        if (!exists) {
          console.warn("The sub-data of name: " + mandatoryDataset[i] + " is missing");
        }
      }

      return isOk;
    }

    /**
    * Get a deep copy clone of this object. Works for classes that ihnerit from PixpipeContainerMultiData.
    * Notice: the sub-datasets will possibly be ina different order, but with an index that tracks them properly.
    * In other word, not the same order but not an issue.
    * @return {PixpipeContainerMultiData} a clone.
    */

  }, {
    key: "clone",
    value: function clone() {
      var metadataClone = this.getMetadataClone();

      if (!metadataClone) {
        console.warn("The metadata object is invalid, cloning is impossible.");
        return null;
      }

      var dataIndex = this._metadata.dataIndex;
      var cloneObject = new this.constructor();
      cloneObject.setRawMetadata(metadataClone);

      for (var dataName in dataIndex) {
        cloneObject.setRawData(this.getDataCopy(dataName), dataName);
      }
      return cloneObject;
    }
  }]);
  return PixpipeContainerMultiData;
}(PixpipeContainer); /* END of class PixpipeContainerMultiData */

/*
* Author   Jonathan Lurie - http://me.jonathanlurie.fr
* License  MIT
* Link      https://github.com/Pixpipe/pixpipejs
* Lab       MCIN - Montreal Neurological Institute
*/

/**
* A Mesh3D object contains the necessary informations to create a 3D mesh
* (for example using ThreeJS) and provide a generic datastructure so that it can accept
* data from arbitrary mesh file format.
*
* **Usage**
* - [examples/fileToMniObj.html](../examples/fileToMniObj.html)
*/

var Mesh3D = function (_PixpipeContainerMult) {
  inherits(Mesh3D, _PixpipeContainerMult);

  function Mesh3D() {
    classCallCheck(this, Mesh3D);

    var _this = possibleConstructorReturn(this, (Mesh3D.__proto__ || Object.getPrototypeOf(Mesh3D)).call(this));

    _this._type = Mesh3D.TYPE();

    // the number of vertices per shapes, 3 for triangles, 4 for quads, etc.
    _this.setMetadata("verticesPerShapes", 3);

    // if vertex colors are RGB then it's 3, if RGBA, then it's 4
    _this.setMetadata("componentsPerColor", 4);

    // to build a mesh, we need at least...
    var mandatoryDataset = _this.getMetadata("mandatoryDataset");

    _this._datasetNames = {
      vertexPositions: "vertexPositions",
      polygonFaces: "polygonFaces",
      polygonNormals: "polygonNormals",
      vertexColors: "vertexColors"

      // .. a linear array of vertex positions like [x, y, z, x, y, z, ... ]
    };mandatoryDataset.push(_this._datasetNames.vertexPositions);

    // .. the ordering of vertices using indexes of the "vertexPositions" array.
    // this is related to the metadata "verticesPerShapes"
    mandatoryDataset.push(_this._datasetNames.polygonFaces);

    // .. normal vectors (unit) per face as [x, y, z, x, y, z, ... ]
    mandatoryDataset.push(_this._datasetNames.polygonNormals);
    return _this;
  }

  /**
  * Hardcode the datatype
  */


  createClass(Mesh3D, [{
    key: 'setVertexPositions',


    /**
    * Set the array of vertex positions
    * @param {TypedArray} data - array vertex positions (does not perform a deep copy). The size of this array must be a multiple of 3
    */
    value: function setVertexPositions(data) {
      if (data.length % 3 !== 0) {
        console.warn("The array of vertex positions has a non-multiple-of-three size.");
        return;
      }
      this.setRawData(data, this._datasetNames.vertexPositions);
    }

    /**
    * Get all the vertex positions (a pointer to)
    * @return {TypedArray} the vertex positions
    */

  }, {
    key: 'getVertexPositions',
    value: function getVertexPositions() {
      return this.getData(this._datasetNames.vertexPositions);
    }

    /**
    * Get a copy of the vertex positions
    * @return {TypedArray} the vertex positions (deep copy)
    */

  }, {
    key: 'getVertexPositionCopy',
    value: function getVertexPositionCopy() {
      return this.getDataCopy(this._datasetNames.vertexPositions);
    }

    /**
    * Set the array of polygon faces
    * @param {TypedArray} data - array of index of vertex positions index
    */

  }, {
    key: 'setPolygonFacesOrder',
    value: function setPolygonFacesOrder(data) {
      if (data.length % this.getMetadata("verticesPerShapes") !== 0) {
        console.warn("The array of vertext positions must have a size that is a multiple of the metadata 'verticesPerShapes'.");
        return;
      }
      this.setRawData(data, this._datasetNames.polygonFaces);
    }

    /**
    * Get all polygon faces
    * @return {TypedArray} the vertex positions
    */

  }, {
    key: 'getPolygonFacesOrder',
    value: function getPolygonFacesOrder() {
      return this.getData(this._datasetNames.polygonFaces);
    }

    /**
    * Get a copy of polygon faces
    * @return {TypedArray} the vertex positions (deep copy)
    */

  }, {
    key: 'getPolygonFacesOrderCopy',
    value: function getPolygonFacesOrderCopy() {
      return this.getDataCopy(this._datasetNames.polygonFaces);
    }

    /**
    * Set the array of polygon faces normal (unit) vectors
    * @param {TypedArray} data - array of index of vertex positions index
    */

  }, {
    key: 'setPolygonFacesNormals',
    value: function setPolygonFacesNormals(data) {
      if (data.length % 3 !== 0) {
        console.warn("The array of vertext positions must have a size that is a multiple of 3.");
        return;
      }
      this.setRawData(data, this._datasetNames.polygonNormals);
    }

    /**
    * Get all polygon faces normal (unit) vectors (a pointer to)
    * @return {TypedArray} the vertex positions
    */

  }, {
    key: 'getPolygonFacesNormals',
    value: function getPolygonFacesNormals() {
      return this.getData(this._datasetNames.polygonNormals);
    }

    /**
    * Get a copy of polygon faces normal (unit) vectors
    * @return {TypedArray} the vertex positions (deep copy)
    */

  }, {
    key: 'getPolygonFacesNormalsCopy',
    value: function getPolygonFacesNormalsCopy() {
      return this.getDataCopy(this._datasetNames.polygonNormals);
    }

    /**
    * Set the array of vertex colors
    * @param {TypedArray} data - array of index of vertex color as [r, g, b, r, g, b, etc.] or [r, b, g, a, etc.]
    */

  }, {
    key: 'setVertexColors',
    value: function setVertexColors(data) {
      if (data.length % this.getMetadata("componentsPerColor") !== 0) {
        console.warn("The array of vertext positions must have a size that is a multiple of the metadata 'componentsPerColor'.");
        return;
      }
      this.setRawData(data, this._datasetNames.vertexColors);
    }

    /**
    * Get all vertex colors (a pointer to)
    * @return {TypedArray} the vertex positions
    */

  }, {
    key: 'getVertexColors',
    value: function getVertexColors() {
      return this.getData(this._datasetNames.vertexColors);
    }

    /**
    * Get a copy of vertex colors
    * @return {TypedArray} the vertex positions (deep copy)
    */

  }, {
    key: 'getVertexColorsCopy',
    value: function getVertexColorsCopy() {
      return this.getDataCopy(this._datasetNames.vertexColors);
    }

    /*
    // if vertex colors are RGB then it's 3, if RGBA, then it's 4
    this.setMetadata("componentsPerColor", 4);
    */

    /**
    * Get the number of vertices per shape (3 for triangle, 4 for quads, etc.)
    * @return {Number} the number of vertex involved in each shape
    */

  }, {
    key: 'getNumberOfVerticesPerShapes',
    value: function getNumberOfVerticesPerShapes() {
      return this.getMetadata("verticesPerShapes");
    }

    /**
    * Set the number of vertices per shape (3 for triangle, 4 for quads, etc.)
    * @param {Number} num - the number of vertex involved in each shape
    */

  }, {
    key: 'setNumberOfVerticesPerShapes',
    value: function setNumberOfVerticesPerShapes(num) {
      if (num < 0) {
        console.warn("The number of vertice per shapes should be positive.");
      }
      this.setMetadata("verticesPerShapes", num);
    }

    /**
    * Get the number of components per color: 3 for RGB, 4 for RGBa
    * @return {Number} number of components per color
    */

  }, {
    key: 'getNumberOfComponentsPerColor',
    value: function getNumberOfComponentsPerColor() {
      return this.getMetadata("componentsPerColor");
    }

    /**
    * Set the number of components per color: 3 for RGB, 4 for RGBa
    * @param {Number} num - number of components per color
    */

  }, {
    key: 'setNumberOfComponentsPerColor',
    value: function setNumberOfComponentsPerColor(num) {
      if (num < 0) {
        console.warn("The number of components per pixel should be positive.");
      }
      this.setMetadata("componentsPerColor", num);
    }

    /**
    * Get the number of vertices in this mesh3D
    * @return {Number}
    */

  }, {
    key: 'getNumberOfVertices',
    value: function getNumberOfVertices() {
      var vertexPos = this.getVertexPositions();
      if (!vertexPos) {
        return null;
      }

      return vertexPos.length / 3;
    }

    // TODO

  }, {
    key: 'generateUniformVertexColor',
    value: function generateUniformVertexColor(colorArray) {}

    // TODO

  }, {
    key: 'generateFacesNormalsVectors',
    value: function generateFacesNormalsVectors() {
      
    }
  }], [{
    key: 'TYPE',
    value: function TYPE() {
      return "MESH3D";
    }
  }]);
  return Mesh3D;
}(PixpipeContainerMultiData); /* END of class PixpipeContainerMultiData */

// register this type as a CoreType


CoreTypes.addCoreType(Mesh3D);

/*
* Author   Jonathan Lurie - http://me.jonathanlurie.fr
* License  MIT
* Link      https://github.com/Pixpipe/pixpipejs
* Lab       MCIN - Montreal Neurological Institute
*/

/**
* CanvasImageWriter is a filter to output an instance of Image into a
* HTML5 canvas element.  
* The metadata "parentDivID" has to be set using `setMetadata("parentDivID", "whatever")`  
* The metadata "alpha", if true, enable transparency. Default: false.  
* If the input Image2D has values not in [0, 255], you can remap/stretch using  
* setMetadata("min", xxx ) default: 0  
* setMetadata("max", xxx ) default: 255  
* We can also use `setMetadata("reset", false)` so that we can add another canvas
* with a new image at update.  
*
* **Usage**
* - [examples/imageToCanvasFilter.html](../examples/imageToCanvasFilter.html)
*
* @example
// create an image
* var myImage = new pixpipe.Image2D({width: 100, height: 250, color: [255, 128, 64, 255]})
*
* // create a filter to write the image into a canvas
* var imageToCanvasFilter = new pixpipe.CanvasImageWriter( "myDiv" );
* imageToCanvasFilter.addInput( myImage );
* imageToCanvasFilter.update();
*/

var CanvasImageWriter = function (_Filter) {
  inherits(CanvasImageWriter, _Filter);

  /**
  * @param {String} parentDivID - dom id of the future canvas' parent.
  * (most likely the ID of a div)
  */
  function CanvasImageWriter() {
    classCallCheck(this, CanvasImageWriter);

    var _this = possibleConstructorReturn(this, (CanvasImageWriter.__proto__ || Object.getPrototypeOf(CanvasImageWriter)).call(this));
    // call Filter constructor


    _this.addInputValidator(0, Image2D);

    _this.setMetadata("alpha", false);
    _this.setMetadata("min", 0);
    _this.setMetadata("max", 255);
    _this.setMetadata("reset", true);

    // so that we can flush the content
    _this._canvas = null;
    _this._ctx = null;
    return _this;
  }

  /**
  * Get the canvas used to print the Image2D;
  * @return {Object} canvas
  */


  createClass(CanvasImageWriter, [{
    key: 'getCanvas',
    value: function getCanvas() {
      return this._canvas;
    }

    /**
    * [PRIVATE]
    * Initialize a new canvas object
    */

  }, {
    key: '_init',
    value: function _init() {

      var parentElem = document.getElementById(this.getMetadata("parentDivID"));

      if (!parentElem) {
        return false;
      }

      // reset content
      if (this.getMetadata("reset")) {
        while (parentElem.firstChild) {
          parentElem.removeChild(parentElem.firstChild);
        }
      }

      // creating a canvas element
      this._canvas = document.createElement("canvas");
      this._canvas.style = "image-rendering: pixelated;";
      this._ctx = this._canvas.getContext('2d');

      // not sure this is useful since the style is "pixelated"
      // (does not seem to well super well with Firefox)
      this._ctx.imageSmoothingEnabled = false;
      this._ctx.mozImageSmoothingEnabled = false;
      this._ctx.webkitImageSmoothingEnabled = false;
      this._ctx.ctxmsImageSmoothingEnabled = false;

      document.getElementById(this.getMetadata("parentDivID")).appendChild(this._canvas);

      return true;
    }

    /**
    * Overwrite the generic (empty) method.
    */

  }, {
    key: '_run',
    value: function _run() {
      if (!this.hasValidInput()) return;

      var image = this._input[0];
      var ncppSrc = image.getComponentsPerPixel();

      // only Image2d with 1 or 4 bands can be displayed
      if (ncppSrc != 1 && ncppSrc != 3 && ncppSrc != 4) {
        console.warn("Cannot write Image in canvas if contains other than 1, 3 or 4 bands.");
        return;
      }

      if (!this.getMetadata("parentDivID")) {
        console.error("The parent DIV ID to place the canvas element was not specified. Unable to display anything.");
        return;
      }

      // build a new canvas
      if (!this._init()) {
        console.warn("The parent div was not specified or does not exist.");
        return;
      }
      var useAlphaBand = this.getMetadata("alpha");

      // resizing the canvas
      this._canvas.width = image.getWidth();
      this._canvas.height = image.getHeight();

      var canvasImageData = this._ctx.getImageData(0, 0, this._canvas.width, this._canvas.height);
      var canvasImageDataArray = canvasImageData.data;

      // getting Image object data
      var originalImageDataArray = image.getData();

      // input image is RGBA
      if (ncppSrc == 4) {
        for (var i = 0; i < originalImageDataArray.length; i++) {
          if (!useAlphaBand && i % 4 == 3) {
            canvasImageDataArray[i] = 255;
          } else {
            canvasImageDataArray[i] = this._stretchMinMax(originalImageDataArray[i]);
          }
        }

        // input image is mono chanel
      } else if (ncppSrc == 1) {

        for (var i = 0; i < originalImageDataArray.length; i++) {
          var index1D = i * 4;
          var stretchedValue = this._stretchMinMax(originalImageDataArray[i]);
          canvasImageDataArray[index1D] = stretchedValue;
          canvasImageDataArray[index1D + 1] = stretchedValue;
          canvasImageDataArray[index1D + 2] = stretchedValue;
          canvasImageDataArray[index1D + 3] = 255;
        }

        // input image is RGB
      } else if (ncppSrc == 3) {
        var counter = 0;

        for (var i = 0; i < canvasImageDataArray.length; i++) {
          if (i % 4 == 3) {
            canvasImageDataArray[i] = 255;
          } else {
            canvasImageDataArray[i] = this._stretchMinMax(originalImageDataArray[counter]);
            counter++;
          }
        }
      }

      this._ctx.putImageData(canvasImageData, 0, 0);
    }

    /**
    * [PRIVATE]
    * remap the intensity between getMetadata("min") and getMetadata("max")
    * @param {Number} intensity - input pixel value
    * @return {Number} the adjusted number
    */

  }, {
    key: '_stretchMinMax',
    value: function _stretchMinMax(intensity) {
      var min = this._metadata.min;
      var max = this._metadata.max;

      if (min == 0 && max == 255) {
        return intensity;
      }

      return (intensity - min) / (max - min) * 255;
    }
  }]);
  return CanvasImageWriter;
}(Filter);

/*
* Author   Jonathan Lurie - http://me.jonathanlurie.fr
* License  MIT
* Link      https://github.com/Pixpipe/pixpipejs
* Lab       MCIN - Montreal Neurological Institute
*/

/**
* An instance of UrlImageReader takes an image URL to jpeg or png as input and
* returns an Image2D as output. Use the regular `addInput()` and `getOuput()`
* with no argument for that. For Tiff format, use TiffDecoder instead.
* Reading a file from URL takes an AJAX request, which is asynchronous. For this
* reason, what happens next, once the Image2D is created must take place in the
* callback defined by the event .on("ready", function(){ ... }).
* Usage: examples/urlToImage2D.html
*
* UrlImageReader can also load multiple images and call the "ready" event
* only when all of them are loaded.
*
* **Usage**
* - [examples/urlToImage2D_multiple.html](../examples/urlToImage2D_multiple.html)
*
*
* @example
* var url2ImgFilter = new pixpipe.UrlImageReader( ... );
* url2ImgFilter.addInput( "images/sd.jpg" );
* url2ImgFilter.update();
*/

var UrlImageReader = function (_Filter) {
  inherits(UrlImageReader, _Filter);

  /**
  * @param {function} callback - function to call when the image is loaded.
  * The _this_ object will be in argument of this callback.
  */
  function UrlImageReader(callback) {
    classCallCheck(this, UrlImageReader);

    var _this = possibleConstructorReturn(this, (UrlImageReader.__proto__ || Object.getPrototypeOf(UrlImageReader)).call(this));

    _this._loadedCounter = 0;
    _this._addOutput(Image2D, 0);
    return _this;
  }

  /**
  * Overload the function
  */


  createClass(UrlImageReader, [{
    key: '_run',
    value: function _run() {
      var that = this;
      var inputCategories = this.getInputCategories();

      inputCategories.forEach(function (category) {
        that._addOutput(Image2D, category);
        that._loadImage(category);
      });
    }

    /**
    * [PRIVATE]
    * Loading task for a single category (aka file, in this case)
    */

  }, {
    key: '_loadImage',
    value: function _loadImage(inputCategory) {
      var that = this;

      var img = new Image();
      img.src = this._getInput(inputCategory);

      img.onload = function () {
        var tmpCanvas = document.createElement("canvas");
        tmpCanvas.width = img.width;
        tmpCanvas.height = img.height;
        var canvasContext = tmpCanvas.getContext('2d');
        canvasContext.drawImage(img, 0, 0);

        try {
          var imageData = canvasContext.getImageData(0, 0, tmpCanvas.width, tmpCanvas.height);
          var dataArray = new Float32Array(imageData.data);
          var img2D = that.getOutput(inputCategory);
          img2D.setData(dataArray, img.width, img.height);

          that._loadedCounter++;

          // call the loaded callback only when all images are loaded
          if (that._loadedCounter == that.getNumberOfInputs()) {
            that.triggerEvent("ready");
          }
        } catch (e) {
          console.error(e);
        }
      };
    }
  }]);
  return UrlImageReader;
}(Filter); /* END of class UrlImageReader */

/*
* Author   Jonathan Lurie - http://me.jonathanlurie.fr
* License  MIT
* Link      https://github.com/Pixpipe/pixpipejs
* Lab       MCIN - Montreal Neurological Institute
*/

/**
* An instance of FileImageReader takes a HTML5 File object of a png or jpeg image 
* as input and returns an Image2D as output.  For Tiff format, use TiffDecoder instead.
* The point is mainly to use it with a file dialog.
* Use the regular `addInput()` and `getOuput()` with no argument for that.
* Reading a local file is an asynchronous process. For this
* reason, what happens next, once the Image2D is created must take place in the
* callback defined by the event .on("ready", function(){ ... }).
*
*
*
* **Usage**
* - [examples/fileToImage2D.html](../examples/fileToImage2D.html)
*
* @example
* var file2ImgFilter = new pixpipe.file2ImgFilter( ... );
* file2ImgFilter.addInput( fileInput.files[0] );
* file2ImgFilter.update();
*/

var FileImageReader = function (_Filter) {
  inherits(FileImageReader, _Filter);

  function FileImageReader() {
    classCallCheck(this, FileImageReader);

    var _this = possibleConstructorReturn(this, (FileImageReader.__proto__ || Object.getPrototypeOf(FileImageReader)).call(this));

    _this._allowedTypes = /image.*/;
    return _this;
  }

  /**
  * Overload the default method because HTML5 File is not a Pixpipe type
  */


  createClass(FileImageReader, [{
    key: 'hasValidInput',
    value: function hasValidInput() {
      var valid = false;
      var file = this._getInput();

      if (file && file.type.match(this._allowedTypes)) {
        valid = true;
      } else {
        console.error("The file must be an image (jpg/png). The type " + file.type + " is not compatible with FileImageReader.");
      }

      return valid;
    }

    /**
    * Run the reading
    */

  }, {
    key: '_run',
    value: function _run() {

      if (!this.hasValidInput()) return;

      var that = this;
      var file = this._getInput();
      var reader = new FileReader();

      reader.onload = function (e) {
        var img = new Image();

        img.onload = function () {

          var tmpCanvas = document.createElement("canvas");
          tmpCanvas.width = img.width;
          tmpCanvas.height = img.height;
          var canvasContext = tmpCanvas.getContext('2d');
          canvasContext.drawImage(img, 0, 0);
          var imageData = canvasContext.getImageData(0, 0, img.width, img.height);
          var dataArray = imageData.data;

          var img2D = that._addOutput(Image2D, 0);
          img2D.setData(dataArray, img.width, img.height);

          // the "ready" can now be called
          that.triggerEvent("ready");
        };

        img.src = reader.result;
      };

      reader.readAsDataURL(file);
    }
  }]);
  return FileImageReader;
}(Filter); /* END of class UrlImageReader */

var global$1 = typeof commonjsGlobal !== "undefined" ? commonjsGlobal : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {};

// shim for using process in browser
// based off https://github.com/defunctzombie/node-process/blob/master/browser.js

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout() {
    throw new Error('clearTimeout has not been defined');
}
var cachedSetTimeout = defaultSetTimout;
var cachedClearTimeout = defaultClearTimeout;
if (typeof global$1.setTimeout === 'function') {
    cachedSetTimeout = setTimeout;
}
if (typeof global$1.clearTimeout === 'function') {
    cachedClearTimeout = clearTimeout;
}

function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }
}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }
}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while (len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}
function nextTick(fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
}
// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
var title = 'browser';
var platform = 'browser';
var browser = true;
var env = {};
var argv = [];
var version = ''; // empty string to avoid regexp issues
var versions = {};
var release = {};
var config = {};

function noop() {}

var on = noop;
var addListener = noop;
var once = noop;
var off = noop;
var removeListener = noop;
var removeAllListeners = noop;
var emit = noop;

function binding(name) {
    throw new Error('process.binding is not supported');
}

function cwd() {
    return '/';
}
function chdir(dir) {
    throw new Error('process.chdir is not supported');
}
function umask() {
    return 0;
}

// from https://github.com/kumavis/browser-process-hrtime/blob/master/index.js
var performance$1 = global$1.performance || {};
var performanceNow = performance$1.now || performance$1.mozNow || performance$1.msNow || performance$1.oNow || performance$1.webkitNow || function () {
    return new Date().getTime();
};

// generate timestamp or delta
// see http://nodejs.org/api/process.html#process_process_hrtime
function hrtime(previousTimestamp) {
    var clocktime = performanceNow.call(performance$1) * 1e-3;
    var seconds = Math.floor(clocktime);
    var nanoseconds = Math.floor(clocktime % 1 * 1e9);
    if (previousTimestamp) {
        seconds = seconds - previousTimestamp[0];
        nanoseconds = nanoseconds - previousTimestamp[1];
        if (nanoseconds < 0) {
            seconds--;
            nanoseconds += 1e9;
        }
    }
    return [seconds, nanoseconds];
}

var startTime = new Date();
function uptime() {
    var currentTime = new Date();
    var dif = currentTime - startTime;
    return dif / 1000;
}

var process = {
    nextTick: nextTick,
    title: title,
    browser: browser,
    env: env,
    argv: argv,
    version: version,
    versions: versions,
    on: on,
    addListener: addListener,
    once: once,
    off: off,
    removeListener: removeListener,
    removeAllListeners: removeAllListeners,
    emit: emit,
    binding: binding,
    cwd: cwd,
    chdir: chdir,
    umask: umask,
    hrtime: hrtime,
    platform: platform,
    release: release,
    config: config,
    uptime: uptime
};

var empty = {};

var empty$1 = Object.freeze({
	default: empty
});

var lookup = [];
var revLookup = [];
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
var inited = false;
function init() {
  inited = true;
  var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
  for (var i = 0, len = code.length; i < len; ++i) {
    lookup[i] = code[i];
    revLookup[code.charCodeAt(i)] = i;
  }

  revLookup['-'.charCodeAt(0)] = 62;
  revLookup['_'.charCodeAt(0)] = 63;
}

function toByteArray(b64) {
  if (!inited) {
    init();
  }
  var i, j, l, tmp, placeHolders, arr;
  var len = b64.length;

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4');
  }

  // the number of equal signs (place holders)
  // if there are two placeholders, than the two characters before it
  // represent one byte
  // if there is only one, then the three characters before it represent 2 bytes
  // this is just a cheap hack to not do indexOf twice
  placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0;

  // base64 is 4/3 + up to two characters of the original data
  arr = new Arr(len * 3 / 4 - placeHolders);

  // if there are placeholders, only get up to the last complete 4 chars
  l = placeHolders > 0 ? len - 4 : len;

  var L = 0;

  for (i = 0, j = 0; i < l; i += 4, j += 3) {
    tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
    arr[L++] = tmp >> 16 & 0xFF;
    arr[L++] = tmp >> 8 & 0xFF;
    arr[L++] = tmp & 0xFF;
  }

  if (placeHolders === 2) {
    tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
    arr[L++] = tmp & 0xFF;
  } else if (placeHolders === 1) {
    tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
    arr[L++] = tmp >> 8 & 0xFF;
    arr[L++] = tmp & 0xFF;
  }

  return arr;
}

function tripletToBase64(num) {
  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
}

function encodeChunk(uint8, start, end) {
  var tmp;
  var output = [];
  for (var i = start; i < end; i += 3) {
    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + uint8[i + 2];
    output.push(tripletToBase64(tmp));
  }
  return output.join('');
}

function fromByteArray(uint8) {
  if (!inited) {
    init();
  }
  var tmp;
  var len = uint8.length;
  var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
  var output = '';
  var parts = [];
  var maxChunkLength = 16383; // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1];
    output += lookup[tmp >> 2];
    output += lookup[tmp << 4 & 0x3F];
    output += '==';
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1];
    output += lookup[tmp >> 10];
    output += lookup[tmp >> 4 & 0x3F];
    output += lookup[tmp << 2 & 0x3F];
    output += '=';
  }

  parts.push(output);

  return parts.join('');
}

function read(buffer, offset, isLE, mLen, nBytes) {
  var e, m;
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var nBits = -7;
  var i = isLE ? nBytes - 1 : 0;
  var d = isLE ? -1 : 1;
  var s = buffer[offset + i];

  i += d;

  e = s & (1 << -nBits) - 1;
  s >>= -nBits;
  nBits += eLen;
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & (1 << -nBits) - 1;
  e >>= -nBits;
  nBits += mLen;
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias;
  } else if (e === eMax) {
    return m ? NaN : (s ? -1 : 1) * Infinity;
  } else {
    m = m + Math.pow(2, mLen);
    e = e - eBias;
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
}

function write(buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c;
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
  var i = isLE ? 0 : nBytes - 1;
  var d = isLE ? 1 : -1;
  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;

  value = Math.abs(value);

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0;
    e = eMax;
  } else {
    e = Math.floor(Math.log(value) / Math.LN2);
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--;
      c *= 2;
    }
    if (e + eBias >= 1) {
      value += rt / c;
    } else {
      value += rt * Math.pow(2, 1 - eBias);
    }
    if (value * c >= 2) {
      e++;
      c /= 2;
    }

    if (e + eBias >= eMax) {
      m = 0;
      e = eMax;
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
      e = 0;
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = e << mLen | m;
  eLen += mLen;
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128;
}

var toString = {}.toString;

var isArray = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

var INSPECT_MAX_BYTES = 50;

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global$1.TYPED_ARRAY_SUPPORT !== undefined ? global$1.TYPED_ARRAY_SUPPORT : true;

/*
 * Export kMaxLength after typed array support is determined.
 */
var _kMaxLength = kMaxLength();
function kMaxLength() {
  return Buffer.TYPED_ARRAY_SUPPORT ? 0x7fffffff : 0x3fffffff;
}

function createBuffer(that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length');
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length);
    that.__proto__ = Buffer.prototype;
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length);
    }
    that.length = length;
  }

  return that;
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer(arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length);
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error('If encoding is specified then the first argument must be a string');
    }
    return allocUnsafe(this, arg);
  }
  return from(this, arg, encodingOrOffset, length);
}

Buffer.poolSize = 8192; // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype;
  return arr;
};

function from(that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number');
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length);
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset);
  }

  return fromObject(that, value);
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length);
};

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype;
  Buffer.__proto__ = Uint8Array;
  
}

function assertSize(size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number');
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative');
  }
}

function alloc(that, size, fill, encoding) {
  assertSize(size);
  if (size <= 0) {
    return createBuffer(that, size);
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string' ? createBuffer(that, size).fill(fill, encoding) : createBuffer(that, size).fill(fill);
  }
  return createBuffer(that, size);
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding);
};

function allocUnsafe(that, size) {
  assertSize(size);
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0;
    }
  }
  return that;
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size);
};
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size);
};

function fromString(that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8';
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding');
  }

  var length = byteLength(string, encoding) | 0;
  that = createBuffer(that, length);

  var actual = that.write(string, encoding);

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual);
  }

  return that;
}

function fromArrayLike(that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0;
  that = createBuffer(that, length);
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255;
  }
  return that;
}

function fromArrayBuffer(that, array, byteOffset, length) {
  array.byteLength; // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds');
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds');
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array);
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset);
  } else {
    array = new Uint8Array(array, byteOffset, length);
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array;
    that.__proto__ = Buffer.prototype;
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array);
  }
  return that;
}

function fromObject(that, obj) {
  if (internalIsBuffer(obj)) {
    var len = checked(obj.length) | 0;
    that = createBuffer(that, len);

    if (that.length === 0) {
      return that;
    }

    obj.copy(that, 0, 0, len);
    return that;
  }

  if (obj) {
    if (typeof ArrayBuffer !== 'undefined' && obj.buffer instanceof ArrayBuffer || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0);
      }
      return fromArrayLike(that, obj);
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data);
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.');
}

function checked(length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' + 'size: 0x' + kMaxLength().toString(16) + ' bytes');
  }
  return length | 0;
}

function SlowBuffer(length) {
  if (+length != length) {
    // eslint-disable-line eqeqeq
    length = 0;
  }
  return Buffer.alloc(+length);
}
Buffer.isBuffer = isBuffer;
function internalIsBuffer(b) {
  return !!(b != null && b._isBuffer);
}

Buffer.compare = function compare(a, b) {
  if (!internalIsBuffer(a) || !internalIsBuffer(b)) {
    throw new TypeError('Arguments must be Buffers');
  }

  if (a === b) return 0;

  var x = a.length;
  var y = b.length;

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i];
      y = b[i];
      break;
    }
  }

  if (x < y) return -1;
  if (y < x) return 1;
  return 0;
};

Buffer.isEncoding = function isEncoding(encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true;
    default:
      return false;
  }
};

Buffer.concat = function concat(list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers');
  }

  if (list.length === 0) {
    return Buffer.alloc(0);
  }

  var i;
  if (length === undefined) {
    length = 0;
    for (i = 0; i < list.length; ++i) {
      length += list[i].length;
    }
  }

  var buffer = Buffer.allocUnsafe(length);
  var pos = 0;
  for (i = 0; i < list.length; ++i) {
    var buf = list[i];
    if (!internalIsBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers');
    }
    buf.copy(buffer, pos);
    pos += buf.length;
  }
  return buffer;
};

function byteLength(string, encoding) {
  if (internalIsBuffer(string)) {
    return string.length;
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' && (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength;
  }
  if (typeof string !== 'string') {
    string = '' + string;
  }

  var len = string.length;
  if (len === 0) return 0;

  // Use a for loop to avoid recursion
  var loweredCase = false;
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len;
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length;
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2;
      case 'hex':
        return len >>> 1;
      case 'base64':
        return base64ToBytes(string).length;
      default:
        if (loweredCase) return utf8ToBytes(string).length; // assume utf8
        encoding = ('' + encoding).toLowerCase();
        loweredCase = true;
    }
  }
}
Buffer.byteLength = byteLength;

function slowToString(encoding, start, end) {
  var loweredCase = false;

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0;
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return '';
  }

  if (end === undefined || end > this.length) {
    end = this.length;
  }

  if (end <= 0) {
    return '';
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0;
  start >>>= 0;

  if (end <= start) {
    return '';
  }

  if (!encoding) encoding = 'utf8';

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end);

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end);

      case 'ascii':
        return asciiSlice(this, start, end);

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end);

      case 'base64':
        return base64Slice(this, start, end);

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end);

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
        encoding = (encoding + '').toLowerCase();
        loweredCase = true;
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true;

function swap(b, n, m) {
  var i = b[n];
  b[n] = b[m];
  b[m] = i;
}

Buffer.prototype.swap16 = function swap16() {
  var len = this.length;
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits');
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1);
  }
  return this;
};

Buffer.prototype.swap32 = function swap32() {
  var len = this.length;
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits');
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3);
    swap(this, i + 1, i + 2);
  }
  return this;
};

Buffer.prototype.swap64 = function swap64() {
  var len = this.length;
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits');
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7);
    swap(this, i + 1, i + 6);
    swap(this, i + 2, i + 5);
    swap(this, i + 3, i + 4);
  }
  return this;
};

Buffer.prototype.toString = function toString() {
  var length = this.length | 0;
  if (length === 0) return '';
  if (arguments.length === 0) return utf8Slice(this, 0, length);
  return slowToString.apply(this, arguments);
};

Buffer.prototype.equals = function equals(b) {
  if (!internalIsBuffer(b)) throw new TypeError('Argument must be a Buffer');
  if (this === b) return true;
  return Buffer.compare(this, b) === 0;
};

Buffer.prototype.inspect = function inspect() {
  var str = '';
  var max = INSPECT_MAX_BYTES;
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
    if (this.length > max) str += ' ... ';
  }
  return '<Buffer ' + str + '>';
};

Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
  if (!internalIsBuffer(target)) {
    throw new TypeError('Argument must be a Buffer');
  }

  if (start === undefined) {
    start = 0;
  }
  if (end === undefined) {
    end = target ? target.length : 0;
  }
  if (thisStart === undefined) {
    thisStart = 0;
  }
  if (thisEnd === undefined) {
    thisEnd = this.length;
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index');
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0;
  }
  if (thisStart >= thisEnd) {
    return -1;
  }
  if (start >= end) {
    return 1;
  }

  start >>>= 0;
  end >>>= 0;
  thisStart >>>= 0;
  thisEnd >>>= 0;

  if (this === target) return 0;

  var x = thisEnd - thisStart;
  var y = end - start;
  var len = Math.min(x, y);

  var thisCopy = this.slice(thisStart, thisEnd);
  var targetCopy = target.slice(start, end);

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i];
      y = targetCopy[i];
      break;
    }
  }

  if (x < y) return -1;
  if (y < x) return 1;
  return 0;
};

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1;

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset;
    byteOffset = 0;
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff;
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000;
  }
  byteOffset = +byteOffset; // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : buffer.length - 1;
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
  if (byteOffset >= buffer.length) {
    if (dir) return -1;else byteOffset = buffer.length - 1;
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0;else return -1;
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding);
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (internalIsBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1;
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
  } else if (typeof val === 'number') {
    val = val & 0xFF; // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT && typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
      }
    }
    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
  }

  throw new TypeError('val must be string, number or Buffer');
}

function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
  var indexSize = 1;
  var arrLength = arr.length;
  var valLength = val.length;

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase();
    if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1;
      }
      indexSize = 2;
      arrLength /= 2;
      valLength /= 2;
      byteOffset /= 2;
    }
  }

  function read$$1(buf, i) {
    if (indexSize === 1) {
      return buf[i];
    } else {
      return buf.readUInt16BE(i * indexSize);
    }
  }

  var i;
  if (dir) {
    var foundIndex = -1;
    for (i = byteOffset; i < arrLength; i++) {
      if (read$$1(arr, i) === read$$1(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i;
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
      } else {
        if (foundIndex !== -1) i -= i - foundIndex;
        foundIndex = -1;
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
    for (i = byteOffset; i >= 0; i--) {
      var found = true;
      for (var j = 0; j < valLength; j++) {
        if (read$$1(arr, i + j) !== read$$1(val, j)) {
          found = false;
          break;
        }
      }
      if (found) return i;
    }
  }

  return -1;
}

Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1;
};

Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
};

Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
};

function hexWrite(buf, string, offset, length) {
  offset = Number(offset) || 0;
  var remaining = buf.length - offset;
  if (!length) {
    length = remaining;
  } else {
    length = Number(length);
    if (length > remaining) {
      length = remaining;
    }
  }

  // must be an even number of digits
  var strLen = string.length;
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string');

  if (length > strLen / 2) {
    length = strLen / 2;
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16);
    if (isNaN(parsed)) return i;
    buf[offset + i] = parsed;
  }
  return i;
}

function utf8Write(buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
}

function asciiWrite(buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length);
}

function latin1Write(buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length);
}

function base64Write(buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length);
}

function ucs2Write(buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
}

Buffer.prototype.write = function write$$1(string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8';
    length = this.length;
    offset = 0;
    // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset;
    length = this.length;
    offset = 0;
    // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0;
    if (isFinite(length)) {
      length = length | 0;
      if (encoding === undefined) encoding = 'utf8';
    } else {
      encoding = length;
      length = undefined;
    }
    // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');
  }

  var remaining = this.length - offset;
  if (length === undefined || length > remaining) length = remaining;

  if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds');
  }

  if (!encoding) encoding = 'utf8';

  var loweredCase = false;
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length);

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length);

      case 'ascii':
        return asciiWrite(this, string, offset, length);

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length);

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length);

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length);

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
        encoding = ('' + encoding).toLowerCase();
        loweredCase = true;
    }
  }
};

Buffer.prototype.toJSON = function toJSON() {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  };
};

function base64Slice(buf, start, end) {
  if (start === 0 && end === buf.length) {
    return fromByteArray(buf);
  } else {
    return fromByteArray(buf.slice(start, end));
  }
}

function utf8Slice(buf, start, end) {
  end = Math.min(buf.length, end);
  var res = [];

  var i = start;
  while (i < end) {
    var firstByte = buf[i];
    var codePoint = null;
    var bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint;

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte;
          }
          break;
        case 2:
          secondByte = buf[i + 1];
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint;
            }
          }
          break;
        case 3:
          secondByte = buf[i + 1];
          thirdByte = buf[i + 2];
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint;
            }
          }
          break;
        case 4:
          secondByte = buf[i + 1];
          thirdByte = buf[i + 2];
          fourthByte = buf[i + 3];
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint;
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD;
      bytesPerSequence = 1;
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000;
      res.push(codePoint >>> 10 & 0x3FF | 0xD800);
      codePoint = 0xDC00 | codePoint & 0x3FF;
    }

    res.push(codePoint);
    i += bytesPerSequence;
  }

  return decodeCodePointsArray(res);
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000;

function decodeCodePointsArray(codePoints) {
  var len = codePoints.length;
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints); // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = '';
  var i = 0;
  while (i < len) {
    res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
  }
  return res;
}

function asciiSlice(buf, start, end) {
  var ret = '';
  end = Math.min(buf.length, end);

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F);
  }
  return ret;
}

function latin1Slice(buf, start, end) {
  var ret = '';
  end = Math.min(buf.length, end);

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i]);
  }
  return ret;
}

function hexSlice(buf, start, end) {
  var len = buf.length;

  if (!start || start < 0) start = 0;
  if (!end || end < 0 || end > len) end = len;

  var out = '';
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i]);
  }
  return out;
}

function utf16leSlice(buf, start, end) {
  var bytes = buf.slice(start, end);
  var res = '';
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
  }
  return res;
}

Buffer.prototype.slice = function slice(start, end) {
  var len = this.length;
  start = ~~start;
  end = end === undefined ? len : ~~end;

  if (start < 0) {
    start += len;
    if (start < 0) start = 0;
  } else if (start > len) {
    start = len;
  }

  if (end < 0) {
    end += len;
    if (end < 0) end = 0;
  } else if (end > len) {
    end = len;
  }

  if (end < start) end = start;

  var newBuf;
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end);
    newBuf.__proto__ = Buffer.prototype;
  } else {
    var sliceLen = end - start;
    newBuf = new Buffer(sliceLen, undefined);
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start];
    }
  }

  return newBuf;
};

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset(offset, ext, length) {
  if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');
}

Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);

  var val = this[offset];
  var mul = 1;
  var i = 0;
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul;
  }

  return val;
};

Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length);
  }

  var val = this[offset + --byteLength];
  var mul = 1;
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul;
  }

  return val;
};

Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length);
  return this[offset];
};

Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  return this[offset] | this[offset + 1] << 8;
};

Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  return this[offset] << 8 | this[offset + 1];
};

Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);

  return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;
};

Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);

  return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
};

Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);

  var val = this[offset];
  var mul = 1;
  var i = 0;
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul;
  }
  mul *= 0x80;

  if (val >= mul) val -= Math.pow(2, 8 * byteLength);

  return val;
};

Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);

  var i = byteLength;
  var mul = 1;
  var val = this[offset + --i];
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul;
  }
  mul *= 0x80;

  if (val >= mul) val -= Math.pow(2, 8 * byteLength);

  return val;
};

Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length);
  if (!(this[offset] & 0x80)) return this[offset];
  return (0xff - this[offset] + 1) * -1;
};

Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  var val = this[offset] | this[offset + 1] << 8;
  return val & 0x8000 ? val | 0xFFFF0000 : val;
};

Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  var val = this[offset + 1] | this[offset] << 8;
  return val & 0x8000 ? val | 0xFFFF0000 : val;
};

Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);

  return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
};

Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);

  return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
};

Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return read(this, offset, true, 23, 4);
};

Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return read(this, offset, false, 23, 4);
};

Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length);
  return read(this, offset, true, 52, 8);
};

Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length);
  return read(this, offset, false, 52, 8);
};

function checkInt(buf, value, offset, ext, max, min) {
  if (!internalIsBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
  if (offset + ext > buf.length) throw new RangeError('Index out of range');
}

Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
    checkInt(this, value, offset, byteLength, maxBytes, 0);
  }

  var mul = 1;
  var i = 0;
  this[offset] = value & 0xFF;
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = value / mul & 0xFF;
  }

  return offset + byteLength;
};

Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
    checkInt(this, value, offset, byteLength, maxBytes, 0);
  }

  var i = byteLength - 1;
  var mul = 1;
  this[offset + i] = value & 0xFF;
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = value / mul & 0xFF;
  }

  return offset + byteLength;
};

Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
  this[offset] = value & 0xff;
  return offset + 1;
};

function objectWriteUInt16(buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1;
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & 0xff << 8 * (littleEndian ? i : 1 - i)) >>> (littleEndian ? i : 1 - i) * 8;
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
  } else {
    objectWriteUInt16(this, value, offset, true);
  }
  return offset + 2;
};

Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
  } else {
    objectWriteUInt16(this, value, offset, false);
  }
  return offset + 2;
};

function objectWriteUInt32(buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1;
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = value >>> (littleEndian ? i : 3 - i) * 8 & 0xff;
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = value >>> 24;
    this[offset + 2] = value >>> 16;
    this[offset + 1] = value >>> 8;
    this[offset] = value & 0xff;
  } else {
    objectWriteUInt32(this, value, offset, true);
  }
  return offset + 4;
};

Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
  } else {
    objectWriteUInt32(this, value, offset, false);
  }
  return offset + 4;
};

Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1);

    checkInt(this, value, offset, byteLength, limit - 1, -limit);
  }

  var i = 0;
  var mul = 1;
  var sub = 0;
  this[offset] = value & 0xFF;
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1;
    }
    this[offset + i] = (value / mul >> 0) - sub & 0xFF;
  }

  return offset + byteLength;
};

Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1);

    checkInt(this, value, offset, byteLength, limit - 1, -limit);
  }

  var i = byteLength - 1;
  var mul = 1;
  var sub = 0;
  this[offset + i] = value & 0xFF;
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1;
    }
    this[offset + i] = (value / mul >> 0) - sub & 0xFF;
  }

  return offset + byteLength;
};

Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
  if (value < 0) value = 0xff + value + 1;
  this[offset] = value & 0xff;
  return offset + 1;
};

Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
  } else {
    objectWriteUInt16(this, value, offset, true);
  }
  return offset + 2;
};

Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
  } else {
    objectWriteUInt16(this, value, offset, false);
  }
  return offset + 2;
};

Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    this[offset + 2] = value >>> 16;
    this[offset + 3] = value >>> 24;
  } else {
    objectWriteUInt32(this, value, offset, true);
  }
  return offset + 4;
};

Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
  if (value < 0) value = 0xffffffff + value + 1;
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
  } else {
    objectWriteUInt32(this, value, offset, false);
  }
  return offset + 4;
};

function checkIEEE754(buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range');
  if (offset < 0) throw new RangeError('Index out of range');
}

function writeFloat(buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38);
  }
  write(buf, value, offset, littleEndian, 23, 4);
  return offset + 4;
}

Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert);
};

Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert);
};

function writeDouble(buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308);
  }
  write(buf, value, offset, littleEndian, 52, 8);
  return offset + 8;
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert);
};

Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert);
};

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy(target, targetStart, start, end) {
  if (!start) start = 0;
  if (!end && end !== 0) end = this.length;
  if (targetStart >= target.length) targetStart = target.length;
  if (!targetStart) targetStart = 0;
  if (end > 0 && end < start) end = start;

  // Copy 0 bytes; we're done
  if (end === start) return 0;
  if (target.length === 0 || this.length === 0) return 0;

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds');
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds');
  if (end < 0) throw new RangeError('sourceEnd out of bounds');

  // Are we oob?
  if (end > this.length) end = this.length;
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start;
  }

  var len = end - start;
  var i;

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start];
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start];
    }
  } else {
    Uint8Array.prototype.set.call(target, this.subarray(start, start + len), targetStart);
  }

  return len;
};

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill(val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start;
      start = 0;
      end = this.length;
    } else if (typeof end === 'string') {
      encoding = end;
      end = this.length;
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0);
      if (code < 256) {
        val = code;
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string');
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding);
    }
  } else if (typeof val === 'number') {
    val = val & 255;
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index');
  }

  if (end <= start) {
    return this;
  }

  start = start >>> 0;
  end = end === undefined ? this.length : end >>> 0;

  if (!val) val = 0;

  var i;
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val;
    }
  } else {
    var bytes = internalIsBuffer(val) ? val : utf8ToBytes(new Buffer(val, encoding).toString());
    var len = bytes.length;
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len];
    }
  }

  return this;
};

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;

function base64clean(str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '');
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return '';
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '=';
  }
  return str;
}

function stringtrim(str) {
  if (str.trim) return str.trim();
  return str.replace(/^\s+|\s+$/g, '');
}

function toHex(n) {
  if (n < 16) return '0' + n.toString(16);
  return n.toString(16);
}

function utf8ToBytes(string, units) {
  units = units || Infinity;
  var codePoint;
  var length = string.length;
  var leadSurrogate = null;
  var bytes = [];

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i);

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          continue;
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          continue;
        }

        // valid lead
        leadSurrogate = codePoint;

        continue;
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
        leadSurrogate = codePoint;
        continue;
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
    }

    leadSurrogate = null;

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break;
      bytes.push(codePoint);
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break;
      bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break;
      bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break;
      bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
    } else {
      throw new Error('Invalid code point');
    }
  }

  return bytes;
}

function asciiToBytes(str) {
  var byteArray = [];
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF);
  }
  return byteArray;
}

function utf16leToBytes(str, units) {
  var c, hi, lo;
  var byteArray = [];
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break;

    c = str.charCodeAt(i);
    hi = c >> 8;
    lo = c % 256;
    byteArray.push(lo);
    byteArray.push(hi);
  }

  return byteArray;
}

function base64ToBytes(str) {
  return toByteArray(base64clean(str));
}

function blitBuffer(src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if (i + offset >= dst.length || i >= src.length) break;
    dst[i + offset] = src[i];
  }
  return i;
}

function isnan(val) {
  return val !== val; // eslint-disable-line no-self-compare
}

// the following is from is-buffer, also by Feross Aboukhadijeh and with same lisence
// The _isBuffer check is for Safari 5-7 support, because it's missing
// Object.prototype.constructor. Remove this eventually
function isBuffer(obj) {
  return obj != null && (!!obj._isBuffer || isFastBuffer(obj) || isSlowBuffer(obj));
}

function isFastBuffer(obj) {
  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj);
}

// For Node v0.10 support. Remove this eventually.
function isSlowBuffer(obj) {
  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isFastBuffer(obj.slice(0, 0));
}

var index = Object.freeze({
	INSPECT_MAX_BYTES: INSPECT_MAX_BYTES,
	kMaxLength: _kMaxLength,
	Buffer: Buffer,
	SlowBuffer: SlowBuffer,
	isBuffer: isBuffer
});

var require$$0 = ( empty$1 && empty ) || empty$1;

var require$$1 = ( index && undefined ) || index;

var md5 = createCommonjsModule$$1(function (module) {
  /**
   * [js-md5]{@link https://github.com/emn178/js-md5}
   *
   * @namespace md5
   * @version 0.4.2
   * @author Chen, Yi-Cyuan [emn178@gmail.com]
   * @copyright Chen, Yi-Cyuan 2014-2017
   * @license MIT
   */
  (function () {
    'use strict';

    var root = (typeof window === 'undefined' ? 'undefined' : _typeof(window)) === 'object' ? window : {};
    var NODE_JS = !root.JS_MD5_NO_NODE_JS && (typeof process === 'undefined' ? 'undefined' : _typeof(process)) === 'object' && process.versions && process.versions.node;
    if (NODE_JS) {
      root = commonjsGlobal$$1;
    }
    var COMMON_JS = !root.JS_MD5_NO_COMMON_JS && 'object' === 'object' && module.exports;
    var AMD = typeof undefined === 'function' && undefined.amd;
    var ARRAY_BUFFER = !root.JS_MD5_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';
    var HEX_CHARS = '0123456789abcdef'.split('');
    var EXTRA = [128, 32768, 8388608, -2147483648];
    var SHIFT = [0, 8, 16, 24];
    var OUTPUT_TYPES = ['hex', 'array', 'digest', 'buffer', 'arrayBuffer'];

    var blocks = [],
        buffer8;
    if (ARRAY_BUFFER) {
      var buffer = new ArrayBuffer(68);
      buffer8 = new Uint8Array(buffer);
      blocks = new Uint32Array(buffer);
    }

    /**
     * @method hex
     * @memberof md5
     * @description Output hash as hex string
     * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash
     * @returns {String} Hex string
     * @example
     * md5.hex('The quick brown fox jumps over the lazy dog');
     * // equal to
     * md5('The quick brown fox jumps over the lazy dog');
     */
    /**
     * @method digest
     * @memberof md5
     * @description Output hash as bytes array
     * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash
     * @returns {Array} Bytes array
     * @example
     * md5.digest('The quick brown fox jumps over the lazy dog');
     */
    /**
     * @method array
     * @memberof md5
     * @description Output hash as bytes array
     * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash
     * @returns {Array} Bytes array
     * @example
     * md5.array('The quick brown fox jumps over the lazy dog');
     */
    /**
     * @method arrayBuffer
     * @memberof md5
     * @description Output hash as ArrayBuffer
     * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash
     * @returns {ArrayBuffer} ArrayBuffer
     * @example
     * md5.arrayBuffer('The quick brown fox jumps over the lazy dog');
     */
    /**
     * @method buffer
     * @deprecated This maybe confuse with Buffer in node.js. Please use arrayBuffer instead.
     * @memberof md5
     * @description Output hash as ArrayBuffer
     * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash
     * @returns {ArrayBuffer} ArrayBuffer
     * @example
     * md5.buffer('The quick brown fox jumps over the lazy dog');
     */
    var createOutputMethod = function createOutputMethod(outputType) {
      return function (message) {
        return new Md5(true).update(message)[outputType]();
      };
    };

    /**
     * @method create
     * @memberof md5
     * @description Create Md5 object
     * @returns {Md5} Md5 object.
     * @example
     * var hash = md5.create();
     */
    /**
     * @method update
     * @memberof md5
     * @description Create and update Md5 object
     * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash
     * @returns {Md5} Md5 object.
     * @example
     * var hash = md5.update('The quick brown fox jumps over the lazy dog');
     * // equal to
     * var hash = md5.create();
     * hash.update('The quick brown fox jumps over the lazy dog');
     */
    var createMethod = function createMethod() {
      var method = createOutputMethod('hex');
      if (NODE_JS) {
        method = nodeWrap(method);
      }
      method.create = function () {
        return new Md5();
      };
      method.update = function (message) {
        return method.create().update(message);
      };
      for (var i = 0; i < OUTPUT_TYPES.length; ++i) {
        var type = OUTPUT_TYPES[i];
        method[type] = createOutputMethod(type);
      }
      return method;
    };

    var nodeWrap = function nodeWrap(method) {
      var crypto = require$$0;
      var Buffer = require$$1.Buffer;
      var nodeMethod = function nodeMethod(message) {
        if (typeof message === 'string') {
          return crypto.createHash('md5').update(message, 'utf8').digest('hex');
        } else if (message.constructor === ArrayBuffer) {
          message = new Uint8Array(message);
        } else if (message.length === undefined) {
          return method(message);
        }
        return crypto.createHash('md5').update(new Buffer(message)).digest('hex');
      };
      return nodeMethod;
    };

    /**
     * Md5 class
     * @class Md5
     * @description This is internal class.
     * @see {@link md5.create}
     */
    function Md5(sharedMemory) {
      if (sharedMemory) {
        blocks[0] = blocks[16] = blocks[1] = blocks[2] = blocks[3] = blocks[4] = blocks[5] = blocks[6] = blocks[7] = blocks[8] = blocks[9] = blocks[10] = blocks[11] = blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;
        this.blocks = blocks;
        this.buffer8 = buffer8;
      } else {
        if (ARRAY_BUFFER) {
          var buffer = new ArrayBuffer(68);
          this.buffer8 = new Uint8Array(buffer);
          this.blocks = new Uint32Array(buffer);
        } else {
          this.blocks = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
        }
      }
      this.h0 = this.h1 = this.h2 = this.h3 = this.start = this.bytes = 0;
      this.finalized = this.hashed = false;
      this.first = true;
    }

    /**
     * @method update
     * @memberof Md5
     * @instance
     * @description Update hash
     * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash
     * @returns {Md5} Md5 object.
     * @see {@link md5.update}
     */
    Md5.prototype.update = function (message) {
      if (this.finalized) {
        return;
      }
      var notString = typeof message != 'string';
      if (notString && message.constructor == root.ArrayBuffer) {
        message = new Uint8Array(message);
      }
      var code,
          index = 0,
          i,
          length = message.length || 0,
          blocks = this.blocks;
      var buffer8 = this.buffer8;

      while (index < length) {
        if (this.hashed) {
          this.hashed = false;
          blocks[0] = blocks[16];
          blocks[16] = blocks[1] = blocks[2] = blocks[3] = blocks[4] = blocks[5] = blocks[6] = blocks[7] = blocks[8] = blocks[9] = blocks[10] = blocks[11] = blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;
        }

        if (notString) {
          if (ARRAY_BUFFER) {
            for (i = this.start; index < length && i < 64; ++index) {
              buffer8[i++] = message[index];
            }
          } else {
            for (i = this.start; index < length && i < 64; ++index) {
              blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];
            }
          }
        } else {
          if (ARRAY_BUFFER) {
            for (i = this.start; index < length && i < 64; ++index) {
              code = message.charCodeAt(index);
              if (code < 0x80) {
                buffer8[i++] = code;
              } else if (code < 0x800) {
                buffer8[i++] = 0xc0 | code >> 6;
                buffer8[i++] = 0x80 | code & 0x3f;
              } else if (code < 0xd800 || code >= 0xe000) {
                buffer8[i++] = 0xe0 | code >> 12;
                buffer8[i++] = 0x80 | code >> 6 & 0x3f;
                buffer8[i++] = 0x80 | code & 0x3f;
              } else {
                code = 0x10000 + ((code & 0x3ff) << 10 | message.charCodeAt(++index) & 0x3ff);
                buffer8[i++] = 0xf0 | code >> 18;
                buffer8[i++] = 0x80 | code >> 12 & 0x3f;
                buffer8[i++] = 0x80 | code >> 6 & 0x3f;
                buffer8[i++] = 0x80 | code & 0x3f;
              }
            }
          } else {
            for (i = this.start; index < length && i < 64; ++index) {
              code = message.charCodeAt(index);
              if (code < 0x80) {
                blocks[i >> 2] |= code << SHIFT[i++ & 3];
              } else if (code < 0x800) {
                blocks[i >> 2] |= (0xc0 | code >> 6) << SHIFT[i++ & 3];
                blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];
              } else if (code < 0xd800 || code >= 0xe000) {
                blocks[i >> 2] |= (0xe0 | code >> 12) << SHIFT[i++ & 3];
                blocks[i >> 2] |= (0x80 | code >> 6 & 0x3f) << SHIFT[i++ & 3];
                blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];
              } else {
                code = 0x10000 + ((code & 0x3ff) << 10 | message.charCodeAt(++index) & 0x3ff);
                blocks[i >> 2] |= (0xf0 | code >> 18) << SHIFT[i++ & 3];
                blocks[i >> 2] |= (0x80 | code >> 12 & 0x3f) << SHIFT[i++ & 3];
                blocks[i >> 2] |= (0x80 | code >> 6 & 0x3f) << SHIFT[i++ & 3];
                blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];
              }
            }
          }
        }
        this.lastByteIndex = i;
        this.bytes += i - this.start;
        if (i >= 64) {
          this.start = i - 64;
          this.hash();
          this.hashed = true;
        } else {
          this.start = i;
        }
      }
      return this;
    };

    Md5.prototype.finalize = function () {
      if (this.finalized) {
        return;
      }
      this.finalized = true;
      var blocks = this.blocks,
          i = this.lastByteIndex;
      blocks[i >> 2] |= EXTRA[i & 3];
      if (i >= 56) {
        if (!this.hashed) {
          this.hash();
        }
        blocks[0] = blocks[16];
        blocks[16] = blocks[1] = blocks[2] = blocks[3] = blocks[4] = blocks[5] = blocks[6] = blocks[7] = blocks[8] = blocks[9] = blocks[10] = blocks[11] = blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;
      }
      blocks[14] = this.bytes << 3;
      this.hash();
    };

    Md5.prototype.hash = function () {
      var a,
          b,
          c,
          d,
          bc,
          da,
          blocks = this.blocks;

      if (this.first) {
        a = blocks[0] - 680876937;
        a = (a << 7 | a >>> 25) - 271733879 << 0;
        d = (-1732584194 ^ a & 2004318071) + blocks[1] - 117830708;
        d = (d << 12 | d >>> 20) + a << 0;
        c = (-271733879 ^ d & (a ^ -271733879)) + blocks[2] - 1126478375;
        c = (c << 17 | c >>> 15) + d << 0;
        b = (a ^ c & (d ^ a)) + blocks[3] - 1316259209;
        b = (b << 22 | b >>> 10) + c << 0;
      } else {
        a = this.h0;
        b = this.h1;
        c = this.h2;
        d = this.h3;
        a += (d ^ b & (c ^ d)) + blocks[0] - 680876936;
        a = (a << 7 | a >>> 25) + b << 0;
        d += (c ^ a & (b ^ c)) + blocks[1] - 389564586;
        d = (d << 12 | d >>> 20) + a << 0;
        c += (b ^ d & (a ^ b)) + blocks[2] + 606105819;
        c = (c << 17 | c >>> 15) + d << 0;
        b += (a ^ c & (d ^ a)) + blocks[3] - 1044525330;
        b = (b << 22 | b >>> 10) + c << 0;
      }

      a += (d ^ b & (c ^ d)) + blocks[4] - 176418897;
      a = (a << 7 | a >>> 25) + b << 0;
      d += (c ^ a & (b ^ c)) + blocks[5] + 1200080426;
      d = (d << 12 | d >>> 20) + a << 0;
      c += (b ^ d & (a ^ b)) + blocks[6] - 1473231341;
      c = (c << 17 | c >>> 15) + d << 0;
      b += (a ^ c & (d ^ a)) + blocks[7] - 45705983;
      b = (b << 22 | b >>> 10) + c << 0;
      a += (d ^ b & (c ^ d)) + blocks[8] + 1770035416;
      a = (a << 7 | a >>> 25) + b << 0;
      d += (c ^ a & (b ^ c)) + blocks[9] - 1958414417;
      d = (d << 12 | d >>> 20) + a << 0;
      c += (b ^ d & (a ^ b)) + blocks[10] - 42063;
      c = (c << 17 | c >>> 15) + d << 0;
      b += (a ^ c & (d ^ a)) + blocks[11] - 1990404162;
      b = (b << 22 | b >>> 10) + c << 0;
      a += (d ^ b & (c ^ d)) + blocks[12] + 1804603682;
      a = (a << 7 | a >>> 25) + b << 0;
      d += (c ^ a & (b ^ c)) + blocks[13] - 40341101;
      d = (d << 12 | d >>> 20) + a << 0;
      c += (b ^ d & (a ^ b)) + blocks[14] - 1502002290;
      c = (c << 17 | c >>> 15) + d << 0;
      b += (a ^ c & (d ^ a)) + blocks[15] + 1236535329;
      b = (b << 22 | b >>> 10) + c << 0;
      a += (c ^ d & (b ^ c)) + blocks[1] - 165796510;
      a = (a << 5 | a >>> 27) + b << 0;
      d += (b ^ c & (a ^ b)) + blocks[6] - 1069501632;
      d = (d << 9 | d >>> 23) + a << 0;
      c += (a ^ b & (d ^ a)) + blocks[11] + 643717713;
      c = (c << 14 | c >>> 18) + d << 0;
      b += (d ^ a & (c ^ d)) + blocks[0] - 373897302;
      b = (b << 20 | b >>> 12) + c << 0;
      a += (c ^ d & (b ^ c)) + blocks[5] - 701558691;
      a = (a << 5 | a >>> 27) + b << 0;
      d += (b ^ c & (a ^ b)) + blocks[10] + 38016083;
      d = (d << 9 | d >>> 23) + a << 0;
      c += (a ^ b & (d ^ a)) + blocks[15] - 660478335;
      c = (c << 14 | c >>> 18) + d << 0;
      b += (d ^ a & (c ^ d)) + blocks[4] - 405537848;
      b = (b << 20 | b >>> 12) + c << 0;
      a += (c ^ d & (b ^ c)) + blocks[9] + 568446438;
      a = (a << 5 | a >>> 27) + b << 0;
      d += (b ^ c & (a ^ b)) + blocks[14] - 1019803690;
      d = (d << 9 | d >>> 23) + a << 0;
      c += (a ^ b & (d ^ a)) + blocks[3] - 187363961;
      c = (c << 14 | c >>> 18) + d << 0;
      b += (d ^ a & (c ^ d)) + blocks[8] + 1163531501;
      b = (b << 20 | b >>> 12) + c << 0;
      a += (c ^ d & (b ^ c)) + blocks[13] - 1444681467;
      a = (a << 5 | a >>> 27) + b << 0;
      d += (b ^ c & (a ^ b)) + blocks[2] - 51403784;
      d = (d << 9 | d >>> 23) + a << 0;
      c += (a ^ b & (d ^ a)) + blocks[7] + 1735328473;
      c = (c << 14 | c >>> 18) + d << 0;
      b += (d ^ a & (c ^ d)) + blocks[12] - 1926607734;
      b = (b << 20 | b >>> 12) + c << 0;
      bc = b ^ c;
      a += (bc ^ d) + blocks[5] - 378558;
      a = (a << 4 | a >>> 28) + b << 0;
      d += (bc ^ a) + blocks[8] - 2022574463;
      d = (d << 11 | d >>> 21) + a << 0;
      da = d ^ a;
      c += (da ^ b) + blocks[11] + 1839030562;
      c = (c << 16 | c >>> 16) + d << 0;
      b += (da ^ c) + blocks[14] - 35309556;
      b = (b << 23 | b >>> 9) + c << 0;
      bc = b ^ c;
      a += (bc ^ d) + blocks[1] - 1530992060;
      a = (a << 4 | a >>> 28) + b << 0;
      d += (bc ^ a) + blocks[4] + 1272893353;
      d = (d << 11 | d >>> 21) + a << 0;
      da = d ^ a;
      c += (da ^ b) + blocks[7] - 155497632;
      c = (c << 16 | c >>> 16) + d << 0;
      b += (da ^ c) + blocks[10] - 1094730640;
      b = (b << 23 | b >>> 9) + c << 0;
      bc = b ^ c;
      a += (bc ^ d) + blocks[13] + 681279174;
      a = (a << 4 | a >>> 28) + b << 0;
      d += (bc ^ a) + blocks[0] - 358537222;
      d = (d << 11 | d >>> 21) + a << 0;
      da = d ^ a;
      c += (da ^ b) + blocks[3] - 722521979;
      c = (c << 16 | c >>> 16) + d << 0;
      b += (da ^ c) + blocks[6] + 76029189;
      b = (b << 23 | b >>> 9) + c << 0;
      bc = b ^ c;
      a += (bc ^ d) + blocks[9] - 640364487;
      a = (a << 4 | a >>> 28) + b << 0;
      d += (bc ^ a) + blocks[12] - 421815835;
      d = (d << 11 | d >>> 21) + a << 0;
      da = d ^ a;
      c += (da ^ b) + blocks[15] + 530742520;
      c = (c << 16 | c >>> 16) + d << 0;
      b += (da ^ c) + blocks[2] - 995338651;
      b = (b << 23 | b >>> 9) + c << 0;
      a += (c ^ (b | ~d)) + blocks[0] - 198630844;
      a = (a << 6 | a >>> 26) + b << 0;
      d += (b ^ (a | ~c)) + blocks[7] + 1126891415;
      d = (d << 10 | d >>> 22) + a << 0;
      c += (a ^ (d | ~b)) + blocks[14] - 1416354905;
      c = (c << 15 | c >>> 17) + d << 0;
      b += (d ^ (c | ~a)) + blocks[5] - 57434055;
      b = (b << 21 | b >>> 11) + c << 0;
      a += (c ^ (b | ~d)) + blocks[12] + 1700485571;
      a = (a << 6 | a >>> 26) + b << 0;
      d += (b ^ (a | ~c)) + blocks[3] - 1894986606;
      d = (d << 10 | d >>> 22) + a << 0;
      c += (a ^ (d | ~b)) + blocks[10] - 1051523;
      c = (c << 15 | c >>> 17) + d << 0;
      b += (d ^ (c | ~a)) + blocks[1] - 2054922799;
      b = (b << 21 | b >>> 11) + c << 0;
      a += (c ^ (b | ~d)) + blocks[8] + 1873313359;
      a = (a << 6 | a >>> 26) + b << 0;
      d += (b ^ (a | ~c)) + blocks[15] - 30611744;
      d = (d << 10 | d >>> 22) + a << 0;
      c += (a ^ (d | ~b)) + blocks[6] - 1560198380;
      c = (c << 15 | c >>> 17) + d << 0;
      b += (d ^ (c | ~a)) + blocks[13] + 1309151649;
      b = (b << 21 | b >>> 11) + c << 0;
      a += (c ^ (b | ~d)) + blocks[4] - 145523070;
      a = (a << 6 | a >>> 26) + b << 0;
      d += (b ^ (a | ~c)) + blocks[11] - 1120210379;
      d = (d << 10 | d >>> 22) + a << 0;
      c += (a ^ (d | ~b)) + blocks[2] + 718787259;
      c = (c << 15 | c >>> 17) + d << 0;
      b += (d ^ (c | ~a)) + blocks[9] - 343485551;
      b = (b << 21 | b >>> 11) + c << 0;

      if (this.first) {
        this.h0 = a + 1732584193 << 0;
        this.h1 = b - 271733879 << 0;
        this.h2 = c - 1732584194 << 0;
        this.h3 = d + 271733878 << 0;
        this.first = false;
      } else {
        this.h0 = this.h0 + a << 0;
        this.h1 = this.h1 + b << 0;
        this.h2 = this.h2 + c << 0;
        this.h3 = this.h3 + d << 0;
      }
    };

    /**
     * @method hex
     * @memberof Md5
     * @instance
     * @description Output hash as hex string
     * @returns {String} Hex string
     * @see {@link md5.hex}
     * @example
     * hash.hex();
     */
    Md5.prototype.hex = function () {
      this.finalize();

      var h0 = this.h0,
          h1 = this.h1,
          h2 = this.h2,
          h3 = this.h3;

      return HEX_CHARS[h0 >> 4 & 0x0F] + HEX_CHARS[h0 & 0x0F] + HEX_CHARS[h0 >> 12 & 0x0F] + HEX_CHARS[h0 >> 8 & 0x0F] + HEX_CHARS[h0 >> 20 & 0x0F] + HEX_CHARS[h0 >> 16 & 0x0F] + HEX_CHARS[h0 >> 28 & 0x0F] + HEX_CHARS[h0 >> 24 & 0x0F] + HEX_CHARS[h1 >> 4 & 0x0F] + HEX_CHARS[h1 & 0x0F] + HEX_CHARS[h1 >> 12 & 0x0F] + HEX_CHARS[h1 >> 8 & 0x0F] + HEX_CHARS[h1 >> 20 & 0x0F] + HEX_CHARS[h1 >> 16 & 0x0F] + HEX_CHARS[h1 >> 28 & 0x0F] + HEX_CHARS[h1 >> 24 & 0x0F] + HEX_CHARS[h2 >> 4 & 0x0F] + HEX_CHARS[h2 & 0x0F] + HEX_CHARS[h2 >> 12 & 0x0F] + HEX_CHARS[h2 >> 8 & 0x0F] + HEX_CHARS[h2 >> 20 & 0x0F] + HEX_CHARS[h2 >> 16 & 0x0F] + HEX_CHARS[h2 >> 28 & 0x0F] + HEX_CHARS[h2 >> 24 & 0x0F] + HEX_CHARS[h3 >> 4 & 0x0F] + HEX_CHARS[h3 & 0x0F] + HEX_CHARS[h3 >> 12 & 0x0F] + HEX_CHARS[h3 >> 8 & 0x0F] + HEX_CHARS[h3 >> 20 & 0x0F] + HEX_CHARS[h3 >> 16 & 0x0F] + HEX_CHARS[h3 >> 28 & 0x0F] + HEX_CHARS[h3 >> 24 & 0x0F];
    };

    /**
     * @method toString
     * @memberof Md5
     * @instance
     * @description Output hash as hex string
     * @returns {String} Hex string
     * @see {@link md5.hex}
     * @example
     * hash.toString();
     */
    Md5.prototype.toString = Md5.prototype.hex;

    /**
     * @method digest
     * @memberof Md5
     * @instance
     * @description Output hash as bytes array
     * @returns {Array} Bytes array
     * @see {@link md5.digest}
     * @example
     * hash.digest();
     */
    Md5.prototype.digest = function () {
      this.finalize();

      var h0 = this.h0,
          h1 = this.h1,
          h2 = this.h2,
          h3 = this.h3;
      return [h0 & 0xFF, h0 >> 8 & 0xFF, h0 >> 16 & 0xFF, h0 >> 24 & 0xFF, h1 & 0xFF, h1 >> 8 & 0xFF, h1 >> 16 & 0xFF, h1 >> 24 & 0xFF, h2 & 0xFF, h2 >> 8 & 0xFF, h2 >> 16 & 0xFF, h2 >> 24 & 0xFF, h3 & 0xFF, h3 >> 8 & 0xFF, h3 >> 16 & 0xFF, h3 >> 24 & 0xFF];
    };

    /**
     * @method array
     * @memberof Md5
     * @instance
     * @description Output hash as bytes array
     * @returns {Array} Bytes array
     * @see {@link md5.array}
     * @example
     * hash.array();
     */
    Md5.prototype.array = Md5.prototype.digest;

    /**
     * @method arrayBuffer
     * @memberof Md5
     * @instance
     * @description Output hash as ArrayBuffer
     * @returns {ArrayBuffer} ArrayBuffer
     * @see {@link md5.arrayBuffer}
     * @example
     * hash.arrayBuffer();
     */
    Md5.prototype.arrayBuffer = function () {
      this.finalize();

      var buffer = new ArrayBuffer(16);
      var blocks = new Uint32Array(buffer);
      blocks[0] = this.h0;
      blocks[1] = this.h1;
      blocks[2] = this.h2;
      blocks[3] = this.h3;
      return buffer;
    };

    /**
     * @method buffer
     * @deprecated This maybe confuse with Buffer in node.js. Please use arrayBuffer instead.
     * @memberof Md5
     * @instance
     * @description Output hash as ArrayBuffer
     * @returns {ArrayBuffer} ArrayBuffer
     * @see {@link md5.buffer}
     * @example
     * hash.buffer();
     */
    Md5.prototype.buffer = Md5.prototype.arrayBuffer;

    var exports = createMethod();

    if (COMMON_JS) {
      module.exports = exports;
    } else {
      /**
       * @method md5
       * @description Md5 hash function, export to global in browsers.
       * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash
       * @returns {String} md5 hashes
       * @example
       * md5(''); // d41d8cd98f00b204e9800998ecf8427e
       * md5('The quick brown fox jumps over the lazy dog'); // 9e107d9d372bb6826bd81d3542a419d6
       * md5('The quick brown fox jumps over the lazy dog.'); // e4d909c290d0fb1ca068ffaddf22cbd0
       *
       * // It also supports UTF-8 encoding
       * md5('中文'); // a7bac2239fcdcb3a067903d8077c4a07
       *
       * // It also supports byte `Array`, `Uint8Array`, `ArrayBuffer`
       * md5([]); // d41d8cd98f00b204e9800998ecf8427e
       * md5(new Uint8Array([])); // d41d8cd98f00b204e9800998ecf8427e
       */
      root.md5 = exports;
      if (AMD) {
        undefined(function () {
          return exports;
        });
      }
    }
  })();
});

var common = createCommonjsModule$$1(function (module, exports) {
  'use strict';

  var TYPED_OK = typeof Uint8Array !== 'undefined' && typeof Uint16Array !== 'undefined' && typeof Int32Array !== 'undefined';

  exports.assign = function (obj /*from1, from2, from3, ...*/) {
    var sources = Array.prototype.slice.call(arguments, 1);
    while (sources.length) {
      var source = sources.shift();
      if (!source) {
        continue;
      }

      if ((typeof source === 'undefined' ? 'undefined' : _typeof(source)) !== 'object') {
        throw new TypeError(source + 'must be non-object');
      }

      for (var p in source) {
        if (source.hasOwnProperty(p)) {
          obj[p] = source[p];
        }
      }
    }

    return obj;
  };

  // reduce buffer size, avoiding mem copy
  exports.shrinkBuf = function (buf, size) {
    if (buf.length === size) {
      return buf;
    }
    if (buf.subarray) {
      return buf.subarray(0, size);
    }
    buf.length = size;
    return buf;
  };

  var fnTyped = {
    arraySet: function arraySet(dest, src, src_offs, len, dest_offs) {
      if (src.subarray && dest.subarray) {
        dest.set(src.subarray(src_offs, src_offs + len), dest_offs);
        return;
      }
      // Fallback to ordinary array
      for (var i = 0; i < len; i++) {
        dest[dest_offs + i] = src[src_offs + i];
      }
    },
    // Join array of chunks to single array.
    flattenChunks: function flattenChunks(chunks) {
      var i, l, len, pos, chunk, result;

      // calculate data length
      len = 0;
      for (i = 0, l = chunks.length; i < l; i++) {
        len += chunks[i].length;
      }

      // join chunks
      result = new Uint8Array(len);
      pos = 0;
      for (i = 0, l = chunks.length; i < l; i++) {
        chunk = chunks[i];
        result.set(chunk, pos);
        pos += chunk.length;
      }

      return result;
    }
  };

  var fnUntyped = {
    arraySet: function arraySet(dest, src, src_offs, len, dest_offs) {
      for (var i = 0; i < len; i++) {
        dest[dest_offs + i] = src[src_offs + i];
      }
    },
    // Join array of chunks to single array.
    flattenChunks: function flattenChunks(chunks) {
      return [].concat.apply([], chunks);
    }
  };

  // Enable/Disable typed arrays use, for testing
  //
  exports.setTyped = function (on) {
    if (on) {
      exports.Buf8 = Uint8Array;
      exports.Buf16 = Uint16Array;
      exports.Buf32 = Int32Array;
      exports.assign(exports, fnTyped);
    } else {
      exports.Buf8 = Array;
      exports.Buf16 = Array;
      exports.Buf32 = Array;
      exports.assign(exports, fnUntyped);
    }
  };

  exports.setTyped(TYPED_OK);
});

'use strict';

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.


/* Public constants ==========================================================*/
/* ===========================================================================*/

//var Z_FILTERED          = 1;
//var Z_HUFFMAN_ONLY      = 2;
//var Z_RLE               = 3;
var Z_FIXED$1 = 4;
//var Z_DEFAULT_STRATEGY  = 0;

/* Possible values of the data_type field (though see inflate()) */
var Z_BINARY = 0;
var Z_TEXT = 1;
//var Z_ASCII             = 1; // = Z_TEXT
var Z_UNKNOWN$1 = 2;

/*============================================================================*/

function zero$1(buf) {
  var len = buf.length;while (--len >= 0) {
    buf[len] = 0;
  }
}

// From zutil.h

var STORED_BLOCK = 0;
var STATIC_TREES = 1;
var DYN_TREES = 2;
/* The three kinds of block type */

var MIN_MATCH$1 = 3;
var MAX_MATCH$1 = 258;
/* The minimum and maximum match lengths */

// From deflate.h
/* ===========================================================================
 * Internal compression state.
 */

var LENGTH_CODES$1 = 29;
/* number of length codes, not counting the special END_BLOCK code */

var LITERALS$1 = 256;
/* number of literal bytes 0..255 */

var L_CODES$1 = LITERALS$1 + 1 + LENGTH_CODES$1;
/* number of Literal or Length codes, including the END_BLOCK code */

var D_CODES$1 = 30;
/* number of distance codes */

var BL_CODES$1 = 19;
/* number of codes used to transfer the bit lengths */

var HEAP_SIZE$1 = 2 * L_CODES$1 + 1;
/* maximum heap size */

var MAX_BITS$1 = 15;
/* All codes must not exceed MAX_BITS bits */

var Buf_size = 16;
/* size of bit buffer in bi_buf */

/* ===========================================================================
 * Constants
 */

var MAX_BL_BITS = 7;
/* Bit length codes must not exceed MAX_BL_BITS bits */

var END_BLOCK = 256;
/* end of block literal code */

var REP_3_6 = 16;
/* repeat previous bit length 3-6 times (2 bits of repeat count) */

var REPZ_3_10 = 17;
/* repeat a zero length 3-10 times  (3 bits of repeat count) */

var REPZ_11_138 = 18;
/* repeat a zero length 11-138 times  (7 bits of repeat count) */

/* eslint-disable comma-spacing,array-bracket-spacing */
var extra_lbits = /* extra bits for each length code */
[0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0];

var extra_dbits = /* extra bits for each distance code */
[0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13];

var extra_blbits = /* extra bits for each bit length code */
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 7];

var bl_order = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];
/* eslint-enable comma-spacing,array-bracket-spacing */

/* The lengths of the bit length codes are sent in order of decreasing
 * probability, to avoid transmitting the lengths for unused bit length codes.
 */

/* ===========================================================================
 * Local data. These are initialized only once.
 */

// We pre-fill arrays with 0 to avoid uninitialized gaps

var DIST_CODE_LEN = 512; /* see definition of array dist_code below */

// !!!! Use flat array insdead of structure, Freq = i*2, Len = i*2+1
var static_ltree = new Array((L_CODES$1 + 2) * 2);
zero$1(static_ltree);
/* The static literal tree. Since the bit lengths are imposed, there is no
 * need for the L_CODES extra codes used during heap construction. However
 * The codes 286 and 287 are needed to build a canonical tree (see _tr_init
 * below).
 */

var static_dtree = new Array(D_CODES$1 * 2);
zero$1(static_dtree);
/* The static distance tree. (Actually a trivial tree since all codes use
 * 5 bits.)
 */

var _dist_code = new Array(DIST_CODE_LEN);
zero$1(_dist_code);
/* Distance codes. The first 256 values correspond to the distances
 * 3 .. 258, the last 256 values correspond to the top 8 bits of
 * the 15 bit distances.
 */

var _length_code = new Array(MAX_MATCH$1 - MIN_MATCH$1 + 1);
zero$1(_length_code);
/* length code for each normalized match length (0 == MIN_MATCH) */

var base_length = new Array(LENGTH_CODES$1);
zero$1(base_length);
/* First normalized length for each code (0 = MIN_MATCH) */

var base_dist = new Array(D_CODES$1);
zero$1(base_dist);
/* First normalized distance for each code (0 = distance of 1) */

function StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {

  this.static_tree = static_tree; /* static tree or NULL */
  this.extra_bits = extra_bits; /* extra bits for each code or NULL */
  this.extra_base = extra_base; /* base index for extra_bits */
  this.elems = elems; /* max number of elements in the tree */
  this.max_length = max_length; /* max bit length for the codes */

  // show if `static_tree` has data or dummy - needed for monomorphic objects
  this.has_stree = static_tree && static_tree.length;
}

var static_l_desc;
var static_d_desc;
var static_bl_desc;

function TreeDesc(dyn_tree, stat_desc) {
  this.dyn_tree = dyn_tree; /* the dynamic tree */
  this.max_code = 0; /* largest code with non zero frequency */
  this.stat_desc = stat_desc; /* the corresponding static tree */
}

function d_code(dist) {
  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];
}

/* ===========================================================================
 * Output a short LSB first on the stream.
 * IN assertion: there is enough room in pendingBuf.
 */
function put_short(s, w) {
  //    put_byte(s, (uch)((w) & 0xff));
  //    put_byte(s, (uch)((ush)(w) >> 8));
  s.pending_buf[s.pending++] = w & 0xff;
  s.pending_buf[s.pending++] = w >>> 8 & 0xff;
}

/* ===========================================================================
 * Send a value on a given number of bits.
 * IN assertion: length <= 16 and value fits in length bits.
 */
function send_bits(s, value, length) {
  if (s.bi_valid > Buf_size - length) {
    s.bi_buf |= value << s.bi_valid & 0xffff;
    put_short(s, s.bi_buf);
    s.bi_buf = value >> Buf_size - s.bi_valid;
    s.bi_valid += length - Buf_size;
  } else {
    s.bi_buf |= value << s.bi_valid & 0xffff;
    s.bi_valid += length;
  }
}

function send_code(s, c, tree) {
  send_bits(s, tree[c * 2] /*.Code*/, tree[c * 2 + 1] /*.Len*/);
}

/* ===========================================================================
 * Reverse the first len bits of a code, using straightforward code (a faster
 * method would use a table)
 * IN assertion: 1 <= len <= 15
 */
function bi_reverse(code, len) {
  var res = 0;
  do {
    res |= code & 1;
    code >>>= 1;
    res <<= 1;
  } while (--len > 0);
  return res >>> 1;
}

/* ===========================================================================
 * Flush the bit buffer, keeping at most 7 bits in it.
 */
function bi_flush(s) {
  if (s.bi_valid === 16) {
    put_short(s, s.bi_buf);
    s.bi_buf = 0;
    s.bi_valid = 0;
  } else if (s.bi_valid >= 8) {
    s.pending_buf[s.pending++] = s.bi_buf & 0xff;
    s.bi_buf >>= 8;
    s.bi_valid -= 8;
  }
}

/* ===========================================================================
 * Compute the optimal bit lengths for a tree and update the total bit length
 * for the current block.
 * IN assertion: the fields freq and dad are set, heap[heap_max] and
 *    above are the tree nodes sorted by increasing frequency.
 * OUT assertions: the field len is set to the optimal bit length, the
 *     array bl_count contains the frequencies for each bit length.
 *     The length opt_len is updated; static_len is also updated if stree is
 *     not null.
 */
function gen_bitlen(s, desc)
//    deflate_state *s;
//    tree_desc *desc;    /* the tree descriptor */
{
  var tree = desc.dyn_tree;
  var max_code = desc.max_code;
  var stree = desc.stat_desc.static_tree;
  var has_stree = desc.stat_desc.has_stree;
  var extra = desc.stat_desc.extra_bits;
  var base = desc.stat_desc.extra_base;
  var max_length = desc.stat_desc.max_length;
  var h; /* heap index */
  var n, m; /* iterate over the tree elements */
  var bits; /* bit length */
  var xbits; /* extra bits */
  var f; /* frequency */
  var overflow = 0; /* number of elements with bit length too large */

  for (bits = 0; bits <= MAX_BITS$1; bits++) {
    s.bl_count[bits] = 0;
  }

  /* In a first pass, compute the optimal bit lengths (which may
   * overflow in the case of the bit length tree).
   */
  tree[s.heap[s.heap_max] * 2 + 1] /*.Len*/ = 0; /* root of the heap */

  for (h = s.heap_max + 1; h < HEAP_SIZE$1; h++) {
    n = s.heap[h];
    bits = tree[tree[n * 2 + 1] /*.Dad*/ * 2 + 1] /*.Len*/ + 1;
    if (bits > max_length) {
      bits = max_length;
      overflow++;
    }
    tree[n * 2 + 1] /*.Len*/ = bits;
    /* We overwrite tree[n].Dad which is no longer needed */

    if (n > max_code) {
      continue;
    } /* not a leaf node */

    s.bl_count[bits]++;
    xbits = 0;
    if (n >= base) {
      xbits = extra[n - base];
    }
    f = tree[n * 2] /*.Freq*/;
    s.opt_len += f * (bits + xbits);
    if (has_stree) {
      s.static_len += f * (stree[n * 2 + 1] /*.Len*/ + xbits);
    }
  }
  if (overflow === 0) {
    return;
  }

  // Trace((stderr,"\nbit length overflow\n"));
  /* This happens for example on obj2 and pic of the Calgary corpus */

  /* Find the first bit length which could increase: */
  do {
    bits = max_length - 1;
    while (s.bl_count[bits] === 0) {
      bits--;
    }
    s.bl_count[bits]--; /* move one leaf down the tree */
    s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */
    s.bl_count[max_length]--;
    /* The brother of the overflow item also moves one step up,
     * but this does not affect bl_count[max_length]
     */
    overflow -= 2;
  } while (overflow > 0);

  /* Now recompute all bit lengths, scanning in increasing frequency.
   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
   * lengths instead of fixing only the wrong ones. This idea is taken
   * from 'ar' written by Haruhiko Okumura.)
   */
  for (bits = max_length; bits !== 0; bits--) {
    n = s.bl_count[bits];
    while (n !== 0) {
      m = s.heap[--h];
      if (m > max_code) {
        continue;
      }
      if (tree[m * 2 + 1] /*.Len*/ !== bits) {
        // Trace((stderr,"code %d bits %d->%d\n", m, tree[m].Len, bits));
        s.opt_len += (bits - tree[m * 2 + 1] /*.Len*/) * tree[m * 2] /*.Freq*/;
        tree[m * 2 + 1] /*.Len*/ = bits;
      }
      n--;
    }
  }
}

/* ===========================================================================
 * Generate the codes for a given tree and bit counts (which need not be
 * optimal).
 * IN assertion: the array bl_count contains the bit length statistics for
 * the given tree and the field len is set for all tree elements.
 * OUT assertion: the field code is set for all tree elements of non
 *     zero code length.
 */
function gen_codes(tree, max_code, bl_count)
//    ct_data *tree;             /* the tree to decorate */
//    int max_code;              /* largest code with non zero frequency */
//    ushf *bl_count;            /* number of codes at each bit length */
{
  var next_code = new Array(MAX_BITS$1 + 1); /* next code value for each bit length */
  var code = 0; /* running code value */
  var bits; /* bit index */
  var n; /* code index */

  /* The distribution counts are first used to generate the code values
   * without bit reversal.
   */
  for (bits = 1; bits <= MAX_BITS$1; bits++) {
    next_code[bits] = code = code + bl_count[bits - 1] << 1;
  }
  /* Check that the bit counts in bl_count are consistent. The last code
   * must be all ones.
   */
  //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
  //        "inconsistent bit counts");
  //Tracev((stderr,"\ngen_codes: max_code %d ", max_code));

  for (n = 0; n <= max_code; n++) {
    var len = tree[n * 2 + 1];
    if (len === 0) {
      continue;
    }
    /* Now reverse the bits */
    tree[n * 2] /*.Code*/ = bi_reverse(next_code[len]++, len);

    //Tracecv(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %4x (%x) ",
    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));
  }
}

/* ===========================================================================
 * Initialize the various 'constant' tables.
 */
function tr_static_init() {
  var n; /* iterates over tree elements */
  var bits; /* bit counter */
  var length; /* length value */
  var code; /* code value */
  var dist; /* distance index */
  var bl_count = new Array(MAX_BITS$1 + 1);
  /* number of codes at each bit length for an optimal tree */

  // do check in _tr_init()
  //if (static_init_done) return;

  /* For some embedded targets, global variables are not initialized: */
  /*#ifdef NO_INIT_GLOBAL_POINTERS
    static_l_desc.static_tree = static_ltree;
    static_l_desc.extra_bits = extra_lbits;
    static_d_desc.static_tree = static_dtree;
    static_d_desc.extra_bits = extra_dbits;
    static_bl_desc.extra_bits = extra_blbits;
  #endif*/

  /* Initialize the mapping length (0..255) -> length code (0..28) */
  length = 0;
  for (code = 0; code < LENGTH_CODES$1 - 1; code++) {
    base_length[code] = length;
    for (n = 0; n < 1 << extra_lbits[code]; n++) {
      _length_code[length++] = code;
    }
  }
  //Assert (length == 256, "tr_static_init: length != 256");
  /* Note that the length 255 (match length 258) can be represented
   * in two different ways: code 284 + 5 bits or code 285, so we
   * overwrite length_code[255] to use the best encoding:
   */
  _length_code[length - 1] = code;

  /* Initialize the mapping dist (0..32K) -> dist code (0..29) */
  dist = 0;
  for (code = 0; code < 16; code++) {
    base_dist[code] = dist;
    for (n = 0; n < 1 << extra_dbits[code]; n++) {
      _dist_code[dist++] = code;
    }
  }
  //Assert (dist == 256, "tr_static_init: dist != 256");
  dist >>= 7; /* from now on, all distances are divided by 128 */
  for (; code < D_CODES$1; code++) {
    base_dist[code] = dist << 7;
    for (n = 0; n < 1 << extra_dbits[code] - 7; n++) {
      _dist_code[256 + dist++] = code;
    }
  }
  //Assert (dist == 256, "tr_static_init: 256+dist != 512");

  /* Construct the codes of the static literal tree */
  for (bits = 0; bits <= MAX_BITS$1; bits++) {
    bl_count[bits] = 0;
  }

  n = 0;
  while (n <= 143) {
    static_ltree[n * 2 + 1] /*.Len*/ = 8;
    n++;
    bl_count[8]++;
  }
  while (n <= 255) {
    static_ltree[n * 2 + 1] /*.Len*/ = 9;
    n++;
    bl_count[9]++;
  }
  while (n <= 279) {
    static_ltree[n * 2 + 1] /*.Len*/ = 7;
    n++;
    bl_count[7]++;
  }
  while (n <= 287) {
    static_ltree[n * 2 + 1] /*.Len*/ = 8;
    n++;
    bl_count[8]++;
  }
  /* Codes 286 and 287 do not exist, but we must include them in the
   * tree construction to get a canonical Huffman tree (longest code
   * all ones)
   */
  gen_codes(static_ltree, L_CODES$1 + 1, bl_count);

  /* The static distance tree is trivial: */
  for (n = 0; n < D_CODES$1; n++) {
    static_dtree[n * 2 + 1] /*.Len*/ = 5;
    static_dtree[n * 2] /*.Code*/ = bi_reverse(n, 5);
  }

  // Now data ready and we can init static trees
  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS$1 + 1, L_CODES$1, MAX_BITS$1);
  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0, D_CODES$1, MAX_BITS$1);
  static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0, BL_CODES$1, MAX_BL_BITS);

  //static_init_done = true;
}

/* ===========================================================================
 * Initialize a new block.
 */
function init_block(s) {
  var n; /* iterates over tree elements */

  /* Initialize the trees. */
  for (n = 0; n < L_CODES$1; n++) {
    s.dyn_ltree[n * 2] /*.Freq*/ = 0;
  }
  for (n = 0; n < D_CODES$1; n++) {
    s.dyn_dtree[n * 2] /*.Freq*/ = 0;
  }
  for (n = 0; n < BL_CODES$1; n++) {
    s.bl_tree[n * 2] /*.Freq*/ = 0;
  }

  s.dyn_ltree[END_BLOCK * 2] /*.Freq*/ = 1;
  s.opt_len = s.static_len = 0;
  s.last_lit = s.matches = 0;
}

/* ===========================================================================
 * Flush the bit buffer and align the output on a byte boundary
 */
function bi_windup(s) {
  if (s.bi_valid > 8) {
    put_short(s, s.bi_buf);
  } else if (s.bi_valid > 0) {
    //put_byte(s, (Byte)s->bi_buf);
    s.pending_buf[s.pending++] = s.bi_buf;
  }
  s.bi_buf = 0;
  s.bi_valid = 0;
}

/* ===========================================================================
 * Copy a stored block, storing first the length and its
 * one's complement if requested.
 */
function copy_block(s, buf, len, header)
//DeflateState *s;
//charf    *buf;    /* the input data */
//unsigned len;     /* its length */
//int      header;  /* true if block header must be written */
{
  bi_windup(s); /* align on byte boundary */

  if (header) {
    put_short(s, len);
    put_short(s, ~len);
  }
  //  while (len--) {
  //    put_byte(s, *buf++);
  //  }
  common.arraySet(s.pending_buf, s.window, buf, len, s.pending);
  s.pending += len;
}

/* ===========================================================================
 * Compares to subtrees, using the tree depth as tie breaker when
 * the subtrees have equal frequency. This minimizes the worst case length.
 */
function smaller(tree, n, m, depth) {
  var _n2 = n * 2;
  var _m2 = m * 2;
  return tree[_n2] /*.Freq*/ < tree[_m2] /*.Freq*/ || tree[_n2] /*.Freq*/ === tree[_m2] /*.Freq*/ && depth[n] <= depth[m];
}

/* ===========================================================================
 * Restore the heap property by moving down the tree starting at node k,
 * exchanging a node with the smallest of its two sons if necessary, stopping
 * when the heap property is re-established (each father smaller than its
 * two sons).
 */
function pqdownheap(s, tree, k)
//    deflate_state *s;
//    ct_data *tree;  /* the tree to restore */
//    int k;               /* node to move down */
{
  var v = s.heap[k];
  var j = k << 1; /* left son of k */
  while (j <= s.heap_len) {
    /* Set j to the smallest of the two sons: */
    if (j < s.heap_len && smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {
      j++;
    }
    /* Exit if v is smaller than both sons */
    if (smaller(tree, v, s.heap[j], s.depth)) {
      break;
    }

    /* Exchange v with the smallest son */
    s.heap[k] = s.heap[j];
    k = j;

    /* And continue down the tree, setting j to the left son of k */
    j <<= 1;
  }
  s.heap[k] = v;
}

// inlined manually
// var SMALLEST = 1;

/* ===========================================================================
 * Send the block data compressed using the given Huffman trees
 */
function compress_block(s, ltree, dtree)
//    deflate_state *s;
//    const ct_data *ltree; /* literal tree */
//    const ct_data *dtree; /* distance tree */
{
  var dist; /* distance of matched string */
  var lc; /* match length or unmatched char (if dist == 0) */
  var lx = 0; /* running index in l_buf */
  var code; /* the code to send */
  var extra; /* number of extra bits to send */

  if (s.last_lit !== 0) {
    do {
      dist = s.pending_buf[s.d_buf + lx * 2] << 8 | s.pending_buf[s.d_buf + lx * 2 + 1];
      lc = s.pending_buf[s.l_buf + lx];
      lx++;

      if (dist === 0) {
        send_code(s, lc, ltree); /* send a literal byte */
        //Tracecv(isgraph(lc), (stderr," '%c' ", lc));
      } else {
        /* Here, lc is the match length - MIN_MATCH */
        code = _length_code[lc];
        send_code(s, code + LITERALS$1 + 1, ltree); /* send the length code */
        extra = extra_lbits[code];
        if (extra !== 0) {
          lc -= base_length[code];
          send_bits(s, lc, extra); /* send the extra length bits */
        }
        dist--; /* dist is now the match distance - 1 */
        code = d_code(dist);
        //Assert (code < D_CODES, "bad d_code");

        send_code(s, code, dtree); /* send the distance code */
        extra = extra_dbits[code];
        if (extra !== 0) {
          dist -= base_dist[code];
          send_bits(s, dist, extra); /* send the extra distance bits */
        }
      } /* literal or match pair ? */

      /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */
      //Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,
      //       "pendingBuf overflow");
    } while (lx < s.last_lit);
  }

  send_code(s, END_BLOCK, ltree);
}

/* ===========================================================================
 * Construct one Huffman tree and assigns the code bit strings and lengths.
 * Update the total bit length for the current block.
 * IN assertion: the field freq is set for all tree elements.
 * OUT assertions: the fields len and code are set to the optimal bit length
 *     and corresponding code. The length opt_len is updated; static_len is
 *     also updated if stree is not null. The field max_code is set.
 */
function build_tree(s, desc)
//    deflate_state *s;
//    tree_desc *desc; /* the tree descriptor */
{
  var tree = desc.dyn_tree;
  var stree = desc.stat_desc.static_tree;
  var has_stree = desc.stat_desc.has_stree;
  var elems = desc.stat_desc.elems;
  var n, m; /* iterate over heap elements */
  var max_code = -1; /* largest code with non zero frequency */
  var node; /* new node being created */

  /* Construct the initial heap, with least frequent element in
   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
   * heap[0] is not used.
   */
  s.heap_len = 0;
  s.heap_max = HEAP_SIZE$1;

  for (n = 0; n < elems; n++) {
    if (tree[n * 2] /*.Freq*/ !== 0) {
      s.heap[++s.heap_len] = max_code = n;
      s.depth[n] = 0;
    } else {
      tree[n * 2 + 1] /*.Len*/ = 0;
    }
  }

  /* The pkzip format requires that at least one distance code exists,
   * and that at least one bit should be sent even if there is only one
   * possible code. So to avoid special checks later on we force at least
   * two codes of non zero frequency.
   */
  while (s.heap_len < 2) {
    node = s.heap[++s.heap_len] = max_code < 2 ? ++max_code : 0;
    tree[node * 2] /*.Freq*/ = 1;
    s.depth[node] = 0;
    s.opt_len--;

    if (has_stree) {
      s.static_len -= stree[node * 2 + 1] /*.Len*/;
    }
    /* node is 0 or 1 so it does not have extra bits */
  }
  desc.max_code = max_code;

  /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
   * establish sub-heaps of increasing lengths:
   */
  for (n = s.heap_len >> 1 /*int /2*/; n >= 1; n--) {
    pqdownheap(s, tree, n);
  }

  /* Construct the Huffman tree by repeatedly combining the least two
   * frequent nodes.
   */
  node = elems; /* next internal node of the tree */
  do {
    //pqremove(s, tree, n);  /* n = node of least frequency */
    /*** pqremove ***/
    n = s.heap[1 /*SMALLEST*/];
    s.heap[1 /*SMALLEST*/] = s.heap[s.heap_len--];
    pqdownheap(s, tree, 1 /*SMALLEST*/);
    /***/

    m = s.heap[1 /*SMALLEST*/]; /* m = node of next least frequency */

    s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */
    s.heap[--s.heap_max] = m;

    /* Create a new node father of n and m */
    tree[node * 2] /*.Freq*/ = tree[n * 2] /*.Freq*/ + tree[m * 2] /*.Freq*/;
    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;
    tree[n * 2 + 1] /*.Dad*/ = tree[m * 2 + 1] /*.Dad*/ = node;

    /* and insert the new node in the heap */
    s.heap[1 /*SMALLEST*/] = node++;
    pqdownheap(s, tree, 1 /*SMALLEST*/);
  } while (s.heap_len >= 2);

  s.heap[--s.heap_max] = s.heap[1 /*SMALLEST*/];

  /* At this point, the fields freq and dad are set. We can now
   * generate the bit lengths.
   */
  gen_bitlen(s, desc);

  /* The field len is now set, we can generate the bit codes */
  gen_codes(tree, max_code, s.bl_count);
}

/* ===========================================================================
 * Scan a literal or distance tree to determine the frequencies of the codes
 * in the bit length tree.
 */
function scan_tree(s, tree, max_code)
//    deflate_state *s;
//    ct_data *tree;   /* the tree to be scanned */
//    int max_code;    /* and its largest code of non zero frequency */
{
  var n; /* iterates over all tree elements */
  var prevlen = -1; /* last emitted length */
  var curlen; /* length of current code */

  var nextlen = tree[0 * 2 + 1]; /* length of next code */

  var count = 0; /* repeat count of the current code */
  var max_count = 7; /* max repeat count */
  var min_count = 4; /* min repeat count */

  if (nextlen === 0) {
    max_count = 138;
    min_count = 3;
  }
  tree[(max_code + 1) * 2 + 1] /*.Len*/ = 0xffff; /* guard */

  for (n = 0; n <= max_code; n++) {
    curlen = nextlen;
    nextlen = tree[(n + 1) * 2 + 1] /*.Len*/;

    if (++count < max_count && curlen === nextlen) {
      continue;
    } else if (count < min_count) {
      s.bl_tree[curlen * 2] /*.Freq*/ += count;
    } else if (curlen !== 0) {

      if (curlen !== prevlen) {
        s.bl_tree[curlen * 2] /*.Freq*/++;
      }
      s.bl_tree[REP_3_6 * 2] /*.Freq*/++;
    } else if (count <= 10) {
      s.bl_tree[REPZ_3_10 * 2] /*.Freq*/++;
    } else {
      s.bl_tree[REPZ_11_138 * 2] /*.Freq*/++;
    }

    count = 0;
    prevlen = curlen;

    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;
    } else if (curlen === nextlen) {
      max_count = 6;
      min_count = 3;
    } else {
      max_count = 7;
      min_count = 4;
    }
  }
}

/* ===========================================================================
 * Send a literal or distance tree in compressed form, using the codes in
 * bl_tree.
 */
function send_tree(s, tree, max_code)
//    deflate_state *s;
//    ct_data *tree; /* the tree to be scanned */
//    int max_code;       /* and its largest code of non zero frequency */
{
  var n; /* iterates over all tree elements */
  var prevlen = -1; /* last emitted length */
  var curlen; /* length of current code */

  var nextlen = tree[0 * 2 + 1]; /* length of next code */

  var count = 0; /* repeat count of the current code */
  var max_count = 7; /* max repeat count */
  var min_count = 4; /* min repeat count */

  /* tree[max_code+1].Len = -1; */ /* guard already set */
  if (nextlen === 0) {
    max_count = 138;
    min_count = 3;
  }

  for (n = 0; n <= max_code; n++) {
    curlen = nextlen;
    nextlen = tree[(n + 1) * 2 + 1] /*.Len*/;

    if (++count < max_count && curlen === nextlen) {
      continue;
    } else if (count < min_count) {
      do {
        send_code(s, curlen, s.bl_tree);
      } while (--count !== 0);
    } else if (curlen !== 0) {
      if (curlen !== prevlen) {
        send_code(s, curlen, s.bl_tree);
        count--;
      }
      //Assert(count >= 3 && count <= 6, " 3_6?");
      send_code(s, REP_3_6, s.bl_tree);
      send_bits(s, count - 3, 2);
    } else if (count <= 10) {
      send_code(s, REPZ_3_10, s.bl_tree);
      send_bits(s, count - 3, 3);
    } else {
      send_code(s, REPZ_11_138, s.bl_tree);
      send_bits(s, count - 11, 7);
    }

    count = 0;
    prevlen = curlen;
    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;
    } else if (curlen === nextlen) {
      max_count = 6;
      min_count = 3;
    } else {
      max_count = 7;
      min_count = 4;
    }
  }
}

/* ===========================================================================
 * Construct the Huffman tree for the bit lengths and return the index in
 * bl_order of the last bit length code to send.
 */
function build_bl_tree(s) {
  var max_blindex; /* index of last bit length code of non zero freq */

  /* Determine the bit length frequencies for literal and distance trees */
  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);
  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);

  /* Build the bit length tree: */
  build_tree(s, s.bl_desc);
  /* opt_len now includes the length of the tree representations, except
   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
   */

  /* Determine the number of bit length codes to send. The pkzip format
   * requires that at least 4 bit length codes be sent. (appnote.txt says
   * 3 but the actual value used is 4.)
   */
  for (max_blindex = BL_CODES$1 - 1; max_blindex >= 3; max_blindex--) {
    if (s.bl_tree[bl_order[max_blindex] * 2 + 1] /*.Len*/ !== 0) {
      break;
    }
  }
  /* Update opt_len to include the bit length tree and counts */
  s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;
  //Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
  //        s->opt_len, s->static_len));

  return max_blindex;
}

/* ===========================================================================
 * Send the header for a block using dynamic Huffman trees: the counts, the
 * lengths of the bit length codes, the literal tree and the distance tree.
 * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.
 */
function send_all_trees(s, lcodes, dcodes, blcodes)
//    deflate_state *s;
//    int lcodes, dcodes, blcodes; /* number of codes for each tree */
{
  var rank; /* index in bl_order */

  //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
  //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
  //        "too many codes");
  //Tracev((stderr, "\nbl counts: "));
  send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */
  send_bits(s, dcodes - 1, 5);
  send_bits(s, blcodes - 4, 4); /* not -3 as stated in appnote.txt */
  for (rank = 0; rank < blcodes; rank++) {
    //Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
    send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1] /*.Len*/, 3);
  }
  //Tracev((stderr, "\nbl tree: sent %ld", s->bits_sent));

  send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */
  //Tracev((stderr, "\nlit tree: sent %ld", s->bits_sent));

  send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */
  //Tracev((stderr, "\ndist tree: sent %ld", s->bits_sent));
}

/* ===========================================================================
 * Check if the data type is TEXT or BINARY, using the following algorithm:
 * - TEXT if the two conditions below are satisfied:
 *    a) There are no non-portable control characters belonging to the
 *       "black list" (0..6, 14..25, 28..31).
 *    b) There is at least one printable character belonging to the
 *       "white list" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).
 * - BINARY otherwise.
 * - The following partially-portable control characters form a
 *   "gray list" that is ignored in this detection algorithm:
 *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).
 * IN assertion: the fields Freq of dyn_ltree are set.
 */
function detect_data_type(s) {
  /* black_mask is the bit mask of black-listed bytes
   * set bits 0..6, 14..25, and 28..31
   * 0xf3ffc07f = binary 11110011111111111100000001111111
   */
  var black_mask = 0xf3ffc07f;
  var n;

  /* Check for non-textual ("black-listed") bytes. */
  for (n = 0; n <= 31; n++, black_mask >>>= 1) {
    if (black_mask & 1 && s.dyn_ltree[n * 2] /*.Freq*/ !== 0) {
      return Z_BINARY;
    }
  }

  /* Check for textual ("white-listed") bytes. */
  if (s.dyn_ltree[9 * 2] /*.Freq*/ !== 0 || s.dyn_ltree[10 * 2] /*.Freq*/ !== 0 || s.dyn_ltree[13 * 2] /*.Freq*/ !== 0) {
    return Z_TEXT;
  }
  for (n = 32; n < LITERALS$1; n++) {
    if (s.dyn_ltree[n * 2] /*.Freq*/ !== 0) {
      return Z_TEXT;
    }
  }

  /* There are no "black-listed" or "white-listed" bytes:
   * this stream either is empty or has tolerated ("gray-listed") bytes only.
   */
  return Z_BINARY;
}

var static_init_done = false;

/* ===========================================================================
 * Initialize the tree data structures for a new zlib stream.
 */
function _tr_init(s) {

  if (!static_init_done) {
    tr_static_init();
    static_init_done = true;
  }

  s.l_desc = new TreeDesc(s.dyn_ltree, static_l_desc);
  s.d_desc = new TreeDesc(s.dyn_dtree, static_d_desc);
  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);

  s.bi_buf = 0;
  s.bi_valid = 0;

  /* Initialize the first block of the first file: */
  init_block(s);
}

/* ===========================================================================
 * Send a stored block
 */
function _tr_stored_block(s, buf, stored_len, last)
//DeflateState *s;
//charf *buf;       /* input block */
//ulg stored_len;   /* length of input block */
//int last;         /* one if this is the last block for a file */
{
  send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3); /* send block type */
  copy_block(s, buf, stored_len, true); /* with header */
}

/* ===========================================================================
 * Send one empty static block to give enough lookahead for inflate.
 * This takes 10 bits, of which 7 may remain in the bit buffer.
 */
function _tr_align(s) {
  send_bits(s, STATIC_TREES << 1, 3);
  send_code(s, END_BLOCK, static_ltree);
  bi_flush(s);
}

/* ===========================================================================
 * Determine the best encoding for the current block: dynamic trees, static
 * trees or store, and output the encoded block to the zip file.
 */
function _tr_flush_block(s, buf, stored_len, last)
//DeflateState *s;
//charf *buf;       /* input block, or NULL if too old */
//ulg stored_len;   /* length of input block */
//int last;         /* one if this is the last block for a file */
{
  var opt_lenb, static_lenb; /* opt_len and static_len in bytes */
  var max_blindex = 0; /* index of last bit length code of non zero freq */

  /* Build the Huffman trees unless a stored block is forced */
  if (s.level > 0) {

    /* Check if the file is binary or text */
    if (s.strm.data_type === Z_UNKNOWN$1) {
      s.strm.data_type = detect_data_type(s);
    }

    /* Construct the literal and distance trees */
    build_tree(s, s.l_desc);
    // Tracev((stderr, "\nlit data: dyn %ld, stat %ld", s->opt_len,
    //        s->static_len));

    build_tree(s, s.d_desc);
    // Tracev((stderr, "\ndist data: dyn %ld, stat %ld", s->opt_len,
    //        s->static_len));
    /* At this point, opt_len and static_len are the total bit lengths of
     * the compressed block data, excluding the tree representations.
     */

    /* Build the bit length tree for the above two trees, and get the index
     * in bl_order of the last bit length code to send.
     */
    max_blindex = build_bl_tree(s);

    /* Determine the best encoding. Compute the block lengths in bytes. */
    opt_lenb = s.opt_len + 3 + 7 >>> 3;
    static_lenb = s.static_len + 3 + 7 >>> 3;

    // Tracev((stderr, "\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u ",
    //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,
    //        s->last_lit));

    if (static_lenb <= opt_lenb) {
      opt_lenb = static_lenb;
    }
  } else {
    // Assert(buf != (char*)0, "lost buf");
    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */
  }

  if (stored_len + 4 <= opt_lenb && buf !== -1) {
    /* 4: two words for the lengths */

    /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
     * Otherwise we can't have processed more than WSIZE input bytes since
     * the last block flush, because compression would have been
     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
     * transform a block into a stored block.
     */
    _tr_stored_block(s, buf, stored_len, last);
  } else if (s.strategy === Z_FIXED$1 || static_lenb === opt_lenb) {

    send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);
    compress_block(s, static_ltree, static_dtree);
  } else {
    send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);
    send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);
    compress_block(s, s.dyn_ltree, s.dyn_dtree);
  }
  // Assert (s->compressed_len == s->bits_sent, "bad compressed size");
  /* The above check is made mod 2^32, for files larger than 512 MB
   * and uLong implemented on 32 bits.
   */
  init_block(s);

  if (last) {
    bi_windup(s);
  }
  // Tracev((stderr,"\ncomprlen %lu(%lu) ", s->compressed_len>>3,
  //       s->compressed_len-7*last));
}

/* ===========================================================================
 * Save the match info and tally the frequency counts. Return true if
 * the current block must be flushed.
 */
function _tr_tally(s, dist, lc)
//    deflate_state *s;
//    unsigned dist;  /* distance of matched string */
//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */
{
  //var out_length, in_length, dcode;

  s.pending_buf[s.d_buf + s.last_lit * 2] = dist >>> 8 & 0xff;
  s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;

  s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;
  s.last_lit++;

  if (dist === 0) {
    /* lc is the unmatched char */
    s.dyn_ltree[lc * 2] /*.Freq*/++;
  } else {
    s.matches++;
    /* Here, lc is the match length - MIN_MATCH */
    dist--; /* dist = match distance - 1 */
    //Assert((ush)dist < (ush)MAX_DIST(s) &&
    //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&
    //       (ush)d_code(dist) < (ush)D_CODES,  "_tr_tally: bad match");

    s.dyn_ltree[(_length_code[lc] + LITERALS$1 + 1) * 2] /*.Freq*/++;
    s.dyn_dtree[d_code(dist) * 2] /*.Freq*/++;
  }

  // (!) This block is disabled in zlib defailts,
  // don't enable it for binary compatibility

  //#ifdef TRUNCATE_BLOCK
  //  /* Try to guess if it is profitable to stop the current block here */
  //  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {
  //    /* Compute an upper bound for the compressed length */
  //    out_length = s.last_lit*8;
  //    in_length = s.strstart - s.block_start;
  //
  //    for (dcode = 0; dcode < D_CODES; dcode++) {
  //      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);
  //    }
  //    out_length >>>= 3;
  //    //Tracev((stderr,"\nlast_lit %u, in %ld, out ~%ld(%ld%%) ",
  //    //       s->last_lit, in_length, out_length,
  //    //       100L - out_length*100L/in_length));
  //    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {
  //      return true;
  //    }
  //  }
  //#endif

  return s.last_lit === s.lit_bufsize - 1;
  /* We avoid equality with lit_bufsize because of wraparound at 64K
   * on 16 bit machines and because stored blocks are restricted to
   * 64K-1 bytes.
   */
}

var _tr_init_1 = _tr_init;
var _tr_stored_block_1 = _tr_stored_block;
var _tr_flush_block_1 = _tr_flush_block;
var _tr_tally_1 = _tr_tally;
var _tr_align_1 = _tr_align;

var trees = {
  _tr_init: _tr_init_1,
  _tr_stored_block: _tr_stored_block_1,
  _tr_flush_block: _tr_flush_block_1,
  _tr_tally: _tr_tally_1,
  _tr_align: _tr_align_1
};

'use strict';

// Note: adler32 takes 12% for level 0 and 2% for level 6.
// It doesn't worth to make additional optimizationa as in original.
// Small size is preferable.

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

function adler32(adler, buf, len, pos) {
  var s1 = adler & 0xffff | 0,
      s2 = adler >>> 16 & 0xffff | 0,
      n = 0;

  while (len !== 0) {
    // Set limit ~ twice less than 5552, to keep
    // s2 in 31-bits, because we force signed ints.
    // in other case %= will fail.
    n = len > 2000 ? 2000 : len;
    len -= n;

    do {
      s1 = s1 + buf[pos++] | 0;
      s2 = s2 + s1 | 0;
    } while (--n);

    s1 %= 65521;
    s2 %= 65521;
  }

  return s1 | s2 << 16 | 0;
}

var adler32_1 = adler32;

'use strict';

// Note: we can't get significant speed boost here.
// So write code to minimize size - no pregenerated tables
// and array tools dependencies.

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

// Use ordinary array, since untyped makes no boost here

function makeTable() {
  var c,
      table = [];

  for (var n = 0; n < 256; n++) {
    c = n;
    for (var k = 0; k < 8; k++) {
      c = c & 1 ? 0xEDB88320 ^ c >>> 1 : c >>> 1;
    }
    table[n] = c;
  }

  return table;
}

// Create table on load. Just 255 signed longs. Not a problem.
var crcTable = makeTable();

function crc32(crc, buf, len, pos) {
  var t = crcTable,
      end = pos + len;

  crc ^= -1;

  for (var i = pos; i < end; i++) {
    crc = crc >>> 8 ^ t[(crc ^ buf[i]) & 0xFF];
  }

  return crc ^ -1; // >>> 0;
}

var crc32_1 = crc32;

'use strict';

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

var messages = {
  2: 'need dictionary', /* Z_NEED_DICT       2  */
  1: 'stream end', /* Z_STREAM_END      1  */
  0: '', /* Z_OK              0  */
  '-1': 'file error', /* Z_ERRNO         (-1) */
  '-2': 'stream error', /* Z_STREAM_ERROR  (-2) */
  '-3': 'data error', /* Z_DATA_ERROR    (-3) */
  '-4': 'insufficient memory', /* Z_MEM_ERROR     (-4) */
  '-5': 'buffer error', /* Z_BUF_ERROR     (-5) */
  '-6': 'incompatible version' /* Z_VERSION_ERROR (-6) */
};

'use strict';

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.


/* Public constants ==========================================================*/
/* ===========================================================================*/

/* Allowed flush values; see deflate() and inflate() below for details */
var Z_NO_FLUSH$1 = 0;
var Z_PARTIAL_FLUSH = 1;
//var Z_SYNC_FLUSH    = 2;
var Z_FULL_FLUSH = 3;
var Z_FINISH$1 = 4;
var Z_BLOCK = 5;
//var Z_TREES         = 6;


/* Return codes for the compression/decompression functions. Negative values
 * are errors, positive values are used for special but normal events.
 */
var Z_OK$1 = 0;
var Z_STREAM_END$1 = 1;
//var Z_NEED_DICT     = 2;
//var Z_ERRNO         = -1;
var Z_STREAM_ERROR = -2;
var Z_DATA_ERROR = -3;
//var Z_MEM_ERROR     = -4;
var Z_BUF_ERROR = -5;
//var Z_VERSION_ERROR = -6;


/* compression levels */
//var Z_NO_COMPRESSION      = 0;
//var Z_BEST_SPEED          = 1;
//var Z_BEST_COMPRESSION    = 9;
var Z_DEFAULT_COMPRESSION$1 = -1;

var Z_FILTERED = 1;
var Z_HUFFMAN_ONLY = 2;
var Z_RLE = 3;
var Z_FIXED = 4;
var Z_DEFAULT_STRATEGY$1 = 0;

/* Possible values of the data_type field (though see inflate()) */
//var Z_BINARY              = 0;
//var Z_TEXT                = 1;
//var Z_ASCII               = 1; // = Z_TEXT
var Z_UNKNOWN = 2;

/* The deflate compression method */
var Z_DEFLATED$1 = 8;

/*============================================================================*/

var MAX_MEM_LEVEL = 9;
/* Maximum value for memLevel in deflateInit2 */
var MAX_WBITS = 15;
/* 32K LZ77 window */
var DEF_MEM_LEVEL = 8;

var LENGTH_CODES = 29;
/* number of length codes, not counting the special END_BLOCK code */
var LITERALS = 256;
/* number of literal bytes 0..255 */
var L_CODES = LITERALS + 1 + LENGTH_CODES;
/* number of Literal or Length codes, including the END_BLOCK code */
var D_CODES = 30;
/* number of distance codes */
var BL_CODES = 19;
/* number of codes used to transfer the bit lengths */
var HEAP_SIZE = 2 * L_CODES + 1;
/* maximum heap size */
var MAX_BITS = 15;
/* All codes must not exceed MAX_BITS bits */

var MIN_MATCH = 3;
var MAX_MATCH = 258;
var MIN_LOOKAHEAD = MAX_MATCH + MIN_MATCH + 1;

var PRESET_DICT = 0x20;

var INIT_STATE = 42;
var EXTRA_STATE = 69;
var NAME_STATE = 73;
var COMMENT_STATE = 91;
var HCRC_STATE = 103;
var BUSY_STATE = 113;
var FINISH_STATE = 666;

var BS_NEED_MORE = 1; /* block not completed, need more input or more output */
var BS_BLOCK_DONE = 2; /* block flush performed */
var BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */
var BS_FINISH_DONE = 4; /* finish done, accept no more input or output */

var OS_CODE = 0x03; // Unix :) . Don't detect, use this default.

function err(strm, errorCode) {
  strm.msg = messages[errorCode];
  return errorCode;
}

function rank(f) {
  return (f << 1) - (f > 4 ? 9 : 0);
}

function zero(buf) {
  var len = buf.length;while (--len >= 0) {
    buf[len] = 0;
  }
}

/* =========================================================================
 * Flush as much pending output as possible. All deflate() output goes
 * through this function so some applications may wish to modify it
 * to avoid allocating a large strm->output buffer and copying into it.
 * (See also read_buf()).
 */
function flush_pending(strm) {
  var s = strm.state;

  //_tr_flush_bits(s);
  var len = s.pending;
  if (len > strm.avail_out) {
    len = strm.avail_out;
  }
  if (len === 0) {
    return;
  }

  common.arraySet(strm.output, s.pending_buf, s.pending_out, len, strm.next_out);
  strm.next_out += len;
  s.pending_out += len;
  strm.total_out += len;
  strm.avail_out -= len;
  s.pending -= len;
  if (s.pending === 0) {
    s.pending_out = 0;
  }
}

function flush_block_only(s, last) {
  trees._tr_flush_block(s, s.block_start >= 0 ? s.block_start : -1, s.strstart - s.block_start, last);
  s.block_start = s.strstart;
  flush_pending(s.strm);
}

function put_byte(s, b) {
  s.pending_buf[s.pending++] = b;
}

/* =========================================================================
 * Put a short in the pending buffer. The 16-bit value is put in MSB order.
 * IN assertion: the stream state is correct and there is enough room in
 * pending_buf.
 */
function putShortMSB(s, b) {
  //  put_byte(s, (Byte)(b >> 8));
  //  put_byte(s, (Byte)(b & 0xff));
  s.pending_buf[s.pending++] = b >>> 8 & 0xff;
  s.pending_buf[s.pending++] = b & 0xff;
}

/* ===========================================================================
 * Read a new buffer from the current input stream, update the adler32
 * and total number of bytes read.  All deflate() input goes through
 * this function so some applications may wish to modify it to avoid
 * allocating a large strm->input buffer and copying from it.
 * (See also flush_pending()).
 */
function read_buf(strm, buf, start, size) {
  var len = strm.avail_in;

  if (len > size) {
    len = size;
  }
  if (len === 0) {
    return 0;
  }

  strm.avail_in -= len;

  // zmemcpy(buf, strm->next_in, len);
  common.arraySet(buf, strm.input, strm.next_in, len, start);
  if (strm.state.wrap === 1) {
    strm.adler = adler32_1(strm.adler, buf, len, start);
  } else if (strm.state.wrap === 2) {
    strm.adler = crc32_1(strm.adler, buf, len, start);
  }

  strm.next_in += len;
  strm.total_in += len;

  return len;
}

/* ===========================================================================
 * Set match_start to the longest match starting at the given string and
 * return its length. Matches shorter or equal to prev_length are discarded,
 * in which case the result is equal to prev_length and match_start is
 * garbage.
 * IN assertions: cur_match is the head of the hash chain for the current
 *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1
 * OUT assertion: the match length is not greater than s->lookahead.
 */
function longest_match(s, cur_match) {
  var chain_length = s.max_chain_length; /* max hash chain length */
  var scan = s.strstart; /* current string */
  var match; /* matched string */
  var len; /* length of current match */
  var best_len = s.prev_length; /* best match length so far */
  var nice_match = s.nice_match; /* stop if match long enough */
  var limit = s.strstart > s.w_size - MIN_LOOKAHEAD ? s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0;

  var _win = s.window; // shortcut

  var wmask = s.w_mask;
  var prev = s.prev;

  /* Stop when cur_match becomes <= limit. To simplify the code,
   * we prevent matches with the string of window index 0.
   */

  var strend = s.strstart + MAX_MATCH;
  var scan_end1 = _win[scan + best_len - 1];
  var scan_end = _win[scan + best_len];

  /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.
   * It is easy to get rid of this optimization if necessary.
   */
  // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");

  /* Do not waste too much time if we already have a good match: */
  if (s.prev_length >= s.good_match) {
    chain_length >>= 2;
  }
  /* Do not look for matches beyond the end of the input. This is necessary
   * to make deflate deterministic.
   */
  if (nice_match > s.lookahead) {
    nice_match = s.lookahead;
  }

  // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");

  do {
    // Assert(cur_match < s->strstart, "no future");
    match = cur_match;

    /* Skip to next match if the match length cannot increase
     * or if the match length is less than 2.  Note that the checks below
     * for insufficient lookahead only occur occasionally for performance
     * reasons.  Therefore uninitialized memory will be accessed, and
     * conditional jumps will be made that depend on those values.
     * However the length of the match is limited to the lookahead, so
     * the output of deflate is not affected by the uninitialized values.
     */

    if (_win[match + best_len] !== scan_end || _win[match + best_len - 1] !== scan_end1 || _win[match] !== _win[scan] || _win[++match] !== _win[scan + 1]) {
      continue;
    }

    /* The check at best_len-1 can be removed because it will be made
     * again later. (This heuristic is not always a win.)
     * It is not necessary to compare scan[2] and match[2] since they
     * are always equal when the other bytes match, given that
     * the hash keys are equal and that HASH_BITS >= 8.
     */
    scan += 2;
    match++;
    // Assert(*scan == *match, "match[2]?");

    /* We check for insufficient lookahead only every 8th comparison;
     * the 256th check will be made at strstart+258.
     */
    do {
      /*jshint noempty:false*/
    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && scan < strend);

    // Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");

    len = MAX_MATCH - (strend - scan);
    scan = strend - MAX_MATCH;

    if (len > best_len) {
      s.match_start = cur_match;
      best_len = len;
      if (len >= nice_match) {
        break;
      }
      scan_end1 = _win[scan + best_len - 1];
      scan_end = _win[scan + best_len];
    }
  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);

  if (best_len <= s.lookahead) {
    return best_len;
  }
  return s.lookahead;
}

/* ===========================================================================
 * Fill the window when the lookahead becomes insufficient.
 * Updates strstart and lookahead.
 *
 * IN assertion: lookahead < MIN_LOOKAHEAD
 * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD
 *    At least one byte has been read, or avail_in == 0; reads are
 *    performed for at least two bytes (required for the zip translate_eol
 *    option -- not supported here).
 */
function fill_window(s) {
  var _w_size = s.w_size;
  var p, n, m, more, str;

  //Assert(s->lookahead < MIN_LOOKAHEAD, "already enough lookahead");

  do {
    more = s.window_size - s.lookahead - s.strstart;

    // JS ints have 32 bit, block below not needed
    /* Deal with !@#$% 64K limit: */
    //if (sizeof(int) <= 2) {
    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {
    //        more = wsize;
    //
    //  } else if (more == (unsigned)(-1)) {
    //        /* Very unlikely, but possible on 16 bit machine if
    //         * strstart == 0 && lookahead == 1 (input done a byte at time)
    //         */
    //        more--;
    //    }
    //}


    /* If the window is almost full and there is insufficient lookahead,
     * move the upper half to the lower one to make room in the upper half.
     */
    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {

      common.arraySet(s.window, s.window, _w_size, _w_size, 0);
      s.match_start -= _w_size;
      s.strstart -= _w_size;
      /* we now have strstart >= MAX_DIST */
      s.block_start -= _w_size;

      /* Slide the hash table (could be avoided with 32 bit values
       at the expense of memory usage). We slide even when level == 0
       to keep the hash table consistent if we switch back to level > 0
       later. (Using level 0 permanently is not an optimal usage of
       zlib, so we don't care about this pathological case.)
       */

      n = s.hash_size;
      p = n;
      do {
        m = s.head[--p];
        s.head[p] = m >= _w_size ? m - _w_size : 0;
      } while (--n);

      n = _w_size;
      p = n;
      do {
        m = s.prev[--p];
        s.prev[p] = m >= _w_size ? m - _w_size : 0;
        /* If n is not on any hash chain, prev[n] is garbage but
         * its value will never be used.
         */
      } while (--n);

      more += _w_size;
    }
    if (s.strm.avail_in === 0) {
      break;
    }

    /* If there was no sliding:
     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&
     *    more == window_size - lookahead - strstart
     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)
     * => more >= window_size - 2*WSIZE + 2
     * In the BIG_MEM or MMAP case (not yet supported),
     *   window_size == input_size + MIN_LOOKAHEAD  &&
     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.
     * Otherwise, window_size == 2*WSIZE so more >= 2.
     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.
     */
    //Assert(more >= 2, "more < 2");
    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);
    s.lookahead += n;

    /* Initialize the hash value now that we have some input: */
    if (s.lookahead + s.insert >= MIN_MATCH) {
      str = s.strstart - s.insert;
      s.ins_h = s.window[str];

      /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */
      s.ins_h = (s.ins_h << s.hash_shift ^ s.window[str + 1]) & s.hash_mask;
      //#if MIN_MATCH != 3
      //        Call update_hash() MIN_MATCH-3 more times
      //#endif
      while (s.insert) {
        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
        s.ins_h = (s.ins_h << s.hash_shift ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;

        s.prev[str & s.w_mask] = s.head[s.ins_h];
        s.head[s.ins_h] = str;
        str++;
        s.insert--;
        if (s.lookahead + s.insert < MIN_MATCH) {
          break;
        }
      }
    }
    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,
     * but this is not important since only literal bytes will be emitted.
     */
  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);

  /* If the WIN_INIT bytes after the end of the current data have never been
   * written, then zero those bytes in order to avoid memory check reports of
   * the use of uninitialized (or uninitialised as Julian writes) bytes by
   * the longest match routines.  Update the high water mark for the next
   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match
   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.
   */
  //  if (s.high_water < s.window_size) {
  //    var curr = s.strstart + s.lookahead;
  //    var init = 0;
  //
  //    if (s.high_water < curr) {
  //      /* Previous high water mark below current data -- zero WIN_INIT
  //       * bytes or up to end of window, whichever is less.
  //       */
  //      init = s.window_size - curr;
  //      if (init > WIN_INIT)
  //        init = WIN_INIT;
  //      zmemzero(s->window + curr, (unsigned)init);
  //      s->high_water = curr + init;
  //    }
  //    else if (s->high_water < (ulg)curr + WIN_INIT) {
  //      /* High water mark at or above current data, but below current data
  //       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up
  //       * to end of window, whichever is less.
  //       */
  //      init = (ulg)curr + WIN_INIT - s->high_water;
  //      if (init > s->window_size - s->high_water)
  //        init = s->window_size - s->high_water;
  //      zmemzero(s->window + s->high_water, (unsigned)init);
  //      s->high_water += init;
  //    }
  //  }
  //
  //  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
  //    "not enough room for search");
}

/* ===========================================================================
 * Copy without compression as much as possible from the input stream, return
 * the current block state.
 * This function does not insert new strings in the dictionary since
 * uncompressible data is probably not useful. This function is used
 * only for the level=0 compression option.
 * NOTE: this function should be optimized to avoid extra copying from
 * window to pending_buf.
 */
function deflate_stored(s, flush) {
  /* Stored blocks are limited to 0xffff bytes, pending_buf is limited
   * to pending_buf_size, and each stored block has a 5 byte header:
   */
  var max_block_size = 0xffff;

  if (max_block_size > s.pending_buf_size - 5) {
    max_block_size = s.pending_buf_size - 5;
  }

  /* Copy as much as possible from input to output: */
  for (;;) {
    /* Fill the window as much as possible: */
    if (s.lookahead <= 1) {

      //Assert(s->strstart < s->w_size+MAX_DIST(s) ||
      //  s->block_start >= (long)s->w_size, "slide too late");
      //      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||
      //        s.block_start >= s.w_size)) {
      //        throw  new Error("slide too late");
      //      }

      fill_window(s);
      if (s.lookahead === 0 && flush === Z_NO_FLUSH$1) {
        return BS_NEED_MORE;
      }

      if (s.lookahead === 0) {
        break;
      }
      /* flush the current block */
    }
    //Assert(s->block_start >= 0L, "block gone");
    //    if (s.block_start < 0) throw new Error("block gone");

    s.strstart += s.lookahead;
    s.lookahead = 0;

    /* Emit a stored block if pending_buf will be full: */
    var max_start = s.block_start + max_block_size;

    if (s.strstart === 0 || s.strstart >= max_start) {
      /* strstart == 0 is possible when wraparound on 16-bit machine */
      s.lookahead = s.strstart - max_start;
      s.strstart = max_start;
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
    /* Flush if we may have to slide, otherwise block_start may become
     * negative and the data will be gone:
     */
    if (s.strstart - s.block_start >= s.w_size - MIN_LOOKAHEAD) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }

  s.insert = 0;

  if (flush === Z_FINISH$1) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }

  if (s.strstart > s.block_start) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }

  return BS_NEED_MORE;
}

/* ===========================================================================
 * Compress as much as possible from the input stream, return the current
 * block state.
 * This function does not perform lazy evaluation of matches and inserts
 * new strings in the dictionary only for unmatched strings or for short
 * matches. It is used only for the fast compression options.
 */
function deflate_fast(s, flush) {
  var hash_head; /* head of the hash chain */
  var bflush; /* set if current block must be flushed */

  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the next match, plus MIN_MATCH bytes to insert the
     * string following the next match.
     */
    if (s.lookahead < MIN_LOOKAHEAD) {
      fill_window(s);
      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH$1) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) {
        break; /* flush the current block */
      }
    }

    /* Insert the string window[strstart .. strstart+2] in the
     * dictionary, and set hash_head to the head of the hash chain:
     */
    hash_head = 0 /*NIL*/;
    if (s.lookahead >= MIN_MATCH) {
      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
      s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
      s.head[s.ins_h] = s.strstart;
      /***/
    }

    /* Find the longest match, discarding those <= prev_length.
     * At this point we have always match_length < MIN_MATCH
     */
    if (hash_head !== 0 /*NIL*/ && s.strstart - hash_head <= s.w_size - MIN_LOOKAHEAD) {
      /* To simplify the code, we prevent matches with the string
       * of window index 0 (in particular we have to avoid a match
       * of the string with itself at the start of the input file).
       */
      s.match_length = longest_match(s, hash_head);
      /* longest_match() sets match_start */
    }
    if (s.match_length >= MIN_MATCH) {
      // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only

      /*** _tr_tally_dist(s, s.strstart - s.match_start,
                     s.match_length - MIN_MATCH, bflush); ***/
      bflush = trees._tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);

      s.lookahead -= s.match_length;

      /* Insert new strings in the hash table only if the match length
       * is not too large. This saves time but degrades compression.
       */
      if (s.match_length <= s.max_lazy_match /*max_insert_length*/ && s.lookahead >= MIN_MATCH) {
        s.match_length--; /* string at strstart already in table */
        do {
          s.strstart++;
          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
          s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
          /***/
          /* strstart never exceeds WSIZE-MAX_MATCH, so there are
           * always MIN_MATCH bytes ahead.
           */
        } while (--s.match_length !== 0);
        s.strstart++;
      } else {
        s.strstart += s.match_length;
        s.match_length = 0;
        s.ins_h = s.window[s.strstart];
        /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */
        s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + 1]) & s.hash_mask;

        //#if MIN_MATCH != 3
        //                Call UPDATE_HASH() MIN_MATCH-3 more times
        //#endif
        /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not
         * matter since it will be recomputed at next deflate call.
         */
      }
    } else {
      /* No match, output a literal byte */
      //Tracevv((stderr,"%c", s.window[s.strstart]));
      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);

      s.lookahead--;
      s.strstart++;
    }
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;
  if (flush === Z_FINISH$1) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
}

/* ===========================================================================
 * Same as above, but achieves better compression. We use a lazy
 * evaluation for matches: a match is finally adopted only if there is
 * no better match at the next window position.
 */
function deflate_slow(s, flush) {
  var hash_head; /* head of hash chain */
  var bflush; /* set if current block must be flushed */

  var max_insert;

  /* Process the input block. */
  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the next match, plus MIN_MATCH bytes to insert the
     * string following the next match.
     */
    if (s.lookahead < MIN_LOOKAHEAD) {
      fill_window(s);
      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH$1) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) {
        break;
      } /* flush the current block */
    }

    /* Insert the string window[strstart .. strstart+2] in the
     * dictionary, and set hash_head to the head of the hash chain:
     */
    hash_head = 0 /*NIL*/;
    if (s.lookahead >= MIN_MATCH) {
      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
      s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
      s.head[s.ins_h] = s.strstart;
      /***/
    }

    /* Find the longest match, discarding those <= prev_length.
     */
    s.prev_length = s.match_length;
    s.prev_match = s.match_start;
    s.match_length = MIN_MATCH - 1;

    if (hash_head !== 0 /*NIL*/ && s.prev_length < s.max_lazy_match && s.strstart - hash_head <= s.w_size - MIN_LOOKAHEAD /*MAX_DIST(s)*/) {
        /* To simplify the code, we prevent matches with the string
         * of window index 0 (in particular we have to avoid a match
         * of the string with itself at the start of the input file).
         */
        s.match_length = longest_match(s, hash_head);
        /* longest_match() sets match_start */

        if (s.match_length <= 5 && (s.strategy === Z_FILTERED || s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096 /*TOO_FAR*/)) {

          /* If prev_match is also MIN_MATCH, match_start is garbage
           * but we will ignore the current match anyway.
           */
          s.match_length = MIN_MATCH - 1;
        }
      }
    /* If there was a match at the previous step and the current
     * match is not better, output the previous match:
     */
    if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {
      max_insert = s.strstart + s.lookahead - MIN_MATCH;
      /* Do not insert strings in hash table beyond this. */

      //check_match(s, s.strstart-1, s.prev_match, s.prev_length);

      /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,
                     s.prev_length - MIN_MATCH, bflush);***/
      bflush = trees._tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);
      /* Insert in hash table all strings up to the end of the match.
       * strstart-1 and strstart are already inserted. If there is not
       * enough lookahead, the last two strings are not inserted in
       * the hash table.
       */
      s.lookahead -= s.prev_length - 1;
      s.prev_length -= 2;
      do {
        if (++s.strstart <= max_insert) {
          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
          s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
          /***/
        }
      } while (--s.prev_length !== 0);
      s.match_available = 0;
      s.match_length = MIN_MATCH - 1;
      s.strstart++;

      if (bflush) {
        /*** FLUSH_BLOCK(s, 0); ***/
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
        /***/
      }
    } else if (s.match_available) {
      /* If there was no match at the previous position, output a
       * single literal. If there was a match but the current match
       * is longer, truncate the previous match to a single literal.
       */
      //Tracevv((stderr,"%c", s->window[s->strstart-1]));
      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
      bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);

      if (bflush) {
        /*** FLUSH_BLOCK_ONLY(s, 0) ***/
        flush_block_only(s, false);
        /***/
      }
      s.strstart++;
      s.lookahead--;
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
    } else {
      /* There is no previous match to compare with, wait for
       * the next step to decide.
       */
      s.match_available = 1;
      s.strstart++;
      s.lookahead--;
    }
  }
  //Assert (flush != Z_NO_FLUSH, "no flush?");
  if (s.match_available) {
    //Tracevv((stderr,"%c", s->window[s->strstart-1]));
    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
    bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);

    s.match_available = 0;
  }
  s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;
  if (flush === Z_FINISH$1) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }

  return BS_BLOCK_DONE;
}

/* ===========================================================================
 * For Z_RLE, simply look for runs of bytes, generate matches only of distance
 * one.  Do not maintain a hash table.  (It will be regenerated if this run of
 * deflate switches away from Z_RLE.)
 */
function deflate_rle(s, flush) {
  var bflush; /* set if current block must be flushed */
  var prev; /* byte at distance one to match */
  var scan, strend; /* scan goes up to strend for length of run */

  var _win = s.window;

  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the longest run, plus one for the unrolled loop.
     */
    if (s.lookahead <= MAX_MATCH) {
      fill_window(s);
      if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH$1) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) {
        break;
      } /* flush the current block */
    }

    /* See how many times the previous byte repeats */
    s.match_length = 0;
    if (s.lookahead >= MIN_MATCH && s.strstart > 0) {
      scan = s.strstart - 1;
      prev = _win[scan];
      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {
        strend = s.strstart + MAX_MATCH;
        do {
          /*jshint noempty:false*/
        } while (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && scan < strend);
        s.match_length = MAX_MATCH - (strend - scan);
        if (s.match_length > s.lookahead) {
          s.match_length = s.lookahead;
        }
      }
      //Assert(scan <= s->window+(uInt)(s->window_size-1), "wild scan");
    }

    /* Emit match if have run of MIN_MATCH or longer, else emit literal */
    if (s.match_length >= MIN_MATCH) {
      //check_match(s, s.strstart, s.strstart - 1, s.match_length);

      /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/
      bflush = trees._tr_tally(s, 1, s.match_length - MIN_MATCH);

      s.lookahead -= s.match_length;
      s.strstart += s.match_length;
      s.match_length = 0;
    } else {
      /* No match, output a literal byte */
      //Tracevv((stderr,"%c", s->window[s->strstart]));
      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);

      s.lookahead--;
      s.strstart++;
    }
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = 0;
  if (flush === Z_FINISH$1) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
}

/* ===========================================================================
 * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.
 * (It will be regenerated if this run of deflate switches away from Huffman.)
 */
function deflate_huff(s, flush) {
  var bflush; /* set if current block must be flushed */

  for (;;) {
    /* Make sure that we have a literal to write. */
    if (s.lookahead === 0) {
      fill_window(s);
      if (s.lookahead === 0) {
        if (flush === Z_NO_FLUSH$1) {
          return BS_NEED_MORE;
        }
        break; /* flush the current block */
      }
    }

    /* Output a literal byte */
    s.match_length = 0;
    //Tracevv((stderr,"%c", s->window[s->strstart]));
    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
    bflush = trees._tr_tally(s, 0, s.window[s.strstart]);
    s.lookahead--;
    s.strstart++;
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = 0;
  if (flush === Z_FINISH$1) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
}

/* Values for max_lazy_match, good_match and max_chain_length, depending on
 * the desired pack level (0..9). The values given below have been tuned to
 * exclude worst case performance for pathological files. Better values may be
 * found for specific files.
 */
function Config(good_length, max_lazy, nice_length, max_chain, func) {
  this.good_length = good_length;
  this.max_lazy = max_lazy;
  this.nice_length = nice_length;
  this.max_chain = max_chain;
  this.func = func;
}

var configuration_table;

configuration_table = [
/*      good lazy nice chain */
new Config(0, 0, 0, 0, deflate_stored), /* 0 store only */
new Config(4, 4, 8, 4, deflate_fast), /* 1 max speed, no lazy matches */
new Config(4, 5, 16, 8, deflate_fast), /* 2 */
new Config(4, 6, 32, 32, deflate_fast), /* 3 */

new Config(4, 4, 16, 16, deflate_slow), /* 4 lazy matches */
new Config(8, 16, 32, 32, deflate_slow), /* 5 */
new Config(8, 16, 128, 128, deflate_slow), /* 6 */
new Config(8, 32, 128, 256, deflate_slow), /* 7 */
new Config(32, 128, 258, 1024, deflate_slow), /* 8 */
new Config(32, 258, 258, 4096, deflate_slow) /* 9 max compression */
];

/* ===========================================================================
 * Initialize the "longest match" routines for a new zlib stream
 */
function lm_init(s) {
  s.window_size = 2 * s.w_size;

  /*** CLEAR_HASH(s); ***/
  zero(s.head); // Fill with NIL (= 0);

  /* Set the default configuration parameters:
   */
  s.max_lazy_match = configuration_table[s.level].max_lazy;
  s.good_match = configuration_table[s.level].good_length;
  s.nice_match = configuration_table[s.level].nice_length;
  s.max_chain_length = configuration_table[s.level].max_chain;

  s.strstart = 0;
  s.block_start = 0;
  s.lookahead = 0;
  s.insert = 0;
  s.match_length = s.prev_length = MIN_MATCH - 1;
  s.match_available = 0;
  s.ins_h = 0;
}

function DeflateState() {
  this.strm = null; /* pointer back to this zlib stream */
  this.status = 0; /* as the name implies */
  this.pending_buf = null; /* output still pending */
  this.pending_buf_size = 0; /* size of pending_buf */
  this.pending_out = 0; /* next pending byte to output to the stream */
  this.pending = 0; /* nb of bytes in the pending buffer */
  this.wrap = 0; /* bit 0 true for zlib, bit 1 true for gzip */
  this.gzhead = null; /* gzip header information to write */
  this.gzindex = 0; /* where in extra, name, or comment */
  this.method = Z_DEFLATED$1; /* can only be DEFLATED */
  this.last_flush = -1; /* value of flush param for previous deflate call */

  this.w_size = 0; /* LZ77 window size (32K by default) */
  this.w_bits = 0; /* log2(w_size)  (8..16) */
  this.w_mask = 0; /* w_size - 1 */

  this.window = null;
  /* Sliding window. Input bytes are read into the second half of the window,
   * and move to the first half later to keep a dictionary of at least wSize
   * bytes. With this organization, matches are limited to a distance of
   * wSize-MAX_MATCH bytes, but this ensures that IO is always
   * performed with a length multiple of the block size.
   */

  this.window_size = 0;
  /* Actual size of window: 2*wSize, except when the user input buffer
   * is directly used as sliding window.
   */

  this.prev = null;
  /* Link to older string with same hash index. To limit the size of this
   * array to 64K, this link is maintained only for the last 32K strings.
   * An index in this array is thus a window index modulo 32K.
   */

  this.head = null; /* Heads of the hash chains or NIL. */

  this.ins_h = 0; /* hash index of string to be inserted */
  this.hash_size = 0; /* number of elements in hash table */
  this.hash_bits = 0; /* log2(hash_size) */
  this.hash_mask = 0; /* hash_size-1 */

  this.hash_shift = 0;
  /* Number of bits by which ins_h must be shifted at each input
   * step. It must be such that after MIN_MATCH steps, the oldest
   * byte no longer takes part in the hash key, that is:
   *   hash_shift * MIN_MATCH >= hash_bits
   */

  this.block_start = 0;
  /* Window position at the beginning of the current output block. Gets
   * negative when the window is moved backwards.
   */

  this.match_length = 0; /* length of best match */
  this.prev_match = 0; /* previous match */
  this.match_available = 0; /* set if previous match exists */
  this.strstart = 0; /* start of string to insert */
  this.match_start = 0; /* start of matching string */
  this.lookahead = 0; /* number of valid bytes ahead in window */

  this.prev_length = 0;
  /* Length of the best match at previous step. Matches not greater than this
   * are discarded. This is used in the lazy match evaluation.
   */

  this.max_chain_length = 0;
  /* To speed up deflation, hash chains are never searched beyond this
   * length.  A higher limit improves compression ratio but degrades the
   * speed.
   */

  this.max_lazy_match = 0;
  /* Attempt to find a better match only when the current match is strictly
   * smaller than this value. This mechanism is used only for compression
   * levels >= 4.
   */
  // That's alias to max_lazy_match, don't use directly
  //this.max_insert_length = 0;
  /* Insert new strings in the hash table only if the match length is not
   * greater than this length. This saves time but degrades compression.
   * max_insert_length is used only for compression levels <= 3.
   */

  this.level = 0; /* compression level (1..9) */
  this.strategy = 0; /* favor or force Huffman coding*/

  this.good_match = 0;
  /* Use a faster search when the previous match is longer than this */

  this.nice_match = 0; /* Stop searching when current match exceeds this */

  /* used by trees.c: */

  /* Didn't use ct_data typedef below to suppress compiler warning */

  // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */
  // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */
  // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */

  // Use flat array of DOUBLE size, with interleaved fata,
  // because JS does not support effective
  this.dyn_ltree = new common.Buf16(HEAP_SIZE * 2);
  this.dyn_dtree = new common.Buf16((2 * D_CODES + 1) * 2);
  this.bl_tree = new common.Buf16((2 * BL_CODES + 1) * 2);
  zero(this.dyn_ltree);
  zero(this.dyn_dtree);
  zero(this.bl_tree);

  this.l_desc = null; /* desc. for literal tree */
  this.d_desc = null; /* desc. for distance tree */
  this.bl_desc = null; /* desc. for bit length tree */

  //ush bl_count[MAX_BITS+1];
  this.bl_count = new common.Buf16(MAX_BITS + 1);
  /* number of codes at each bit length for an optimal tree */

  //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */
  this.heap = new common.Buf16(2 * L_CODES + 1); /* heap used to build the Huffman trees */
  zero(this.heap);

  this.heap_len = 0; /* number of elements in the heap */
  this.heap_max = 0; /* element of largest frequency */
  /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.
   * The same heap array is used to build all trees.
   */

  this.depth = new common.Buf16(2 * L_CODES + 1); //uch depth[2*L_CODES+1];
  zero(this.depth);
  /* Depth of each subtree used as tie breaker for trees of equal frequency
   */

  this.l_buf = 0; /* buffer index for literals or lengths */

  this.lit_bufsize = 0;
  /* Size of match buffer for literals/lengths.  There are 4 reasons for
   * limiting lit_bufsize to 64K:
   *   - frequencies can be kept in 16 bit counters
   *   - if compression is not successful for the first block, all input
   *     data is still in the window so we can still emit a stored block even
   *     when input comes from standard input.  (This can also be done for
   *     all blocks if lit_bufsize is not greater than 32K.)
   *   - if compression is not successful for a file smaller than 64K, we can
   *     even emit a stored file instead of a stored block (saving 5 bytes).
   *     This is applicable only for zip (not gzip or zlib).
   *   - creating new Huffman trees less frequently may not provide fast
   *     adaptation to changes in the input data statistics. (Take for
   *     example a binary file with poorly compressible code followed by
   *     a highly compressible string table.) Smaller buffer sizes give
   *     fast adaptation but have of course the overhead of transmitting
   *     trees more frequently.
   *   - I can't count above 4
   */

  this.last_lit = 0; /* running index in l_buf */

  this.d_buf = 0;
  /* Buffer index for distances. To simplify the code, d_buf and l_buf have
   * the same number of elements. To use different lengths, an extra flag
   * array would be necessary.
   */

  this.opt_len = 0; /* bit length of current block with optimal trees */
  this.static_len = 0; /* bit length of current block with static trees */
  this.matches = 0; /* number of string matches in current block */
  this.insert = 0; /* bytes at end of window left to insert */

  this.bi_buf = 0;
  /* Output buffer. bits are inserted starting at the bottom (least
   * significant bits).
   */
  this.bi_valid = 0;
  /* Number of valid bits in bi_buf.  All bits above the last valid bit
   * are always zero.
   */

  // Used for window memory init. We safely ignore it for JS. That makes
  // sense only for pointers and memory check tools.
  //this.high_water = 0;
  /* High water mark offset in window for initialized bytes -- bytes above
   * this are set to zero in order to avoid memory check warnings when
   * longest match routines access bytes past the input.  This is then
   * updated to the new high water mark.
   */
}

function deflateResetKeep(strm) {
  var s;

  if (!strm || !strm.state) {
    return err(strm, Z_STREAM_ERROR);
  }

  strm.total_in = strm.total_out = 0;
  strm.data_type = Z_UNKNOWN;

  s = strm.state;
  s.pending = 0;
  s.pending_out = 0;

  if (s.wrap < 0) {
    s.wrap = -s.wrap;
    /* was made negative by deflate(..., Z_FINISH); */
  }
  s.status = s.wrap ? INIT_STATE : BUSY_STATE;
  strm.adler = s.wrap === 2 ? 0 // crc32(0, Z_NULL, 0)
  : 1; // adler32(0, Z_NULL, 0)
  s.last_flush = Z_NO_FLUSH$1;
  trees._tr_init(s);
  return Z_OK$1;
}

function deflateReset(strm) {
  var ret = deflateResetKeep(strm);
  if (ret === Z_OK$1) {
    lm_init(strm.state);
  }
  return ret;
}

function deflateSetHeader(strm, head) {
  if (!strm || !strm.state) {
    return Z_STREAM_ERROR;
  }
  if (strm.state.wrap !== 2) {
    return Z_STREAM_ERROR;
  }
  strm.state.gzhead = head;
  return Z_OK$1;
}

function deflateInit2(strm, level, method, windowBits, memLevel, strategy) {
  if (!strm) {
    // === Z_NULL
    return Z_STREAM_ERROR;
  }
  var wrap = 1;

  if (level === Z_DEFAULT_COMPRESSION$1) {
    level = 6;
  }

  if (windowBits < 0) {
    /* suppress zlib wrapper */
    wrap = 0;
    windowBits = -windowBits;
  } else if (windowBits > 15) {
    wrap = 2; /* write gzip wrapper instead */
    windowBits -= 16;
  }

  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED$1 || windowBits < 8 || windowBits > 15 || level < 0 || level > 9 || strategy < 0 || strategy > Z_FIXED) {
    return err(strm, Z_STREAM_ERROR);
  }

  if (windowBits === 8) {
    windowBits = 9;
  }
  /* until 256-byte window bug fixed */

  var s = new DeflateState();

  strm.state = s;
  s.strm = strm;

  s.wrap = wrap;
  s.gzhead = null;
  s.w_bits = windowBits;
  s.w_size = 1 << s.w_bits;
  s.w_mask = s.w_size - 1;

  s.hash_bits = memLevel + 7;
  s.hash_size = 1 << s.hash_bits;
  s.hash_mask = s.hash_size - 1;
  s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);

  s.window = new common.Buf8(s.w_size * 2);
  s.head = new common.Buf16(s.hash_size);
  s.prev = new common.Buf16(s.w_size);

  // Don't need mem init magic for JS.
  //s.high_water = 0;  /* nothing written to s->window yet */

  s.lit_bufsize = 1 << memLevel + 6; /* 16K elements by default */

  s.pending_buf_size = s.lit_bufsize * 4;

  //overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);
  //s->pending_buf = (uchf *) overlay;
  s.pending_buf = new common.Buf8(s.pending_buf_size);

  // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)
  //s->d_buf = overlay + s->lit_bufsize/sizeof(ush);
  s.d_buf = 1 * s.lit_bufsize;

  //s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;
  s.l_buf = (1 + 2) * s.lit_bufsize;

  s.level = level;
  s.strategy = strategy;
  s.method = method;

  return deflateReset(strm);
}

function deflateInit(strm, level) {
  return deflateInit2(strm, level, Z_DEFLATED$1, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY$1);
}

function deflate$1(strm, flush) {
  var old_flush, s;
  var beg, val; // for gzip header write only

  if (!strm || !strm.state || flush > Z_BLOCK || flush < 0) {
    return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;
  }

  s = strm.state;

  if (!strm.output || !strm.input && strm.avail_in !== 0 || s.status === FINISH_STATE && flush !== Z_FINISH$1) {
    return err(strm, strm.avail_out === 0 ? Z_BUF_ERROR : Z_STREAM_ERROR);
  }

  s.strm = strm; /* just in case */
  old_flush = s.last_flush;
  s.last_flush = flush;

  /* Write the header */
  if (s.status === INIT_STATE) {

    if (s.wrap === 2) {
      // GZIP header
      strm.adler = 0; //crc32(0L, Z_NULL, 0);
      put_byte(s, 31);
      put_byte(s, 139);
      put_byte(s, 8);
      if (!s.gzhead) {
        // s->gzhead == Z_NULL
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, s.level === 9 ? 2 : s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ? 4 : 0);
        put_byte(s, OS_CODE);
        s.status = BUSY_STATE;
      } else {
        put_byte(s, (s.gzhead.text ? 1 : 0) + (s.gzhead.hcrc ? 2 : 0) + (!s.gzhead.extra ? 0 : 4) + (!s.gzhead.name ? 0 : 8) + (!s.gzhead.comment ? 0 : 16));
        put_byte(s, s.gzhead.time & 0xff);
        put_byte(s, s.gzhead.time >> 8 & 0xff);
        put_byte(s, s.gzhead.time >> 16 & 0xff);
        put_byte(s, s.gzhead.time >> 24 & 0xff);
        put_byte(s, s.level === 9 ? 2 : s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ? 4 : 0);
        put_byte(s, s.gzhead.os & 0xff);
        if (s.gzhead.extra && s.gzhead.extra.length) {
          put_byte(s, s.gzhead.extra.length & 0xff);
          put_byte(s, s.gzhead.extra.length >> 8 & 0xff);
        }
        if (s.gzhead.hcrc) {
          strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending, 0);
        }
        s.gzindex = 0;
        s.status = EXTRA_STATE;
      }
    } else // DEFLATE header
      {
        var header = Z_DEFLATED$1 + (s.w_bits - 8 << 4) << 8;
        var level_flags = -1;

        if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {
          level_flags = 0;
        } else if (s.level < 6) {
          level_flags = 1;
        } else if (s.level === 6) {
          level_flags = 2;
        } else {
          level_flags = 3;
        }
        header |= level_flags << 6;
        if (s.strstart !== 0) {
          header |= PRESET_DICT;
        }
        header += 31 - header % 31;

        s.status = BUSY_STATE;
        putShortMSB(s, header);

        /* Save the adler32 of the preset dictionary: */
        if (s.strstart !== 0) {
          putShortMSB(s, strm.adler >>> 16);
          putShortMSB(s, strm.adler & 0xffff);
        }
        strm.adler = 1; // adler32(0L, Z_NULL, 0);
      }
  }

  //#ifdef GZIP
  if (s.status === EXTRA_STATE) {
    if (s.gzhead.extra /* != Z_NULL*/) {
        beg = s.pending; /* start of bytes to update crc */

        while (s.gzindex < (s.gzhead.extra.length & 0xffff)) {
          if (s.pending === s.pending_buf_size) {
            if (s.gzhead.hcrc && s.pending > beg) {
              strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
            }
            flush_pending(strm);
            beg = s.pending;
            if (s.pending === s.pending_buf_size) {
              break;
            }
          }
          put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);
          s.gzindex++;
        }
        if (s.gzhead.hcrc && s.pending > beg) {
          strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
        }
        if (s.gzindex === s.gzhead.extra.length) {
          s.gzindex = 0;
          s.status = NAME_STATE;
        }
      } else {
      s.status = NAME_STATE;
    }
  }
  if (s.status === NAME_STATE) {
    if (s.gzhead.name /* != Z_NULL*/) {
        beg = s.pending; /* start of bytes to update crc */
        //int val;

        do {
          if (s.pending === s.pending_buf_size) {
            if (s.gzhead.hcrc && s.pending > beg) {
              strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
            }
            flush_pending(strm);
            beg = s.pending;
            if (s.pending === s.pending_buf_size) {
              val = 1;
              break;
            }
          }
          // JS specific: little magic to add zero terminator to end of string
          if (s.gzindex < s.gzhead.name.length) {
            val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;
          } else {
            val = 0;
          }
          put_byte(s, val);
        } while (val !== 0);

        if (s.gzhead.hcrc && s.pending > beg) {
          strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
        }
        if (val === 0) {
          s.gzindex = 0;
          s.status = COMMENT_STATE;
        }
      } else {
      s.status = COMMENT_STATE;
    }
  }
  if (s.status === COMMENT_STATE) {
    if (s.gzhead.comment /* != Z_NULL*/) {
        beg = s.pending; /* start of bytes to update crc */
        //int val;

        do {
          if (s.pending === s.pending_buf_size) {
            if (s.gzhead.hcrc && s.pending > beg) {
              strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
            }
            flush_pending(strm);
            beg = s.pending;
            if (s.pending === s.pending_buf_size) {
              val = 1;
              break;
            }
          }
          // JS specific: little magic to add zero terminator to end of string
          if (s.gzindex < s.gzhead.comment.length) {
            val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;
          } else {
            val = 0;
          }
          put_byte(s, val);
        } while (val !== 0);

        if (s.gzhead.hcrc && s.pending > beg) {
          strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
        }
        if (val === 0) {
          s.status = HCRC_STATE;
        }
      } else {
      s.status = HCRC_STATE;
    }
  }
  if (s.status === HCRC_STATE) {
    if (s.gzhead.hcrc) {
      if (s.pending + 2 > s.pending_buf_size) {
        flush_pending(strm);
      }
      if (s.pending + 2 <= s.pending_buf_size) {
        put_byte(s, strm.adler & 0xff);
        put_byte(s, strm.adler >> 8 & 0xff);
        strm.adler = 0; //crc32(0L, Z_NULL, 0);
        s.status = BUSY_STATE;
      }
    } else {
      s.status = BUSY_STATE;
    }
  }
  //#endif

  /* Flush as much pending output as possible */
  if (s.pending !== 0) {
    flush_pending(strm);
    if (strm.avail_out === 0) {
      /* Since avail_out is 0, deflate will be called again with
       * more output space, but possibly with both pending and
       * avail_in equal to zero. There won't be anything to do,
       * but this is not an error situation so make sure we
       * return OK instead of BUF_ERROR at next call of deflate:
       */
      s.last_flush = -1;
      return Z_OK$1;
    }

    /* Make sure there is something to do and avoid duplicate consecutive
     * flushes. For repeated and useless calls with Z_FINISH, we keep
     * returning Z_STREAM_END instead of Z_BUF_ERROR.
     */
  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) && flush !== Z_FINISH$1) {
    return err(strm, Z_BUF_ERROR);
  }

  /* User must not provide more input after the first FINISH: */
  if (s.status === FINISH_STATE && strm.avail_in !== 0) {
    return err(strm, Z_BUF_ERROR);
  }

  /* Start a new block or continue the current one.
   */
  if (strm.avail_in !== 0 || s.lookahead !== 0 || flush !== Z_NO_FLUSH$1 && s.status !== FINISH_STATE) {
    var bstate = s.strategy === Z_HUFFMAN_ONLY ? deflate_huff(s, flush) : s.strategy === Z_RLE ? deflate_rle(s, flush) : configuration_table[s.level].func(s, flush);

    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {
      s.status = FINISH_STATE;
    }
    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {
      if (strm.avail_out === 0) {
        s.last_flush = -1;
        /* avoid BUF_ERROR next call, see above */
      }
      return Z_OK$1;
      /* If flush != Z_NO_FLUSH && avail_out == 0, the next call
       * of deflate should use the same flush parameter to make sure
       * that the flush is complete. So we don't have to output an
       * empty block here, this will be done at next call. This also
       * ensures that for a very small output buffer, we emit at most
       * one empty block.
       */
    }
    if (bstate === BS_BLOCK_DONE) {
      if (flush === Z_PARTIAL_FLUSH) {
        trees._tr_align(s);
      } else if (flush !== Z_BLOCK) {
        /* FULL_FLUSH or SYNC_FLUSH */

        trees._tr_stored_block(s, 0, 0, false);
        /* For a full flush, this empty block will be recognized
         * as a special marker by inflate_sync().
         */
        if (flush === Z_FULL_FLUSH) {
          /*** CLEAR_HASH(s); ***/ /* forget history */
          zero(s.head); // Fill with NIL (= 0);

          if (s.lookahead === 0) {
            s.strstart = 0;
            s.block_start = 0;
            s.insert = 0;
          }
        }
      }
      flush_pending(strm);
      if (strm.avail_out === 0) {
        s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */
        return Z_OK$1;
      }
    }
  }
  //Assert(strm->avail_out > 0, "bug2");
  //if (strm.avail_out <= 0) { throw new Error("bug2");}

  if (flush !== Z_FINISH$1) {
    return Z_OK$1;
  }
  if (s.wrap <= 0) {
    return Z_STREAM_END$1;
  }

  /* Write the trailer */
  if (s.wrap === 2) {
    put_byte(s, strm.adler & 0xff);
    put_byte(s, strm.adler >> 8 & 0xff);
    put_byte(s, strm.adler >> 16 & 0xff);
    put_byte(s, strm.adler >> 24 & 0xff);
    put_byte(s, strm.total_in & 0xff);
    put_byte(s, strm.total_in >> 8 & 0xff);
    put_byte(s, strm.total_in >> 16 & 0xff);
    put_byte(s, strm.total_in >> 24 & 0xff);
  } else {
    putShortMSB(s, strm.adler >>> 16);
    putShortMSB(s, strm.adler & 0xffff);
  }

  flush_pending(strm);
  /* If avail_out is zero, the application will call deflate again
   * to flush the rest.
   */
  if (s.wrap > 0) {
    s.wrap = -s.wrap;
  }
  /* write the trailer only once! */
  return s.pending !== 0 ? Z_OK$1 : Z_STREAM_END$1;
}

function deflateEnd(strm) {
  var status;

  if (!strm /*== Z_NULL*/ || !strm.state /*== Z_NULL*/) {
      return Z_STREAM_ERROR;
    }

  status = strm.state.status;
  if (status !== INIT_STATE && status !== EXTRA_STATE && status !== NAME_STATE && status !== COMMENT_STATE && status !== HCRC_STATE && status !== BUSY_STATE && status !== FINISH_STATE) {
    return err(strm, Z_STREAM_ERROR);
  }

  strm.state = null;

  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK$1;
}

/* =========================================================================
 * Initializes the compression dictionary from the given byte
 * sequence without producing any compressed output.
 */
function deflateSetDictionary(strm, dictionary) {
  var dictLength = dictionary.length;

  var s;
  var str, n;
  var wrap;
  var avail;
  var next;
  var input;
  var tmpDict;

  if (!strm /*== Z_NULL*/ || !strm.state /*== Z_NULL*/) {
      return Z_STREAM_ERROR;
    }

  s = strm.state;
  wrap = s.wrap;

  if (wrap === 2 || wrap === 1 && s.status !== INIT_STATE || s.lookahead) {
    return Z_STREAM_ERROR;
  }

  /* when using zlib wrappers, compute Adler-32 for provided dictionary */
  if (wrap === 1) {
    /* adler32(strm->adler, dictionary, dictLength); */
    strm.adler = adler32_1(strm.adler, dictionary, dictLength, 0);
  }

  s.wrap = 0; /* avoid computing Adler-32 in read_buf */

  /* if dictionary would fill window, just replace the history */
  if (dictLength >= s.w_size) {
    if (wrap === 0) {
      /* already empty otherwise */
      /*** CLEAR_HASH(s); ***/
      zero(s.head); // Fill with NIL (= 0);
      s.strstart = 0;
      s.block_start = 0;
      s.insert = 0;
    }
    /* use the tail */
    // dictionary = dictionary.slice(dictLength - s.w_size);
    tmpDict = new common.Buf8(s.w_size);
    common.arraySet(tmpDict, dictionary, dictLength - s.w_size, s.w_size, 0);
    dictionary = tmpDict;
    dictLength = s.w_size;
  }
  /* insert dictionary into window and hash */
  avail = strm.avail_in;
  next = strm.next_in;
  input = strm.input;
  strm.avail_in = dictLength;
  strm.next_in = 0;
  strm.input = dictionary;
  fill_window(s);
  while (s.lookahead >= MIN_MATCH) {
    str = s.strstart;
    n = s.lookahead - (MIN_MATCH - 1);
    do {
      /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
      s.ins_h = (s.ins_h << s.hash_shift ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;

      s.prev[str & s.w_mask] = s.head[s.ins_h];

      s.head[s.ins_h] = str;
      str++;
    } while (--n);
    s.strstart = str;
    s.lookahead = MIN_MATCH - 1;
    fill_window(s);
  }
  s.strstart += s.lookahead;
  s.block_start = s.strstart;
  s.insert = s.lookahead;
  s.lookahead = 0;
  s.match_length = s.prev_length = MIN_MATCH - 1;
  s.match_available = 0;
  strm.next_in = next;
  strm.input = input;
  strm.avail_in = avail;
  s.wrap = wrap;
  return Z_OK$1;
}

var deflateInit_1 = deflateInit;
var deflateInit2_1 = deflateInit2;
var deflateReset_1 = deflateReset;
var deflateResetKeep_1 = deflateResetKeep;
var deflateSetHeader_1 = deflateSetHeader;
var deflate_2$1 = deflate$1;
var deflateEnd_1 = deflateEnd;
var deflateSetDictionary_1 = deflateSetDictionary;
var deflateInfo = 'pako deflate (from Nodeca project)';

/* Not implemented
exports.deflateBound = deflateBound;
exports.deflateCopy = deflateCopy;
exports.deflateParams = deflateParams;
exports.deflatePending = deflatePending;
exports.deflatePrime = deflatePrime;
exports.deflateTune = deflateTune;
*/

var deflate_1$2 = {
  deflateInit: deflateInit_1,
  deflateInit2: deflateInit2_1,
  deflateReset: deflateReset_1,
  deflateResetKeep: deflateResetKeep_1,
  deflateSetHeader: deflateSetHeader_1,
  deflate: deflate_2$1,
  deflateEnd: deflateEnd_1,
  deflateSetDictionary: deflateSetDictionary_1,
  deflateInfo: deflateInfo
};

// String encode/decode helpers
'use strict';

// Quick check if we can use fast array to bin string conversion
//
// - apply(Array) can fail on Android 2.2
// - apply(Uint8Array) can fail on iOS 5.1 Safary
//
var STR_APPLY_OK = true;
var STR_APPLY_UIA_OK = true;

try {
  String.fromCharCode.apply(null, [0]);
} catch (__) {
  STR_APPLY_OK = false;
}
try {
  String.fromCharCode.apply(null, new Uint8Array(1));
} catch (__) {
  STR_APPLY_UIA_OK = false;
}

// Table with utf8 lengths (calculated by first byte of sequence)
// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,
// because max possible codepoint is 0x10ffff
var _utf8len = new common.Buf8(256);
for (var q = 0; q < 256; q++) {
  _utf8len[q] = q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1;
}
_utf8len[254] = _utf8len[254] = 1; // Invalid sequence start


// convert string to array (typed, when possible)
var string2buf = function string2buf(str) {
  var buf,
      c,
      c2,
      m_pos,
      i,
      str_len = str.length,
      buf_len = 0;

  // count binary size
  for (m_pos = 0; m_pos < str_len; m_pos++) {
    c = str.charCodeAt(m_pos);
    if ((c & 0xfc00) === 0xd800 && m_pos + 1 < str_len) {
      c2 = str.charCodeAt(m_pos + 1);
      if ((c2 & 0xfc00) === 0xdc00) {
        c = 0x10000 + (c - 0xd800 << 10) + (c2 - 0xdc00);
        m_pos++;
      }
    }
    buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;
  }

  // allocate buffer
  buf = new common.Buf8(buf_len);

  // convert
  for (i = 0, m_pos = 0; i < buf_len; m_pos++) {
    c = str.charCodeAt(m_pos);
    if ((c & 0xfc00) === 0xd800 && m_pos + 1 < str_len) {
      c2 = str.charCodeAt(m_pos + 1);
      if ((c2 & 0xfc00) === 0xdc00) {
        c = 0x10000 + (c - 0xd800 << 10) + (c2 - 0xdc00);
        m_pos++;
      }
    }
    if (c < 0x80) {
      /* one byte */
      buf[i++] = c;
    } else if (c < 0x800) {
      /* two bytes */
      buf[i++] = 0xC0 | c >>> 6;
      buf[i++] = 0x80 | c & 0x3f;
    } else if (c < 0x10000) {
      /* three bytes */
      buf[i++] = 0xE0 | c >>> 12;
      buf[i++] = 0x80 | c >>> 6 & 0x3f;
      buf[i++] = 0x80 | c & 0x3f;
    } else {
      /* four bytes */
      buf[i++] = 0xf0 | c >>> 18;
      buf[i++] = 0x80 | c >>> 12 & 0x3f;
      buf[i++] = 0x80 | c >>> 6 & 0x3f;
      buf[i++] = 0x80 | c & 0x3f;
    }
  }

  return buf;
};

// Helper (used in 2 places)
function buf2binstring(buf, len) {
  // use fallback for big arrays to avoid stack overflow
  if (len < 65537) {
    if (buf.subarray && STR_APPLY_UIA_OK || !buf.subarray && STR_APPLY_OK) {
      return String.fromCharCode.apply(null, common.shrinkBuf(buf, len));
    }
  }

  var result = '';
  for (var i = 0; i < len; i++) {
    result += String.fromCharCode(buf[i]);
  }
  return result;
}

// Convert byte array to binary string
var buf2binstring_1 = function buf2binstring_1(buf) {
  return buf2binstring(buf, buf.length);
};

// Convert binary string (typed, when possible)
var binstring2buf = function binstring2buf(str) {
  var buf = new common.Buf8(str.length);
  for (var i = 0, len = buf.length; i < len; i++) {
    buf[i] = str.charCodeAt(i);
  }
  return buf;
};

// convert array to string
var buf2string = function buf2string(buf, max) {
  var i, out, c, c_len;
  var len = max || buf.length;

  // Reserve max possible length (2 words per char)
  // NB: by unknown reasons, Array is significantly faster for
  //     String.fromCharCode.apply than Uint16Array.
  var utf16buf = new Array(len * 2);

  for (out = 0, i = 0; i < len;) {
    c = buf[i++];
    // quick process ascii
    if (c < 0x80) {
      utf16buf[out++] = c;continue;
    }

    c_len = _utf8len[c];
    // skip 5 & 6 byte codes
    if (c_len > 4) {
      utf16buf[out++] = 0xfffd;i += c_len - 1;continue;
    }

    // apply mask on first byte
    c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;
    // join the rest
    while (c_len > 1 && i < len) {
      c = c << 6 | buf[i++] & 0x3f;
      c_len--;
    }

    // terminated by end of string?
    if (c_len > 1) {
      utf16buf[out++] = 0xfffd;continue;
    }

    if (c < 0x10000) {
      utf16buf[out++] = c;
    } else {
      c -= 0x10000;
      utf16buf[out++] = 0xd800 | c >> 10 & 0x3ff;
      utf16buf[out++] = 0xdc00 | c & 0x3ff;
    }
  }

  return buf2binstring(utf16buf, out);
};

// Calculate max possible position in utf8 buffer,
// that will not break sequence. If that's not possible
// - (very small limits) return max size as is.
//
// buf[] - utf8 bytes array
// max   - length limit (mandatory);
var utf8border = function utf8border(buf, max) {
  var pos;

  max = max || buf.length;
  if (max > buf.length) {
    max = buf.length;
  }

  // go back from last position, until start of sequence found
  pos = max - 1;
  while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) {
    pos--;
  }

  // Fuckup - very small and broken sequence,
  // return max, because we should return something anyway.
  if (pos < 0) {
    return max;
  }

  // If we came to start of buffer - that means vuffer is too small,
  // return max too.
  if (pos === 0) {
    return max;
  }

  return pos + _utf8len[buf[pos]] > max ? pos : max;
};

var strings = {
  string2buf: string2buf,
  buf2binstring: buf2binstring_1,
  binstring2buf: binstring2buf,
  buf2string: buf2string,
  utf8border: utf8border
};

'use strict';

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

function ZStream() {
  /* next input byte */
  this.input = null; // JS specific, because we have no pointers
  this.next_in = 0;
  /* number of bytes available at input */
  this.avail_in = 0;
  /* total number of input bytes read so far */
  this.total_in = 0;
  /* next output byte should be put there */
  this.output = null; // JS specific, because we have no pointers
  this.next_out = 0;
  /* remaining free space at output */
  this.avail_out = 0;
  /* total number of bytes output so far */
  this.total_out = 0;
  /* last error message, NULL if no error */
  this.msg = '' /*Z_NULL*/;
  /* not visible by applications */
  this.state = null;
  /* best guess about the data type: binary or text */
  this.data_type = 2 /*Z_UNKNOWN*/;
  /* adler32 value of the uncompressed data */
  this.adler = 0;
}

var zstream = ZStream;

'use strict';

var toString$1 = Object.prototype.toString;

/* Public constants ==========================================================*/
/* ===========================================================================*/

var Z_NO_FLUSH = 0;
var Z_FINISH = 4;

var Z_OK = 0;
var Z_STREAM_END = 1;
var Z_SYNC_FLUSH = 2;

var Z_DEFAULT_COMPRESSION = -1;

var Z_DEFAULT_STRATEGY = 0;

var Z_DEFLATED = 8;

/* ===========================================================================*/

/**
 * class Deflate
 *
 * Generic JS-style wrapper for zlib calls. If you don't need
 * streaming behaviour - use more simple functions: [[deflate]],
 * [[deflateRaw]] and [[gzip]].
 **/

/* internal
 * Deflate.chunks -> Array
 *
 * Chunks of output data, if [[Deflate#onData]] not overriden.
 **/

/**
 * Deflate.result -> Uint8Array|Array
 *
 * Compressed result, generated by default [[Deflate#onData]]
 * and [[Deflate#onEnd]] handlers. Filled after you push last chunk
 * (call [[Deflate#push]] with `Z_FINISH` / `true` param)  or if you
 * push a chunk with explicit flush (call [[Deflate#push]] with
 * `Z_SYNC_FLUSH` param).
 **/

/**
 * Deflate.err -> Number
 *
 * Error code after deflate finished. 0 (Z_OK) on success.
 * You will not need it in real life, because deflate errors
 * are possible only on wrong options or bad `onData` / `onEnd`
 * custom handlers.
 **/

/**
 * Deflate.msg -> String
 *
 * Error message, if [[Deflate.err]] != 0
 **/

/**
 * new Deflate(options)
 * - options (Object): zlib deflate options.
 *
 * Creates new deflator instance with specified params. Throws exception
 * on bad params. Supported options:
 *
 * - `level`
 * - `windowBits`
 * - `memLevel`
 * - `strategy`
 * - `dictionary`
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information on these.
 *
 * Additional options, for internal needs:
 *
 * - `chunkSize` - size of generated data chunks (16K by default)
 * - `raw` (Boolean) - do raw deflate
 * - `gzip` (Boolean) - create gzip wrapper
 * - `to` (String) - if equal to 'string', then result will be "binary string"
 *    (each char code [0..255])
 * - `header` (Object) - custom header for gzip
 *   - `text` (Boolean) - true if compressed data believed to be text
 *   - `time` (Number) - modification time, unix timestamp
 *   - `os` (Number) - operation system code
 *   - `extra` (Array) - array of bytes with extra data (max 65536)
 *   - `name` (String) - file name (binary string)
 *   - `comment` (String) - comment (binary string)
 *   - `hcrc` (Boolean) - true if header crc should be added
 *
 * ##### Example:
 *
 * ```javascript
 * var pako = require('pako')
 *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])
 *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);
 *
 * var deflate = new pako.Deflate({ level: 3});
 *
 * deflate.push(chunk1, false);
 * deflate.push(chunk2, true);  // true -> last chunk
 *
 * if (deflate.err) { throw new Error(deflate.err); }
 *
 * console.log(deflate.result);
 * ```
 **/
function Deflate(options) {
  if (!(this instanceof Deflate)) return new Deflate(options);

  this.options = common.assign({
    level: Z_DEFAULT_COMPRESSION,
    method: Z_DEFLATED,
    chunkSize: 16384,
    windowBits: 15,
    memLevel: 8,
    strategy: Z_DEFAULT_STRATEGY,
    to: ''
  }, options || {});

  var opt = this.options;

  if (opt.raw && opt.windowBits > 0) {
    opt.windowBits = -opt.windowBits;
  } else if (opt.gzip && opt.windowBits > 0 && opt.windowBits < 16) {
    opt.windowBits += 16;
  }

  this.err = 0; // error code, if happens (0 = Z_OK)
  this.msg = ''; // error message
  this.ended = false; // used to avoid multiple onEnd() calls
  this.chunks = []; // chunks of compressed data

  this.strm = new zstream();
  this.strm.avail_out = 0;

  var status = deflate_1$2.deflateInit2(this.strm, opt.level, opt.method, opt.windowBits, opt.memLevel, opt.strategy);

  if (status !== Z_OK) {
    throw new Error(messages[status]);
  }

  if (opt.header) {
    deflate_1$2.deflateSetHeader(this.strm, opt.header);
  }

  if (opt.dictionary) {
    var dict;
    // Convert data if needed
    if (typeof opt.dictionary === 'string') {
      // If we need to compress text, change encoding to utf8.
      dict = strings.string2buf(opt.dictionary);
    } else if (toString$1.call(opt.dictionary) === '[object ArrayBuffer]') {
      dict = new Uint8Array(opt.dictionary);
    } else {
      dict = opt.dictionary;
    }

    status = deflate_1$2.deflateSetDictionary(this.strm, dict);

    if (status !== Z_OK) {
      throw new Error(messages[status]);
    }

    this._dict_set = true;
  }
}

/**
 * Deflate#push(data[, mode]) -> Boolean
 * - data (Uint8Array|Array|ArrayBuffer|String): input data. Strings will be
 *   converted to utf8 byte sequence.
 * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.
 *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` meansh Z_FINISH.
 *
 * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with
 * new compressed chunks. Returns `true` on success. The last data block must have
 * mode Z_FINISH (or `true`). That will flush internal pending buffers and call
 * [[Deflate#onEnd]]. For interim explicit flushes (without ending the stream) you
 * can use mode Z_SYNC_FLUSH, keeping the compression context.
 *
 * On fail call [[Deflate#onEnd]] with error code and return false.
 *
 * We strongly recommend to use `Uint8Array` on input for best speed (output
 * array format is detected automatically). Also, don't skip last param and always
 * use the same type in your code (boolean or number). That will improve JS speed.
 *
 * For regular `Array`-s make sure all elements are [0..255].
 *
 * ##### Example
 *
 * ```javascript
 * push(chunk, false); // push one of data chunks
 * ...
 * push(chunk, true);  // push last chunk
 * ```
 **/
Deflate.prototype.push = function (data, mode) {
  var strm = this.strm;
  var chunkSize = this.options.chunkSize;
  var status, _mode;

  if (this.ended) {
    return false;
  }

  _mode = mode === ~~mode ? mode : mode === true ? Z_FINISH : Z_NO_FLUSH;

  // Convert data if needed
  if (typeof data === 'string') {
    // If we need to compress text, change encoding to utf8.
    strm.input = strings.string2buf(data);
  } else if (toString$1.call(data) === '[object ArrayBuffer]') {
    strm.input = new Uint8Array(data);
  } else {
    strm.input = data;
  }

  strm.next_in = 0;
  strm.avail_in = strm.input.length;

  do {
    if (strm.avail_out === 0) {
      strm.output = new common.Buf8(chunkSize);
      strm.next_out = 0;
      strm.avail_out = chunkSize;
    }
    status = deflate_1$2.deflate(strm, _mode); /* no bad return value */

    if (status !== Z_STREAM_END && status !== Z_OK) {
      this.onEnd(status);
      this.ended = true;
      return false;
    }
    if (strm.avail_out === 0 || strm.avail_in === 0 && (_mode === Z_FINISH || _mode === Z_SYNC_FLUSH)) {
      if (this.options.to === 'string') {
        this.onData(strings.buf2binstring(common.shrinkBuf(strm.output, strm.next_out)));
      } else {
        this.onData(common.shrinkBuf(strm.output, strm.next_out));
      }
    }
  } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== Z_STREAM_END);

  // Finalize on the last chunk.
  if (_mode === Z_FINISH) {
    status = deflate_1$2.deflateEnd(this.strm);
    this.onEnd(status);
    this.ended = true;
    return status === Z_OK;
  }

  // callback interim results if Z_SYNC_FLUSH.
  if (_mode === Z_SYNC_FLUSH) {
    this.onEnd(Z_OK);
    strm.avail_out = 0;
    return true;
  }

  return true;
};

/**
 * Deflate#onData(chunk) -> Void
 * - chunk (Uint8Array|Array|String): ouput data. Type of array depends
 *   on js engine support. When string output requested, each chunk
 *   will be string.
 *
 * By default, stores data blocks in `chunks[]` property and glue
 * those in `onEnd`. Override this handler, if you need another behaviour.
 **/
Deflate.prototype.onData = function (chunk) {
  this.chunks.push(chunk);
};

/**
 * Deflate#onEnd(status) -> Void
 * - status (Number): deflate status. 0 (Z_OK) on success,
 *   other if not.
 *
 * Called once after you tell deflate that the input stream is
 * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)
 * or if an error happened. By default - join collected chunks,
 * free memory and fill `results` / `err` properties.
 **/
Deflate.prototype.onEnd = function (status) {
  // On success - join
  if (status === Z_OK) {
    if (this.options.to === 'string') {
      this.result = this.chunks.join('');
    } else {
      this.result = common.flattenChunks(this.chunks);
    }
  }
  this.chunks = [];
  this.err = status;
  this.msg = this.strm.msg;
};

/**
 * deflate(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to compress.
 * - options (Object): zlib deflate options.
 *
 * Compress `data` with deflate algorithm and `options`.
 *
 * Supported options are:
 *
 * - level
 * - windowBits
 * - memLevel
 * - strategy
 * - dictionary
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information on these.
 *
 * Sugar (options):
 *
 * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify
 *   negative windowBits implicitly.
 * - `to` (String) - if equal to 'string', then result will be "binary string"
 *    (each char code [0..255])
 *
 * ##### Example:
 *
 * ```javascript
 * var pako = require('pako')
 *   , data = Uint8Array([1,2,3,4,5,6,7,8,9]);
 *
 * console.log(pako.deflate(data));
 * ```
 **/
function deflate(input, options) {
  var deflator = new Deflate(options);

  deflator.push(input, true);

  // That will never happens, if you don't cheat with options :)
  if (deflator.err) {
    throw deflator.msg || messages[deflator.err];
  }

  return deflator.result;
}

/**
 * deflateRaw(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to compress.
 * - options (Object): zlib deflate options.
 *
 * The same as [[deflate]], but creates raw data, without wrapper
 * (header and adler32 crc).
 **/
function deflateRaw(input, options) {
  options = options || {};
  options.raw = true;
  return deflate(input, options);
}

/**
 * gzip(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to compress.
 * - options (Object): zlib deflate options.
 *
 * The same as [[deflate]], but create gzip wrapper instead of
 * deflate one.
 **/
function gzip(input, options) {
  options = options || {};
  options.gzip = true;
  return deflate(input, options);
}

var Deflate_1 = Deflate;
var deflate_2 = deflate;
var deflateRaw_1 = deflateRaw;
var gzip_1 = gzip;

var deflate_1 = {
  Deflate: Deflate_1,
  deflate: deflate_2,
  deflateRaw: deflateRaw_1,
  gzip: gzip_1
};

'use strict';

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

// See state defs from inflate.js

var BAD$1 = 30; /* got a data error -- remain here until reset */
var TYPE$1 = 12; /* i: waiting for type bits, including last-flag bit */

/*
   Decode literal, length, and distance codes and write out the resulting
   literal and match bytes until either not enough input or output is
   available, an end-of-block is encountered, or a data error is encountered.
   When large enough input and output buffers are supplied to inflate(), for
   example, a 16K input buffer and a 64K output buffer, more than 95% of the
   inflate execution time is spent in this routine.

   Entry assumptions:

        state.mode === LEN
        strm.avail_in >= 6
        strm.avail_out >= 258
        start >= strm.avail_out
        state.bits < 8

   On return, state.mode is one of:

        LEN -- ran out of enough output space or enough available input
        TYPE -- reached end of block code, inflate() to interpret next block
        BAD -- error in block data

   Notes:

    - The maximum input bits used by a length/distance pair is 15 bits for the
      length code, 5 bits for the length extra, 15 bits for the distance code,
      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.
      Therefore if strm.avail_in >= 6, then there is enough input to avoid
      checking for available input while decoding.

    - The maximum bytes that a single length/distance pair can output is 258
      bytes, which is the maximum length that can be coded.  inflate_fast()
      requires strm.avail_out >= 258 for each loop to avoid checking for
      output space.
 */
var inffast = function inflate_fast(strm, start) {
  var state;
  var _in; /* local strm.input */
  var last; /* have enough input while in < last */
  var _out; /* local strm.output */
  var beg; /* inflate()'s initial strm.output */
  var end; /* while out < end, enough space available */
  //#ifdef INFLATE_STRICT
  var dmax; /* maximum distance from zlib header */
  //#endif
  var wsize; /* window size or zero if not using window */
  var whave; /* valid bytes in the window */
  var wnext; /* window write index */
  // Use `s_window` instead `window`, avoid conflict with instrumentation tools
  var s_window; /* allocated sliding window, if wsize != 0 */
  var hold; /* local strm.hold */
  var bits; /* local strm.bits */
  var lcode; /* local strm.lencode */
  var dcode; /* local strm.distcode */
  var lmask; /* mask for first level of length codes */
  var dmask; /* mask for first level of distance codes */
  var here; /* retrieved table entry */
  var op; /* code bits, operation, extra bits, or */
  /*  window position, window bytes to copy */
  var len; /* match length, unused bytes */
  var dist; /* match distance */
  var from; /* where to copy match from */
  var from_source;

  var input, output; // JS specific, because we have no pointers

  /* copy state to local variables */
  state = strm.state;
  //here = state.here;
  _in = strm.next_in;
  input = strm.input;
  last = _in + (strm.avail_in - 5);
  _out = strm.next_out;
  output = strm.output;
  beg = _out - (start - strm.avail_out);
  end = _out + (strm.avail_out - 257);
  //#ifdef INFLATE_STRICT
  dmax = state.dmax;
  //#endif
  wsize = state.wsize;
  whave = state.whave;
  wnext = state.wnext;
  s_window = state.window;
  hold = state.hold;
  bits = state.bits;
  lcode = state.lencode;
  dcode = state.distcode;
  lmask = (1 << state.lenbits) - 1;
  dmask = (1 << state.distbits) - 1;

  /* decode literals and length/distances until end-of-block or not enough
     input data or output space */

  top: do {
    if (bits < 15) {
      hold += input[_in++] << bits;
      bits += 8;
      hold += input[_in++] << bits;
      bits += 8;
    }

    here = lcode[hold & lmask];

    dolen: for (;;) {
      // Goto emulation
      op = here >>> 24 /*here.bits*/;
      hold >>>= op;
      bits -= op;
      op = here >>> 16 & 0xff /*here.op*/;
      if (op === 0) {
        /* literal */
        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
        //        "inflate:         literal '%c'\n" :
        //        "inflate:         literal 0x%02x\n", here.val));
        output[_out++] = here & 0xffff /*here.val*/;
      } else if (op & 16) {
        /* length base */
        len = here & 0xffff /*here.val*/;
        op &= 15; /* number of extra bits */
        if (op) {
          if (bits < op) {
            hold += input[_in++] << bits;
            bits += 8;
          }
          len += hold & (1 << op) - 1;
          hold >>>= op;
          bits -= op;
        }
        //Tracevv((stderr, "inflate:         length %u\n", len));
        if (bits < 15) {
          hold += input[_in++] << bits;
          bits += 8;
          hold += input[_in++] << bits;
          bits += 8;
        }
        here = dcode[hold & dmask];

        dodist: for (;;) {
          // goto emulation
          op = here >>> 24 /*here.bits*/;
          hold >>>= op;
          bits -= op;
          op = here >>> 16 & 0xff /*here.op*/;

          if (op & 16) {
            /* distance base */
            dist = here & 0xffff /*here.val*/;
            op &= 15; /* number of extra bits */
            if (bits < op) {
              hold += input[_in++] << bits;
              bits += 8;
              if (bits < op) {
                hold += input[_in++] << bits;
                bits += 8;
              }
            }
            dist += hold & (1 << op) - 1;
            //#ifdef INFLATE_STRICT
            if (dist > dmax) {
              strm.msg = 'invalid distance too far back';
              state.mode = BAD$1;
              break top;
            }
            //#endif
            hold >>>= op;
            bits -= op;
            //Tracevv((stderr, "inflate:         distance %u\n", dist));
            op = _out - beg; /* max distance in output */
            if (dist > op) {
              /* see if copy from window */
              op = dist - op; /* distance back in window */
              if (op > whave) {
                if (state.sane) {
                  strm.msg = 'invalid distance too far back';
                  state.mode = BAD$1;
                  break top;
                }

                // (!) This block is disabled in zlib defailts,
                // don't enable it for binary compatibility
                //#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
                //                if (len <= op - whave) {
                //                  do {
                //                    output[_out++] = 0;
                //                  } while (--len);
                //                  continue top;
                //                }
                //                len -= op - whave;
                //                do {
                //                  output[_out++] = 0;
                //                } while (--op > whave);
                //                if (op === 0) {
                //                  from = _out - dist;
                //                  do {
                //                    output[_out++] = output[from++];
                //                  } while (--len);
                //                  continue top;
                //                }
                //#endif
              }
              from = 0; // window index
              from_source = s_window;
              if (wnext === 0) {
                /* very common case */
                from += wsize - op;
                if (op < len) {
                  /* some from window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = _out - dist; /* rest from output */
                  from_source = output;
                }
              } else if (wnext < op) {
                /* wrap around window */
                from += wsize + wnext - op;
                op -= wnext;
                if (op < len) {
                  /* some from end of window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = 0;
                  if (wnext < len) {
                    /* some from start of window */
                    op = wnext;
                    len -= op;
                    do {
                      output[_out++] = s_window[from++];
                    } while (--op);
                    from = _out - dist; /* rest from output */
                    from_source = output;
                  }
                }
              } else {
                /* contiguous in window */
                from += wnext - op;
                if (op < len) {
                  /* some from window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = _out - dist; /* rest from output */
                  from_source = output;
                }
              }
              while (len > 2) {
                output[_out++] = from_source[from++];
                output[_out++] = from_source[from++];
                output[_out++] = from_source[from++];
                len -= 3;
              }
              if (len) {
                output[_out++] = from_source[from++];
                if (len > 1) {
                  output[_out++] = from_source[from++];
                }
              }
            } else {
              from = _out - dist; /* copy direct from output */
              do {
                /* minimum length is three */
                output[_out++] = output[from++];
                output[_out++] = output[from++];
                output[_out++] = output[from++];
                len -= 3;
              } while (len > 2);
              if (len) {
                output[_out++] = output[from++];
                if (len > 1) {
                  output[_out++] = output[from++];
                }
              }
            }
          } else if ((op & 64) === 0) {
            /* 2nd level distance code */
            here = dcode[(here & 0xffff) + ( /*here.val*/hold & (1 << op) - 1)];
            continue dodist;
          } else {
            strm.msg = 'invalid distance code';
            state.mode = BAD$1;
            break top;
          }

          break; // need to emulate goto via "continue"
        }
      } else if ((op & 64) === 0) {
        /* 2nd level length code */
        here = lcode[(here & 0xffff) + ( /*here.val*/hold & (1 << op) - 1)];
        continue dolen;
      } else if (op & 32) {
        /* end-of-block */
        //Tracevv((stderr, "inflate:         end of block\n"));
        state.mode = TYPE$1;
        break top;
      } else {
        strm.msg = 'invalid literal/length code';
        state.mode = BAD$1;
        break top;
      }

      break; // need to emulate goto via "continue"
    }
  } while (_in < last && _out < end);

  /* return unused bytes (on entry, bits < 8, so in won't go too far back) */
  len = bits >> 3;
  _in -= len;
  bits -= len << 3;
  hold &= (1 << bits) - 1;

  /* update state and return */
  strm.next_in = _in;
  strm.next_out = _out;
  strm.avail_in = _in < last ? 5 + (last - _in) : 5 - (_in - last);
  strm.avail_out = _out < end ? 257 + (end - _out) : 257 - (_out - end);
  state.hold = hold;
  state.bits = bits;
  return;
};

'use strict';

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.


var MAXBITS = 15;
var ENOUGH_LENS$1 = 852;
var ENOUGH_DISTS$1 = 592;
//var ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);

var CODES$1 = 0;
var LENS$1 = 1;
var DISTS$1 = 2;

var lbase = [/* Length codes 257..285 base */
3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0];

var lext = [/* Length codes 257..285 extra */
16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78];

var dbase = [/* Distance codes 0..29 base */
1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577, 0, 0];

var dext = [/* Distance codes 0..29 extra */
16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 64, 64];

var inftrees = function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts) {
  var bits = opts.bits;
  //here = opts.here; /* table entry for duplication */

  var len = 0; /* a code's length in bits */
  var sym = 0; /* index of code symbols */
  var min = 0,
      max = 0; /* minimum and maximum code lengths */
  var root = 0; /* number of index bits for root table */
  var curr = 0; /* number of index bits for current table */
  var drop = 0; /* code bits to drop for sub-table */
  var left = 0; /* number of prefix codes available */
  var used = 0; /* code entries in table used */
  var huff = 0; /* Huffman code */
  var incr; /* for incrementing code, index */
  var fill; /* index for replicating entries */
  var low; /* low bits for current root entry */
  var mask; /* mask for low root bits */
  var next; /* next available space in table */
  var base = null; /* base value table to use */
  var base_index = 0;
  //  var shoextra;    /* extra bits table to use */
  var end; /* use base and extra for symbol > end */
  var count = new common.Buf16(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */
  var offs = new common.Buf16(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */
  var extra = null;
  var extra_index = 0;

  var here_bits, here_op, here_val;

  /*
   Process a set of code lengths to create a canonical Huffman code.  The
   code lengths are lens[0..codes-1].  Each length corresponds to the
   symbols 0..codes-1.  The Huffman code is generated by first sorting the
   symbols by length from short to long, and retaining the symbol order
   for codes with equal lengths.  Then the code starts with all zero bits
   for the first code of the shortest length, and the codes are integer
   increments for the same length, and zeros are appended as the length
   increases.  For the deflate format, these bits are stored backwards
   from their more natural integer increment ordering, and so when the
   decoding tables are built in the large loop below, the integer codes
   are incremented backwards.
    This routine assumes, but does not check, that all of the entries in
   lens[] are in the range 0..MAXBITS.  The caller must assure this.
   1..MAXBITS is interpreted as that code length.  zero means that that
   symbol does not occur in this code.
    The codes are sorted by computing a count of codes for each length,
   creating from that a table of starting indices for each length in the
   sorted table, and then entering the symbols in order in the sorted
   table.  The sorted table is work[], with that space being provided by
   the caller.
    The length counts are used for other purposes as well, i.e. finding
   the minimum and maximum length codes, determining if there are any
   codes at all, checking for a valid set of lengths, and looking ahead
   at length counts to determine sub-table sizes when building the
   decoding tables.
   */

  /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */
  for (len = 0; len <= MAXBITS; len++) {
    count[len] = 0;
  }
  for (sym = 0; sym < codes; sym++) {
    count[lens[lens_index + sym]]++;
  }

  /* bound code lengths, force root to be within code lengths */
  root = bits;
  for (max = MAXBITS; max >= 1; max--) {
    if (count[max] !== 0) {
      break;
    }
  }
  if (root > max) {
    root = max;
  }
  if (max === 0) {
    /* no symbols to code at all */
    //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */
    //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;
    //table.val[opts.table_index++] = 0;   //here.val = (var short)0;
    table[table_index++] = 1 << 24 | 64 << 16 | 0;

    //table.op[opts.table_index] = 64;
    //table.bits[opts.table_index] = 1;
    //table.val[opts.table_index++] = 0;
    table[table_index++] = 1 << 24 | 64 << 16 | 0;

    opts.bits = 1;
    return 0; /* no symbols, but wait for decoding to report error */
  }
  for (min = 1; min < max; min++) {
    if (count[min] !== 0) {
      break;
    }
  }
  if (root < min) {
    root = min;
  }

  /* check for an over-subscribed or incomplete set of lengths */
  left = 1;
  for (len = 1; len <= MAXBITS; len++) {
    left <<= 1;
    left -= count[len];
    if (left < 0) {
      return -1;
    } /* over-subscribed */
  }
  if (left > 0 && (type === CODES$1 || max !== 1)) {
    return -1; /* incomplete set */
  }

  /* generate offsets into symbol table for each length for sorting */
  offs[1] = 0;
  for (len = 1; len < MAXBITS; len++) {
    offs[len + 1] = offs[len] + count[len];
  }

  /* sort symbols by length, by symbol order within each length */
  for (sym = 0; sym < codes; sym++) {
    if (lens[lens_index + sym] !== 0) {
      work[offs[lens[lens_index + sym]]++] = sym;
    }
  }

  /*
   Create and fill in decoding tables.  In this loop, the table being
   filled is at next and has curr index bits.  The code being used is huff
   with length len.  That code is converted to an index by dropping drop
   bits off of the bottom.  For codes where len is less than drop + curr,
   those top drop + curr - len bits are incremented through all values to
   fill the table with replicated entries.
    root is the number of index bits for the root table.  When len exceeds
   root, sub-tables are created pointed to by the root entry with an index
   of the low root bits of huff.  This is saved in low to check for when a
   new sub-table should be started.  drop is zero when the root table is
   being filled, and drop is root when sub-tables are being filled.
    When a new sub-table is needed, it is necessary to look ahead in the
   code lengths to determine what size sub-table is needed.  The length
   counts are used for this, and so count[] is decremented as codes are
   entered in the tables.
    used keeps track of how many table entries have been allocated from the
   provided *table space.  It is checked for LENS and DIST tables against
   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in
   the initial root table size constants.  See the comments in inftrees.h
   for more information.
    sym increments through all symbols, and the loop terminates when
   all codes of length max, i.e. all codes, have been processed.  This
   routine permits incomplete codes, so another loop after this one fills
   in the rest of the decoding tables with invalid code markers.
   */

  /* set up for code type */
  // poor man optimization - use if-else instead of switch,
  // to avoid deopts in old v8
  if (type === CODES$1) {
    base = extra = work; /* dummy value--not used */
    end = 19;
  } else if (type === LENS$1) {
    base = lbase;
    base_index -= 257;
    extra = lext;
    extra_index -= 257;
    end = 256;
  } else {
    /* DISTS */
    base = dbase;
    extra = dext;
    end = -1;
  }

  /* initialize opts for loop */
  huff = 0; /* starting code */
  sym = 0; /* starting code symbol */
  len = min; /* starting code length */
  next = table_index; /* current table to fill in */
  curr = root; /* current table index bits */
  drop = 0; /* current bits to drop from code for index */
  low = -1; /* trigger new sub-table when len > root */
  used = 1 << root; /* use root table entries */
  mask = used - 1; /* mask for comparing low */

  /* check available table space */
  if (type === LENS$1 && used > ENOUGH_LENS$1 || type === DISTS$1 && used > ENOUGH_DISTS$1) {
    return 1;
  }

  /* process all codes and make table entries */
  for (;;) {
    /* create table entry */
    here_bits = len - drop;
    if (work[sym] < end) {
      here_op = 0;
      here_val = work[sym];
    } else if (work[sym] > end) {
      here_op = extra[extra_index + work[sym]];
      here_val = base[base_index + work[sym]];
    } else {
      here_op = 32 + 64; /* end of block */
      here_val = 0;
    }

    /* replicate for those indices with low len bits equal to huff */
    incr = 1 << len - drop;
    fill = 1 << curr;
    min = fill; /* save offset to next table */
    do {
      fill -= incr;
      table[next + (huff >> drop) + fill] = here_bits << 24 | here_op << 16 | here_val | 0;
    } while (fill !== 0);

    /* backwards increment the len-bit code huff */
    incr = 1 << len - 1;
    while (huff & incr) {
      incr >>= 1;
    }
    if (incr !== 0) {
      huff &= incr - 1;
      huff += incr;
    } else {
      huff = 0;
    }

    /* go to next symbol, update count, len */
    sym++;
    if (--count[len] === 0) {
      if (len === max) {
        break;
      }
      len = lens[lens_index + work[sym]];
    }

    /* create new sub-table if needed */
    if (len > root && (huff & mask) !== low) {
      /* if first time, transition to sub-tables */
      if (drop === 0) {
        drop = root;
      }

      /* increment past last table */
      next += min; /* here min is 1 << curr */

      /* determine length of next table */
      curr = len - drop;
      left = 1 << curr;
      while (curr + drop < max) {
        left -= count[curr + drop];
        if (left <= 0) {
          break;
        }
        curr++;
        left <<= 1;
      }

      /* check for enough space */
      used += 1 << curr;
      if (type === LENS$1 && used > ENOUGH_LENS$1 || type === DISTS$1 && used > ENOUGH_DISTS$1) {
        return 1;
      }

      /* point entry in root table to sub-table */
      low = huff & mask;
      /*table.op[low] = curr;
      table.bits[low] = root;
      table.val[low] = next - opts.table_index;*/
      table[low] = root << 24 | curr << 16 | next - table_index | 0;
    }
  }

  /* fill in remaining table entry if code is incomplete (guaranteed to have
   at most one remaining entry, since if the code is incomplete, the
   maximum code length that was allowed to get this far is one bit) */
  if (huff !== 0) {
    //table.op[next + huff] = 64;            /* invalid code marker */
    //table.bits[next + huff] = len - drop;
    //table.val[next + huff] = 0;
    table[next + huff] = len - drop << 24 | 64 << 16 | 0;
  }

  /* set return parameters */
  //opts.table_index += used;
  opts.bits = root;
  return 0;
};

'use strict';

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.


var CODES = 0;
var LENS = 1;
var DISTS = 2;

/* Public constants ==========================================================*/
/* ===========================================================================*/

/* Allowed flush values; see deflate() and inflate() below for details */
//var Z_NO_FLUSH      = 0;
//var Z_PARTIAL_FLUSH = 1;
//var Z_SYNC_FLUSH    = 2;
//var Z_FULL_FLUSH    = 3;
var Z_FINISH$2 = 4;
var Z_BLOCK$1 = 5;
var Z_TREES = 6;

/* Return codes for the compression/decompression functions. Negative values
 * are errors, positive values are used for special but normal events.
 */
var Z_OK$2 = 0;
var Z_STREAM_END$2 = 1;
var Z_NEED_DICT = 2;
//var Z_ERRNO         = -1;
var Z_STREAM_ERROR$1 = -2;
var Z_DATA_ERROR$1 = -3;
var Z_MEM_ERROR = -4;
var Z_BUF_ERROR$1 = -5;
//var Z_VERSION_ERROR = -6;

/* The deflate compression method */
var Z_DEFLATED$2 = 8;

/* STATES ====================================================================*/
/* ===========================================================================*/

var HEAD = 1; /* i: waiting for magic header */
var FLAGS = 2; /* i: waiting for method and flags (gzip) */
var TIME = 3; /* i: waiting for modification time (gzip) */
var OS = 4; /* i: waiting for extra flags and operating system (gzip) */
var EXLEN = 5; /* i: waiting for extra length (gzip) */
var EXTRA = 6; /* i: waiting for extra bytes (gzip) */
var NAME = 7; /* i: waiting for end of file name (gzip) */
var COMMENT = 8; /* i: waiting for end of comment (gzip) */
var HCRC = 9; /* i: waiting for header crc (gzip) */
var DICTID = 10; /* i: waiting for dictionary check value */
var DICT = 11; /* waiting for inflateSetDictionary() call */
var TYPE = 12; /* i: waiting for type bits, including last-flag bit */
var TYPEDO = 13; /* i: same, but skip check to exit inflate on new block */
var STORED = 14; /* i: waiting for stored size (length and complement) */
var COPY_ = 15; /* i/o: same as COPY below, but only first time in */
var COPY = 16; /* i/o: waiting for input or output to copy stored block */
var TABLE = 17; /* i: waiting for dynamic block table lengths */
var LENLENS = 18; /* i: waiting for code length code lengths */
var CODELENS = 19; /* i: waiting for length/lit and distance code lengths */
var LEN_ = 20; /* i: same as LEN below, but only first time in */
var LEN = 21; /* i: waiting for length/lit/eob code */
var LENEXT = 22; /* i: waiting for length extra bits */
var DIST = 23; /* i: waiting for distance code */
var DISTEXT = 24; /* i: waiting for distance extra bits */
var MATCH = 25; /* o: waiting for output space to copy string */
var LIT = 26; /* o: waiting for output space to write literal */
var CHECK = 27; /* i: waiting for 32-bit check value */
var LENGTH = 28; /* i: waiting for 32-bit length (gzip) */
var DONE = 29; /* finished check, done -- remain here until reset */
var BAD = 30; /* got a data error -- remain here until reset */
var MEM = 31; /* got an inflate() memory error -- remain here until reset */
var SYNC = 32; /* looking for synchronization bytes to restart inflate() */

/* ===========================================================================*/

var ENOUGH_LENS = 852;
var ENOUGH_DISTS = 592;
//var ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);

var MAX_WBITS$1 = 15;
/* 32K LZ77 window */
var DEF_WBITS = MAX_WBITS$1;

function zswap32(q) {
  return (q >>> 24 & 0xff) + (q >>> 8 & 0xff00) + ((q & 0xff00) << 8) + ((q & 0xff) << 24);
}

function InflateState() {
  this.mode = 0; /* current inflate mode */
  this.last = false; /* true if processing last block */
  this.wrap = 0; /* bit 0 true for zlib, bit 1 true for gzip */
  this.havedict = false; /* true if dictionary provided */
  this.flags = 0; /* gzip header method and flags (0 if zlib) */
  this.dmax = 0; /* zlib header max distance (INFLATE_STRICT) */
  this.check = 0; /* protected copy of check value */
  this.total = 0; /* protected copy of output count */
  // TODO: may be {}
  this.head = null; /* where to save gzip header information */

  /* sliding window */
  this.wbits = 0; /* log base 2 of requested window size */
  this.wsize = 0; /* window size or zero if not using window */
  this.whave = 0; /* valid bytes in the window */
  this.wnext = 0; /* window write index */
  this.window = null; /* allocated sliding window, if needed */

  /* bit accumulator */
  this.hold = 0; /* input bit accumulator */
  this.bits = 0; /* number of bits in "in" */

  /* for string and stored block copying */
  this.length = 0; /* literal or length of data to copy */
  this.offset = 0; /* distance back to copy string from */

  /* for table and code decoding */
  this.extra = 0; /* extra bits needed */

  /* fixed and dynamic code tables */
  this.lencode = null; /* starting table for length/literal codes */
  this.distcode = null; /* starting table for distance codes */
  this.lenbits = 0; /* index bits for lencode */
  this.distbits = 0; /* index bits for distcode */

  /* dynamic table building */
  this.ncode = 0; /* number of code length code lengths */
  this.nlen = 0; /* number of length code lengths */
  this.ndist = 0; /* number of distance code lengths */
  this.have = 0; /* number of code lengths in lens[] */
  this.next = null; /* next available space in codes[] */

  this.lens = new common.Buf16(320); /* temporary storage for code lengths */
  this.work = new common.Buf16(288); /* work area for code table building */

  /*
   because we don't have pointers in js, we use lencode and distcode directly
   as buffers so we don't need codes
  */
  //this.codes = new utils.Buf32(ENOUGH);       /* space for code tables */
  this.lendyn = null; /* dynamic table for length/literal codes (JS specific) */
  this.distdyn = null; /* dynamic table for distance codes (JS specific) */
  this.sane = 0; /* if false, allow invalid distance too far */
  this.back = 0; /* bits back of last unprocessed length/lit */
  this.was = 0; /* initial length of match */
}

function inflateResetKeep(strm) {
  var state;

  if (!strm || !strm.state) {
    return Z_STREAM_ERROR$1;
  }
  state = strm.state;
  strm.total_in = strm.total_out = state.total = 0;
  strm.msg = ''; /*Z_NULL*/
  if (state.wrap) {
    /* to support ill-conceived Java test suite */
    strm.adler = state.wrap & 1;
  }
  state.mode = HEAD;
  state.last = 0;
  state.havedict = 0;
  state.dmax = 32768;
  state.head = null /*Z_NULL*/;
  state.hold = 0;
  state.bits = 0;
  //state.lencode = state.distcode = state.next = state.codes;
  state.lencode = state.lendyn = new common.Buf32(ENOUGH_LENS);
  state.distcode = state.distdyn = new common.Buf32(ENOUGH_DISTS);

  state.sane = 1;
  state.back = -1;
  //Tracev((stderr, "inflate: reset\n"));
  return Z_OK$2;
}

function inflateReset(strm) {
  var state;

  if (!strm || !strm.state) {
    return Z_STREAM_ERROR$1;
  }
  state = strm.state;
  state.wsize = 0;
  state.whave = 0;
  state.wnext = 0;
  return inflateResetKeep(strm);
}

function inflateReset2(strm, windowBits) {
  var wrap;
  var state;

  /* get the state */
  if (!strm || !strm.state) {
    return Z_STREAM_ERROR$1;
  }
  state = strm.state;

  /* extract wrap request from windowBits parameter */
  if (windowBits < 0) {
    wrap = 0;
    windowBits = -windowBits;
  } else {
    wrap = (windowBits >> 4) + 1;
    if (windowBits < 48) {
      windowBits &= 15;
    }
  }

  /* set number of window bits, free window if different */
  if (windowBits && (windowBits < 8 || windowBits > 15)) {
    return Z_STREAM_ERROR$1;
  }
  if (state.window !== null && state.wbits !== windowBits) {
    state.window = null;
  }

  /* update state and reset the rest of it */
  state.wrap = wrap;
  state.wbits = windowBits;
  return inflateReset(strm);
}

function inflateInit2(strm, windowBits) {
  var ret;
  var state;

  if (!strm) {
    return Z_STREAM_ERROR$1;
  }
  //strm.msg = Z_NULL;                 /* in case we return an error */

  state = new InflateState();

  //if (state === Z_NULL) return Z_MEM_ERROR;
  //Tracev((stderr, "inflate: allocated\n"));
  strm.state = state;
  state.window = null /*Z_NULL*/;
  ret = inflateReset2(strm, windowBits);
  if (ret !== Z_OK$2) {
    strm.state = null /*Z_NULL*/;
  }
  return ret;
}

function inflateInit(strm) {
  return inflateInit2(strm, DEF_WBITS);
}

/*
 Return state with length and distance decoding tables and index sizes set to
 fixed code decoding.  Normally this returns fixed tables from inffixed.h.
 If BUILDFIXED is defined, then instead this routine builds the tables the
 first time it's called, and returns those tables the first time and
 thereafter.  This reduces the size of the code by about 2K bytes, in
 exchange for a little execution time.  However, BUILDFIXED should not be
 used for threaded applications, since the rewriting of the tables and virgin
 may not be thread-safe.
 */
var virgin = true;

var lenfix;
var distfix; // We have no pointers in JS, so keep tables separate

function fixedtables(state) {
  /* build fixed huffman tables if first call (may not be thread safe) */
  if (virgin) {
    var sym;

    lenfix = new common.Buf32(512);
    distfix = new common.Buf32(32);

    /* literal/length table */
    sym = 0;
    while (sym < 144) {
      state.lens[sym++] = 8;
    }
    while (sym < 256) {
      state.lens[sym++] = 9;
    }
    while (sym < 280) {
      state.lens[sym++] = 7;
    }
    while (sym < 288) {
      state.lens[sym++] = 8;
    }

    inftrees(LENS, state.lens, 0, 288, lenfix, 0, state.work, { bits: 9 });

    /* distance table */
    sym = 0;
    while (sym < 32) {
      state.lens[sym++] = 5;
    }

    inftrees(DISTS, state.lens, 0, 32, distfix, 0, state.work, { bits: 5 });

    /* do this just once */
    virgin = false;
  }

  state.lencode = lenfix;
  state.lenbits = 9;
  state.distcode = distfix;
  state.distbits = 5;
}

/*
 Update the window with the last wsize (normally 32K) bytes written before
 returning.  If window does not exist yet, create it.  This is only called
 when a window is already in use, or when output has been written during this
 inflate call, but the end of the deflate stream has not been reached yet.
 It is also called to create a window for dictionary data when a dictionary
 is loaded.

 Providing output buffers larger than 32K to inflate() should provide a speed
 advantage, since only the last 32K of output is copied to the sliding window
 upon return from inflate(), and since all distances after the first 32K of
 output will fall in the output data, making match copies simpler and faster.
 The advantage may be dependent on the size of the processor's data caches.
 */
function updatewindow(strm, src, end, copy) {
  var dist;
  var state = strm.state;

  /* if it hasn't been done already, allocate space for the window */
  if (state.window === null) {
    state.wsize = 1 << state.wbits;
    state.wnext = 0;
    state.whave = 0;

    state.window = new common.Buf8(state.wsize);
  }

  /* copy state->wsize or less output bytes into the circular window */
  if (copy >= state.wsize) {
    common.arraySet(state.window, src, end - state.wsize, state.wsize, 0);
    state.wnext = 0;
    state.whave = state.wsize;
  } else {
    dist = state.wsize - state.wnext;
    if (dist > copy) {
      dist = copy;
    }
    //zmemcpy(state->window + state->wnext, end - copy, dist);
    common.arraySet(state.window, src, end - copy, dist, state.wnext);
    copy -= dist;
    if (copy) {
      //zmemcpy(state->window, end - copy, copy);
      common.arraySet(state.window, src, end - copy, copy, 0);
      state.wnext = copy;
      state.whave = state.wsize;
    } else {
      state.wnext += dist;
      if (state.wnext === state.wsize) {
        state.wnext = 0;
      }
      if (state.whave < state.wsize) {
        state.whave += dist;
      }
    }
  }
  return 0;
}

function inflate$1(strm, flush) {
  var state;
  var input, output; // input/output buffers
  var next; /* next input INDEX */
  var put; /* next output INDEX */
  var have, left; /* available input and output */
  var hold; /* bit buffer */
  var bits; /* bits in bit buffer */
  var _in, _out; /* save starting available input and output */
  var copy; /* number of stored or match bytes to copy */
  var from; /* where to copy match bytes from */
  var from_source;
  var here = 0; /* current decoding table entry */
  var here_bits, here_op, here_val; // paked "here" denormalized (JS specific)
  //var last;                   /* parent table entry */
  var last_bits, last_op, last_val; // paked "last" denormalized (JS specific)
  var len; /* length to copy for repeats, bits to drop */
  var ret; /* return code */
  var hbuf = new common.Buf8(4); /* buffer for gzip header crc calculation */
  var opts;

  var n; // temporary var for NEED_BITS

  var order = /* permutation of code lengths */
  [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];

  if (!strm || !strm.state || !strm.output || !strm.input && strm.avail_in !== 0) {
    return Z_STREAM_ERROR$1;
  }

  state = strm.state;
  if (state.mode === TYPE) {
    state.mode = TYPEDO;
  } /* skip check */

  //--- LOAD() ---
  put = strm.next_out;
  output = strm.output;
  left = strm.avail_out;
  next = strm.next_in;
  input = strm.input;
  have = strm.avail_in;
  hold = state.hold;
  bits = state.bits;
  //---

  _in = have;
  _out = left;
  ret = Z_OK$2;

  inf_leave: // goto emulation
  for (;;) {
    switch (state.mode) {
      case HEAD:
        if (state.wrap === 0) {
          state.mode = TYPEDO;
          break;
        }
        //=== NEEDBITS(16);
        while (bits < 16) {
          if (have === 0) {
            break inf_leave;
          }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if (state.wrap & 2 && hold === 0x8b1f) {
          /* gzip header */
          state.check = 0 /*crc32(0L, Z_NULL, 0)*/;
          //=== CRC2(state.check, hold);
          hbuf[0] = hold & 0xff;
          hbuf[1] = hold >>> 8 & 0xff;
          state.check = crc32_1(state.check, hbuf, 2, 0);
          //===//

          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
          state.mode = FLAGS;
          break;
        }
        state.flags = 0; /* expect zlib header */
        if (state.head) {
          state.head.done = false;
        }
        if (!(state.wrap & 1) || /* check if zlib header allowed */
        (((hold & 0xff) << /*BITS(8)*/8) + (hold >> 8)) % 31) {
          strm.msg = 'incorrect header check';
          state.mode = BAD;
          break;
        }
        if ((hold & 0x0f) !== /*BITS(4)*/Z_DEFLATED$2) {
          strm.msg = 'unknown compression method';
          state.mode = BAD;
          break;
        }
        //--- DROPBITS(4) ---//
        hold >>>= 4;
        bits -= 4;
        //---//
        len = (hold & 0x0f) + /*BITS(4)*/8;
        if (state.wbits === 0) {
          state.wbits = len;
        } else if (len > state.wbits) {
          strm.msg = 'invalid window size';
          state.mode = BAD;
          break;
        }
        state.dmax = 1 << len;
        //Tracev((stderr, "inflate:   zlib header ok\n"));
        strm.adler = state.check = 1 /*adler32(0L, Z_NULL, 0)*/;
        state.mode = hold & 0x200 ? DICTID : TYPE;
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        break;
      case FLAGS:
        //=== NEEDBITS(16); */
        while (bits < 16) {
          if (have === 0) {
            break inf_leave;
          }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.flags = hold;
        if ((state.flags & 0xff) !== Z_DEFLATED$2) {
          strm.msg = 'unknown compression method';
          state.mode = BAD;
          break;
        }
        if (state.flags & 0xe000) {
          strm.msg = 'unknown header flags set';
          state.mode = BAD;
          break;
        }
        if (state.head) {
          state.head.text = hold >> 8 & 1;
        }
        if (state.flags & 0x0200) {
          //=== CRC2(state.check, hold);
          hbuf[0] = hold & 0xff;
          hbuf[1] = hold >>> 8 & 0xff;
          state.check = crc32_1(state.check, hbuf, 2, 0);
          //===//
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = TIME;
      /* falls through */
      case TIME:
        //=== NEEDBITS(32); */
        while (bits < 32) {
          if (have === 0) {
            break inf_leave;
          }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if (state.head) {
          state.head.time = hold;
        }
        if (state.flags & 0x0200) {
          //=== CRC4(state.check, hold)
          hbuf[0] = hold & 0xff;
          hbuf[1] = hold >>> 8 & 0xff;
          hbuf[2] = hold >>> 16 & 0xff;
          hbuf[3] = hold >>> 24 & 0xff;
          state.check = crc32_1(state.check, hbuf, 4, 0);
          //===
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = OS;
      /* falls through */
      case OS:
        //=== NEEDBITS(16); */
        while (bits < 16) {
          if (have === 0) {
            break inf_leave;
          }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if (state.head) {
          state.head.xflags = hold & 0xff;
          state.head.os = hold >> 8;
        }
        if (state.flags & 0x0200) {
          //=== CRC2(state.check, hold);
          hbuf[0] = hold & 0xff;
          hbuf[1] = hold >>> 8 & 0xff;
          state.check = crc32_1(state.check, hbuf, 2, 0);
          //===//
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = EXLEN;
      /* falls through */
      case EXLEN:
        if (state.flags & 0x0400) {
          //=== NEEDBITS(16); */
          while (bits < 16) {
            if (have === 0) {
              break inf_leave;
            }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.length = hold;
          if (state.head) {
            state.head.extra_len = hold;
          }
          if (state.flags & 0x0200) {
            //=== CRC2(state.check, hold);
            hbuf[0] = hold & 0xff;
            hbuf[1] = hold >>> 8 & 0xff;
            state.check = crc32_1(state.check, hbuf, 2, 0);
            //===//
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
        } else if (state.head) {
          state.head.extra = null /*Z_NULL*/;
        }
        state.mode = EXTRA;
      /* falls through */
      case EXTRA:
        if (state.flags & 0x0400) {
          copy = state.length;
          if (copy > have) {
            copy = have;
          }
          if (copy) {
            if (state.head) {
              len = state.head.extra_len - state.length;
              if (!state.head.extra) {
                // Use untyped array for more conveniend processing later
                state.head.extra = new Array(state.head.extra_len);
              }
              common.arraySet(state.head.extra, input, next,
              // extra field is limited to 65536 bytes
              // - no need for additional size check
              copy,
              /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/
              len);
              //zmemcpy(state.head.extra + len, next,
              //        len + copy > state.head.extra_max ?
              //        state.head.extra_max - len : copy);
            }
            if (state.flags & 0x0200) {
              state.check = crc32_1(state.check, input, copy, next);
            }
            have -= copy;
            next += copy;
            state.length -= copy;
          }
          if (state.length) {
            break inf_leave;
          }
        }
        state.length = 0;
        state.mode = NAME;
      /* falls through */
      case NAME:
        if (state.flags & 0x0800) {
          if (have === 0) {
            break inf_leave;
          }
          copy = 0;
          do {
            // TODO: 2 or 1 bytes?
            len = input[next + copy++];
            /* use constant limit because in js we should not preallocate memory */
            if (state.head && len && state.length < 65536 /*state.head.name_max*/) {
              state.head.name += String.fromCharCode(len);
            }
          } while (len && copy < have);

          if (state.flags & 0x0200) {
            state.check = crc32_1(state.check, input, copy, next);
          }
          have -= copy;
          next += copy;
          if (len) {
            break inf_leave;
          }
        } else if (state.head) {
          state.head.name = null;
        }
        state.length = 0;
        state.mode = COMMENT;
      /* falls through */
      case COMMENT:
        if (state.flags & 0x1000) {
          if (have === 0) {
            break inf_leave;
          }
          copy = 0;
          do {
            len = input[next + copy++];
            /* use constant limit because in js we should not preallocate memory */
            if (state.head && len && state.length < 65536 /*state.head.comm_max*/) {
              state.head.comment += String.fromCharCode(len);
            }
          } while (len && copy < have);
          if (state.flags & 0x0200) {
            state.check = crc32_1(state.check, input, copy, next);
          }
          have -= copy;
          next += copy;
          if (len) {
            break inf_leave;
          }
        } else if (state.head) {
          state.head.comment = null;
        }
        state.mode = HCRC;
      /* falls through */
      case HCRC:
        if (state.flags & 0x0200) {
          //=== NEEDBITS(16); */
          while (bits < 16) {
            if (have === 0) {
              break inf_leave;
            }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          if (hold !== (state.check & 0xffff)) {
            strm.msg = 'header crc mismatch';
            state.mode = BAD;
            break;
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
        }
        if (state.head) {
          state.head.hcrc = state.flags >> 9 & 1;
          state.head.done = true;
        }
        strm.adler = state.check = 0;
        state.mode = TYPE;
        break;
      case DICTID:
        //=== NEEDBITS(32); */
        while (bits < 32) {
          if (have === 0) {
            break inf_leave;
          }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        strm.adler = state.check = zswap32(hold);
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = DICT;
      /* falls through */
      case DICT:
        if (state.havedict === 0) {
          //--- RESTORE() ---
          strm.next_out = put;
          strm.avail_out = left;
          strm.next_in = next;
          strm.avail_in = have;
          state.hold = hold;
          state.bits = bits;
          //---
          return Z_NEED_DICT;
        }
        strm.adler = state.check = 1 /*adler32(0L, Z_NULL, 0)*/;
        state.mode = TYPE;
      /* falls through */
      case TYPE:
        if (flush === Z_BLOCK$1 || flush === Z_TREES) {
          break inf_leave;
        }
      /* falls through */
      case TYPEDO:
        if (state.last) {
          //--- BYTEBITS() ---//
          hold >>>= bits & 7;
          bits -= bits & 7;
          //---//
          state.mode = CHECK;
          break;
        }
        //=== NEEDBITS(3); */
        while (bits < 3) {
          if (have === 0) {
            break inf_leave;
          }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.last = hold & 0x01 /*BITS(1)*/;
        //--- DROPBITS(1) ---//
        hold >>>= 1;
        bits -= 1;
        //---//

        switch (hold & 0x03) {/*BITS(2)*/case 0:
            /* stored block */
            //Tracev((stderr, "inflate:     stored block%s\n",
            //        state.last ? " (last)" : ""));
            state.mode = STORED;
            break;
          case 1:
            /* fixed block */
            fixedtables(state);
            //Tracev((stderr, "inflate:     fixed codes block%s\n",
            //        state.last ? " (last)" : ""));
            state.mode = LEN_; /* decode codes */
            if (flush === Z_TREES) {
              //--- DROPBITS(2) ---//
              hold >>>= 2;
              bits -= 2;
              //---//
              break inf_leave;
            }
            break;
          case 2:
            /* dynamic block */
            //Tracev((stderr, "inflate:     dynamic codes block%s\n",
            //        state.last ? " (last)" : ""));
            state.mode = TABLE;
            break;
          case 3:
            strm.msg = 'invalid block type';
            state.mode = BAD;
        }
        //--- DROPBITS(2) ---//
        hold >>>= 2;
        bits -= 2;
        //---//
        break;
      case STORED:
        //--- BYTEBITS() ---// /* go to byte boundary */
        hold >>>= bits & 7;
        bits -= bits & 7;
        //---//
        //=== NEEDBITS(32); */
        while (bits < 32) {
          if (have === 0) {
            break inf_leave;
          }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if ((hold & 0xffff) !== (hold >>> 16 ^ 0xffff)) {
          strm.msg = 'invalid stored block lengths';
          state.mode = BAD;
          break;
        }
        state.length = hold & 0xffff;
        //Tracev((stderr, "inflate:       stored length %u\n",
        //        state.length));
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = COPY_;
        if (flush === Z_TREES) {
          break inf_leave;
        }
      /* falls through */
      case COPY_:
        state.mode = COPY;
      /* falls through */
      case COPY:
        copy = state.length;
        if (copy) {
          if (copy > have) {
            copy = have;
          }
          if (copy > left) {
            copy = left;
          }
          if (copy === 0) {
            break inf_leave;
          }
          //--- zmemcpy(put, next, copy); ---
          common.arraySet(output, input, next, copy, put);
          //---//
          have -= copy;
          next += copy;
          left -= copy;
          put += copy;
          state.length -= copy;
          break;
        }
        //Tracev((stderr, "inflate:       stored end\n"));
        state.mode = TYPE;
        break;
      case TABLE:
        //=== NEEDBITS(14); */
        while (bits < 14) {
          if (have === 0) {
            break inf_leave;
          }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.nlen = (hold & 0x1f) + /*BITS(5)*/257;
        //--- DROPBITS(5) ---//
        hold >>>= 5;
        bits -= 5;
        //---//
        state.ndist = (hold & 0x1f) + /*BITS(5)*/1;
        //--- DROPBITS(5) ---//
        hold >>>= 5;
        bits -= 5;
        //---//
        state.ncode = (hold & 0x0f) + /*BITS(4)*/4;
        //--- DROPBITS(4) ---//
        hold >>>= 4;
        bits -= 4;
        //---//
        //#ifndef PKZIP_BUG_WORKAROUND
        if (state.nlen > 286 || state.ndist > 30) {
          strm.msg = 'too many length or distance symbols';
          state.mode = BAD;
          break;
        }
        //#endif
        //Tracev((stderr, "inflate:       table sizes ok\n"));
        state.have = 0;
        state.mode = LENLENS;
      /* falls through */
      case LENLENS:
        while (state.have < state.ncode) {
          //=== NEEDBITS(3);
          while (bits < 3) {
            if (have === 0) {
              break inf_leave;
            }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.lens[order[state.have++]] = hold & 0x07; //BITS(3);
          //--- DROPBITS(3) ---//
          hold >>>= 3;
          bits -= 3;
          //---//
        }
        while (state.have < 19) {
          state.lens[order[state.have++]] = 0;
        }
        // We have separate tables & no pointers. 2 commented lines below not needed.
        //state.next = state.codes;
        //state.lencode = state.next;
        // Switch to use dynamic table
        state.lencode = state.lendyn;
        state.lenbits = 7;

        opts = { bits: state.lenbits };
        ret = inftrees(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);
        state.lenbits = opts.bits;

        if (ret) {
          strm.msg = 'invalid code lengths set';
          state.mode = BAD;
          break;
        }
        //Tracev((stderr, "inflate:       code lengths ok\n"));
        state.have = 0;
        state.mode = CODELENS;
      /* falls through */
      case CODELENS:
        while (state.have < state.nlen + state.ndist) {
          for (;;) {
            here = state.lencode[hold & (1 << state.lenbits) - 1]; /*BITS(state.lenbits)*/
            here_bits = here >>> 24;
            here_op = here >>> 16 & 0xff;
            here_val = here & 0xffff;

            if (here_bits <= bits) {
              break;
            }
            //--- PULLBYTE() ---//
            if (have === 0) {
              break inf_leave;
            }
            have--;
            hold += input[next++] << bits;
            bits += 8;
            //---//
          }
          if (here_val < 16) {
            //--- DROPBITS(here.bits) ---//
            hold >>>= here_bits;
            bits -= here_bits;
            //---//
            state.lens[state.have++] = here_val;
          } else {
            if (here_val === 16) {
              //=== NEEDBITS(here.bits + 2);
              n = here_bits + 2;
              while (bits < n) {
                if (have === 0) {
                  break inf_leave;
                }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              //===//
              //--- DROPBITS(here.bits) ---//
              hold >>>= here_bits;
              bits -= here_bits;
              //---//
              if (state.have === 0) {
                strm.msg = 'invalid bit length repeat';
                state.mode = BAD;
                break;
              }
              len = state.lens[state.have - 1];
              copy = 3 + (hold & 0x03); //BITS(2);
              //--- DROPBITS(2) ---//
              hold >>>= 2;
              bits -= 2;
              //---//
            } else if (here_val === 17) {
              //=== NEEDBITS(here.bits + 3);
              n = here_bits + 3;
              while (bits < n) {
                if (have === 0) {
                  break inf_leave;
                }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              //===//
              //--- DROPBITS(here.bits) ---//
              hold >>>= here_bits;
              bits -= here_bits;
              //---//
              len = 0;
              copy = 3 + (hold & 0x07); //BITS(3);
              //--- DROPBITS(3) ---//
              hold >>>= 3;
              bits -= 3;
              //---//
            } else {
              //=== NEEDBITS(here.bits + 7);
              n = here_bits + 7;
              while (bits < n) {
                if (have === 0) {
                  break inf_leave;
                }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              //===//
              //--- DROPBITS(here.bits) ---//
              hold >>>= here_bits;
              bits -= here_bits;
              //---//
              len = 0;
              copy = 11 + (hold & 0x7f); //BITS(7);
              //--- DROPBITS(7) ---//
              hold >>>= 7;
              bits -= 7;
              //---//
            }
            if (state.have + copy > state.nlen + state.ndist) {
              strm.msg = 'invalid bit length repeat';
              state.mode = BAD;
              break;
            }
            while (copy--) {
              state.lens[state.have++] = len;
            }
          }
        }

        /* handle error breaks in while */
        if (state.mode === BAD) {
          break;
        }

        /* check for end-of-block code (better have one) */
        if (state.lens[256] === 0) {
          strm.msg = 'invalid code -- missing end-of-block';
          state.mode = BAD;
          break;
        }

        /* build code tables -- note: do not change the lenbits or distbits
           values here (9 and 6) without reading the comments in inftrees.h
           concerning the ENOUGH constants, which depend on those values */
        state.lenbits = 9;

        opts = { bits: state.lenbits };
        ret = inftrees(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);
        // We have separate tables & no pointers. 2 commented lines below not needed.
        // state.next_index = opts.table_index;
        state.lenbits = opts.bits;
        // state.lencode = state.next;

        if (ret) {
          strm.msg = 'invalid literal/lengths set';
          state.mode = BAD;
          break;
        }

        state.distbits = 6;
        //state.distcode.copy(state.codes);
        // Switch to use dynamic table
        state.distcode = state.distdyn;
        opts = { bits: state.distbits };
        ret = inftrees(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);
        // We have separate tables & no pointers. 2 commented lines below not needed.
        // state.next_index = opts.table_index;
        state.distbits = opts.bits;
        // state.distcode = state.next;

        if (ret) {
          strm.msg = 'invalid distances set';
          state.mode = BAD;
          break;
        }
        //Tracev((stderr, 'inflate:       codes ok\n'));
        state.mode = LEN_;
        if (flush === Z_TREES) {
          break inf_leave;
        }
      /* falls through */
      case LEN_:
        state.mode = LEN;
      /* falls through */
      case LEN:
        if (have >= 6 && left >= 258) {
          //--- RESTORE() ---
          strm.next_out = put;
          strm.avail_out = left;
          strm.next_in = next;
          strm.avail_in = have;
          state.hold = hold;
          state.bits = bits;
          //---
          inffast(strm, _out);
          //--- LOAD() ---
          put = strm.next_out;
          output = strm.output;
          left = strm.avail_out;
          next = strm.next_in;
          input = strm.input;
          have = strm.avail_in;
          hold = state.hold;
          bits = state.bits;
          //---

          if (state.mode === TYPE) {
            state.back = -1;
          }
          break;
        }
        state.back = 0;
        for (;;) {
          here = state.lencode[hold & (1 << state.lenbits) - 1]; /*BITS(state.lenbits)*/
          here_bits = here >>> 24;
          here_op = here >>> 16 & 0xff;
          here_val = here & 0xffff;

          if (here_bits <= bits) {
            break;
          }
          //--- PULLBYTE() ---//
          if (have === 0) {
            break inf_leave;
          }
          have--;
          hold += input[next++] << bits;
          bits += 8;
          //---//
        }
        if (here_op && (here_op & 0xf0) === 0) {
          last_bits = here_bits;
          last_op = here_op;
          last_val = here_val;
          for (;;) {
            here = state.lencode[last_val + ((hold & (1 << last_bits + last_op) - 1) >> /*BITS(last.bits + last.op)*/last_bits)];
            here_bits = here >>> 24;
            here_op = here >>> 16 & 0xff;
            here_val = here & 0xffff;

            if (last_bits + here_bits <= bits) {
              break;
            }
            //--- PULLBYTE() ---//
            if (have === 0) {
              break inf_leave;
            }
            have--;
            hold += input[next++] << bits;
            bits += 8;
            //---//
          }
          //--- DROPBITS(last.bits) ---//
          hold >>>= last_bits;
          bits -= last_bits;
          //---//
          state.back += last_bits;
        }
        //--- DROPBITS(here.bits) ---//
        hold >>>= here_bits;
        bits -= here_bits;
        //---//
        state.back += here_bits;
        state.length = here_val;
        if (here_op === 0) {
          //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
          //        "inflate:         literal '%c'\n" :
          //        "inflate:         literal 0x%02x\n", here.val));
          state.mode = LIT;
          break;
        }
        if (here_op & 32) {
          //Tracevv((stderr, "inflate:         end of block\n"));
          state.back = -1;
          state.mode = TYPE;
          break;
        }
        if (here_op & 64) {
          strm.msg = 'invalid literal/length code';
          state.mode = BAD;
          break;
        }
        state.extra = here_op & 15;
        state.mode = LENEXT;
      /* falls through */
      case LENEXT:
        if (state.extra) {
          //=== NEEDBITS(state.extra);
          n = state.extra;
          while (bits < n) {
            if (have === 0) {
              break inf_leave;
            }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.length += hold & (1 << state.extra) - 1 /*BITS(state.extra)*/;
          //--- DROPBITS(state.extra) ---//
          hold >>>= state.extra;
          bits -= state.extra;
          //---//
          state.back += state.extra;
        }
        //Tracevv((stderr, "inflate:         length %u\n", state.length));
        state.was = state.length;
        state.mode = DIST;
      /* falls through */
      case DIST:
        for (;;) {
          here = state.distcode[hold & (1 << state.distbits) - 1]; /*BITS(state.distbits)*/
          here_bits = here >>> 24;
          here_op = here >>> 16 & 0xff;
          here_val = here & 0xffff;

          if (here_bits <= bits) {
            break;
          }
          //--- PULLBYTE() ---//
          if (have === 0) {
            break inf_leave;
          }
          have--;
          hold += input[next++] << bits;
          bits += 8;
          //---//
        }
        if ((here_op & 0xf0) === 0) {
          last_bits = here_bits;
          last_op = here_op;
          last_val = here_val;
          for (;;) {
            here = state.distcode[last_val + ((hold & (1 << last_bits + last_op) - 1) >> /*BITS(last.bits + last.op)*/last_bits)];
            here_bits = here >>> 24;
            here_op = here >>> 16 & 0xff;
            here_val = here & 0xffff;

            if (last_bits + here_bits <= bits) {
              break;
            }
            //--- PULLBYTE() ---//
            if (have === 0) {
              break inf_leave;
            }
            have--;
            hold += input[next++] << bits;
            bits += 8;
            //---//
          }
          //--- DROPBITS(last.bits) ---//
          hold >>>= last_bits;
          bits -= last_bits;
          //---//
          state.back += last_bits;
        }
        //--- DROPBITS(here.bits) ---//
        hold >>>= here_bits;
        bits -= here_bits;
        //---//
        state.back += here_bits;
        if (here_op & 64) {
          strm.msg = 'invalid distance code';
          state.mode = BAD;
          break;
        }
        state.offset = here_val;
        state.extra = here_op & 15;
        state.mode = DISTEXT;
      /* falls through */
      case DISTEXT:
        if (state.extra) {
          //=== NEEDBITS(state.extra);
          n = state.extra;
          while (bits < n) {
            if (have === 0) {
              break inf_leave;
            }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.offset += hold & (1 << state.extra) - 1 /*BITS(state.extra)*/;
          //--- DROPBITS(state.extra) ---//
          hold >>>= state.extra;
          bits -= state.extra;
          //---//
          state.back += state.extra;
        }
        //#ifdef INFLATE_STRICT
        if (state.offset > state.dmax) {
          strm.msg = 'invalid distance too far back';
          state.mode = BAD;
          break;
        }
        //#endif
        //Tracevv((stderr, "inflate:         distance %u\n", state.offset));
        state.mode = MATCH;
      /* falls through */
      case MATCH:
        if (left === 0) {
          break inf_leave;
        }
        copy = _out - left;
        if (state.offset > copy) {
          /* copy from window */
          copy = state.offset - copy;
          if (copy > state.whave) {
            if (state.sane) {
              strm.msg = 'invalid distance too far back';
              state.mode = BAD;
              break;
            }
            // (!) This block is disabled in zlib defailts,
            // don't enable it for binary compatibility
            //#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
            //          Trace((stderr, "inflate.c too far\n"));
            //          copy -= state.whave;
            //          if (copy > state.length) { copy = state.length; }
            //          if (copy > left) { copy = left; }
            //          left -= copy;
            //          state.length -= copy;
            //          do {
            //            output[put++] = 0;
            //          } while (--copy);
            //          if (state.length === 0) { state.mode = LEN; }
            //          break;
            //#endif
          }
          if (copy > state.wnext) {
            copy -= state.wnext;
            from = state.wsize - copy;
          } else {
            from = state.wnext - copy;
          }
          if (copy > state.length) {
            copy = state.length;
          }
          from_source = state.window;
        } else {
          /* copy from output */
          from_source = output;
          from = put - state.offset;
          copy = state.length;
        }
        if (copy > left) {
          copy = left;
        }
        left -= copy;
        state.length -= copy;
        do {
          output[put++] = from_source[from++];
        } while (--copy);
        if (state.length === 0) {
          state.mode = LEN;
        }
        break;
      case LIT:
        if (left === 0) {
          break inf_leave;
        }
        output[put++] = state.length;
        left--;
        state.mode = LEN;
        break;
      case CHECK:
        if (state.wrap) {
          //=== NEEDBITS(32);
          while (bits < 32) {
            if (have === 0) {
              break inf_leave;
            }
            have--;
            // Use '|' insdead of '+' to make sure that result is signed
            hold |= input[next++] << bits;
            bits += 8;
          }
          //===//
          _out -= left;
          strm.total_out += _out;
          state.total += _out;
          if (_out) {
            strm.adler = state.check =
            /*UPDATE(state.check, put - _out, _out);*/
            state.flags ? crc32_1(state.check, output, _out, put - _out) : adler32_1(state.check, output, _out, put - _out);
          }
          _out = left;
          // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too
          if ((state.flags ? hold : zswap32(hold)) !== state.check) {
            strm.msg = 'incorrect data check';
            state.mode = BAD;
            break;
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
          //Tracev((stderr, "inflate:   check matches trailer\n"));
        }
        state.mode = LENGTH;
      /* falls through */
      case LENGTH:
        if (state.wrap && state.flags) {
          //=== NEEDBITS(32);
          while (bits < 32) {
            if (have === 0) {
              break inf_leave;
            }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          if (hold !== (state.total & 0xffffffff)) {
            strm.msg = 'incorrect length check';
            state.mode = BAD;
            break;
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
          //Tracev((stderr, "inflate:   length matches trailer\n"));
        }
        state.mode = DONE;
      /* falls through */
      case DONE:
        ret = Z_STREAM_END$2;
        break inf_leave;
      case BAD:
        ret = Z_DATA_ERROR$1;
        break inf_leave;
      case MEM:
        return Z_MEM_ERROR;
      case SYNC:
      /* falls through */
      default:
        return Z_STREAM_ERROR$1;
    }
  }

  // inf_leave <- here is real place for "goto inf_leave", emulated via "break inf_leave"

  /*
     Return from inflate(), updating the total counts and the check value.
     If there was no progress during the inflate() call, return a buffer
     error.  Call updatewindow() to create and/or update the window state.
     Note: a memory error from inflate() is non-recoverable.
   */

  //--- RESTORE() ---
  strm.next_out = put;
  strm.avail_out = left;
  strm.next_in = next;
  strm.avail_in = have;
  state.hold = hold;
  state.bits = bits;
  //---

  if (state.wsize || _out !== strm.avail_out && state.mode < BAD && (state.mode < CHECK || flush !== Z_FINISH$2)) {
    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) {
      state.mode = MEM;
      return Z_MEM_ERROR;
    }
  }
  _in -= strm.avail_in;
  _out -= strm.avail_out;
  strm.total_in += _in;
  strm.total_out += _out;
  state.total += _out;
  if (state.wrap && _out) {
    strm.adler = state.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/
    state.flags ? crc32_1(state.check, output, _out, strm.next_out - _out) : adler32_1(state.check, output, _out, strm.next_out - _out);
  }
  strm.data_type = state.bits + (state.last ? 64 : 0) + (state.mode === TYPE ? 128 : 0) + (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);
  if ((_in === 0 && _out === 0 || flush === Z_FINISH$2) && ret === Z_OK$2) {
    ret = Z_BUF_ERROR$1;
  }
  return ret;
}

function inflateEnd(strm) {

  if (!strm || !strm.state /*|| strm->zfree == (free_func)0*/) {
      return Z_STREAM_ERROR$1;
    }

  var state = strm.state;
  if (state.window) {
    state.window = null;
  }
  strm.state = null;
  return Z_OK$2;
}

function inflateGetHeader(strm, head) {
  var state;

  /* check state */
  if (!strm || !strm.state) {
    return Z_STREAM_ERROR$1;
  }
  state = strm.state;
  if ((state.wrap & 2) === 0) {
    return Z_STREAM_ERROR$1;
  }

  /* save header structure */
  state.head = head;
  head.done = false;
  return Z_OK$2;
}

function inflateSetDictionary(strm, dictionary) {
  var dictLength = dictionary.length;

  var state;
  var dictid;
  var ret;

  /* check state */
  if (!strm /* == Z_NULL */ || !strm.state /* == Z_NULL */) {
      return Z_STREAM_ERROR$1;
    }
  state = strm.state;

  if (state.wrap !== 0 && state.mode !== DICT) {
    return Z_STREAM_ERROR$1;
  }

  /* check for correct dictionary identifier */
  if (state.mode === DICT) {
    dictid = 1; /* adler32(0, null, 0)*/
    /* dictid = adler32(dictid, dictionary, dictLength); */
    dictid = adler32_1(dictid, dictionary, dictLength, 0);
    if (dictid !== state.check) {
      return Z_DATA_ERROR$1;
    }
  }
  /* copy dictionary to window using updatewindow(), which will amend the
   existing dictionary if appropriate */
  ret = updatewindow(strm, dictionary, dictLength, dictLength);
  if (ret) {
    state.mode = MEM;
    return Z_MEM_ERROR;
  }
  state.havedict = 1;
  // Tracev((stderr, "inflate:   dictionary set\n"));
  return Z_OK$2;
}

var inflateReset_1 = inflateReset;
var inflateReset2_1 = inflateReset2;
var inflateResetKeep_1 = inflateResetKeep;
var inflateInit_1 = inflateInit;
var inflateInit2_1 = inflateInit2;
var inflate_2$1 = inflate$1;
var inflateEnd_1 = inflateEnd;
var inflateGetHeader_1 = inflateGetHeader;
var inflateSetDictionary_1 = inflateSetDictionary;
var inflateInfo = 'pako inflate (from Nodeca project)';

/* Not implemented
exports.inflateCopy = inflateCopy;
exports.inflateGetDictionary = inflateGetDictionary;
exports.inflateMark = inflateMark;
exports.inflatePrime = inflatePrime;
exports.inflateSync = inflateSync;
exports.inflateSyncPoint = inflateSyncPoint;
exports.inflateUndermine = inflateUndermine;
*/

var inflate_1$2 = {
  inflateReset: inflateReset_1,
  inflateReset2: inflateReset2_1,
  inflateResetKeep: inflateResetKeep_1,
  inflateInit: inflateInit_1,
  inflateInit2: inflateInit2_1,
  inflate: inflate_2$1,
  inflateEnd: inflateEnd_1,
  inflateGetHeader: inflateGetHeader_1,
  inflateSetDictionary: inflateSetDictionary_1,
  inflateInfo: inflateInfo
};

'use strict';

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

var constants = {

  /* Allowed flush values; see deflate() and inflate() below for details */
  Z_NO_FLUSH: 0,
  Z_PARTIAL_FLUSH: 1,
  Z_SYNC_FLUSH: 2,
  Z_FULL_FLUSH: 3,
  Z_FINISH: 4,
  Z_BLOCK: 5,
  Z_TREES: 6,

  /* Return codes for the compression/decompression functions. Negative values
  * are errors, positive values are used for special but normal events.
  */
  Z_OK: 0,
  Z_STREAM_END: 1,
  Z_NEED_DICT: 2,
  Z_ERRNO: -1,
  Z_STREAM_ERROR: -2,
  Z_DATA_ERROR: -3,
  //Z_MEM_ERROR:     -4,
  Z_BUF_ERROR: -5,
  //Z_VERSION_ERROR: -6,

  /* compression levels */
  Z_NO_COMPRESSION: 0,
  Z_BEST_SPEED: 1,
  Z_BEST_COMPRESSION: 9,
  Z_DEFAULT_COMPRESSION: -1,

  Z_FILTERED: 1,
  Z_HUFFMAN_ONLY: 2,
  Z_RLE: 3,
  Z_FIXED: 4,
  Z_DEFAULT_STRATEGY: 0,

  /* Possible values of the data_type field (though see inflate()) */
  Z_BINARY: 0,
  Z_TEXT: 1,
  //Z_ASCII:                1, // = Z_TEXT (deprecated)
  Z_UNKNOWN: 2,

  /* The deflate compression method */
  Z_DEFLATED: 8
  //Z_NULL:                 null // Use -1 or null inline, depending on var type
};

'use strict';

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

function GZheader() {
  /* true if compressed data believed to be text */
  this.text = 0;
  /* modification time */
  this.time = 0;
  /* extra flags (not used when writing a gzip file) */
  this.xflags = 0;
  /* operating system */
  this.os = 0;
  /* pointer to extra field or Z_NULL if none */
  this.extra = null;
  /* extra field length (valid if extra != Z_NULL) */
  this.extra_len = 0; // Actually, we don't need it in JS,
  // but leave for few code modifications

  //
  // Setup limits is not necessary because in js we should not preallocate memory
  // for inflate use constant limit in 65536 bytes
  //

  /* space at extra (only when reading header) */
  // this.extra_max  = 0;
  /* pointer to zero-terminated file name or Z_NULL */
  this.name = '';
  /* space at name (only when reading header) */
  // this.name_max   = 0;
  /* pointer to zero-terminated comment or Z_NULL */
  this.comment = '';
  /* space at comment (only when reading header) */
  // this.comm_max   = 0;
  /* true if there was or will be a header crc */
  this.hcrc = 0;
  /* true when done reading gzip header (not used when writing a gzip file) */
  this.done = false;
}

var gzheader = GZheader;

'use strict';

var toString$2 = Object.prototype.toString;

/**
 * class Inflate
 *
 * Generic JS-style wrapper for zlib calls. If you don't need
 * streaming behaviour - use more simple functions: [[inflate]]
 * and [[inflateRaw]].
 **/

/* internal
 * inflate.chunks -> Array
 *
 * Chunks of output data, if [[Inflate#onData]] not overriden.
 **/

/**
 * Inflate.result -> Uint8Array|Array|String
 *
 * Uncompressed result, generated by default [[Inflate#onData]]
 * and [[Inflate#onEnd]] handlers. Filled after you push last chunk
 * (call [[Inflate#push]] with `Z_FINISH` / `true` param) or if you
 * push a chunk with explicit flush (call [[Inflate#push]] with
 * `Z_SYNC_FLUSH` param).
 **/

/**
 * Inflate.err -> Number
 *
 * Error code after inflate finished. 0 (Z_OK) on success.
 * Should be checked if broken data possible.
 **/

/**
 * Inflate.msg -> String
 *
 * Error message, if [[Inflate.err]] != 0
 **/

/**
 * new Inflate(options)
 * - options (Object): zlib inflate options.
 *
 * Creates new inflator instance with specified params. Throws exception
 * on bad params. Supported options:
 *
 * - `windowBits`
 * - `dictionary`
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information on these.
 *
 * Additional options, for internal needs:
 *
 * - `chunkSize` - size of generated data chunks (16K by default)
 * - `raw` (Boolean) - do raw inflate
 * - `to` (String) - if equal to 'string', then result will be converted
 *   from utf8 to utf16 (javascript) string. When string output requested,
 *   chunk length can differ from `chunkSize`, depending on content.
 *
 * By default, when no options set, autodetect deflate/gzip data format via
 * wrapper header.
 *
 * ##### Example:
 *
 * ```javascript
 * var pako = require('pako')
 *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])
 *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);
 *
 * var inflate = new pako.Inflate({ level: 3});
 *
 * inflate.push(chunk1, false);
 * inflate.push(chunk2, true);  // true -> last chunk
 *
 * if (inflate.err) { throw new Error(inflate.err); }
 *
 * console.log(inflate.result);
 * ```
 **/
function Inflate(options) {
  if (!(this instanceof Inflate)) return new Inflate(options);

  this.options = common.assign({
    chunkSize: 16384,
    windowBits: 0,
    to: ''
  }, options || {});

  var opt = this.options;

  // Force window size for `raw` data, if not set directly,
  // because we have no header for autodetect.
  if (opt.raw && opt.windowBits >= 0 && opt.windowBits < 16) {
    opt.windowBits = -opt.windowBits;
    if (opt.windowBits === 0) {
      opt.windowBits = -15;
    }
  }

  // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate
  if (opt.windowBits >= 0 && opt.windowBits < 16 && !(options && options.windowBits)) {
    opt.windowBits += 32;
  }

  // Gzip header has no info about windows size, we can do autodetect only
  // for deflate. So, if window size not set, force it to max when gzip possible
  if (opt.windowBits > 15 && opt.windowBits < 48) {
    // bit 3 (16) -> gzipped data
    // bit 4 (32) -> autodetect gzip/deflate
    if ((opt.windowBits & 15) === 0) {
      opt.windowBits |= 15;
    }
  }

  this.err = 0; // error code, if happens (0 = Z_OK)
  this.msg = ''; // error message
  this.ended = false; // used to avoid multiple onEnd() calls
  this.chunks = []; // chunks of compressed data

  this.strm = new zstream();
  this.strm.avail_out = 0;

  var status = inflate_1$2.inflateInit2(this.strm, opt.windowBits);

  if (status !== constants.Z_OK) {
    throw new Error(messages[status]);
  }

  this.header = new gzheader();

  inflate_1$2.inflateGetHeader(this.strm, this.header);
}

/**
 * Inflate#push(data[, mode]) -> Boolean
 * - data (Uint8Array|Array|ArrayBuffer|String): input data
 * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.
 *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` meansh Z_FINISH.
 *
 * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with
 * new output chunks. Returns `true` on success. The last data block must have
 * mode Z_FINISH (or `true`). That will flush internal pending buffers and call
 * [[Inflate#onEnd]]. For interim explicit flushes (without ending the stream) you
 * can use mode Z_SYNC_FLUSH, keeping the decompression context.
 *
 * On fail call [[Inflate#onEnd]] with error code and return false.
 *
 * We strongly recommend to use `Uint8Array` on input for best speed (output
 * format is detected automatically). Also, don't skip last param and always
 * use the same type in your code (boolean or number). That will improve JS speed.
 *
 * For regular `Array`-s make sure all elements are [0..255].
 *
 * ##### Example
 *
 * ```javascript
 * push(chunk, false); // push one of data chunks
 * ...
 * push(chunk, true);  // push last chunk
 * ```
 **/
Inflate.prototype.push = function (data, mode) {
  var strm = this.strm;
  var chunkSize = this.options.chunkSize;
  var dictionary = this.options.dictionary;
  var status, _mode;
  var next_out_utf8, tail, utf8str;
  var dict;

  // Flag to properly process Z_BUF_ERROR on testing inflate call
  // when we check that all output data was flushed.
  var allowBufError = false;

  if (this.ended) {
    return false;
  }
  _mode = mode === ~~mode ? mode : mode === true ? constants.Z_FINISH : constants.Z_NO_FLUSH;

  // Convert data if needed
  if (typeof data === 'string') {
    // Only binary strings can be decompressed on practice
    strm.input = strings.binstring2buf(data);
  } else if (toString$2.call(data) === '[object ArrayBuffer]') {
    strm.input = new Uint8Array(data);
  } else {
    strm.input = data;
  }

  strm.next_in = 0;
  strm.avail_in = strm.input.length;

  do {
    if (strm.avail_out === 0) {
      strm.output = new common.Buf8(chunkSize);
      strm.next_out = 0;
      strm.avail_out = chunkSize;
    }

    status = inflate_1$2.inflate(strm, constants.Z_NO_FLUSH); /* no bad return value */

    if (status === constants.Z_NEED_DICT && dictionary) {
      // Convert data if needed
      if (typeof dictionary === 'string') {
        dict = strings.string2buf(dictionary);
      } else if (toString$2.call(dictionary) === '[object ArrayBuffer]') {
        dict = new Uint8Array(dictionary);
      } else {
        dict = dictionary;
      }

      status = inflate_1$2.inflateSetDictionary(this.strm, dict);
    }

    if (status === constants.Z_BUF_ERROR && allowBufError === true) {
      status = constants.Z_OK;
      allowBufError = false;
    }

    if (status !== constants.Z_STREAM_END && status !== constants.Z_OK) {
      this.onEnd(status);
      this.ended = true;
      return false;
    }

    if (strm.next_out) {
      if (strm.avail_out === 0 || status === constants.Z_STREAM_END || strm.avail_in === 0 && (_mode === constants.Z_FINISH || _mode === constants.Z_SYNC_FLUSH)) {

        if (this.options.to === 'string') {

          next_out_utf8 = strings.utf8border(strm.output, strm.next_out);

          tail = strm.next_out - next_out_utf8;
          utf8str = strings.buf2string(strm.output, next_out_utf8);

          // move tail
          strm.next_out = tail;
          strm.avail_out = chunkSize - tail;
          if (tail) {
            common.arraySet(strm.output, strm.output, next_out_utf8, tail, 0);
          }

          this.onData(utf8str);
        } else {
          this.onData(common.shrinkBuf(strm.output, strm.next_out));
        }
      }
    }

    // When no more input data, we should check that internal inflate buffers
    // are flushed. The only way to do it when avail_out = 0 - run one more
    // inflate pass. But if output data not exists, inflate return Z_BUF_ERROR.
    // Here we set flag to process this error properly.
    //
    // NOTE. Deflate does not return error in this case and does not needs such
    // logic.
    if (strm.avail_in === 0 && strm.avail_out === 0) {
      allowBufError = true;
    }
  } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== constants.Z_STREAM_END);

  if (status === constants.Z_STREAM_END) {
    _mode = constants.Z_FINISH;
  }

  // Finalize on the last chunk.
  if (_mode === constants.Z_FINISH) {
    status = inflate_1$2.inflateEnd(this.strm);
    this.onEnd(status);
    this.ended = true;
    return status === constants.Z_OK;
  }

  // callback interim results if Z_SYNC_FLUSH.
  if (_mode === constants.Z_SYNC_FLUSH) {
    this.onEnd(constants.Z_OK);
    strm.avail_out = 0;
    return true;
  }

  return true;
};

/**
 * Inflate#onData(chunk) -> Void
 * - chunk (Uint8Array|Array|String): ouput data. Type of array depends
 *   on js engine support. When string output requested, each chunk
 *   will be string.
 *
 * By default, stores data blocks in `chunks[]` property and glue
 * those in `onEnd`. Override this handler, if you need another behaviour.
 **/
Inflate.prototype.onData = function (chunk) {
  this.chunks.push(chunk);
};

/**
 * Inflate#onEnd(status) -> Void
 * - status (Number): inflate status. 0 (Z_OK) on success,
 *   other if not.
 *
 * Called either after you tell inflate that the input stream is
 * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)
 * or if an error happened. By default - join collected chunks,
 * free memory and fill `results` / `err` properties.
 **/
Inflate.prototype.onEnd = function (status) {
  // On success - join
  if (status === constants.Z_OK) {
    if (this.options.to === 'string') {
      // Glue & convert here, until we teach pako to send
      // utf8 alligned strings to onData
      this.result = this.chunks.join('');
    } else {
      this.result = common.flattenChunks(this.chunks);
    }
  }
  this.chunks = [];
  this.err = status;
  this.msg = this.strm.msg;
};

/**
 * inflate(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to decompress.
 * - options (Object): zlib inflate options.
 *
 * Decompress `data` with inflate/ungzip and `options`. Autodetect
 * format via wrapper header by default. That's why we don't provide
 * separate `ungzip` method.
 *
 * Supported options are:
 *
 * - windowBits
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information.
 *
 * Sugar (options):
 *
 * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify
 *   negative windowBits implicitly.
 * - `to` (String) - if equal to 'string', then result will be converted
 *   from utf8 to utf16 (javascript) string. When string output requested,
 *   chunk length can differ from `chunkSize`, depending on content.
 *
 *
 * ##### Example:
 *
 * ```javascript
 * var pako = require('pako')
 *   , input = pako.deflate([1,2,3,4,5,6,7,8,9])
 *   , output;
 *
 * try {
 *   output = pako.inflate(input);
 * } catch (err)
 *   console.log(err);
 * }
 * ```
 **/
function inflate(input, options) {
  var inflator = new Inflate(options);

  inflator.push(input, true);

  // That will never happens, if you don't cheat with options :)
  if (inflator.err) {
    throw inflator.msg || messages[inflator.err];
  }

  return inflator.result;
}

/**
 * inflateRaw(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to decompress.
 * - options (Object): zlib inflate options.
 *
 * The same as [[inflate]], but creates raw data, without wrapper
 * (header and adler32 crc).
 **/
function inflateRaw(input, options) {
  options = options || {};
  options.raw = true;
  return inflate(input, options);
}

/**
 * ungzip(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to decompress.
 * - options (Object): zlib inflate options.
 *
 * Just shortcut to [[inflate]], because it autodetects format
 * by header.content. Done for convenience.
 **/

var Inflate_1 = Inflate;
var inflate_2 = inflate;
var inflateRaw_1 = inflateRaw;
var ungzip = inflate;

var inflate_1 = {
  Inflate: Inflate_1,
  inflate: inflate_2,
  inflateRaw: inflateRaw_1,
  ungzip: ungzip
};

// Top level file is just a mixin of submodules & constants
'use strict';

var assign = common.assign;

var pako = {};

assign(pako, deflate_1, inflate_1, constants);

var index$1 = pako;

function createCommonjsModule$1(fn, module) {
  return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var traverse_1 = createCommonjsModule$1(function (module) {
  var traverse = module.exports = function (obj) {
    return new Traverse(obj);
  };

  function Traverse(obj) {
    this.value = obj;
  }

  Traverse.prototype.get = function (ps) {
    var node = this.value;
    for (var i = 0; i < ps.length; i++) {
      var key = ps[i];
      if (!node || !hasOwnProperty.call(node, key)) {
        node = undefined;
        break;
      }
      node = node[key];
    }
    return node;
  };

  Traverse.prototype.has = function (ps) {
    var node = this.value;
    for (var i = 0; i < ps.length; i++) {
      var key = ps[i];
      if (!node || !hasOwnProperty.call(node, key)) {
        return false;
      }
      node = node[key];
    }
    return true;
  };

  Traverse.prototype.set = function (ps, value) {
    var node = this.value;
    for (var i = 0; i < ps.length - 1; i++) {
      var key = ps[i];
      if (!hasOwnProperty.call(node, key)) node[key] = {};
      node = node[key];
    }
    node[ps[i]] = value;
    return value;
  };

  Traverse.prototype.map = function (cb) {
    return walk(this.value, cb, true);
  };

  Traverse.prototype.forEach = function (cb) {
    this.value = walk(this.value, cb, false);
    return this.value;
  };

  Traverse.prototype.reduce = function (cb, init) {
    var skip = arguments.length === 1;
    var acc = skip ? this.value : init;
    this.forEach(function (x) {
      if (!this.isRoot || !skip) {
        acc = cb.call(this, acc, x);
      }
    });
    return acc;
  };

  Traverse.prototype.paths = function () {
    var acc = [];
    this.forEach(function (x) {
      acc.push(this.path);
    });
    return acc;
  };

  Traverse.prototype.nodes = function () {
    var acc = [];
    this.forEach(function (x) {
      acc.push(this.node);
    });
    return acc;
  };

  Traverse.prototype.clone = function () {
    var parents = [],
        nodes = [];

    return function clone(src) {
      for (var i = 0; i < parents.length; i++) {
        if (parents[i] === src) {
          return nodes[i];
        }
      }

      if ((typeof src === 'undefined' ? 'undefined' : _typeof(src)) === 'object' && src !== null) {
        var dst = copy(src);

        parents.push(src);
        nodes.push(dst);

        forEach(objectKeys(src), function (key) {
          dst[key] = clone(src[key]);
        });

        parents.pop();
        nodes.pop();
        return dst;
      } else {
        return src;
      }
    }(this.value);
  };

  function walk(root, cb, immutable) {
    var path = [];
    var parents = [];
    var alive = true;

    return function walker(node_) {
      var node = immutable ? copy(node_) : node_;
      var modifiers = {};

      var keepGoing = true;

      var state = {
        node: node,
        node_: node_,
        path: [].concat(path),
        parent: parents[parents.length - 1],
        parents: parents,
        key: path.slice(-1)[0],
        isRoot: path.length === 0,
        level: path.length,
        circular: null,
        update: function update(x, stopHere) {
          if (!state.isRoot) {
            state.parent.node[state.key] = x;
          }
          state.node = x;
          if (stopHere) keepGoing = false;
        },
        'delete': function _delete(stopHere) {
          delete state.parent.node[state.key];
          if (stopHere) keepGoing = false;
        },
        remove: function remove(stopHere) {
          if (isArray(state.parent.node)) {
            state.parent.node.splice(state.key, 1);
          } else {
            delete state.parent.node[state.key];
          }
          if (stopHere) keepGoing = false;
        },
        keys: null,
        before: function before(f) {
          modifiers.before = f;
        },
        after: function after(f) {
          modifiers.after = f;
        },
        pre: function pre(f) {
          modifiers.pre = f;
        },
        post: function post(f) {
          modifiers.post = f;
        },
        stop: function stop() {
          alive = false;
        },
        block: function block() {
          keepGoing = false;
        }
      };

      if (!alive) return state;

      function updateState() {
        if (_typeof(state.node) === 'object' && state.node !== null) {
          if (!state.keys || state.node_ !== state.node) {
            state.keys = objectKeys(state.node);
          }

          state.isLeaf = state.keys.length == 0;

          for (var i = 0; i < parents.length; i++) {
            if (parents[i].node_ === node_) {
              state.circular = parents[i];
              break;
            }
          }
        } else {
          state.isLeaf = true;
          state.keys = null;
        }

        state.notLeaf = !state.isLeaf;
        state.notRoot = !state.isRoot;
      }

      updateState();

      // use return values to update if defined
      var ret = cb.call(state, state.node);
      if (ret !== undefined && state.update) state.update(ret);

      if (modifiers.before) modifiers.before.call(state, state.node);

      if (!keepGoing) return state;

      if (_typeof(state.node) == 'object' && state.node !== null && !state.circular) {
        parents.push(state);

        updateState();

        forEach(state.keys, function (key, i) {
          path.push(key);

          if (modifiers.pre) modifiers.pre.call(state, state.node[key], key);

          var child = walker(state.node[key]);
          if (immutable && hasOwnProperty.call(state.node, key)) {
            state.node[key] = child.node;
          }

          child.isLast = i == state.keys.length - 1;
          child.isFirst = i == 0;

          if (modifiers.post) modifiers.post.call(state, child);

          path.pop();
        });
        parents.pop();
      }

      if (modifiers.after) modifiers.after.call(state, state.node);

      return state;
    }(root).node;
  }

  function copy(src) {
    if ((typeof src === 'undefined' ? 'undefined' : _typeof(src)) === 'object' && src !== null) {
      var dst;

      if (isArray(src)) {
        dst = [];
      } else if (isDate(src)) {
        dst = new Date(src.getTime ? src.getTime() : src);
      } else if (isRegExp(src)) {
        dst = new RegExp(src);
      } else if (isError(src)) {
        dst = { message: src.message };
      } else if (isBoolean(src)) {
        dst = new Boolean(src);
      } else if (isNumber(src)) {
        dst = new Number(src);
      } else if (isString(src)) {
        dst = new String(src);
      } else if (Object.create && Object.getPrototypeOf) {
        dst = Object.create(Object.getPrototypeOf(src));
      } else if (src.constructor === Object) {
        dst = {};
      } else {
        var proto = src.constructor && src.constructor.prototype || src.__proto__ || {};
        var T = function T() {};
        T.prototype = proto;
        dst = new T();
      }

      forEach(objectKeys(src), function (key) {
        dst[key] = src[key];
      });
      return dst;
    } else return src;
  }

  var objectKeys = Object.keys || function keys(obj) {
    var res = [];
    for (var key in obj) {
      res.push(key);
    }return res;
  };

  function toS(obj) {
    return Object.prototype.toString.call(obj);
  }
  function isDate(obj) {
    return toS(obj) === '[object Date]';
  }
  function isRegExp(obj) {
    return toS(obj) === '[object RegExp]';
  }
  function isError(obj) {
    return toS(obj) === '[object Error]';
  }
  function isBoolean(obj) {
    return toS(obj) === '[object Boolean]';
  }
  function isNumber(obj) {
    return toS(obj) === '[object Number]';
  }
  function isString(obj) {
    return toS(obj) === '[object String]';
  }

  var isArray = Array.isArray || function isArray(xs) {
    return Object.prototype.toString.call(xs) === '[object Array]';
  };

  var forEach = function forEach(xs, fn) {
    if (xs.forEach) return xs.forEach(fn);else for (var i = 0; i < xs.length; i++) {
      fn(xs[i], i, xs);
    }
  };

  forEach(objectKeys(Traverse.prototype), function (key) {
    traverse[key] = function (obj) {
      var args = [].slice.call(arguments, 1);
      var t = new Traverse(obj);
      return t[key].apply(t, args);
    };
  });

  var hasOwnProperty = Object.hasOwnProperty || function (obj, key) {
    return key in obj;
  };
});

var asyncGenerator$1 = function () {
  function AwaitValue(value) {
    this.value = value;
  }

  function AsyncGenerator(gen) {
    var front, back;

    function send(key, arg) {
      return new Promise(function (resolve, reject) {
        var request = {
          key: key,
          arg: arg,
          resolve: resolve,
          reject: reject,
          next: null
        };

        if (back) {
          back = back.next = request;
        } else {
          front = back = request;
          resume(key, arg);
        }
      });
    }

    function resume(key, arg) {
      try {
        var result = gen[key](arg);
        var value = result.value;

        if (value instanceof AwaitValue) {
          Promise.resolve(value.value).then(function (arg) {
            resume("next", arg);
          }, function (arg) {
            resume("throw", arg);
          });
        } else {
          settle(result.done ? "return" : "normal", result.value);
        }
      } catch (err) {
        settle("throw", err);
      }
    }

    function settle(type, value) {
      switch (type) {
        case "return":
          front.resolve({
            value: value,
            done: true
          });
          break;

        case "throw":
          front.reject(value);
          break;

        default:
          front.resolve({
            value: value,
            done: false
          });
          break;
      }

      front = front.next;

      if (front) {
        resume(front.key, front.arg);
      } else {
        back = null;
      }
    }

    this._invoke = send;

    if (typeof gen.return !== "function") {
      this.return = undefined;
    }
  }

  if (typeof Symbol === "function" && Symbol.asyncIterator) {
    AsyncGenerator.prototype[Symbol.asyncIterator] = function () {
      return this;
    };
  }

  AsyncGenerator.prototype.next = function (arg) {
    return this._invoke("next", arg);
  };

  AsyncGenerator.prototype.throw = function (arg) {
    return this._invoke("throw", arg);
  };

  AsyncGenerator.prototype.return = function (arg) {
    return this._invoke("return", arg);
  };

  return {
    wrap: function wrap(fn) {
      return function () {
        return new AsyncGenerator(fn.apply(this, arguments));
      };
    },
    await: function _await(value) {
      return new AwaitValue(value);
    }
  };
}();

var classCallCheck$1 = function classCallCheck$$1(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass$1 = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

/**
* The CodecUtils class gather some static methods that can be useful while
* encodeing/decoding data.
* CodecUtils does not have a constructor, don't try to instanciate it.
*/

var CodecUtils = function () {
  function CodecUtils() {
    classCallCheck$1(this, CodecUtils);
  }

  createClass$1(CodecUtils, null, [{
    key: "isPlatformLittleEndian",

    /**
    * Get whether or not the platform is using little endian.
    * @return {Boolen } true if the platform is little endian, false if big endian
    */
    value: function isPlatformLittleEndian() {
      var a = new Uint32Array([0x12345678]);
      var b = new Uint8Array(a.buffer, a.byteOffset, a.byteLength);
      return b[0] != 0x12;
    }

    /**
    * convert an ArrayBuffer into a unicode string (2 bytes for each char)
    * Note: this method was kindly borrowed from Google Closure Compiler:
    * https://github.com/google/closure-library/blob/master/closure/goog/crypt/crypt.js
    * @param {ArrayBuffer} buf - input ArrayBuffer
    * @return {String} a string compatible with Unicode characters
    */

  }, {
    key: "arrayBufferToUnicode",
    value: function arrayBufferToUnicode(buff) {
      var buffUint8 = new Uint8Array(buff);
      var out = [],
          pos = 0,
          c = 0;

      while (pos < buffUint8.length) {
        var c1 = buffUint8[pos++];
        if (c1 < 128) {
          if (c1 < 32 && c1 != 10 && c1 != 13 && c1 != 9 || c1 == 127) {
            console.warn("Invalid string: non-printable characters");
            return null;
          }
          out[c++] = String.fromCharCode(c1);
        } else if (c1 > 191 && c1 < 224) {
          var c2 = buffUint8[pos++];
          out[c++] = String.fromCharCode((c1 & 31) << 6 | c2 & 63);
        } else if (c1 > 239 && c1 < 365) {
          // Surrogate Pair
          var c2 = buffUint8[pos++];
          var c3 = buffUint8[pos++];
          var c4 = buffUint8[pos++];
          var u = ((c1 & 7) << 18 | (c2 & 63) << 12 | (c3 & 63) << 6 | c4 & 63) - 0x10000;
          out[c++] = String.fromCharCode(0xD800 + (u >> 10));
          out[c++] = String.fromCharCode(0xDC00 + (u & 1023));
        } else {
          var c2 = buffUint8[pos++];
          var c3 = buffUint8[pos++];
          var code = (c1 & 15) << 12 | (c2 & 63) << 6 | c3 & 63;
          if (code === 0xFFFD) {
            console.warn("Invalid string: a REPLACEMENT CHARACTER was spotted");
            return null;
          }
          out[c++] = String.fromCharCode(code);
        }
      }
      return out.join('');
    }
  }, {
    key: "unicodeToArrayBuffer",

    /**
    * convert a unicode string into an ArrayBuffer
    * Note that the str is a regular string but it will be encoded with
    * 2 bytes per char instead of 1 ( ASCII uses 1 byte/char ).
    * Note: this method was kindly borrowed from Google Closure Compiler:
    * https://github.com/google/closure-library/blob/master/closure/goog/crypt/crypt.js
    * @param {String} str - string to encode
    * @return {ArrayBuffer} the output ArrayBuffer
    */
    value: function unicodeToArrayBuffer(str) {
      var out = [],
          p = 0;
      for (var i = 0; i < str.length; i++) {
        var c = str.charCodeAt(i);
        if (c < 128) {
          out[p++] = c;
        } else if (c < 2048) {
          out[p++] = c >> 6 | 192;
          out[p++] = c & 63 | 128;
        } else if ((c & 0xFC00) == 0xD800 && i + 1 < str.length && (str.charCodeAt(i + 1) & 0xFC00) == 0xDC00) {
          // Surrogate Pair
          c = 0x10000 + ((c & 0x03FF) << 10) + (str.charCodeAt(++i) & 0x03FF);
          out[p++] = c >> 18 | 240;
          out[p++] = c >> 12 & 63 | 128;
          out[p++] = c >> 6 & 63 | 128;
          out[p++] = c & 63 | 128;
        } else {
          out[p++] = c >> 12 | 224;
          out[p++] = c >> 6 & 63 | 128;
          out[p++] = c & 63 | 128;
        }
      }

      // make a buffer out of the array
      return new Uint8Array(out).buffer;
    }
  }, {
    key: "arrayBufferToString8",

    /**
    * Convert an ArrayBuffer into a ASCII string (1 byte for each char)
    * @param {ArrayBuffer} buf - buffer to convert into ASCII string
    * @return {String} the output string
    */
    value: function arrayBufferToString8(buf) {
      return String.fromCharCode.apply(null, new Uint8Array(buf));
    }

    /**
    * Convert a ASCII string into an ArrayBuffer.
    * Note that the str is a regular string, it will be encoded with 1 byte per char
    * @param {String} str - string to encode
    * @return {ArrayBuffer}
    */

  }, {
    key: "string8ToArrayBuffer",
    value: function string8ToArrayBuffer(str) {
      var buf = new ArrayBuffer(str.length);
      var bufView = new Uint8Array(buf);
      for (var i = 0; i < str.length; i++) {
        bufView[i] = str.charCodeAt(i);
      }
      return buf;
    }

    /**
    * Write a ASCII string into a buffer
    * @param {String} str - a string that contains only ASCII characters
    * @param {ArrayBuffer} buffer - the buffer where to write the string
    * @param {Number} byteOffset - the offset to apply, in number of bytes
    */

  }, {
    key: "setString8InBuffer",
    value: function setString8InBuffer(str, buffer) {
      var byteOffset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

      if (byteOffset < 0) {
        console.warn("The byte offset cannot be negative.");
        return;
      }

      if (!buffer || !(buffer instanceof ArrayBuffer)) {
        console.warn("The buffer must be a valid ArrayBuffer.");
        return;
      }

      if (str.length + byteOffset > buffer.byteLength) {
        console.warn("The string is too long to be writen in this buffer.");
        return;
      }

      var bufView = new Uint8Array(buffer);

      for (var i = 0; i < str.length; i++) {
        bufView[i + byteOffset] = str.charCodeAt(i);
      }
    }

    /**
    * Extract an ASCII string from an ArrayBuffer
    * @param {ArrayBuffer} buffer - the buffer
    * @param {Number} strLength - number of chars in the string we want
    * @param {Number} byteOffset - the offset in number of bytes
    * @return {String} the string, or null in case of error
    */

  }, {
    key: "getString8FromBuffer",
    value: function getString8FromBuffer(buffer, strLength) {
      var byteOffset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

      if (byteOffset < 0) {
        console.warn("The byte offset cannot be negative.");
        return null;
      }

      if (!buffer || !(buffer instanceof ArrayBuffer)) {
        console.warn("The buffer must be a valid ArrayBuffer.");
        return null;
      }

      if (strLength + byteOffset > buffer.byteLength) {
        console.warn("The string is too long to be writen in this buffer.");
        return null;
      }

      return String.fromCharCode.apply(null, new Uint8Array(buffer, byteOffset, strLength));
    }

    /**
    * Serializes a JS object into an ArrayBuffer.
    * This is using a unicode JSON intermediate step.
    * @param {Object} obj - an object that does not have cyclic structure
    * @return {ArrayBuffer} the serialized output
    */

  }, {
    key: "objectToArrayBuffer",
    value: function objectToArrayBuffer(obj) {
      var buff = null;
      var objCleanClone = CodecUtils.makeSerializeFriendly(obj);

      try {
        var strObj = JSON.stringify(objCleanClone);
        buff = CodecUtils.unicodeToArrayBuffer(strObj);
      } catch (e) {
        console.warn(e);
      }

      return buff;
    }

    /**
    * Convert an ArrayBuffer into a JS Object. This uses an intermediate unicode JSON string.
    * Of course, this buffer has to come from a serialized object.
    * @param {ArrayBuffer} buff - the ArrayBuffer that hides some object
    * @return {Object} the deserialized object
    */

  }, {
    key: "ArrayBufferToObject",
    value: function ArrayBufferToObject(buff) {
      var obj = null;

      try {
        var strObj = CodecUtils.arrayBufferToUnicode(buff);
        obj = JSON.parse(strObj);
      } catch (e) {
        console.warn(e);
      }

      return obj;
    }

    /**
    * Get if wether of not the arg is a typed array
    * @param {Object} obj - possibly a typed array, or maybe not
    * @return {Boolean} true if obj is a typed array
    */

  }, {
    key: "isTypedArray",
    value: function isTypedArray(obj) {
      return obj instanceof Int8Array || obj instanceof Uint8Array || obj instanceof Uint8ClampedArray || obj instanceof Int16Array || obj instanceof Uint16Array || obj instanceof Int32Array || obj instanceof Uint32Array || obj instanceof Float32Array || obj instanceof Float64Array;
    }

    /**
    * Merge some ArrayBuffes in a single one
    * @param {Array} arrayOfBuffers - some ArrayBuffers
    * @return {ArrayBuffer} the larger merged buffer
    */

  }, {
    key: "mergeBuffers",
    value: function mergeBuffers(arrayOfBuffers) {
      var totalByteSize = 0;

      for (var i = 0; i < arrayOfBuffers.length; i++) {
        totalByteSize += arrayOfBuffers[i].byteLength;
      }

      var concatArray = new Uint8Array(totalByteSize);

      var offset = 0;
      for (var i = 0; i < arrayOfBuffers.length; i++) {
        concatArray.set(new Uint8Array(arrayOfBuffers[i]), offset);
        offset += arrayOfBuffers[i].byteLength;
      }

      return concatArray.buffer;
    }

    /**
    * In a browser, the global object is `window` while in Node, it's `GLOBAL`.
    * This method return the one that is relevant to the execution context.
    * @return {Object} the global object
    */

  }, {
    key: "getGlobalObject",
    value: function getGlobalObject() {
      var constructorHost = null;

      try {
        constructorHost = window; // in a web browser
      } catch (e) {
        try {
          constructorHost = GLOBAL; // in node
        } catch (e) {
          console.warn("You are not in a Javascript environment?? Weird.");
          return null;
        }
      }
      return constructorHost;
    }

    /**
    * Extract a typed array from an arbitrary buffer, with an arbitrary offset
    * @param {ArrayBuffer} buffer - the buffer from which we extract data
    * @param {Number} byteOffset - offset from the begining of buffer
    * @param {Function} arrayType - function object, actually the constructor of the output array
    * @param {Number} numberOfElements - nb of elem we want to fetch from the buffer
    * @return {TypedArray} output of type given by arg arrayType - this is a copy, not a view
    */

  }, {
    key: "extractTypedArray",
    value: function extractTypedArray(buffer, byteOffset, arrayType, numberOfElements) {
      if (!buffer) {
        console.warn("Input Buffer is null.");
        return null;
      }

      if (!(buffer instanceof ArrayBuffer)) {
        console.warn("Buffer must be of type ArrayBuffer");
        return null;
      }

      if (numberOfElements <= 0) {
        console.warn("The number of elements to fetch must be greater than 0");
        return null;
      }

      if (byteOffset < 0) {
        console.warn("The byte offset must be possitive or 0");
        return null;
      }

      if (byteOffset >= buffer.byteLength) {
        console.warn("The offset cannot be larger than the size of the buffer.");
        return null;
      }

      if (arrayType instanceof Function && !("BYTES_PER_ELEMENT" in arrayType)) {
        console.warn("ArrayType must be a typed array constructor function.");
        return null;
      }

      if (arrayType.BYTES_PER_ELEMENT * numberOfElements + byteOffset > buffer.byteLength) {
        console.warn("The requested number of elements is too large for this buffer");
        return;
      }

      var slicedBuff = buffer.slice(byteOffset, byteOffset + numberOfElements * arrayType.BYTES_PER_ELEMENT);
      return new arrayType(slicedBuff);
    }

    /**
    * Get some info about the given TypedArray
    * @param {TypedArray} typedArray - one of the typed array
    * @return {Object} in form of {type: String, signed: Boolean, bytesPerElements: Number, byteLength: Number, length: Number}
    */

  }, {
    key: "getTypedArrayInfo",
    value: function getTypedArrayInfo(typedArray) {
      var type = null;
      var signed = false;

      if (typedArray instanceof Int8Array) {
        type = "int";
        signed = false;
      } else if (typedArray instanceof Uint8Array) {
        type = "int";
        signed = true;
      } else if (typedArray instanceof Uint8ClampedArray) {
        type = "int";
        signed = true;
      } else if (typedArray instanceof Int16Array) {
        type = "int";
        signed = false;
      } else if (typedArray instanceof Uint16Array) {
        type = "int";
        signed = true;
      } else if (typedArray instanceof Int32Array) {
        type = "int";
        signed = false;
      } else if (typedArray instanceof Uint32Array) {
        type = "int";
        signed = true;
      } else if (typedArray instanceof Float32Array) {
        type = "float";
        signed = false;
      } else if (typedArray instanceof Float64Array) {
        type = "float";
        signed = false;
      }

      return {
        type: type,
        signed: signed,
        bytesPerElements: typedArray.BYTES_PER_ELEMENT,
        byteLength: typedArray.byteLength,
        length: typedArray.length
      };
    }

    /**
    * Counts the number of typed array obj has as attributes
    * @param {Object} obj - an Object
    * @return {Number} the number of typed array
    */

  }, {
    key: "howManyTypedArrayAttributes",
    value: function howManyTypedArrayAttributes(obj) {
      var typArrCounter = 0;
      traverse_1(obj).forEach(function (x) {
        typArrCounter += CodecUtils.isTypedArray(x);
      });
      return typArrCounter;
    }

    /**
    * Check if the given object contains any circular reference.
    * (Circular ref are non serilizable easily, we want to spot them)
    * @param {Object} obj - An object to check
    * @return {Boolean} true if obj contains circular refm false if not
    */

  }, {
    key: "hasCircularReference",
    value: function hasCircularReference(obj) {
      var hasCircular = false;
      traverse_1(obj).forEach(function (x) {
        if (this.circular) {
          hasCircular = true;
        }
      });
      return hasCircular;
    }

    /**
    * Remove circular dependencies from an object and return a circularRef-free version
    * of the object (does not change the original obj), of null if no circular ref was found
    * @param {Object} obj - An object to check
    * @return {Object} a circular-ref free object copy if any was found, or null if no circ was found
    */

  }, {
    key: "removeCircularReference",
    value: function removeCircularReference(obj) {
      var hasCircular = false;
      var noCircRefObj = traverse_1(obj).map(function (x) {
        if (this.circular) {
          this.remove();
          hasCircular = true;
        }
      });
      return hasCircular ? noCircRefObj : null;
    }

    /**
    * Clone the object and replace the typed array attributes by regular Arrays.
    * @param {Object} obj - an object to alter
    * @return {Object} the clone if ant typed array were changed, or null if was obj didnt contain any typed array.
    */

  }, {
    key: "replaceTypedArrayAttributesByArrays",
    value: function replaceTypedArrayAttributesByArrays(obj) {
      var hasTypedArray = false;

      var noTypedArrClone = traverse_1(obj).map(function (x) {
        if (CodecUtils.isTypedArray(x)) {
          // here, we cannot call .length directly because traverse.map already serialized
          // typed arrays into regular objects
          var origSize = Object.keys(x).length;
          var untypedArray = new Array(origSize);

          for (var i = 0; i < origSize; i++) {
            untypedArray[i] = x[i];
          }
          this.update(untypedArray);
          hasTypedArray = true;
        }
      });
      return hasTypedArray ? noTypedArrClone : null;
    }

    /**
    * Creates a clone, does not alter the original object.
    * Remove circular dependencies and replace typed arrays by regular arrays.
    * Both will make the serialization possible and more reliable.
    * @param {Object} obj - the object to make serialization friendly
    * @return {Object} a clean clone, or null if nothing was done
    */

  }, {
    key: "makeSerializeFriendly",
    value: function makeSerializeFriendly(obj) {
      var newObj = obj;
      var noCircular = CodecUtils.removeCircularReference(newObj);

      if (noCircular) newObj = noCircular;

      var noTypedArr = CodecUtils.replaceTypedArrayAttributesByArrays(newObj);

      if (noTypedArr) newObj = noTypedArr;

      return newObj;
    }

    /**
    * Check if a string is valid or not. A string is considered as invalid if it has
    * unicode "REPLACEMENT CHARACTER" or non-printable ASCII characters.
    * @param {String} str - string to test
    * @param {Boolean} forceAll - test the whole string instead of a sample of 1000 charaters
    * @return {Boolean} true is the string is valid, false if invalid.
    */

  }, {
    key: "isValidString",
    value: function isValidString(str) {
      var forceAll = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      var strLen = str.length;
      var nbSamples = forceAll ? strLen : Math.min(1000, strLen); //  a sample of 1000 should be enough
      var flagChar = 0xFFFD;
      var redFlags = 0;
      for (var i = 0; i < nbSamples; i++) {
        var code = str.charCodeAt(Math.floor(Math.random() * nbSamples));
        if (code === flagChar || code < 32 && code != 10 && code != 13 && code != 9 || code == 127) {
          redFlags++;
        }
      }
      return !(redFlags > 0);
    }
  }]);
  return CodecUtils;
}(); /* END of class CodecUtils */

/*
* Author   Jonathan Lurie - http://me.jonathanlurie.fr
* License  MIT
* Link      https://github.com/Pixpipe/pixpipejs
* Lab       MCIN - Montreal Neurological Institute
*/

/**
* Takes the File inputs from a HTML input of type "file" (aka. a file dialog), and reads it as a ArrayBuffer.
* Every File given in input should be added separately using `addInput( file[i], 'uniqueID' )`.
* The event "ready" must be set up ( using .on("ready", function(){}) ) and will
* be triggered when all the files given in input are translated into ArrayBuffers.
* Once ready, all the outputs are accecible using the same uniqueID with the
* method `getOutput("uniqueID")`.
* Gzip compressed files will be uncompressed.
*
* Once the filter is *updated*, you can query the `filenames` metadata (sorted by categories)
* and also the `checksums` metadata using `.getMetadata()`. This later metadata 
* give a unique *md5*, very convenient to compare if two files are actually the same.
* Note that in case the file is *gziped*, the checksum is computed on the raw file,
* not on the *un-gziped* buffer.
*
* It happens that a file is not binary but text, then, set the metadata "readAsText" to `true`.
*
* **Usage**
* - [examples/fileToArrayBuffer.html](../examples/fileToArrayBuffer.html)
*/

var FileToArrayBufferReader = function (_Filter) {
  inherits(FileToArrayBufferReader, _Filter);

  function FileToArrayBufferReader() {
    classCallCheck(this, FileToArrayBufferReader);

    var _this = possibleConstructorReturn(this, (FileToArrayBufferReader.__proto__ || Object.getPrototypeOf(FileToArrayBufferReader)).call(this));

    _this._outputCounter = 0;

    // filenames by categories
    _this.setMetadata("filenames", {});

    // md5 checksum by categories
    _this.setMetadata("checksums", {});

    // By defaut, this reader outputs an ArrayBuffer, but it can output a string
    // if it's reading a text file and this metadata is set to true
    _this.setMetadata("readAsText", false);
    return _this;
  }

  createClass(FileToArrayBufferReader, [{
    key: '_run',
    value: function _run() {
      var that = this;
      this._outputCounter = 0;
      var inputCategories = this.getInputCategories();

      inputCategories.forEach(function (category) {
        that._loadFile(category);
      });
    }

    /**
    * [PRIVATE]
    * Perform the loading for the input of the given category
    * @param {String} category - input category
     */

  }, {
    key: '_loadFile',
    value: function _loadFile(category) {
      var that = this;
      var reader = new FileReader();
      var readAsText = this.getMetadata("readAsText");

      // callback for reading the file as a text file
      var onLoadEndTextFile = function onLoadEndTextFile(event) {
        that.addTimeRecord("startRead");
        var result = event.target.result;

        // try to read as text, but it's not text.
        // Maybe it's a gz-compressed text file, so we have to read this file as a
        // binary and see if once compressed it has a valid text content
        if (!CodecUtils.isValidString(result)) {
          reader.onloadend = onLoadEndBinaryFile;
          reader.readAsArrayBuffer(that._getInput(category));
          return;
        }

        var filename = that._getInput(category).name;
        var basename = filename.split(/[\\/]/).pop();
        var extension = basename.split('.').pop();
        var checksum = md5(result);
        console.log(checksum);

        // few metadata for recognizing files (potentially)
        that._metadata.filenames[category] = basename;
        that._metadata.checksums[category] = checksum;

        that.addTimeRecord("endRead");
        var time = that.getTime("startRead", "endRead");
        console.log("Reading file took " + time + "ms.");

        that._output[category] = result;
        that._fileLoadCount();
      };

      // callback for reading the file as a binary file
      var onLoadEndBinaryFile = function onLoadEndBinaryFile(event) {
        that.addTimeRecord("startRead");

        var result = event.target.result;

        var filename = that._getInput(category).name;
        var basename = filename.split(/[\\/]/).pop();
        var extension = basename.split('.').pop();
        var checksum = md5(result);
        console.log(checksum);

        // few metadata for recognizing files (potentially)
        that._metadata.filenames[category] = basename;
        that._metadata.checksums[category] = checksum;

        if (extension.localeCompare("pixp")) {
          // trying to un-gzip it with Pako
          try {
            result = index$1.inflate(result).buffer;
            console.log("File was un-gziped successfully");
          } catch (err) {
            console.log("Pako: not a gziped file (" + err + ")");
          }
        }

        // read the content as text (unicode, ASCII compatible)
        if (readAsText) {
          var strResult = CodecUtils.arrayBufferToUnicode(result);
          if (!strResult) {
            console.warn("The content of this file is not a valid text. It could be read as a binary file if the metadata 'readAsText' is set to false.");
            return;
          } else {
            result = strResult;
          }
        }

        that.addTimeRecord("endRead");
        var time = that.getTime("startRead", "endRead");
        console.log("Reading file took " + time + "ms.");

        that._output[category] = result;
        that._fileLoadCount();
      };

      reader.onerror = function (e) {
        console.warn("ERROR");
        console.warn(e);
      };

      if (readAsText) {
        reader.onloadend = onLoadEndTextFile;
        reader.readAsText(this._getInput(category));
      } else {
        reader.onloadend = onLoadEndBinaryFile;
        reader.readAsArrayBuffer(this._getInput(category));
      }
    }

    /**
    * [PRIVATE]
    * Launch the "ready" event if all files are loaded
    */

  }, {
    key: '_fileLoadCount',
    value: function _fileLoadCount() {
      var that = this;
      this._outputCounter++;

      if (this._outputCounter == this.getNumberOfInputs()) {
        that.triggerEvent("ready");
      }
    }
  }]);
  return FileToArrayBufferReader;
}(Filter); /* END of class FileToArrayBufferReader */

/*
* Author   Jonathan Lurie - http://me.jonathanlurie.fr
* License  MIT
* Link      https://github.com/Pixpipe/pixpipejs
* Lab       MCIN - Montreal Neurological Institute
*/

/**
* Open a files as ArrayBuffer using their URL. You must specify one or several URL
* (String) using `addInput("...")` and add function to the event "ready" using
* `.on( "ready", function(filter){ ... })`.
* The "ready" event will be called only when all input are loaded.
* Gzip compressed files will be uncompressed.
* Once the filter is *updated*, you can query the `filenames` metadata (sorted by categories)
* and also the `checksums` metadata using `.getMetadata()`. This later metadata 
* give a unique *md5*, very convenient to compare if two files are actually the same.
* Note that in case the file is *gziped*, the checksum is computed on the raw file,
* not on the *un-gziped* buffer.
*
* It happens that a file is not binary but text, then, set the metadata "readAsText" to `true`.
*
* **Usage**
* - [examples/urlFileToArrayBuffer.html](../examples/urlFileToArrayBuffer.html)
*/

var UrlToArrayBufferReader = function (_Filter) {
  inherits(UrlToArrayBufferReader, _Filter);

  function UrlToArrayBufferReader() {
    classCallCheck(this, UrlToArrayBufferReader);

    var _this = possibleConstructorReturn(this, (UrlToArrayBufferReader.__proto__ || Object.getPrototypeOf(UrlToArrayBufferReader)).call(this));

    _this._outputCounter = 0;

    // filenames by categories
    _this.setMetadata("filenames", {});

    // md5 checksum by categories
    _this.setMetadata("checksums", {});

    // By defaut, this reader outputs an ArrayBuffer, but it can output a string
    // if it's reading a text file and this metadata is set to true
    _this.setMetadata("readAsText", false);
    return _this;
  }

  createClass(UrlToArrayBufferReader, [{
    key: '_run',
    value: function _run() {
      var that = this;

      if (!this.getNumberOfInputs()) {
        console.warn("No input was specified, cannot run this filer.");
        return;
      }

      this._forEachInput(function (category, input) {
        that._loadUrl(category, input);
      });
    }

    /**
    * [PRIVATE]
    * Perform a XMLHttpRequest with the given url and adds it to the output
    */

  }, {
    key: '_loadUrl',
    value: function _loadUrl(category, url) {
      var that = this;
      var readAsText = this.getMetadata("readAsText");

      var xhr = new XMLHttpRequest();
      xhr.open("GET", url, true);

      var onLoadEndBinaryFile = function onLoadEndBinaryFile(event) {
        var result = event.target.response;
        var basename = url.split(/[\\/]/).pop();
        var extension = basename.split('.').pop();
        var checksum = md5(result);

        // few metadata for recognizing files (potentially)
        that._metadata.filenames[category] = basename;
        that._metadata.checksums[category] = checksum;

        // trying to un-gzip it with Pako for non pixp files
        if (extension.localeCompare("pixp")) {
          try {
            result = index$1.inflate(result).buffer;
            console.log("File was un-gziped successfully");
          } catch (err) {
            console.log("Pako: not a gziped file (" + err + ")");
          }
        }

        // read the content as text (unicode, ASCII compatible)
        if (readAsText) {
          var strResult = CodecUtils.arrayBufferToUnicode(result);
          if (strResult && CodecUtils.isValidString(strResult)) {
            result = strResult;
          } else {
            console.warn("The content of this file is not a valid text. It could be read as a binary file if the metadata 'readAsText' is set to false.");
            return;
          }
        }

        that._output[category] = result;
        that._outputCounter++;

        if (that._outputCounter == that.getNumberOfInputs()) {
          that.triggerEvent("ready");
        }
      };

      var onLoadEndTextFile = function onLoadEndTextFile(event) {
        console.log("ooooooooo");
        var result = event.target.response;

        var basename = url.split(/[\\/]/).pop();
        var extension = basename.split('.').pop();
        var checksum = md5(result);

        // few metadata for recognizing files (potentially)
        that._metadata.filenames[category] = basename;
        that._metadata.checksums[category] = checksum;

        // try to read as text, but it's not text.
        // Maybe it's a gz-compressed text file, so we have to read this file as a
        // binary and see if once compressed it has a valid text content
        if (!CodecUtils.isValidString(result)) {
          event.target.abort();
          // xhrBackup is used only when reading as a text is not possible (binary file)
          // it is then used in case of failure of reading text in the first place
          var xhrBackup = new XMLHttpRequest();
          xhrBackup.open("GET", url, true);
          xhrBackup.responseType = "arraybuffer";
          xhrBackup.onload = onLoadEndBinaryFile;
          xhrBackup.send();
          return;
        }

        that._output[category] = result;
        that._outputCounter++;

        if (that._outputCounter == that.getNumberOfInputs()) {
          that.triggerEvent("ready");
        }
      };

      xhr.error = function () {
        console.log("here go the error");
      };

      if (readAsText) {
        xhr.responseType = "text";
        xhr.onload = onLoadEndTextFile;
        //xhr.onload = blaa;
      } else {
        xhr.responseType = "arraybuffer";
        xhr.onload = onLoadEndBinaryFile;
      }

      xhr.send();
    }
  }]);
  return UrlToArrayBufferReader;
}(Filter); /* END of class UrlToArrayBufferReader */

var FileSaver = createCommonjsModule$$1(function (module) {
	/* FileSaver.js
  * A saveAs() FileSaver implementation.
  * 1.3.2
  * 2016-06-16 18:25:19
  *
  * By Eli Grey, http://eligrey.com
  * License: MIT
  *   See https://github.com/eligrey/FileSaver.js/blob/master/LICENSE.md
  */

	/*global self */
	/*jslint bitwise: true, indent: 4, laxbreak: true, laxcomma: true, smarttabs: true, plusplus: true */

	/*! @source http://purl.eligrey.com/github/FileSaver.js/blob/master/FileSaver.js */

	var saveAs = saveAs || function (view) {
		"use strict";
		// IE <10 is explicitly unsupported

		if (typeof view === "undefined" || typeof navigator !== "undefined" && /MSIE [1-9]\./.test(navigator.userAgent)) {
			return;
		}
		var doc = view.document
		// only get URL when necessary in case Blob.js hasn't overridden it yet
		,
		    get_URL = function get_URL() {
			return view.URL || view.webkitURL || view;
		},
		    save_link = doc.createElementNS("http://www.w3.org/1999/xhtml", "a"),
		    can_use_save_link = "download" in save_link,
		    click = function click(node) {
			var event = new MouseEvent("click");
			node.dispatchEvent(event);
		},
		    is_safari = /constructor/i.test(view.HTMLElement) || view.safari,
		    is_chrome_ios = /CriOS\/[\d]+/.test(navigator.userAgent),
		    throw_outside = function throw_outside(ex) {
			(view.setImmediate || view.setTimeout)(function () {
				throw ex;
			}, 0);
		},
		    force_saveable_type = "application/octet-stream"
		// the Blob API is fundamentally broken as there is no "downloadfinished" event to subscribe to
		,
		    arbitrary_revoke_timeout = 1000 * 40 // in ms
		,
		    revoke = function revoke(file) {
			var revoker = function revoker() {
				if (typeof file === "string") {
					// file is an object URL
					get_URL().revokeObjectURL(file);
				} else {
					// file is a File
					file.remove();
				}
			};
			setTimeout(revoker, arbitrary_revoke_timeout);
		},
		    dispatch = function dispatch(filesaver, event_types, event) {
			event_types = [].concat(event_types);
			var i = event_types.length;
			while (i--) {
				var listener = filesaver["on" + event_types[i]];
				if (typeof listener === "function") {
					try {
						listener.call(filesaver, event || filesaver);
					} catch (ex) {
						throw_outside(ex);
					}
				}
			}
		},
		    auto_bom = function auto_bom(blob) {
			// prepend BOM for UTF-8 XML and text/* types (including HTML)
			// note: your browser will automatically convert UTF-16 U+FEFF to EF BB BF
			if (/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(blob.type)) {
				return new Blob([String.fromCharCode(0xFEFF), blob], { type: blob.type });
			}
			return blob;
		},
		    FileSaver = function FileSaver(blob, name, no_auto_bom) {
			if (!no_auto_bom) {
				blob = auto_bom(blob);
			}
			// First try a.download, then web filesystem, then object URLs
			var filesaver = this,
			    type = blob.type,
			    force = type === force_saveable_type,
			    object_url,
			    dispatch_all = function dispatch_all() {
				dispatch(filesaver, "writestart progress write writeend".split(" "));
			}
			// on any filesys errors revert to saving with object URLs
			,
			    fs_error = function fs_error() {
				if ((is_chrome_ios || force && is_safari) && view.FileReader) {
					// Safari doesn't allow downloading of blob urls
					var reader = new FileReader();
					reader.onloadend = function () {
						var url = is_chrome_ios ? reader.result : reader.result.replace(/^data:[^;]*;/, 'data:attachment/file;');
						var popup = view.open(url, '_blank');
						if (!popup) view.location.href = url;
						url = undefined; // release reference before dispatching
						filesaver.readyState = filesaver.DONE;
						dispatch_all();
					};
					reader.readAsDataURL(blob);
					filesaver.readyState = filesaver.INIT;
					return;
				}
				// don't create more object URLs than needed
				if (!object_url) {
					object_url = get_URL().createObjectURL(blob);
				}
				if (force) {
					view.location.href = object_url;
				} else {
					var opened = view.open(object_url, "_blank");
					if (!opened) {
						// Apple does not allow window.open, see https://developer.apple.com/library/safari/documentation/Tools/Conceptual/SafariExtensionGuide/WorkingwithWindowsandTabs/WorkingwithWindowsandTabs.html
						view.location.href = object_url;
					}
				}
				filesaver.readyState = filesaver.DONE;
				dispatch_all();
				revoke(object_url);
			};
			filesaver.readyState = filesaver.INIT;

			if (can_use_save_link) {
				object_url = get_URL().createObjectURL(blob);
				setTimeout(function () {
					save_link.href = object_url;
					save_link.download = name;
					click(save_link);
					dispatch_all();
					revoke(object_url);
					filesaver.readyState = filesaver.DONE;
				});
				return;
			}

			fs_error();
		},
		    FS_proto = FileSaver.prototype,
		    saveAs = function saveAs(blob, name, no_auto_bom) {
			return new FileSaver(blob, name || blob.name || "download", no_auto_bom);
		};
		// IE 10+ (native saveAs)
		if (typeof navigator !== "undefined" && navigator.msSaveOrOpenBlob) {
			return function (blob, name, no_auto_bom) {
				name = name || blob.name || "download";

				if (!no_auto_bom) {
					blob = auto_bom(blob);
				}
				return navigator.msSaveOrOpenBlob(blob, name);
			};
		}

		FS_proto.abort = function () {};
		FS_proto.readyState = FS_proto.INIT = 0;
		FS_proto.WRITING = 1;
		FS_proto.DONE = 2;

		FS_proto.error = FS_proto.onwritestart = FS_proto.onprogress = FS_proto.onwrite = FS_proto.onabort = FS_proto.onerror = FS_proto.onwriteend = null;

		return saveAs;
	}(typeof self !== "undefined" && self || typeof window !== "undefined" && window || commonjsGlobal$$1.content);
	// `self` is undefined in Firefox for Android content script context
	// while `this` is nsIContentFrameMessageManager
	// with an attribute `content` that corresponds to the window

	if ('object' !== "undefined" && module.exports) {
		module.exports.saveAs = saveAs;
	} else if (typeof undefined !== "undefined" && undefined !== null && undefined.amd !== null) {
		undefined("FileSaver.js", function () {
			return saveAs;
		});
	}
});

/**
* An instance of BrowserDownloadBuffer takes an ArrayBuffer as input and triggers
* a download when `update()` is called. This is for **browser only**!  
* A filename must be specified using `.setMetadata( "filename", "myFile.ext" )`.
*
*/

var BrowserDownloadBuffer = function (_Filter) {
  inherits(BrowserDownloadBuffer, _Filter);

  function BrowserDownloadBuffer() {
    classCallCheck(this, BrowserDownloadBuffer);

    var _this = possibleConstructorReturn(this, (BrowserDownloadBuffer.__proto__ || Object.getPrototypeOf(BrowserDownloadBuffer)).call(this));

    _this.addInputValidator(0, ArrayBuffer);
    _this.setMetadata("filename", null);
    return _this;
  }

  createClass(BrowserDownloadBuffer, [{
    key: '_run',
    value: function _run() {
      if (!this.hasValidInput()) {
        console.warn("BrowserDownloadBuffer uses only ArrayBuffer.");
        return;
      }

      var filename = this.getMetadata("filename");

      if (!filename) {
        console.warn("A filename must be specified. Use the method `.setMetadata('filename', 'theFile.ext')` on this filter.");
        return;
      }

      // making a blob
      var blob = new Blob([this._getInput()], { type: 'application/octet-binary' });

      // triggers the download of the file
      FileSaver.saveAs(blob, filename);
    }
  }]);
  return BrowserDownloadBuffer;
}(Filter); /* END of class BrowserDownloadBuffer */

/*
* Author    Jonathan Lurie - http://me.jonathanlurie.fr
*           Robert D. Vincent
*
* License   MIT
* Link      https://github.com/Pixpipe/pixpipejs
* Lab       MCIN - Montreal Neurological Institute
*/

/**
* Decode a HDF5 file, but is most likely to be restricted to the features that are
* used for Minc2 file format.
* The metadata "debug" can be set to true to
* enable a verbose mode.
* Takes an ArrayBuffer as input (0) and output a `MniVolume` (which inherit `Image3D`).
*
* **Usage**
* - [examples/fileToMinc2.html](../examples/fileToMinc2.html)
*/

var Minc2Decoder = function (_Filter) {
  inherits(Minc2Decoder, _Filter);

  function Minc2Decoder() {
    classCallCheck(this, Minc2Decoder);

    var _this = possibleConstructorReturn(this, (Minc2Decoder.__proto__ || Object.getPrototypeOf(Minc2Decoder)).call(this));

    _this.addInputValidator(0, ArrayBuffer);

    _this.setMetadata("debug", false);

    _this._type_enum = {
      INT8: 1,
      UINT8: 2,
      INT16: 3,
      UINT16: 4,
      INT32: 5,
      UINT32: 6,
      FLT: 7,
      DBL: 8,
      STR: 9
    };

    _this._type_matching = ["int8", "uint8", "int16", "uint16", "int32", "uint32", "float32", "float64", "undef" // STR type is not compatible with minc
    // we deal rgb8 manually
    ];

    _this.type_sizes = [0, 1, 1, 2, 2, 4, 4, 4, 8, 0];

    _this._dv_offset = 0;
    _this._align = 8;
    _this._little_endian = true;
    _this._continuation_queue = [];
    _this._dv = null; //new DataView(abuf);
    _this._superblk = {};
    _this._start_offset = 0;
    _this._huge_id = 0;

    return _this;
  }

  /**
  * [PRIVATE]
  */


  createClass(Minc2Decoder, [{
    key: 'createLink',
    value: function createLink() {
      var r = {};
      // internal/private
      r.hdr_offset = 0; // offset to object header.
      r.data_offset = 0; // offset to actual data.
      r.data_length = 0; // length of data.
      r.n_filled = 0; // counts elements written to array
      r.chunk_size = 0; // size of chunks
      r.sym_btree = 0; // offset of symbol table btree
      r.sym_lheap = 0; // offset of symbol table local heap
      // permanent/global
      r.name = ""; // name of this group or dataset.
      r.attributes = {}; // indexed by attribute name.
      r.children = []; // not associative for now.
      r.array = undefined; // actual data, if dataset.
      r.type = -1; // type of data.
      r.inflate = false; // true if need to inflate (gzip).
      r.dims = []; // dimension sizes.
      return r;
    }

    /**
    * [PRIVATE]
    *
    * Turns out that alignment of the messages in at least the
    * version 1 object header is actually relative to the start
    * of the header. So we update the start position of the
    * header here, so we can refer to it when calculating the
    * alignment in this.checkAlignment().
    */

  }, {
    key: 'startAlignment',
    value: function startAlignment() {
      this._start_offset = this._dv_offset;
    }

    /**
    * [PRIVATE]
    */

  }, {
    key: 'checkAlignment',
    value: function checkAlignment() {
      var tmp = this._dv_offset - this._start_offset;
      if (tmp % this._align !== 0) {
        var n = this._align - tmp % this._align;
        this._dv_offset += n;
        if (this.getMetadata("debug")) {
          console.log('skipping ' + n + ' bytes at ' + tmp + ' for alignmnent');
        }
      }
    }

    /**
    * [PRIVATE]
    *
    * helper functions to manipulate the current DataView offset.
    */

  }, {
    key: 'skip',
    value: function skip(n_bytes) {
      this._dv_offset += n_bytes;
    }

    /**
    * [PRIVATE]
    */

  }, {
    key: 'seek',
    value: function seek(new_offset) {
      this._dv_offset = new_offset;
    }

    /**
    * [PRIVATE]
    */

  }, {
    key: 'tell',
    value: function tell() {
      return this._dv_offset;
    }

    /**
    * [PRIVATE]
    *
    * helper functions for access to our DataView.
    */

  }, {
    key: 'getU8',
    value: function getU8() {
      var v = this._dv.getUint8(this._dv_offset);
      this._dv_offset += 1;
      return v;
    }

    /**
    * [PRIVATE]
    */

  }, {
    key: 'getU16',
    value: function getU16() {
      var v = this._dv.getUint16(this._dv_offset, this._little_endian);
      this._dv_offset += 2;
      return v;
    }

    /**
    * [PRIVATE]
    */

  }, {
    key: 'getU32',
    value: function getU32() {
      var v = this._dv.getUint32(this._dv_offset, this._little_endian);
      this._dv_offset += 4;
      return v;
    }

    /**
    * [PRIVATE]
    */

  }, {
    key: 'getU64',
    value: function getU64() {
      var v = this._dv.getUint64(this._dv_offset, this._little_endian);
      this._dv_offset += 8;
      return v;
    }

    /**
    * [PRIVATE]
    */

  }, {
    key: 'getF32',
    value: function getF32() {
      var v = this._dv.getFloat32(this._dv_offset, this._little_endian);
      this._dv_offset += 4;
      return v;
    }

    /**
    * [PRIVATE]
    */

  }, {
    key: 'getF64',
    value: function getF64() {
      var v = this._dv.getFloat64(this._dv_offset, this._little_endian);
      this._dv_offset += 8;
      return v;
    }

    /**
    * [PRIVATE]
    */

  }, {
    key: 'getOffset',
    value: function getOffset(offsz) {
      var v = 0;
      offsz = offsz || this._superblk.offsz;
      if (offsz === 4) {
        v = this._dv.getUint32(this._dv_offset, this._little_endian);
      } else if (offsz === 8) {
        v = this._dv.getUint64(this._dv_offset, this._little_endian);
      } else {
        throw new Error('Unsupported value for offset size ' + offsz);
      }
      this._dv_offset += offsz;
      return v;
    }

    /**
    * [PRIVATE]
    */

  }, {
    key: 'getLength',
    value: function getLength() {
      var v = this._dv.getUint64(this._dv_offset, this._little_endian);
      this._dv_offset += this._superblk.lensz;
      return v;
    }

    /**
    * [PRIVATE]
    */

  }, {
    key: 'getString',
    value: function getString(length) {
      var r = "";
      var i;
      var c;
      for (i = 0; i < length; i += 1) {
        c = this.getU8();
        if (c === 0) {
          this._dv_offset += length - i - 1;
          break;
        }
        r += String.fromCharCode(c);
      }
      return r;
    }

    /**
    * [PRIVATE]
    */

  }, {
    key: 'getArray',
    value: function getArray(typ, n_bytes, new_off) {
      var value;
      var n_values;
      var new_abuf;
      var abuf = this._getInput();
      var i;
      var spp = this._dv_offset;
      if (new_off) {
        this._dv_offset = new_off;
      }
      switch (typ) {
        case this._type_enum.INT8:
          value = new Int8Array(abuf, this._dv_offset, n_bytes);
          break;
        case this._type_enum.UINT8:
          value = new Uint8Array(abuf, this._dv_offset, n_bytes);
          break;
        case this._type_enum.INT16:
          if (this._dv_offset % 2 !== 0) {
            new_abuf = new ArrayBuffer(n_bytes);
            n_values = n_bytes / 2;
            value = new Int16Array(new_abuf);
            for (i = 0; i < n_values; i += 1) {
              value[i] = this.getU16();
            }
          } else {
            value = new Int16Array(abuf, this._dv_offset, n_bytes / 2);
            this._dv_offset += n_bytes;
          }
          break;
        case this._type_enum.UINT16:
          if (this._dv_offset % 2 !== 0) {
            new_abuf = new ArrayBuffer(n_bytes);
            n_values = n_bytes / 2;
            value = new Uint16Array(new_abuf);
            for (i = 0; i < n_values; i += 1) {
              value[i] = this.getU16();
            }
          } else {
            value = new Uint16Array(abuf, this._dv_offset, n_bytes / 2);
            this._dv_offset += n_bytes;
          }
          break;
        case this._type_enum.INT32:
          if (this._dv_offset % 4 !== 0) {
            new_abuf = new ArrayBuffer(n_bytes);
            n_values = n_bytes / 4;
            value = new Int32Array(new_abuf);
            for (i = 0; i < n_values; i += 1) {
              value[i] = this.getU32();
            }
          } else {
            value = new Int32Array(abuf, this._dv_offset, n_bytes / 4);
            this._dv_offset += n_bytes;
          }
          break;
        case this._type_enum.UINT32:
          if (this._dv_offset % 4 !== 0) {
            new_abuf = new ArrayBuffer(n_bytes);
            n_values = n_bytes / 4;
            value = new Uint32Array(new_abuf);
            for (i = 0; i < n_values; i += 1) {
              value[i] = this.getU32();
            }
          } else {
            value = new Uint32Array(abuf, this._dv_offset, n_bytes / 4);
            this._dv_offset += n_bytes;
          }
          break;
        case this._type_enum.FLT:
          if (this._dv_offset % 4 !== 0) {
            new_abuf = new ArrayBuffer(n_bytes);
            n_values = n_bytes / 4;
            value = new Float32Array(new_abuf);
            for (i = 0; i < n_values; i += 1) {
              value[i] = this.getF32();
            }
          } else {
            value = new Float32Array(abuf, this._dv_offset, n_bytes / 4);
            this._dv_offset += n_bytes;
          }
          break;
        case this._type_enum.DBL:
          if (this._dv_offset % 8 !== 0) {
            new_abuf = new ArrayBuffer(n_bytes);
            n_values = n_bytes / 8;
            value = new Float64Array(new_abuf);
            for (i = 0; i < n_values; i += 1) {
              value[i] = this.getF64();
            }
          } else {
            value = new Float64Array(abuf, this._dv_offset, n_bytes / 8);
            this._dv_offset += n_bytes;
          }
          break;
        default:
          throw new Error('Bad type in this.getArray ' + typ);
      }
      if (new_off) {
        this._dv_offset = spp;
      }
      return value;
    }

    /**
    * [PRIVATE]
    *
    * Get a variably-sized integer from the DataView.
    */

  }, {
    key: 'getUXX',
    value: function getUXX(n) {
      var v;
      var i;
      switch (n) {
        case 1:
          v = this._dv.getUint8(this._dv_offset);
          break;
        case 2:
          v = this._dv.getUint16(this._dv_offset, this._little_endian);
          break;
        case 4:
          v = this._dv.getUint32(this._dv_offset, this._little_endian);
          break;
        case 8:
          v = this._dv.getUint64(this._dv_offset, this._little_endian);
          break;
        default:
          /* Certain hdf5 types can have odd numbers of bytes. We try
           * to deal with that special case here.
           */
          v = 0;
          if (!this._little_endian) {
            for (i = 0; i < n; i++) {
              v = (v << 8) + this._dv.getUint8(this._dv_offset + i);
            }
          } else {
            for (i = n - 1; i >= 0; i--) {
              v = (v << 8) + this._dv.getUint8(this._dv_offset + i);
            }
          }
      }
      this._dv_offset += n;
      return v;
    }

    /**
    * [PRIVATE]
    *
    * Verify that the expected signature is found at this offset.
    */

  }, {
    key: 'checkSignature',
    value: function checkSignature(str) {
      var i;
      for (i = 0; i < str.length; i += 1) {
        if (this._dv.getUint8(this._dv_offset + i) !== str.charCodeAt(i)) {
          return false;
        }
      }
      this.skip(str.length);
      return true;
    }

    /**
    * [PRIVATE]
    */

  }, {
    key: 'hdf5Superblock',
    value: function hdf5Superblock() {
      var sb = {};
      if (!this.checkSignature('\x89HDF\r\n\x1A\n')) {
        throw new Error('Bad magic string in HDF5');
      }
      sb.sbver = this.getU8();
      if (sb.sbver > 2) {
        throw new Error('Unsupported HDF5 superblock version ' + sb.sbver);
      }
      if (sb.sbver <= 1) {
        sb.fsver = this.getU8();
        sb.rgver = this.getU8();
        this.skip(1); // reserved
        sb.shver = this.getU8();
        sb.offsz = this.getU8();
        sb.lensz = this.getU8();
        this.skip(1); // reserved
        sb.gln_k = this.getU16();
        sb.gin_k = this.getU16();
        sb.cflags = this.getU32();
        if (sb.sbver === 1) {
          sb.isin_k = this.getU16();
          this.skip(2); // reserved
        }
        sb.base_addr = this.getOffset(sb.offsz);
        sb.gfsi_addr = this.getOffset(sb.offsz);
        sb.eof_addr = this.getOffset(sb.offsz);
        sb.dib_addr = this.getOffset(sb.offsz);
        sb.root_ln_offs = this.getOffset(sb.offsz);
        sb.root_addr = this.getOffset(sb.offsz);
        sb.root_cache_type = this.getU32();
        this.skip(4);
        this.skip(16);
      } else {
        sb.offsz = this.getU8();
        sb.lensz = this.getU8();
        sb.cflags = this.getU8();
        sb.base_addr = this.getOffset(sb.offsz);
        sb.ext_addr = this.getOffset(sb.offsz);
        sb.eof_addr = this.getOffset(sb.offsz);
        sb.root_addr = this.getOffset(sb.offsz);
        sb.checksum = this.getU32();
      }
      if (this.getMetadata("debug")) {
        console.log("HDF5 SB " + sb.sbver + " " + sb.offsz + " " + sb.lensz + " " + sb.cflags);
      }
      return sb;
    }

    /**
    * [PRIVATE]
    *
    * read the v2 fractal heap header
    */

  }, {
    key: 'hdf5FractalHeapHeader',
    value: function hdf5FractalHeapHeader() {
      var fh = {};
      if (!this.checkSignature("FRHP")) {
        throw new Error('Bad or missing FRHP signature');
      }
      fh.ver = this.getU8(); // Version
      fh.idlen = this.getU16(); // Heap ID length
      fh.iof_el = this.getU16(); // I/O filter's encoded length
      fh.flags = this.getU8(); // Flags
      fh.objmax = this.getU32(); // Maximum size of managed objects.
      fh.objnid = this.getLength(); // Next huge object ID
      fh.objbta = this.getOffset(); // v2 B-tree address of huge objects
      fh.nf_blk = this.getLength(); // Amount of free space in managed blocks
      fh.af_blk = this.getOffset(); // Address of managed block free space manager
      fh.heap_total = this.getLength(); // Amount of managed space in heap
      fh.heap_alloc = this.getLength(); // Amount of allocated managed space in heap
      fh.bai_offset = this.getLength(); // Offset of direct block allocation iterator
      fh.heap_nobj = this.getLength(); // Number of managed objects in heap
      fh.heap_chuge = this.getLength(); // Size of huge objects in heap
      fh.heap_nhuge = this.getLength(); // Number of huge objects in heap
      fh.heap_ctiny = this.getLength(); // Size of tiny objects in heap
      fh.heap_ntiny = this.getLength(); // Number of tiny objects in heap
      fh.table_width = this.getU16(); // Table width
      fh.start_blksz = this.getLength(); // Starting block size
      fh.max_blksz = this.getLength(); // Maximum direct block size
      fh.max_heapsz = this.getU16(); // Maximum heap size
      fh.rib_srows = this.getU16(); // Starting # of rows in root indirect block
      fh.root_addr = this.getOffset(); // Address of root block
      fh.rib_crows = this.getU16(); // Current # of rows in root indirect block

      var max_dblock_rows = Math.log2(fh.max_blksz) - Math.log2(fh.start_blksz) + 2;
      fh.K = Math.min(fh.rib_crows, max_dblock_rows) * fh.table_width;
      fh.N = fh.rib_crows < max_dblock_rows ? 0 : fh.K - max_dblock_rows * fh.table_width;

      if (this.getMetadata("debug")) {
        console.log("FRHP V" + fh.ver + " F" + fh.flags + " " + fh.objbta + " Total:" + fh.heap_total + " Alloc:" + fh.heap_alloc + " #obj:" + fh.heap_nobj + " width:" + fh.table_width + " start_blksz:" + fh.start_blksz + " max_blksz:" + fh.max_blksz + " " + fh.max_heapsz + " srows:" + fh.rib_srows + " crows:" + fh.rib_crows + " " + fh.heap_nhuge);
        console.log("   K: " + fh.K + " N: " + fh.N);
      }

      if (fh.iof_el > 0) {
        throw new Error("Filters present in fractal heap.");
      }
      return fh;
    }

    /**
    * [PRIVATE]
    *
    * read the v2 btree header
    */

  }, {
    key: 'hdf5V2BtreeHeader',
    value: function hdf5V2BtreeHeader() {
      var bh = {};
      if (!this.checkSignature("BTHD")) {
        throw new Error('Bad or missing BTHD signature');
      }
      bh.ver = this.getU8();
      bh.type = this.getU8();
      bh.nodesz = this.getU32();
      bh.recsz = this.getU16();
      bh.depth = this.getU16();
      bh.splitp = this.getU8();
      bh.mergep = this.getU8();
      bh.root_addr = this.getOffset();
      bh.root_nrec = this.getU16();
      bh.total_nrec = this.getLength();
      bh.checksum = this.getU32();

      if (this.getMetadata("debug")) {
        console.log("BTHD V" + bh.ver + " T" + bh.type + " " + bh.nodesz + " " + bh.recsz + " " + bh.depth + " " + bh.root_addr + " " + bh.root_nrec + " " + bh.total_nrec);
      }
      return bh;
    }

    /**
    * [PRIVATE]
    *
    * Enumerates btree records in a block. Records are found both in direct
    * and indirect v2 btree blocks.
    */

  }, {
    key: 'hdf5V2BtreeRecords',
    value: function hdf5V2BtreeRecords(fh, bt_type, nrec, link) {
      var i;
      var spp; // saved position pointer
      var offset;
      var length;
      if (bt_type === 1) {
        for (i = 0; i < nrec; i++) {
          offset = this.getOffset();
          length = this.getLength();
          var id = this.getLength();
          if (this.getMetadata("debug")) {
            console.log("  -> " + offset + " " + length + " " + id + " " + this._this._huge_id);
          }
          spp = this.tell();
          if (id === this._this._huge_id) {
            this.seek(offset);
            this.hdf5MsgAttribute(length, link);
          }
          this.seek(spp);
        }
      } else if (bt_type === 8) {
        var cb_offs;
        var cb_leng;
        /* maximum heap size is stored in bits! */
        cb_offs = fh.max_heapsz / 8;
        var tmp = Math.min(fh.objmax, fh.max_blksz);
        if (tmp <= 256) {
          cb_leng = 1;
        } else if (tmp <= 65536) {
          cb_leng = 2;
        } else {
          cb_leng = 4;
        }
        for (i = 0; i < nrec; i++) {
          /* Read managed fractal heap ID.
           */
          var vt = this.getU8();
          if ((vt & 0xc0) !== 0) {
            throw new Error('Bad Fractal Heap ID version ' + vt);
          }
          var id_type = vt & 0x30;
          var flags;
          if (id_type === 0x10) {
            // huge!
            this._this._huge_id = this.getUXX(7);
          } else if (id_type === 0x00) {
            // managed.
            offset = this.getUXX(cb_offs);
            length = this.getUXX(cb_leng);
          } else {
            throw new Error("Can't handle this Heap ID: " + vt);
          }
          flags = this.getU8();

          /* Read the rest of the record.
           */
          this.getU32(); // creation order (IGNORE)
          this.getU32(); // hash (IGNORE)
          if (this.getMetadata("debug")) {
            console.log("  -> " + vt + " " + offset + " " + length + " " + flags);
          }
          spp = this.tell();
          if (id_type === 0x10) {
            /* A "huge" object is found by indexing through the btree
             * present in the header
             */
            this.seek(fh.objbta);
            var bh = this.hdf5V2BtreeHeader();
            if (bh.type === 1) {
              this.seek(bh.root_addr);
              this.hdf5V2BtreeLeafNode(fh, bh.root_nrec, link);
            } else {
              throw new Error("Can only handle type-1 btrees");
            }
          } else {
            /*
             * A managed object implies that the attribute message is
             * found in the associated fractal heap at the specified
             * offset in the heap. We get the actual address
             * corresponding to the offset here.
             */
            var location = this.hdf5FractalHeapOffset(fh, offset);
            this.seek(location);
            this.hdf5MsgAttribute(length, link);
          }
          this.seek(spp);
        }
      } else {
        throw new Error("Unhandled V2 btree type.");
      }
    }

    /**
    * [PRIVATE]
    *
    * read a v2 btree leaf node
    */

  }, {
    key: 'hdf5V2BtreeLeafNode',
    value: function hdf5V2BtreeLeafNode(fh, nrec, link) {

      if (!this.checkSignature("BTLF")) {
        throw new Error('Bad or missing BTLF signature');
      }

      var ver = this.getU8();
      var typ = this.getU8();

      if (this.getMetadata("debug")) {
        console.log("BTLF V" + ver + " T" + typ + " " + this.tell());
      }
      this.hdf5V2BtreeRecords(fh, typ, nrec, link);
    }

    /**
    * [PRIVATE]
    *
    * read the hdf5 v2 btree internal node
    */

  }, {
    key: 'hdf5V2BtreeInternalNode',
    value: function hdf5V2BtreeInternalNode(fh, nrec, depth, link) {

      if (!this.checkSignature("BTIN")) {
        throw new Error('Bad or missing BTIN signature');
      }
      var ver = this.getU8();
      var type = this.getU8();
      var i;

      if (this.getMetadata("debug")) {
        console.log("BTIN V" + ver + " T" + type);
      }
      this.hdf5V2BtreeRecords(fh, type, nrec, link);
      for (i = 0; i <= nrec; i++) {
        var child_offset = this.getOffset();
        var child_nrec = this.getUXX(1); // TODO: calculate real size!!
        var child_total;
        /* TODO: unfortunately, this field is optional and
         * variably-sized. Calculating the size is non-trivial, as it
         * depends on the total depth and size of the tree. For now
         * we will just assume it is its minimum size, as I've never
         * encountered a file with depth > 1 anyway.
         */
        if (depth > 1) {
          child_total = this.getUXX(1);
        }
        if (this.getMetadata("debug")) {
          console.log(" child->" + child_offset + " " + child_nrec + " " + child_total);
        }
      }
    }

    /**
    * [PRIVATE]
    */

  }, {
    key: 'hdf5GetMsgName',
    value: function hdf5GetMsgName(n) {

      // JO: used to be in the global scope.
      /* Names of the various HDF5 messages.
       * Note that MESSAGE23 appears to be illegal. All the rest are defined,
       * although I've never encountered a BOGUS message!
       */
      var msg_names = ["NIL", "Dataspace", "LinkInfo", "Datatype", "FillValue 1", "FillValue 2", "Link", "ExternalFiles", "Layout", "BOGUS", "GroupInfo", "FilterPipeline", "Attribute", "ObjectComment", "ObjectModTime 1", "SharedMsgTable", "ObjHdrContinue", "SymbolTable", "ObjectModTime 2", "BtreeKValue", "DriverInfo", "AttrInfo", "ObjectRefCnt", "MESSAGE23", "FileSpaceInfo"];

      if (n < msg_names.length) {
        return msg_names[n];
      }
      throw new Error('Unknown message type ' + n + " " + this.tell());
    }

    /**
    * [PRIVATE]
    */

  }, {
    key: 'hdf5V1BtreeNode',
    value: function hdf5V1BtreeNode(link) {
      var abuf = this._getInput();
      var i;
      var bt = {};
      if (!this.checkSignature("TREE")) {
        throw new Error('Bad TREE signature at ' + this.tell());
      }

      bt.keys = [];

      bt.node_type = this.getU8();
      bt.node_level = this.getU8();
      bt.entries_used = this.getU16();
      bt.left_sibling = this.getOffset();
      bt.right_sibling = this.getOffset();

      if (this.getMetadata("debug")) {
        console.log("BTREE type " + bt.node_type + " lvl " + bt.node_level + " n_used " + bt.entries_used + " " + bt.left_sibling + " " + bt.right_sibling);
      }

      if (!link) {
        /* If this BTREE is associated with a group (not a dataset),
         * then its keys are single "length" value.
         */
        for (i = 0; i < bt.entries_used; i += 1) {
          bt.keys[i] = {};
          bt.keys[i].key_value = this.getLength();
          bt.keys[i].child_address = this.getOffset();
          if (this.getMetadata("debug")) {
            console.log("  BTREE " + i + " key " + bt.keys[i].key_value + " adr " + bt.keys[i].child_address);
          }
        }
      } else {
        var j;

        /* If this BTREE is a "chunked raw data node" associated
         * with a dataset, then its keys are complex, consisting
         * of the chunk size in bytes, a filter mask, and a set of
         * offsets matching the dimensionality of the chunk layout.
         * The chunk size stores the actual stored length of the
         * data, so it may not equal the uncompressed chunk size.
         */
        var chunks = [];

        for (i = 0; i < bt.entries_used; i += 1) {
          bt.keys[i] = {};
          chunks[i] = {};
          chunks[i].chunk_size = this.getU32();
          chunks[i].filter_mask = this.getU32();
          chunks[i].chunk_offsets = [];
          for (j = 0; j < link.dims.length + 1; j += 1) {
            chunks[i].chunk_offsets.push(this.getU64());
          }
          bt.keys[i].child_address = this.getOffset();
          if (i < bt.entries_used) {
            if (this.getMetadata("debug")) {
              console.log("  BTREE " + i + " chunk_size " + chunks[i].chunk_size + " filter_mask " + chunks[i].filter_mask + " addr " + bt.keys[i].child_address);
            }
          }
        }
        chunks[i] = {};
        chunks[i].chunk_size = this.getU32();
        chunks[i].filter_mask = this.getU32();
        chunks[i].chunk_offsets = [];
        for (j = 0; j < link.dims.length + 1; j += 1) {
          chunks[i].chunk_offsets.push(this.getU64());
        }

        /* If we're at a leaf node, we have data to deal with.
         * We might have to uncompress!
         */
        if (bt.node_level === 0) {
          var length;
          var offset;
          var sp;
          var dp;

          for (i = 0; i < bt.entries_used; i += 1) {
            length = chunks[i].chunk_size;
            offset = bt.keys[i].child_address;

            if (link.inflate) {
              sp = new Uint8Array(abuf, offset, length);
              dp = index$1.inflate(sp);
              switch (link.type) {
                case this._type_enum.INT8:
                  dp = new Int8Array(dp.buffer);
                  break;
                case this._type_enum.UINT8:
                  dp = new Uint8Array(dp.buffer);
                  break;
                case this._type_enum.INT16:
                  dp = new Int16Array(dp.buffer);
                  break;
                case this._type_enum.UINT16:
                  dp = new Uint16Array(dp.buffer);
                  break;
                case this._type_enum.INT32:
                  dp = new Int32Array(dp.buffer);
                  break;
                case this._type_enum.UINT32:
                  dp = new Uint32Array(dp.buffer);
                  break;
                case this._type_enum.FLT:
                  dp = new Float32Array(dp.buffer);
                  break;
                case this._type_enum.DBL:
                  dp = new Float64Array(dp.buffer);
                  break;
                default:
                  throw new Error('Unknown type code ' + link.type);
              }
              if (link.array.length - link.n_filled < dp.length) {
                dp = dp.subarray(0, link.array.length - link.n_filled);
              }
              link.array.set(dp, link.n_filled);
              link.n_filled += dp.length;
              if (this.getMetadata("debug")) {
                console.log(link.name + " " + sp.length + " " + dp.length + " " + link.n_filled + "/" + link.array.length);
              }
            } else {
              /* no need to inflate data. */
              dp = this.getArray(link.type, length, offset);
              link.array.set(dp, link.n_filled);
              link.n_filled += dp.length;
            }
          }
        } else {
          for (i = 0; i < bt.entries_used; i += 1) {
            this.seek(bt.keys[i].child_address);
            this.hdf5V1BtreeNode(link);
          }
        }
      }
      return bt;
    }

    /**
    * [PRIVATE]
    */

  }, {
    key: 'hdf5GroupSymbolTable',
    value: function hdf5GroupSymbolTable(lh, link) {
      if (!this.checkSignature("SNOD")) {
        throw new Error('Bad or missing SNOD signature');
      }
      var ver = this.getU8();
      this.skip(1);
      var n_sym = this.getU16();
      if (this.getMetadata("debug")) {
        console.log("this.hdf5GroupSymbolTable V" + ver + " #" + n_sym + " '" + link.name + "'");
      }
      var i;
      var link_name_offset;
      var ohdr_address;
      var cache_type;
      var child;
      var spp;

      for (i = 0; i < 2 * this._superblk.gln_k; i += 1) {
        link_name_offset = this.getOffset();
        ohdr_address = this.getOffset();
        cache_type = this.getU32();
        this.skip(20);

        if (i < n_sym) {
          child = this.createLink();
          child.hdr_offset = ohdr_address;
          if (lh) {
            spp = this.tell();
            /* The link name is a zero-terminated string
             * starting at the link_name_off relative to
             * the beginning of the data segment of the local
             * heap.
             */
            this.seek(lh.lh_dseg_off + link_name_offset);
            child.name = this.getString(lh.lh_dseg_len);
            this.seek(spp);
          }
          if (this.getMetadata("debug")) {
            console.log("    " + i + " O " + link_name_offset + " A " + ohdr_address + " T " + cache_type + " '" + child.name + "'");
          }
          link.children.push(child);
        }
      }
    }

    /**
    * [PRIVATE]
    *
    * Read a v1 local heap header. These define relatively small
    * regions used primarily for storing symbol names associated with
    * a symbol table message.
    */

  }, {
    key: 'hdf5LocalHeap',
    value: function hdf5LocalHeap() {
      var lh = {};
      if (!this.checkSignature("HEAP")) {
        throw new Error('Bad or missing HEAP signature');
      }
      lh.lh_ver = this.getU8();
      this.skip(3);
      lh.lh_dseg_len = this.getLength();
      lh.lh_flst_len = this.getLength();
      lh.lh_dseg_off = this.getOffset();
      if (this.getMetadata("debug")) {
        console.log("LHEAP V" + lh.lh_ver + " " + lh.lh_dseg_len + " " + lh.lh_flst_len + " " + lh.lh_dseg_off);
      }
      return lh;
    }

    /**
    * [PRIVATE]
    *
    * Process a "dataspace" message. Dataspaces define the
    * dimensionality of a dataset or attribute. They define the
    * number of dimensions (rank) and the current length of each
    * dimension. It is possible to specify a "maximum" length that is
    * greater than or equal to the current length, but MINC doesn't
    * rely on that feature so these values are ignored.  Finally it
    * is also possible to specify a "permutation index" that alters
    * storage order of the dataset, but again, MINC doesn't rely on
    * this feature, so the values are ignored.
    */

  }, {
    key: 'hdf5MsgDataspace',
    value: function hdf5MsgDataspace(sz, link) {
      var cb;
      var ver = this.getU8();
      var n_dim = this.getU8();
      var flag = this.getU8();
      if (ver <= 1) {
        this.skip(5);
      } else {
        this.skip(1);
      }

      var n_items = 1;
      var dlen = [];
      var i;
      for (i = 0; i < n_dim; i += 1) {
        dlen[i] = this.getLength();
        n_items *= dlen[i];
      }

      cb = n_dim * this._superblk.lensz + (ver <= 1 ? 8 : 4);

      var dmax = [];
      if ((flag & 1) !== 0) {
        cb += n_dim * this._superblk.lensz;
        for (i = 0; i < n_dim; i += 1) {
          dmax[i] = this.getLength();
        }
      }

      var dind = [];
      if ((flag & 2) !== 0) {
        cb += n_dim * this._superblk.lensz;
        for (i = 0; i < n_dim; i += 1) {
          dind[i] = this.getLength();
        }
      }
      var msg = "this.hdf5MsgDataspace V" + ver + " N" + n_dim + " F" + flag;
      if (this.getMetadata("debug")) {
        if (n_dim !== 0) {
          msg += "[" + dlen.join(', ') + "]";
        }
        console.log(msg);
      }
      if (cb < sz) {
        this.skip(sz - cb);
      }
      if (link) {
        link.dims = dlen;
      }
      return n_items;
    }

    /**
    * [PRIVATE]
    *
    *
    * link info messages may contain a fractal heap address where we
    * can find additional link messages for this object. This
    * happens, for example, when there are lots of links in a
    * particular group.
    */

  }, {
    key: 'hdf5MsgLinkInfo',
    value: function hdf5MsgLinkInfo(link) {
      var that = this;

      var ver = this.getU8();
      var flags = this.getU8();
      if ((flags & 1) !== 0) {
        this.getU64(); // max. creation index (IGNORE).
      }
      var fh_address = this.getOffset(); // fractal heap address
      var bt_address = this.getOffset(); // v2 btree for name index
      if ((flags & 2) !== 0) {
        this.getOffset(); // creation order index (IGNORE).
      }
      if (this.getMetadata("debug")) {
        console.log("this.hdf5MsgLinkInfo V" + ver + " F" + flags + " FH " + fh_address + " BT " + bt_address);
      }
      var spp = this.tell();
      if (fh_address < this._superblk.eof_addr) {
        this.seek(fh_address);
        /* If there is a valid fractal heap address in the link info message, that
         * means the fractal heap is a collection of link messages. We can ignore
         * the btree address because we can get the names from the link messages.
         */
        var fh = this.hdf5FractalHeapHeader();
        var n_msg = 0;
        this.hdf5FractalHeapEnumerate(fh, function (row, address, block_offset, block_length) {
          var end_address = address + block_length;
          while (n_msg < fh.heap_nobj && that.tell() < end_address) {
            that.hdf5MsgLink(link);
            n_msg += 1;
          }
          return true; // continue with enumeration.
        });
      }
      this.seek(spp);
    }

    /**
    * [PRIVATE]
    */

  }, {
    key: 'dt_class_name',
    value: function dt_class_name(cls) {
      var names = ["Fixed-Point", "Floating-Point", "Time", "String", "BitField", "Opaque", "Compound", "Reference", "Enumerated", "Variable-Length", "Array"];

      if (cls < names.length) {
        return names[cls];
      }
      throw new Error('Unknown datatype class: ' + cls);
    }

    /**
    * [PRIVATE]
    *
    * Process a "datatype" message. These messages specify the data
    * type of a single element within a dataset or attribute. Data
    * types are extremely flexible, HDF5 supports a range of options
    * for bit widths and organization atomic types. We support only
    * fixed, float, and string atomic types, and those only for
    * certain restricted (but common) cases.  At this point we
    * provide no support for more exotic types such as bit field,
    * enumerated, array, opaque, compound, time, reference,
    * variable-length, etc.
    *
    * TODO: should support enumerated types, possibly a few others.
    */

  }, {
    key: 'hdf5MsgDatatype',
    value: function hdf5MsgDatatype(sz) {
      var type = {};
      var cb = 8;
      var msg = "";
      var bit_offs;
      var bit_prec;
      var exp_loc;
      var exp_sz;
      var mnt_loc;
      var mnt_sz;
      var exp_bias;

      var cv = this.getU8();
      var ver = cv >> 4;
      var cls = cv & 15;
      var bf = [];
      var i;
      for (i = 0; i < 3; i += 1) {
        bf[i] = this.getU8();
      }
      var dt_size = this.getU32();

      if (this.getMetadata("debug")) {
        console.log("this.hdf5MsgDatatype V" + ver + " C" + cls + " " + this.dt_class_name(cls) + " " + bf[0] + "." + bf[1] + "." + bf[2] + " " + dt_size);
      }

      switch (cls) {
        case 0:
          /* Fixed (integer): bit 0 for byte order, bit 3 for signed */
          bit_offs = this.getU16();
          bit_prec = this.getU16();
          switch (dt_size) {
            case 4:
              type.typ_type = bf[0] & 8 ? this._type_enum.INT32 : this._type_enum.UINT32;
              break;
            case 2:
              type.typ_type = bf[0] & 8 ? this._type_enum.INT16 : this._type_enum.UINT16;
              break;
            case 1:
              type.typ_type = bf[0] & 8 ? this._type_enum.INT8 : this._type_enum.UINT8;
              break;
            default:
              throw new Error('Unknown type size ' + dt_size);
          }
          type.typ_length = dt_size;
          cb += 4;
          if (this.getMetadata("debug")) {
            console.log('  (' + bit_offs + ' ' + bit_prec + ')');
          }
          break;
        case 1:
          /* Float: uses bits 0,6 for byte order */
          msg = "";
          if (this.getMetadata("debug")) {
            switch (bf[0] & 0x41) {
              case 0:
                msg += "LE ";
                break;
              case 1:
                msg += "BE ";
                break;
              case 0x41:
                msg += "VX ";
                break;
              default:
                throw new Error('Reserved fp byte order: ' + bf[0]);
            }
          }
          bit_offs = this.getU16();
          bit_prec = this.getU16();
          exp_loc = this.getU8();
          exp_sz = this.getU8();
          mnt_loc = this.getU8();
          mnt_sz = this.getU8();
          exp_bias = this.getU32();
          if (this.getMetadata("debug")) {
            msg += bit_offs + " " + bit_prec + " " + exp_loc + " " + exp_sz + " " + mnt_loc + " " + mnt_sz + " " + exp_bias;
          }
          /* See if it's one of the formats we recognize.
             IEEE 64-bit or IEEE 32-bit are the only two we handle.
          */
          if (bit_prec === 64 && bit_offs === 0 && exp_loc === 52 && exp_sz === 11 && mnt_loc === 0 && mnt_sz === 52 && exp_bias === 1023 && dt_size === 8) {
            type.typ_type = this._type_enum.DBL;
          } else if (bit_prec === 32 && bit_offs === 0 && exp_loc === 23 && exp_sz === 8 && mnt_loc === 0 && mnt_sz === 23 && exp_bias === 127 && dt_size === 4) {
            type.typ_type = this._type_enum.FLT;
          } else {
            throw new Error("Unsupported floating-point type");
          }
          if (this.getMetadata("debug")) {
            console.log(msg);
          }
          type.typ_length = dt_size;
          cb += 12;
          break;

        case 3:
          // string
          /* bits 0-3 = 0: null terminate, 1: null pad, 2: space pad */
          /* bits 4-7 = 0: ASCII, 1: UTF-8 */
          type.typ_type = this._type_enum.STR;
          type.typ_length = dt_size;
          break;

        default:
          throw new Error('Unimplemented HDF5 data class ' + cls);
      }
      if (sz > cb) {
        this.skip(sz - cb);
      }
      return type;
    }

    /**
    * [PRIVATE]
    *
    * Process a "layout" message. These messages specify the location and organization
    * of data in a dataset. The organization can be either compact, contiguous, or
    * chunked. Compact data is stored in the message as a contiguous block. Contiguous
    * data is stored elsewhere in the file in a single chunk. Chunked data is stored within
    * a V1 Btree as a series of possibly filtered (e.g. compressed) chunks.
    */

  }, {
    key: 'hdf5MsgLayout',
    value: function hdf5MsgLayout(link) {
      var msg = "";

      var ver = this.getU8();
      var cls;
      var n_dim;
      var cdsz;
      var dim = [];
      var i;
      var dtadr;
      var dtsz;
      var elsz;

      var n_items = 1;
      if (ver === 1 || ver === 2) {
        n_dim = this.getU8();
        cls = this.getU8();
        this.skip(5);
        if (this.getMetadata("debug")) {
          msg += "this.hdf5MsgLayout V" + ver + " N" + n_dim + " C" + cls;
        }
        if (cls === 1 || cls === 2) {
          // contiguous or chunked
          var addr = this.getOffset();
          if (this.getMetadata("debug")) {
            msg += " A" + addr;
          }
          link.data_offset = addr;
        }

        for (i = 0; i < n_dim; i += 1) {
          dim[i] = this.getU32();
          n_items *= dim[i];
        }

        if (this.getMetadata("debug")) {
          msg += "[" + dim.join(', ') + "]";
        }

        if (cls === 2) {
          // chunked
          elsz = this.getU32();
          link.chunk_size = n_items * elsz;
          if (this.getMetadata("debug")) {
            msg += " E" + elsz;
          }
        }
        if (cls === 0) {
          // compact
          cdsz = this.getU32();
          if (this.getMetadata("debug")) {
            msg += "(" + cdsz + ")";
          }
          link.data_offset = this.tell();
          link.data_length = cdsz;
        } else if (cls === 1) {
          link.data_length = n_items;
        }
      } else if (ver === 3) {
        cls = this.getU8();
        msg = "this.hdf5MsgLayout V" + ver + " C" + cls;

        if (cls === 0) {
          cdsz = this.getU16();
          if (this.getMetadata("debug")) {
            msg += "(" + cdsz + ")";
          }
          link.data_offset = this.tell();
          link.data_length = cdsz;
        } else if (cls === 1) {
          dtadr = this.getOffset();
          dtsz = this.getLength();
          if (this.getMetadata("debug")) {
            msg += "(" + dtadr + ", " + dtsz + ")";
          }
          link.data_offset = dtadr;
          link.data_length = dtsz;
        } else if (cls === 2) {
          n_dim = this.getU8();
          dtadr = this.getOffset();
          link.data_offset = dtadr;
          link.chunk_size = 1;
          for (i = 0; i < n_dim - 1; i += 1) {
            dim[i] = this.getU32();
            n_items *= dim[i];
          }
          if (this.getMetadata("debug")) {
            msg += "(N" + n_dim + ", A" + dtadr + " [" + dim.join(',') + "]";
          }
          elsz = this.getU32();
          link.chunk_size = n_items * elsz;
          if (this.getMetadata("debug")) {
            msg += " E" + elsz;
          }
        }
      } else {
        throw new Error("Illegal layout version " + ver);
      }
      if (this.getMetadata("debug")) {
        console.log(msg);
      }
    }

    /**
    * [PRIVATE]
    *
    * Read a "filter pipeline" message. At the moment we _only_ handle
    * deflate/inflate. Anything else will cause us to throw an exception.
    */

  }, {
    key: 'hdf5MsgPipeline',
    value: function hdf5MsgPipeline(link) {
      var ver = this.getU8();
      var nflt = this.getU8();

      var msg = "this.hdf5MsgPipeline V" + ver + " N" + nflt;
      if (ver === 1) {
        this.skip(6);
      }

      if (this.getMetadata("debug")) {
        console.log(msg);
      }

      var i;
      var fiv;
      var nlen;
      var flags;
      var ncdv;
      for (i = 0; i < nflt; i += 1) {
        fiv = this.getU16();
        if (fiv !== 1) {
          /* deflate */
          throw new Error("Unimplemented HDF5 filter " + fiv);
        } else {
          if ((typeof index$1 === 'undefined' ? 'undefined' : _typeof(index$1)) !== 'object') {
            throw new Error('Need pako to inflate data.');
          }
          link.inflate = true;
        }
        if (ver === 1 || fiv > 256) {
          nlen = this.getU16();
        } else {
          nlen = 0;
        }

        flags = this.getU16();
        ncdv = this.getU16();
        if ((ncdv & 1) !== 0) {
          ncdv += 1;
        }
        if (nlen !== 0) {
          this.skip(nlen); // ignore name.
        }

        this.skip(ncdv * 4);

        if (this.getMetadata("debug")) {
          console.log("  " + i + " ID" + fiv + " F" + flags + " " + ncdv);
        }
      }
    }

    /**
    * [PRIVATE]
    *
    * Process an "attribute" message. This actually defines an attribute that is
    * to be associated with a group or dataset (what I generally call a "link"
    * in this code. Attributes include a name, a datatype, and a dataspace, followed
    * by the actual data.
    */

  }, {
    key: 'hdf5MsgAttribute',
    value: function hdf5MsgAttribute(sz, link) {
      var ver = this.getU8();
      var flags = this.getU8();
      var nm_len = this.getU16();
      var dt_len = this.getU16();
      var ds_len = this.getU16();
      var msg = "this.hdf5MsgAttribute V" + ver + " F" + flags + " " + sz + ": ";

      if ((flags & 3) !== 0) {
        throw new Error('Shared dataspaces and datatypes are not supported.');
      }

      if (ver === 3) {
        var cset = this.getU8();
        if (this.getMetadata("debug")) {
          msg += cset === 0 ? "ASCII" : "UTF-8";
        }
      }
      if (this.getMetadata("debug")) {
        msg += "(" + nm_len + " " + dt_len + " " + ds_len + ")";
      }
      if (ver < 3) {
        nm_len = Math.floor((nm_len + 7) / 8) * 8;
        dt_len = Math.floor((dt_len + 7) / 8) * 8;
        ds_len = Math.floor((ds_len + 7) / 8) * 8;

        if (this.getMetadata("debug")) {
          msg += "/(" + nm_len + " " + dt_len + " " + ds_len + ")";
        }
      }

      var att_name = this.getString(nm_len);
      if (this.getMetadata("debug")) {
        msg += " Name: " + att_name;
        console.log(msg);
      }
      var val_type = this.hdf5MsgDatatype(dt_len);
      var n_items = this.hdf5MsgDataspace(ds_len);
      var val_len = 0;
      if (sz > 0) {
        if (ver < 3) {
          val_len = sz - (8 + nm_len + dt_len + ds_len);
        } else {
          val_len = sz - (9 + nm_len + dt_len + ds_len);
        }
      } else {
        val_len = val_type.typ_length * n_items;
      }
      if (this.getMetadata("debug")) {
        console.log("  attribute data size " + val_len + " " + this.tell());
      }
      var att_value;
      if (val_type.typ_type === this._type_enum.STR) {
        att_value = this.getString(val_len);
      } else {
        att_value = this.getArray(val_type.typ_type, val_len);
      }
      link.attributes[att_name] = att_value;
    }

    /**
    * [PRIVATE]
    *
    * Process a "group info" message. We don't actually do anything with these.
    */

  }, {
    key: 'hdf5MsgGroupInfo',
    value: function hdf5MsgGroupInfo() {
      var n_ent = 4;
      var n_lnl = 8;
      var ver = this.getU8();
      var flags = this.getU8();
      if ((flags & 1) !== 0) {
        this.getU16(); // link phase change: max compact value (IGNORE)
        this.getU16(); // link phase cange: max dense value (IGNORE)
      }
      if ((flags & 2) !== 0) {
        n_ent = this.getU16();
        n_lnl = this.getU16();
      }
      if (this.getMetadata("debug")) {
        console.log("this.hdf5MsgGroupInfo V" + ver + " F" + flags + " ENT " + n_ent + " LNL " + n_lnl);
      }
    }

    /**
    * [PRIVATE]
    *
    * Process a "link" message. This specifies the name and header location of either a
    * group or a dataset within the current group. It is probably also used to implement
    * internal links but we don't really support that.
    */

  }, {
    key: 'hdf5MsgLink',
    value: function hdf5MsgLink(link) {
      var ver = this.getU8();
      var ltype = 0;
      if (ver !== 1) {
        throw new Error("Bad link message version " + ver);
      }
      var flags = this.getU8();
      if ((flags & 8) !== 0) {
        ltype = this.getU8();
      }
      if ((flags & 4) !== 0) {
        this.getU64(); // creation order (IGNORE)
      }
      if ((flags & 16) !== 0) {
        this.getU8(); // link name character set (IGNORE)
      }
      var cb = 1 << (flags & 3);
      var lnsz = this.getUXX(cb);

      var child = this.createLink();

      child.name = this.getString(lnsz);

      if ((flags & 8) === 0) {
        child.hdr_offset = this.getOffset();
      }

      if (this.getMetadata("debug")) {
        console.log("this.hdf5MsgLink V" + ver + " F" + flags + " T" + ltype + " NM " + child.name + " OF " + child.hdr_offset);
      }
      link.children.push(child);
    }

    /**
    * [PRIVATE]
    *
    * The fractal heap direct block contains:
    * 1. A signature.
    * 2. a byte version.
    * 3. an offset pointing to the header (for integrity checking).
    * 4. A variably-sized block offset that gives (_I think_) the mininum block offset
    * associated with this block.
    * 5. Variably-sized data. Block size varies with row number in a slightly tricky
    * fashion. Each "row" consists of "table_width" blocks. The first two rows, row 0 and 1,
    * have blocks of the "starting block size". Row 2-N have blocks of size 2^(row-1) times
    * the starting block size.
    */

  }, {
    key: 'hdf5FractalHeapDirectBlock',
    value: function hdf5FractalHeapDirectBlock(fh, row, address, callback) {
      if (!this.checkSignature("FHDB")) {
        throw new Error("Bad or missing FHDB signature");
      }
      var ver = this.getU8();
      if (ver !== 0) {
        throw new Error('Bad FHDB version: ' + ver);
      }
      this.getOffset(); // heap header address (IGNORE)
      var cb = Math.ceil(fh.max_heapsz / 8.0);
      var block_offset = this.getUXX(cb); // block offset
      if ((fh.flags & 2) !== 0) {
        this.getU32(); // checksum (IGNORE)
      }

      if (this.getMetadata("debug")) {
        console.log("FHDB V:" + ver + " R:" + row + " O:" + block_offset + " A:" + address);
      }
      var block_length;
      if (row <= 1) {
        block_length = fh.start_blksz;
      } else {
        block_length = Math.pow(2, row - 1) * fh.start_blksz;
      }
      if (callback) {
        return callback(row, address, block_offset, block_length);
      } else {
        return true; // continue enumeration.
      }
    }

    /**
    * [PRIVATE]
    *
    * The fractal heap indirect block contains:
    * 1. A signature.
    * 2. a byte version
    * 3. an offset pointing to the header (for integrity checking).
    * 4. a variably-sized block offset that gives (_I think_) the mininum block offset
    * associated with children of this block.
    * 5. pointers to K direct blocks
    * 6. pointers to N indirect blocks
    * 7. A checksum. This code completely ignores checksums.
    * See calculations of K and N in this.hdf5FractalHeapHeader(). Note that there can also
    * be additional information in the header if "filtered" direct blocks are used. I have
    * made no attempt to support this.
    */

  }, {
    key: 'hdf5FractalHeapIndirectBlock',
    value: function hdf5FractalHeapIndirectBlock(fh, callback) {
      if (!this.checkSignature("FHIB")) {
        throw new Error("Bad or missing FHIB signature");
      }
      var ver = this.getU8();
      if (ver !== 0) {
        throw new Error('Bad FHIB version: ' + ver);
      }
      this.getOffset(); // heap header address (IGNORE)
      var cb = Math.ceil(fh.max_heapsz / 8.0);
      var block_offset = this.getUXX(cb); // block offset

      if (this.getMetadata("debug")) {
        console.log("FHIB V:" + ver + " O:" + block_offset);
      }
      var i;
      var address;
      var db_addrs = [];
      for (i = 0; i < fh.K; i += 1) {
        address = this.getOffset();
        if (address < this._superblk.eof_addr) {
          if (this.getMetadata("debug")) {
            console.log("direct block at " + address);
          }
          db_addrs.push(address);
        }
      }

      var ib_addrs = [];
      for (i = 0; i < fh.N; i += 1) {
        address = this.getOffset();
        if (address < this._superblk.eof_addr) {
          if (this.getMetadata("debug")) {
            console.log("indirect block at " + address);
          }
          ib_addrs.push(address);
        }
      }
      this.getU32(); // checksum (IGNORE)

      /* Finished reading the indirect block, now go read its children.
       */
      for (i = 0; i < db_addrs.length; i++) {
        this.seek(db_addrs[i]);
        /* TODO: check row calculation!
         */
        if (!this.hdf5FractalHeapDirectBlock(fh, i / fh.table_width, db_addrs[i], callback)) {
          return false;
        }
      }
      for (i = 0; i < ib_addrs.length; i++) {
        this.seek(ib_addrs[i]);
        if (!this.hdf5FractalHeapIndirectBlock(fh, callback)) {
          return false;
        }
      }
      return true;
    }

    /**
    * [PRIVATE]
    *
    * enumerate over all of the direct blocks in the fractal heap.
    */

  }, {
    key: 'hdf5FractalHeapEnumerate',
    value: function hdf5FractalHeapEnumerate(fh, callback) {
      this.seek(fh.root_addr);
      if (fh.K === 0) {
        this.hdf5FractalHeapDirectBlock(fh, 0, fh.root_addr, callback);
      } else {
        this.hdf5FractalHeapIndirectBlock(fh, callback);
      }
    }

    /**
    * [PRIVATE]
    */

  }, {
    key: 'hdf5FractalHeapOffset',
    value: function hdf5FractalHeapOffset(fh, offset) {
      var location;
      this.hdf5FractalHeapEnumerate(fh, function (row, address, block_offset, block_length) {
        if (offset >= block_offset && offset < block_offset + block_length) {
          location = address + (offset - block_offset);
          return false; // stop enumeration.
        }
        return true; // continue enumeration.
      });
      return location;
    }

    /**
    * [PRIVATE]
    *
    * Attribute info messages contain pointers to a fractal heap and a v2 btree.
    * If these pointers are valid, we must follow them to find more attributes.
    * The attributes are indexed by records in the "type 8" btree. These btree
    * records
    */

  }, {
    key: 'hdf5MsgAttrInfo',
    value: function hdf5MsgAttrInfo(link) {
      var ver = this.getU8();
      if (ver !== 0) {
        throw new Error('Bad attribute information message version: ' + ver);
      }

      var flags = this.getU8();

      if ((flags & 1) !== 0) {
        this.getU16(); // maximum creation index (IGNORE)
      }
      var fh_addr = this.getOffset();
      var bt_addr = this.getOffset();
      if ((flags & 2) !== 0) {
        this.getOffset(); // attribute creation order (IGNORE)
      }

      if (this.getMetadata("debug")) {
        console.log("this.hdf5MsgAttrInfo V" + ver + " F" + flags + " HP " + fh_addr + " AN " + bt_addr);
      }

      var spp = this.tell();
      var fh; // fractal heap header.
      if (fh_addr < this._superblk.eof_addr) {
        this.seek(fh_addr);
        fh = this.hdf5FractalHeapHeader();
      }
      if (bt_addr < this._superblk.eof_addr) {
        this.seek(bt_addr);
        var bh = this.hdf5V2BtreeHeader();
        if (bh.type !== 8) {
          throw new Error("Can only handle indexed attributes.");
        }
        this.seek(bh.root_addr);
        if (bh.depth > 0) {
          this.hdf5V2BtreeInternalNode(fh, bh.root_nrec, bh.depth, link);
        } else {
          this.hdf5V2BtreeLeafNode(fh, bh.root_nrec, link);
        }
      }
      this.seek(spp);
    }

    /**
    * [PRIVATE]
    *
    * Process a single message, given a message header. Assumes that
    * the data view offset is pointing to the remainder of the
    * message.
    *
    * V1 and V2 files use different sets of messages to accomplish
    * similar things. For example, V1 files tend to use "symbol
    * table" messages to describe links within a group, whereas V2
    * files use "link" and "linkinfo" messages.
    */

  }, {
    key: 'hdf5ProcessMessage',
    value: function hdf5ProcessMessage(msg, link) {
      var cq_new = {};
      var val_type;

      switch (msg.hm_type) {
        case 1:
          this.hdf5MsgDataspace(msg.hm_size, link);
          break;
        case 2:
          this.hdf5MsgLinkInfo(link);
          break;
        case 3:
          val_type = this.hdf5MsgDatatype(msg.hm_size);
          if (link) {
            link.type = val_type.typ_type;
          }
          break;
        case 6:
          this.hdf5MsgLink(link);
          break;
        case 8:
          this.hdf5MsgLayout(link);
          break;
        case 10:
          this.hdf5MsgGroupInfo();
          break;
        case 11:
          this.hdf5MsgPipeline(link);
          break;
        case 12:
          this.hdf5MsgAttribute(msg.hm_size, link);
          break;
        case 16:
          /* Process an object header continuation message. These
           * basically just say this header continues with a new segment
           * with a given location and length. They can come before the
           * end of the current message segment, and multiple
           * continuation messages can occur in any particular segment.
           * This means we have to enqueue them and shift them off the
           * queue when we finish processing the current segment.
           */
          cq_new.cq_off = this.getOffset();
          cq_new.cq_len = this.getLength();
          this._continuation_queue.push(cq_new);
          if (this.getMetadata("debug")) {
            console.log("hdf5MsgObjHdrContinue " + cq_new.cq_off + " " + cq_new.cq_len);
          }
          break;
        case 17:
          // SymbolTable
          link.sym_btree = this.getOffset();
          link.sym_lheap = this.getOffset();
          if (this.getMetadata("debug")) {
            console.log("hdf5MsgSymbolTable " + link.sym_btree + " " + link.sym_lheap);
          }
          break;
        case 21:
          this.hdf5MsgAttrInfo(link);
          break;
        case 0:
        case 4:
        case 5:
        case 7:
        case 18:
        case 19:
        case 20:
        case 22:
        case 24:
          this.skip(msg.hm_size);
          break;
        default:
          throw new Error('Unknown message type: ' + msg.hm_type);
      }
    }

    /**
    * [PRIVATE]
    *
    * Read a V2 object header. Object headers contain a series of messages that define
    * an HDF5 object, primarily a group or a dataset. V2 object headers, and V2 objects
    * generally, are much less concerned about alignment than V1 objects.
    */

  }, {
    key: 'hdf5V2ObjectHeader',
    value: function hdf5V2ObjectHeader(link) {
      if (!this.checkSignature("OHDR")) {
        throw new Error('Bad or missing OHDR signature');
      }

      var that = this;
      var ver = this.getU8();
      var flags = this.getU8();

      if ((flags & 0x20) !== 0) {
        this.getU32(); // access time (IGNORE)
        this.getU32(); // modify time (IGNORE)
        this.getU32(); // change time (IGNORE)
        this.getU32(); // birth time (IGNORE)
      }

      if ((flags & 0x10) !== 0) {
        this.getU16(); // maximum number of compact attributes (IGNORE)
        this.getU16(); // maximum number of dense attributes (IGNORE)
      }

      var cb = 1 << (flags & 3);
      var ck0_size = this.getUXX(cb);

      var msg_num = 0;
      var msg_offs = 0;
      var msg_bytes = ck0_size;

      if (this.getMetadata("debug")) {
        console.log("this.hdf5V2ObjectHeader V" + ver + " F" + flags + " HS" + ck0_size);
      }

      var hmsg;
      var cq_head;
      var spp;

      while (true) {
        while (msg_bytes - msg_offs >= 8) {
          hmsg = {};
          hmsg.hm_type = this.getU8();
          hmsg.hm_size = this.getU16();
          hmsg.hm_flags = this.getU8();
          if (this.getMetadata("debug")) {
            console.log("  msg" + msg_num + " F" + hmsg.hm_flags + " T " + hmsg.hm_type + " S " + hmsg.hm_size + " (" + msg_offs + "/" + msg_bytes + ") " + this.hdf5GetMsgName(hmsg.hm_type));
          }
          if ((flags & 0x04) !== 0) {
            hmsg.hm_corder = this.getU16();
          }
          spp = this.tell();
          this.hdf5ProcessMessage(hmsg, link);
          this.seek(spp + hmsg.hm_size); // this.skip past message.

          msg_offs += hmsg.hm_size + 4;

          msg_num += 1;
        }

        if (msg_bytes - msg_offs > 4) {
          this.skip(msg_bytes - (msg_offs + 4));
        }

        this.getU32(); // checksum (IGNORE)

        if (this._continuation_queue.length !== 0) {
          cq_head = this._continuation_queue.shift();
          this.seek(cq_head.cq_off);
          msg_bytes = cq_head.cq_len - 4;
          msg_offs = 0;
          if (this.getMetadata("debug")) {
            console.log('continuing with ' + cq_head.cq_len + ' bytes at ' + this.tell());
          }
          if (!this.checkSignature("OCHK")) {
            throw new Error("Bad v2 object continuation");
          }
        } else {
          break;
        }
      }

      link.children.forEach(function (child, link_num) {
        that.seek(child.hdr_offset);
        if (that.getMetadata("debug")) {
          console.log(link_num + " " + child.hdr_offset + " " + child.name);
        }
        if (that.checkSignature("OHDR")) {
          that.seek(child.hdr_offset);
          that.hdf5V2ObjectHeader(child);
        } else {
          that.seek(child.hdr_offset);
          that.hdf5V1ObjectHeader(child);
        }
      });
    }

    /**
    * [PRIVATE]
    */

  }, {
    key: 'loadData',
    value: function loadData(link) {
      var that = this;

      if (link.chunk_size !== 0) {
        this.seek(link.data_offset);

        var n_bytes = 1;
        var i;
        for (i = 0; i < link.dims.length; i += 1) {
          n_bytes *= link.dims[i];
        }
        n_bytes *= this.typeSize(link.type);
        if (this.getMetadata("debug")) {
          console.log('allocating ' + n_bytes + ' bytes');
        }
        var ab = new ArrayBuffer(n_bytes);
        link.n_filled = 0;
        switch (link.type) {
          case this._type_enum.INT8:
            link.array = new Int8Array(ab);
            break;
          case this._type_enum.UINT8:
            link.array = new Uint8Array(ab);
            break;
          case this._type_enum.INT16:
            link.array = new Int16Array(ab);
            break;
          case this._type_enum.UINT16:
            link.array = new Uint16Array(ab);
            break;
          case this._type_enum.INT32:
            link.array = new Int32Array(ab);
            break;
          case this._type_enum.UINT32:
            link.array = new Uint32Array(ab);
            break;
          case this._type_enum.FLT:
            link.array = new Float32Array(ab);
            break;
          case this._type_enum.DBL:
            link.array = new Float64Array(ab);
            break;
          default:
            throw new Error('Illegal type: ' + link.type);
        }
        this.hdf5V1BtreeNode(link);
      } else {
        if (link.data_offset > 0 && link.data_offset < this._superblk.eof_addr) {
          if (this.getMetadata("debug")) {
            console.log('loading ' + link.data_length + ' bytes from ' + link.data_offset + ' to ' + link.name);
          }
          link.array = this.getArray(link.type, link.data_length, link.data_offset);
        } else {
          if (this.getMetadata("debug")) {
            console.log('data not present for /' + link.name + '/');
          }
        }
      }

      link.children.forEach(function (child) {
        that.loadData(child);
      });
    }

    /**
    * [PRIVATE]
    *
    * Read a v1 object header. Object headers contain a series of
    * messages that define an HDF5 object, primarily a group or a
    * dataset. The v1 object header, like most of the v1 format, is
    * very careful about alignment. Every message must be on an
    * 8-byte alignment RELATIVE TO THE START OF THE HEADER. So if the
    * header starts on an odd boundary, messages may start on odd
    * boundaries as well. No, this doesn't make much sense.
    */

  }, {
    key: 'hdf5V1ObjectHeader',
    value: function hdf5V1ObjectHeader(link) {
      var that = this;
      var oh = {};
      this.startAlignment();
      oh.oh_ver = this.getU8();
      this.skip(1); // reserved
      oh.oh_n_msgs = this.getU16();
      oh.oh_ref_cnt = this.getU32();
      oh.oh_hdr_sz = this.getU32();
      if (oh.oh_ver !== 1) {
        throw new Error("Bad v1 object header version: " + oh.oh_ver);
      }
      if (this.getMetadata("debug")) {
        console.log("this.hdf5V1ObjectHeader V" + oh.oh_ver + " #M " + oh.oh_n_msgs + " RC " + oh.oh_ref_cnt + " HS " + oh.oh_hdr_sz);
      }

      var msg_bytes = oh.oh_hdr_sz;
      var cq_head;
      var msg_num;
      var hmsg;
      var spp;

      for (msg_num = 0; msg_num < oh.oh_n_msgs; msg_num += 1) {
        if (msg_bytes <= 8) {
          if (this._continuation_queue.length !== 0) {
            cq_head = this._continuation_queue.shift();
            this.seek(cq_head.cq_off);
            msg_bytes = cq_head.cq_len;
            if (this.getMetadata("debug")) {
              console.log('continuing with ' + msg_bytes + ' bytes at ' + this.tell());
            }
            this.startAlignment();
          } else {
            break;
          }
        }

        this.checkAlignment();

        hmsg = {};
        hmsg.hm_type = this.getU16();
        hmsg.hm_size = this.getU16();
        hmsg.hm_flags = this.getU8();

        if (hmsg.hm_size % 8 !== 0) {
          throw new Error('Size is not 8-byte aligned: ' + hmsg.hm_size);
        }
        this.skip(3); // this.skip reserved
        msg_bytes -= 8 + hmsg.hm_size;
        if (this.getMetadata("debug")) {
          console.log("  msg" + msg_num + " F " + hmsg.hm_flags + " T " + hmsg.hm_type + " S " + hmsg.hm_size + "(" + msg_bytes + ") " + this.hdf5GetMsgName(hmsg.hm_type));
        }

        spp = this.tell();
        this.hdf5ProcessMessage(hmsg, link);
        this.seek(spp + hmsg.hm_size); // this.skip whole message.
      }

      if (link.sym_btree !== 0 && link.sym_lheap !== 0) {
        this.seek(link.sym_btree);
        var bt = this.hdf5V1BtreeNode();
        this.seek(link.sym_lheap);
        var lh = this.hdf5LocalHeap();
        var i;
        for (i = 0; i < bt.entries_used; i += 1) {
          this.seek(bt.keys[i].child_address);
          if (this.checkSignature("SNOD")) {
            this.seek(bt.keys[i].child_address);
            this.hdf5GroupSymbolTable(lh, link);
          } else {
            this.seek(bt.keys[i].child_address);
            this.hdf5V1ObjectHeader(link);
          }
        }

        link.children.forEach(function (child) {
          that.seek(child.hdr_offset);
          that.hdf5V1ObjectHeader(child);
        });
      }
    }

    //------------------------------------------------------------------------------
    //      FROM hdf5_tools.js

  }, {
    key: 'getTypeMatchMinc',
    value: function getTypeMatchMinc(typeEnumVal) {
      return this._type_matching[typeEnumVal - 1];
    }
  }, {
    key: 'defined',
    value: function defined(x) {
      return typeof x !== 'undefined';
    }
  }, {
    key: 'typeName',
    value: function typeName(x) {
      if (!this.defined(x)) {
        return "undefined";
      }
      return x.constructor.name;
    }
  }, {
    key: 'typeSize',
    value: function typeSize(typ) {
      if (typ >= this._type_enum.INT8 && typ < this.type_sizes.length) {
        return this.type_sizes[typ];
      }
      throw new Error('Unknown type ' + typ);
    }
  }, {
    key: 'typeIsFloat',
    value: function typeIsFloat(typ) {
      return typ >= this._type_enum.FLT && typ <= this._type_enum.DBL;
    }

    /*
     * The remaining code after this point is not truly HDF5 specific -
     * it's mostly about converting the MINC file into the form
     * BrainBrowser is able to use. Therefore it is used for both HDF5
     * and NetCDF files.
     */

    /*
     * Join does not seem to be defined on the typed arrays in
     * javascript, so I've re-implemented it here, sadly.
     */

  }, {
    key: 'join',
    value: function join(array, string) {
      var result = "";
      if (array && array.length) {
        var i;
        for (i = 0; i < array.length - 1; i += 1) {
          result += array[i];
          result += string;
        }
        result += array[i];
      }
      return result;
    }

    /*
     * Recursively print out the structure and contents of the file.
     * Primarily useful for debugging.
     */

  }, {
    key: 'printStructure',
    value: function printStructure(link, level) {
      var that = this;

      var i;
      var msg = "";
      for (i = 0; i < level * 2; i += 1) {
        msg += " ";
      }
      msg += link.name + (link.children.length ? "/" : "");
      if (link.type > 0) {
        msg += ' ' + this.typeName(link.array);
        if (link.dims.length) {
          msg += '[' + link.dims.join(', ') + ']';
        }
        if (link.array) {
          msg += ":" + link.array.length;
        } else {
          msg += " NULL";
        }
      }
      console.log(msg);

      Object.keys(link.attributes).forEach(function (name) {
        var value = link.attributes[name];

        msg = "";
        for (i = 0; i < level * 2 + 1; i += 1) {
          msg += " ";
        }
        msg += link.name + ':' + name + " " + that.typeName(value) + "[" + value.length + "] ";
        if (typeof value === "string") {
          msg += JSON.stringify(value);
        } else {
          msg += "{" + that.join(value.slice(0, 16), ', ');
          if (value.length > 16) {
            msg += ", ...";
          }
          msg += "}";
        }
        console.log(msg);
      });

      link.children.forEach(function (child) {
        that.printStructure(child, level + 1);
      });
    }

    /* Find a dataset with a given name, by recursively searching through
     * the links. Groups will have 'type' fields of -1, since they contain
     * no data.
     * TODO (maybe): Use associative array for children?
     */

  }, {
    key: 'findDataset',
    value: function findDataset(link, name, level) {
      var that = this;
      var result;
      if (link && link.name === name && link.type > 0) {
        result = link;
      } else {
        link.children.find(function (child) {
          result = that.findDataset(child, name, level + 1);
          return that.defined(result);
        });
      }
      return result;
    }

    /* Find an attribute with a given name.
     */

  }, {
    key: 'findAttribute',
    value: function findAttribute(link, name, level) {
      var that = this;
      var result = link.attributes[name];
      if (result) return result;

      link.children.find(function (child) {
        result = that.findAttribute(child, name, level + 1);
        return that.defined(result);
      });
      return result;
    }

    /**
     * @doc function
     * @name hdf5.this.scaleVoxels
     * @param {object} image The link object corresponding to the image data.
     * @param {object} image_min The link object corresponding to the image-min
     * data.
     * @param {object} image_max The link object corresponding to the image-max
     * data.
     * @param {object} valid_range An array of exactly two items corresponding
     * to the minimum and maximum valid _raw_ voxel values.
     * @param {boolean} debug True if we should print debugging information.
     * @returns A new ArrayBuffer containing the rescaled data.
     * @description
     * Convert the MINC data from voxel to real range. This returns a
     * new buffer that contains the "real" voxel values. It does less
     * work for floating-point volumes, since they don't need scaling.
     *
     * For debugging/testing purposes, also gathers basic voxel statistics,
     * for comparison against mincstats.
     */

  }, {
    key: 'scaleVoxels',
    value: function scaleVoxels(image, image_min, image_max, valid_range, debug) {
      /*
      var new_abuf = new ArrayBuffer(image.array.length *
                                     Float32Array.BYTES_PER_ELEMENT);
      var new_data = new Float32Array(new_abuf);
       */

      // 1D array to store the voxel data,
      // not initialized yet because it depends on the hdf5 type.
      var new_abuf = null;
      var new_data = null;

      // we could simply use image.type, but written types are easier to read...
      switch (this.getTypeMatchMinc(image.type)) {
        case 'int8':
          new_abuf = new ArrayBuffer(image.array.length * Int8Array.BYTES_PER_ELEMENT);
          new_data = new Int8Array(new_abuf);
          break;

        case 'int16':
          new_abuf = new ArrayBuffer(image.array.length * Int16Array.BYTES_PER_ELEMENT);
          new_data = new Int16Array(new_abuf);
          break;

        case 'int32':
          new_abuf = new ArrayBuffer(image.array.length * Int32Array.BYTES_PER_ELEMENT);
          new_data = new Int32Array(new_abuf);
          break;

        case 'float32':
          new_abuf = new ArrayBuffer(image.array.length * Float32Array.BYTES_PER_ELEMENT);
          new_data = new Float32Array(new_abuf);
          break;

        case 'float64':
          new_abuf = new ArrayBuffer(image.array.length * Float64Array.BYTES_PER_ELEMENT);
          new_data = new Float64Array(new_abuf);
          break;

        case 'uint8':
          new_abuf = new ArrayBuffer(image.array.length * Uint8Array.BYTES_PER_ELEMENT);
          new_data = new Uint8Array(new_abuf);
          break;

        case 'uint16':
          new_abuf = new ArrayBuffer(image.array.length * Uint16Array.BYTES_PER_ELEMENT);
          new_data = new Uint16Array(new_abuf);
          break;

        case 'uint32':
          new_abuf = new ArrayBuffer(image.array.length * Uint32Array.BYTES_PER_ELEMENT);
          new_data = new Uint32Array(new_abuf);
          break;

        default:
          var error_message = "Unsupported data type: " + header.datatype;
          console.log({ message: error_message });
          //BrainBrowser.events.triggerEvent("error", { message: error_message } );
          throw new Error(error_message);

      }

      var n_slice_dims = image.dims.length - image_min.dims.length;

      if (n_slice_dims < 1) {
        throw new Error("Too few slice dimensions: " + image.dims.length + " " + image_min.dims.length);
      }
      var n_slice_elements = 1;
      var i;
      for (i = image_min.dims.length; i < image.dims.length; i += 1) {
        n_slice_elements *= image.dims[i];
      }
      if (debug) {
        console.log(n_slice_elements + " voxels in slice.");
      }
      var s = 0;
      var c = 0;
      var x = -Number.MAX_VALUE;
      var n = Number.MAX_VALUE;
      var im = image.array;
      var im_max = image_max.array;
      var im_min = image_min.array;
      if (debug) {
        console.log("valid range is " + valid_range[0] + " to " + valid_range[1]);
      }

      var vrange;
      var rrange;
      var vmin = valid_range[0];
      var rmin;
      var j;
      var v;
      var is_float = this.typeIsFloat(image.type);
      for (i = 0; i < image_min.array.length; i += 1) {
        if (debug) {
          console.log(i + " " + im_min[i] + " " + im_max[i] + " " + im[i * n_slice_elements]);
        }
        if (is_float) {
          /* For floating-point volumes there is no scaling to be performed.
           * We do scan the data and make sure voxels are within the valid
           * range, and collect our statistics.
           */
          for (j = 0; j < n_slice_elements; j += 1) {
            v = im[c];
            if (v < valid_range[0] || v > valid_range[1]) {
              new_data[c] = 0.0;
            } else {
              new_data[c] = v;
              s += v;
              if (v > x) {
                x = v;
              }
              if (v < n) {
                n = v;
              }
            }
            c += 1;
          }
        } else {
          /* For integer volumes we have to scale each slice according to image-min,
           * image-max, and valid_range.
           */
          vrange = valid_range[1] - valid_range[0];
          rrange = im_max[i] - im_min[i];
          rmin = im_min[i];

          /*
          console.log(n_slice_elements);
          console.log(vrange);
          console.log(rrange);
          console.log(rmin);
          console.log("-----------------");
          */

          for (j = 0; j < n_slice_elements; j += 1) {

            // v normalization to avoid "flickering".
            // v is scaled to the range [0, im_max[i]]
            // (possibly uint16 if the original per-slice min-max was not scaled up/down)
            v = (im[c] - vmin) / vrange * rrange + rmin;

            // we scale up/down to match the type of the target array
            v = v / im_max[i] * valid_range[1];

            new_data[c] = v;
            s += v;
            c += 1;
            if (v > x) {
              x = v;
            }
            if (v < n) {
              n = v;
            }
          }
        }
      }

      if (debug) {
        console.log("Min: " + n);
        console.log("Max: " + x);
        console.log("Sum: " + s);
        console.log("Mean: " + s / c);
      }

      return new_abuf;
    }

    /**
     * @doc function
     * @name hdf5.this.isRgbVolume
     * @param {object} header The header object representing the structure
     * of the MINC file.
     * @param {object} image The typed array object used to represent the
     * image data.
     * @returns {boolean} True if this is an RGB volume.
     * @description
     * A MINC volume is an RGB volume if all three are true:
     * 1. The voxel type is unsigned byte.
     * 2. It has a vector_dimension in the last (fastest-varying) position.
     * 3. The vector dimension has length 3.
     */

  }, {
    key: 'isRgbVolume',
    value: function isRgbVolume(header, image) {
      var order = header.order;
      return image.array.constructor.name === 'Uint8Array' && order.length > 0 && order[order.length - 1] === "vector_dimension" && header.vector_dimension.space_length === 3;
    }

    /**
     * @doc function
     * @name hdf5.this.rgbVoxels
     * @param {object} image The 'link' object created using createLink(),
     * that corresponds to the image within the HDF5 or NetCDF file.
     * @returns {object} A new ArrayBuffer that contains the original RGB
     * data augmented with alpha values.
     * @description
     * This function copies the RGB voxels to the destination buffer.
     * Essentially we just convert from 24 to 32 bits per voxel. This
     * is another MINC-specific function.
     */

  }, {
    key: 'rgbVoxels',
    value: function rgbVoxels(image) {
      var im = image.array;
      var n = im.length;
      var new_abuf = new ArrayBuffer(n / 3 * 4);
      var new_byte = new Uint8Array(new_abuf);
      var i,
          j = 0;
      for (i = 0; i < n; i += 3) {
        new_byte[j + 0] = im[i + 0];
        new_byte[j + 1] = im[i + 1];
        new_byte[j + 2] = im[i + 2];
        new_byte[j + 3] = 255;
        j += 4;
      }
      return new_abuf;
    }

    //----------------------------------------------------------------------------
    // FROM minc_reader.js

  }, {
    key: 'parseHeader',
    value: function parseHeader(header_text) {
      var header;
      var error_message;

      try {
        header = JSON.parse(header_text);
      } catch (error) {
        error_message = "server did not respond with valid JSON" + "\n" + "Response was: \n" + header_text;

        console.log({ message: error_message });

        //  BrainBrowser.events.triggerEvent("error", { message: error_message });
        throw new Error(error_message);
      }

      if (header.order.length === 4) {
        header.order = header.order.slice(1);
      }

      header.datatype = header.datatype || "uint8";

      header.xspace.space_length = parseFloat(header.xspace.space_length);
      header.yspace.space_length = parseFloat(header.yspace.space_length);
      header.zspace.space_length = parseFloat(header.zspace.space_length);

      header.xspace.start = parseFloat(header.xspace.start);
      header.yspace.start = parseFloat(header.yspace.start);
      header.zspace.start = parseFloat(header.zspace.start);

      header.xspace.step = parseFloat(header.xspace.step);
      header.yspace.step = parseFloat(header.yspace.step);
      header.zspace.step = parseFloat(header.zspace.step);

      header.xspace.direction_cosines = header.xspace.direction_cosines || [1, 0, 0];
      header.yspace.direction_cosines = header.yspace.direction_cosines || [0, 1, 0];
      header.zspace.direction_cosines = header.zspace.direction_cosines || [0, 0, 1];

      header.xspace.direction_cosines = header.xspace.direction_cosines.map(parseFloat);
      header.yspace.direction_cosines = header.yspace.direction_cosines.map(parseFloat);
      header.zspace.direction_cosines = header.zspace.direction_cosines.map(parseFloat);

      /* Incrementation offsets for each dimension of the volume.
      * Note that this somewhat format-specific, so it does not
      * belong in the generic "createVolume()" code.
      */
      header[header.order[0]].offset = header[header.order[1]].space_length * header[header.order[2]].space_length;
      header[header.order[1]].offset = header[header.order[2]].space_length;
      header[header.order[2]].offset = 1;

      if (header.time) {
        header.time.space_length = parseFloat(header.time.space_length);
        header.time.start = parseFloat(header.time.start);
        header.time.step = parseFloat(header.time.step);
        header.time.offset = header.xspace.space_length * header.yspace.space_length * header.zspace.space_length;
      }

      return header;
    }

    /*
      initialize the large 1D array of data depending on the type found.
      Rearange the original ArrayBuffer into a typed array.
      args:
        header: obj - header of the data
        raw_data: ArrayBuffer - sub object given by hdf5Loader
    */

  }, {
    key: 'createMincData',
    value: function createMincData(header, raw_data) {

      var native_data = null;

      switch (header.datatype) {
        case 'int8':
          native_data = new Int8Array(raw_data);
          break;
        case 'int16':
          native_data = new Int16Array(raw_data);
          break;
        case 'int32':
          native_data = new Int32Array(raw_data);
          break;
        case 'float32':
          native_data = new Float32Array(raw_data);
          break;
        case 'float64':
          native_data = new Float64Array(raw_data);
          break;
        case 'uint8':
          native_data = new Uint8Array(raw_data);
          break;
        case 'uint16':
          native_data = new Uint16Array(raw_data);
          break;
        case 'uint32':
        case 'rgb8':
          native_data = new Uint32Array(raw_data);
          break;
        default:
          var error_message = "Unsupported data type: " + header.datatype;
          console.log({ message: error_message });
          //BrainBrowser.events.triggerEvent("error", { message: error_message } );
          throw new Error(error_message);
      }

      return native_data;
    }

    //----------------------------------------------------------------------------

  }, {
    key: '_run',
    value: function _run() {
      var that = this;

      var inputBuffer = this._getInput(0);

      if (!inputBuffer) {
        console.warn("Minc2Decoder requires an ArrayBuffer as input \"0\". Unable to continue.");
        return;
      }

      this._dv = new DataView(inputBuffer);

      /* Patch in the missing function to get 64-bit integers.
       * Note: this won't really quite work b/c Javascript doesn't
       * have support for 64-bit integers.
       */
      this._dv.getUint64 = function (off, little_endian) {
        var l4 = that._dv.getUint32(off + 0, little_endian);
        var u4 = that._dv.getUint32(off + 4, little_endian);
        if (little_endian) {
          return (u4 << 32) + l4;
        } else {
          return (l4 << 32) + u4;
        }
      };

      var root = this.createLink();

      try {
        this._superblk = this.hdf5Superblock();
      } catch (e) {
        //console.error(e);
        console.warn("The input file is not a Minc2 file.");
        return;
      }

      this.seek(this._superblk.root_addr);

      if (this._superblk.sbver <= 1) {
        this.hdf5V1ObjectHeader(root);
      } else {
        this.hdf5V2ObjectHeader(root);
      }

      this.loadData(root);

      if (this.getMetadata("debug")) {
        this.printStructure(root, 0);
      }

      /* The rest of this code is MINC-specific, so like some of the
       * functions above, it can migrate into minc.js once things have
       * stabilized.
       *
       * This code is responsible for collecting up the various pieces
       * of important data and metadata, and reorganizing them into the
       * form the volume viewer can handle.
       */
      var image = this.findDataset(root, "image");
      if (!this.defined(image)) {
        throw new Error("Can't find image dataset.");
      }

      var valid_range = this.findAttribute(image, "valid_range", 0);
      /* If no valid_range is found, we substitute our own. */
      if (!this.defined(valid_range)) {
        var min_val;
        var max_val;
        switch (image.type) {
          case this._type_enum.INT8:
            min_val = -(1 << 7);
            max_val = (1 << 7) - 1;
            break;
          case this._type_enum.UINT8:
            min_val = 0;
            max_val = (1 << 8) - 1;
            break;
          case this._type_enum.INT16:
            min_val = -(1 << 15);
            max_val = (1 << 15) - 1;
            break;
          case this._type_enum.UINT16:
            min_val = 0;
            max_val = (1 << 16) - 1;
            break;
          case this._type_enum.INT32:
            min_val = -(1 << 31);
            max_val = (1 << 31) - 1;
            break;
          case this._type_enum.UINT32:
            min_val = 0;
            max_val = (1 << 32) - 1;
            break;
        }
        valid_range = Float32Array.of(min_val, max_val);
      }

      var image_min = this.findDataset(root, "image-min");
      if (!this.defined(image_min)) {
        image_min = {
          array: Float32Array.of(0),
          dims: []
        };
      }

      var image_max = this.findDataset(root, "image-max");
      if (!this.defined(image_max)) {
        image_max = {
          array: Float32Array.of(1),
          dims: []
        };
      }

      /* Create the header expected by the existing brainbrowser code.
       */
      var header = {};
      var tmp = this.findAttribute(image, "dimorder", 0);
      if (typeof tmp !== 'string') {
        throw new Error("Can't find dimension order.");
      }
      header.order = tmp.split(',');

      header.order.forEach(function (dimname) {
        var dim = that.findDataset(root, dimname);
        if (!that.defined(dim)) {
          throw new Error("Can't find dimension variable " + dimname);
        }

        header[dimname] = {};

        tmp = that.findAttribute(dim, "step", 0);
        if (!that.defined(tmp)) {
          tmp = Float32Array.of(1);
        }
        header[dimname].step = tmp[0];

        tmp = that.findAttribute(dim, "start", 0);
        if (!that.defined(tmp)) {
          tmp = Float32Array.of(0);
        }
        header[dimname].start = tmp[0];

        tmp = that.findAttribute(dim, "length", 0);
        if (!that.defined(tmp)) {
          throw new Error("Can't find length for " + dimname);
        }
        header[dimname].space_length = tmp[0];

        tmp = that.findAttribute(dim, "direction_cosines", 0);
        if (that.defined(tmp)) {
          // why is the bizarre call to slice needed?? it seems to work, though!
          header[dimname].direction_cosines = Array.prototype.slice.call(tmp);
        } else {
          if (dimname === "xspace") {
            header[dimname].direction_cosines = [1, 0, 0];
          } else if (dimname === "yspace") {
            header[dimname].direction_cosines = [0, 1, 0];
          } else if (dimname === "zspace") {
            header[dimname].direction_cosines = [0, 0, 1];
          }
        }
      });

      var new_abuf;

      if (this.isRgbVolume(header, image)) {
        header.order.pop();
        header.datatype = 'rgb8';
        new_abuf = this.rgbVoxels(image);
      } else {

        //header.datatype = 'float32';
        header.datatype = this.getTypeMatchMinc(image.type);

        new_abuf = this.scaleVoxels(image, image_min, image_max, valid_range, this.getMetadata("debug"));
      }

      var minc_header = this.parseHeader(JSON.stringify(header));
      var dataArray = this.createMincData(minc_header, new_abuf);

      // add the output to this filter
      this._addOutput(MniVolume);
      var mniVol = this.getOutput();
      mniVol.setData(dataArray, minc_header);
      mniVol.setMetadata("format", "minc2");
    }
  }]);
  return Minc2Decoder;
}(Filter); /* END of class Minc2Decoder */

/*
* Author    Jonathan Lurie - http://me.jonathanlurie.fr
*           Robert D. Vincent
*
* License   MIT
* Link      https://github.com/Pixpipe/pixpipejs
* Lab       MCIN - Montreal Neurological Institute
*/

/**
* Decodes a NIfTI file.
* Takes an ArrayBuffer as input (0) and output a `MniVolume` (which inherit `Image3D`).
*
* **Usage**
* - [examples/fileToNifti.html](../examples/fileToNifti.html)
*/

var NiftiDecoder = function (_Filter) {
  inherits(NiftiDecoder, _Filter);

  function NiftiDecoder() {
    classCallCheck(this, NiftiDecoder);

    var _this = possibleConstructorReturn(this, (NiftiDecoder.__proto__ || Object.getPrototypeOf(NiftiDecoder)).call(this));

    _this.addInputValidator(0, ArrayBuffer);
    _this.setMetadata("debug", false);
    return _this;
  }

  /**
  * [PRIVATE]
  */


  createClass(NiftiDecoder, [{
    key: 'parseNifti1Header',
    value: function parseNifti1Header(raw_data) {
      var header = {
        order: [],
        xspace: {},
        yspace: {},
        zspace: {}
      };
      var error_message = null;
      var dview = new DataView(raw_data, 0, 348);
      var bytes = new Uint8Array(raw_data, 0, 348);
      var littleEndian = true;

      var sizeof_hdr = dview.getUint32(0, true);
      if (sizeof_hdr === 0x0000015c) {
        littleEndian = true;
      } else if (sizeof_hdr === 0x5c010000) {
        littleEndian = false;
      } else {
        error_message = "This does not look like a NIfTI-1 file.";
      }

      var ndims = dview.getUint16(40, littleEndian);
      if (ndims < 3 || ndims > 4) {
        error_message = "Cannot handle " + ndims + "-dimensional images yet.";
      }

      var magic = String.fromCharCode.apply(null, bytes.subarray(344, 348));
      if (magic !== "n+1\0") {
        error_message = "Bad magic number: '" + magic + "'";
      }

      if (error_message) {
        //throw new Error(error_message);
        console.warn("The input file is not a NIfTI file.");
        return null;
      }

      header.xspace.space_length = dview.getUint16(42, littleEndian);
      header.yspace.space_length = dview.getUint16(44, littleEndian);
      header.zspace.space_length = dview.getUint16(46, littleEndian);
      var tlength = dview.getUint16(48, littleEndian);

      var datatype = dview.getUint16(70, littleEndian);
      var bitpix = dview.getUint16(72, littleEndian);

      var xstep = dview.getFloat32(80, littleEndian);
      var ystep = dview.getFloat32(84, littleEndian);
      var zstep = dview.getFloat32(88, littleEndian);
      var tstep = dview.getFloat32(92, littleEndian);

      var vox_offset = dview.getFloat32(108, littleEndian);
      if (vox_offset < 352) {
        vox_offset = 352;
      }

      var scl_slope = dview.getFloat32(112, littleEndian);
      var scl_inter = dview.getFloat32(116, littleEndian);

      var qform_code = dview.getUint16(252, littleEndian);
      var sform_code = dview.getUint16(254, littleEndian);

      var nifti_xfm = [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];

      if (tlength >= 1) {
        header.time = {};
        header.time.space_length = tlength;
        header.time.step = tstep;
        header.time.start = 0;
        header.time.name = "time";
      }

      /* Record the number of bytes per voxel, and note whether we need
       * to swap bytes in the voxel data.
       */
      header.bytes_per_voxel = bitpix / 8;
      header.must_swap_data = !littleEndian && header.bytes_per_voxel > 1;

      if (sform_code > 0) {
        /* The "Sform", if present, defines an affine transform which is
         * generally assumed to correspond to some standard coordinate
         * space (e.g. Talairach).
         */
        nifti_xfm[0][0] = dview.getFloat32(280, littleEndian);
        nifti_xfm[0][1] = dview.getFloat32(284, littleEndian);
        nifti_xfm[0][2] = dview.getFloat32(288, littleEndian);
        nifti_xfm[0][3] = dview.getFloat32(292, littleEndian);
        nifti_xfm[1][0] = dview.getFloat32(296, littleEndian);
        nifti_xfm[1][1] = dview.getFloat32(300, littleEndian);
        nifti_xfm[1][2] = dview.getFloat32(304, littleEndian);
        nifti_xfm[1][3] = dview.getFloat32(308, littleEndian);
        nifti_xfm[2][0] = dview.getFloat32(312, littleEndian);
        nifti_xfm[2][1] = dview.getFloat32(316, littleEndian);
        nifti_xfm[2][2] = dview.getFloat32(320, littleEndian);
        nifti_xfm[2][3] = dview.getFloat32(324, littleEndian);
      } else if (qform_code > 0) {
        /* The "Qform", if present, defines a quaternion which specifies
         * a less general transformation, often to scanner space.
         */
        var quatern_b = dview.getFloat32(256, littleEndian);
        var quatern_c = dview.getFloat32(260, littleEndian);
        var quatern_d = dview.getFloat32(264, littleEndian);
        var qoffset_x = dview.getFloat32(268, littleEndian);
        var qoffset_y = dview.getFloat32(272, littleEndian);
        var qoffset_z = dview.getFloat32(276, littleEndian);
        var qfac = dview.getFloat32(76, littleEndian) < 0 ? -1.0 : 1.0;

        nifti_xfm = this.niftiQuaternToMat44(quatern_b, quatern_c, quatern_d, qoffset_x, qoffset_y, qoffset_z, xstep, ystep, zstep, qfac);
      } else {
        nifti_xfm[0][0] = xstep;
        nifti_xfm[1][1] = ystep;
        nifti_xfm[2][2] = zstep;
      }

      var i, j;
      var axis_index_from_file = [0, 1, 2];
      var transform = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 1]];

      for (i = 0; i < 3; i++) {
        var c_x = Math.abs(nifti_xfm[0][i]);
        var c_y = Math.abs(nifti_xfm[1][i]);
        var c_z = Math.abs(nifti_xfm[2][i]);

        if (c_x > c_y && c_x > c_z) {
          header.order[2 - i] = "xspace";
          axis_index_from_file[i] = 0;
        } else if (c_y > c_x && c_y > c_z) {
          header.order[2 - i] = "yspace";
          axis_index_from_file[i] = 1;
        } else {
          header.order[2 - i] = "zspace";
          axis_index_from_file[i] = 2;
        }
      }

      for (i = 0; i < 3; i++) {
        for (j = 0; j < 4; j++) {
          var volume_axis = j;
          if (j < 3) {
            volume_axis = axis_index_from_file[j];
          }
          transform[i][volume_axis] = nifti_xfm[i][j];
        }
      }

      MniVolume.transformToMinc(transform, header);

      header[header.order[2]].space_length = dview.getUint16(42, littleEndian);
      header[header.order[1]].space_length = dview.getUint16(44, littleEndian);
      header[header.order[0]].space_length = dview.getUint16(46, littleEndian);

      if (tlength >= 1) {
        header.order.unshift("time");
      }

      header.datatype = datatype;
      header.vox_offset = vox_offset;
      header.scl_slope = scl_slope;
      header.scl_inter = scl_inter;

      return header;
    }

    /**
    * [PRIVATE]
    * This function is a direct translation of the identical function
    * found in the standard NIfTI-1 library (nifti1_io.c).
    */

  }, {
    key: 'niftiQuaternToMat44',
    value: function niftiQuaternToMat44(qb, qc, qd, qx, qy, qz, dx, dy, dz, qfac) {
      var m = [// 4x4 transform
      [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 1]];
      var b = qb;
      var c = qc;
      var d = qd;
      var a, xd, yd, zd;

      // compute a parameter from b,c,d

      a = 1.0 - (b * b + c * c + d * d);
      if (a < 1.e-7) {
        // special case
        a = 1.0 / Math.sqrt(b * b + c * c + d * d);
        b *= a; // normalize (b,c,d) vector
        c *= a;
        d *= a;
        a = 0.0; // a = 0 ==> 180 degree rotation
      } else {
        a = Math.sqrt(a); // angle = 2*arccos(a)
      }

      // load rotation matrix, including scaling factors for voxel sizes

      xd = dx > 0.0 ? dx : 1.0; // make sure are positive
      yd = dy > 0.0 ? dy : 1.0;
      zd = dz > 0.0 ? dz : 1.0;

      if (qfac < 0.0) // left handedness?
        zd = -zd;

      m[0][0] = (a * a + b * b - c * c - d * d) * xd;
      m[0][1] = 2.0 * (b * c - a * d) * yd;
      m[0][2] = 2.0 * (b * d + a * c) * zd;
      m[1][0] = 2.0 * (b * c + a * d) * xd;
      m[1][1] = (a * a + c * c - b * b - d * d) * yd;
      m[1][2] = 2.0 * (c * d - a * b) * zd;
      m[2][0] = 2.0 * (b * d - a * c) * xd;
      m[2][1] = 2.0 * (c * d + a * b) * yd;
      m[2][2] = (a * a + d * d - c * c - b * b) * zd;

      // load offsets
      m[0][3] = qx;
      m[1][3] = qy;
      m[2][3] = qz;

      return m;
    }

    /**
    * [PRIVATE]
    */

  }, {
    key: 'createNifti1Data',
    value: function createNifti1Data(header, raw_data) {
      var native_data = null;

      if (header.must_swap_data) {
        MniVolume.swapn(new Uint8Array(raw_data, header.vox_offset), header.bytes_per_voxel);
      }

      switch (header.datatype) {
        case 2:
          // DT_UNSIGNED_CHAR
          // no translation necessary; could optimize this out.
          native_data = new Uint8Array(raw_data, header.vox_offset);
          break;
        case 4:
          // DT_SIGNED_SHORT
          native_data = new Int16Array(raw_data, header.vox_offset);
          break;
        case 8:
          // DT_SIGNED_INT
          native_data = new Int32Array(raw_data, header.vox_offset);
          break;
        case 16:
          // DT_FLOAT
          native_data = new Float32Array(raw_data, header.vox_offset);
          break;
        case 64:
          // DT_DOUBLE
          native_data = new Float64Array(raw_data, header.vox_offset);
          break;
        // Values above 256 are NIfTI-specific, and rarely used.
        case 256:
          // DT_INT8
          native_data = new Int8Array(raw_data, header.vox_offset);
          break;
        case 512:
          // DT_UINT16
          native_data = new Uint16Array(raw_data, header.vox_offset);
          break;
        case 768:
          // DT_UINT32
          native_data = new Uint32Array(raw_data, header.vox_offset);
          break;
        default:
          // We don't yet support 64-bit, complex, RGB, and float 128 types.
          throw new Error("Unsupported data type: " + header.datatype);
      }

      var d = 0; // Generic loop counter.
      var slope = header.scl_slope;
      var inter = header.scl_inter;

      // According to the NIfTI specification, a slope value of zero means
      // that the data should _not_ be scaled. Otherwise, every voxel is
      // transformed according to value = value * slope + inter
      //
      if (slope !== 0.0) {
        var float_data = new Float32Array(native_data.length);

        for (d = 0; d < native_data.length; d++) {
          float_data[d] = native_data[d] * slope + inter;
        }
        native_data = float_data; // Return the new float buffer.
      }

      if (header.order.length === 4) {
        header.order = header.order.slice(1);
      }

      // Incrementation offsets for each dimension of the volume.
      header[header.order[0]].offset = header[header.order[1]].space_length * header[header.order[2]].space_length;
      header[header.order[1]].offset = header[header.order[2]].space_length;
      header[header.order[2]].offset = 1;

      if (header.time) {
        header.time.offset = header.xspace.space_length * header.yspace.space_length * header.zspace.space_length;
      }

      return native_data;
    }

    //----------------------------------------------------------------------------

  }, {
    key: '_run',
    value: function _run() {
      var inputBuffer = this._getInput(0);

      if (!inputBuffer) {
        console.warn("NiftiDecoder requires an ArrayBuffer as input \"0\". Unable to continue.");
        return;
      }

      var header = null;
      try {
        header = this.parseNifti1Header(inputBuffer);
      } catch (e) {}
      //console.warn( e );


      // abort if header not valid
      if (!header) {
        console.warn("This file is not a NIfTI file.");
        return;
      }

      var dataArray = this.createNifti1Data(header, inputBuffer);

      // add the output to this filter
      this._addOutput(MniVolume);
      var mniVol = this.getOutput();
      mniVol.setData(dataArray, header);
      mniVol.setMetadata("format", "nifti");
    }
  }]);
  return NiftiDecoder;
}(Filter); /* END class NiftiDecoder */

var utilities = createCommonjsModule$$1(function (module) {
    /*jslint browser: true, node: true */
    /*global require, module */

    "use strict";

    /*** Imports ***/

    var nifti = nifti || {};
    nifti.Utils = nifti.Utils || {};

    /*** Static Pseudo-constants ***/

    nifti.Utils.crcTable = null;
    nifti.Utils.GUNZIP_MAGIC_COOKIE1 = 31;
    nifti.Utils.GUNZIP_MAGIC_COOKIE2 = 139;

    /*** Static methods ***/

    nifti.Utils.getStringAt = function (data, start, end) {
        var str = "",
            ctr,
            ch;

        for (ctr = start; ctr < end; ctr += 1) {
            ch = data.getUint8(ctr);

            if (ch !== 0) {
                str += String.fromCharCode(ch);
            }
        }

        return str;
    };

    nifti.Utils.getByteAt = function (data, start) {
        return data.getInt8(start);
    };

    nifti.Utils.getShortAt = function (data, start, littleEndian) {
        return data.getInt16(start, littleEndian);
    };

    nifti.Utils.getIntAt = function (data, start, littleEndian) {
        return data.getInt32(start, littleEndian);
    };

    nifti.Utils.getFloatAt = function (data, start, littleEndian) {
        return data.getFloat32(start, littleEndian);
    };

    nifti.Utils.getDoubleAt = function (data, start, littleEndian) {
        return data.getFloat64(start, littleEndian);
    };

    nifti.Utils.getLongAt = function (data, start, littleEndian) {
        var ctr,
            array = [],
            value = 0;

        for (ctr = 0; ctr < 8; ctr += 1) {
            array[ctr] = nifti.Utils.getByteAt(data, start + ctr, littleEndian);
        }

        for (ctr = array.length - 1; ctr >= 0; ctr--) {
            value = value * 256 + array[ctr];
        }

        return value;
    };

    nifti.Utils.toArrayBuffer = function (buffer) {
        var ab, view, i;

        ab = new ArrayBuffer(buffer.length);
        view = new Uint8Array(ab);
        for (i = 0; i < buffer.length; i += 1) {
            view[i] = buffer[i];
        }
        return ab;
    };

    nifti.Utils.isString = function (obj) {
        return typeof obj === "string" || obj instanceof String;
    };

    nifti.Utils.formatNumber = function (num, shortFormat) {
        var val = 0;

        if (nifti.Utils.isString(num)) {
            val = Number(num);
        } else {
            val = num;
        }

        if (shortFormat) {
            val = val.toPrecision(5);
        } else {
            val = val.toPrecision(7);
        }

        return parseFloat(val);
    };

    // http://stackoverflow.com/questions/18638900/javascript-crc32
    nifti.Utils.makeCRCTable = function () {
        var c;
        var crcTable = [];
        for (var n = 0; n < 256; n++) {
            c = n;
            for (var k = 0; k < 8; k++) {
                c = c & 1 ? 0xEDB88320 ^ c >>> 1 : c >>> 1;
            }
            crcTable[n] = c;
        }
        return crcTable;
    };

    nifti.Utils.crc32 = function (dataView) {
        var crcTable = nifti.Utils.crcTable || (nifti.Utils.crcTable = nifti.Utils.makeCRCTable());
        var crc = 0 ^ -1;

        for (var i = 0; i < dataView.byteLength; i++) {
            crc = crc >>> 8 ^ crcTable[(crc ^ dataView.getUint8(i)) & 0xFF];
        }

        return (crc ^ -1) >>> 0;
    };

    /*** Exports ***/

    var moduleType = 'object';
    if (moduleType !== 'undefined' && module.exports) {
        module.exports = nifti.Utils;
    }
});

var nifti1 = createCommonjsModule$$1(function (module) {
    /*jslint browser: true, node: true */
    /*global */

    "use strict";

    /*** Imports ***/

    var nifti = nifti || {};
    nifti.Utils = nifti.Utils || (typeof commonjsRequire$$1 !== 'undefined' ? utilities : null);

    /*** Constructor ***/

    /**
     * The NIFTI1 constructor.
     * @constructor
     * @property {boolean} littleEndian
     * @property {number} dim_info
     * @property {number[]} dims - image dimensions
     * @property {number} intent_p1
     * @property {number} intent_p2
     * @property {number} intent_p3
     * @property {number} intent_code
     * @property {number} datatypeCode
     * @property {number} numBitsPerVoxel
     * @property {number} slice_start
     * @property {number} slice_end
     * @property {number} slice_code
     * @property {number[]} pixDims - voxel dimensions
     * @property {number} vox_offset
     * @property {number} scl_slope
     * @property {number} scl_inter
     * @property {number} xyzt_units
     * @property {number} cal_max
     * @property {number} cal_min
     * @property {number} slice_duration
     * @property {number} toffset
     * @property {string} description
     * @property {string} aux_file
     * @property {string} intent_name
     * @property {number} qform_code
     * @property {number} sform_code
     * @property {number} quatern_b
     * @property {number} quatern_c
     * @property {number} quatern_d
     * @property {number} quatern_x
     * @property {number} quatern_y
     * @property {number} quatern_z
     * @property {Array.<Array.<number>>} affine
     * @property {string} magic
     * @property {boolean} isHDR - if hdr/img format
     * @property {number[]} extensionFlag
     * @property {number} extensionSize
     * @property {number} extensionCode
     * @type {Function}
     */
    nifti.NIFTI1 = nifti.NIFTI1 || function () {
        this.littleEndian = false;
        this.dim_info = 0;
        this.dims = [];
        this.intent_p1 = 0;
        this.intent_p2 = 0;
        this.intent_p3 = 0;
        this.intent_code = 0;
        this.datatypeCode = 0;
        this.numBitsPerVoxel = 0;
        this.slice_start = 0;
        this.slice_end = 0;
        this.slice_code = 0;
        this.pixDims = [];
        this.vox_offset = 0;
        this.scl_slope = 1;
        this.scl_inter = 0;
        this.xyzt_units = 0;
        this.cal_max = 0;
        this.cal_min = 0;
        this.slice_duration = 0;
        this.toffset = 0;
        this.description = "";
        this.aux_file = "";
        this.intent_name = "";
        this.qform_code = 0;
        this.sform_code = 0;
        this.quatern_b = 0;
        this.quatern_c = 0;
        this.quatern_d = 0;
        this.qoffset_x = 0;
        this.qoffset_y = 0;
        this.qoffset_z = 0;
        this.affine = [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
        this.magic = 0;
        this.isHDR = false;
        this.extensionFlag = [0, 0, 0, 0];
        this.extensionSize = 0;
        this.extensionCode = 0;
    };

    /*** Static Pseudo-constants ***/

    // datatype codes
    nifti.NIFTI1.TYPE_NONE = 0;
    nifti.NIFTI1.TYPE_BINARY = 1;
    nifti.NIFTI1.TYPE_UINT8 = 2;
    nifti.NIFTI1.TYPE_INT16 = 4;
    nifti.NIFTI1.TYPE_INT32 = 8;
    nifti.NIFTI1.TYPE_FLOAT32 = 16;
    nifti.NIFTI1.TYPE_COMPLEX64 = 32;
    nifti.NIFTI1.TYPE_FLOAT64 = 64;
    nifti.NIFTI1.TYPE_RGB24 = 128;
    nifti.NIFTI1.TYPE_INT8 = 256;
    nifti.NIFTI1.TYPE_UINT16 = 512;
    nifti.NIFTI1.TYPE_UINT32 = 768;
    nifti.NIFTI1.TYPE_INT64 = 1024;
    nifti.NIFTI1.TYPE_UINT64 = 1280;
    nifti.NIFTI1.TYPE_FLOAT128 = 1536;
    nifti.NIFTI1.TYPE_COMPLEX128 = 1792;
    nifti.NIFTI1.TYPE_COMPLEX256 = 2048;

    // transform codes
    nifti.NIFTI1.XFORM_UNKNOWN = 0;
    nifti.NIFTI1.XFORM_SCANNER_ANAT = 1;
    nifti.NIFTI1.XFORM_ALIGNED_ANAT = 2;
    nifti.NIFTI1.XFORM_TALAIRACH = 3;
    nifti.NIFTI1.XFORM_MNI_152 = 4;

    // unit codes
    nifti.NIFTI1.SPATIAL_UNITS_MASK = 0x07;
    nifti.NIFTI1.TEMPORAL_UNITS_MASK = 0x38;
    nifti.NIFTI1.UNITS_UNKNOWN = 0;
    nifti.NIFTI1.UNITS_METER = 1;
    nifti.NIFTI1.UNITS_MM = 2;
    nifti.NIFTI1.UNITS_MICRON = 3;
    nifti.NIFTI1.UNITS_SEC = 8;
    nifti.NIFTI1.UNITS_MSEC = 16;
    nifti.NIFTI1.UNITS_USEC = 24;
    nifti.NIFTI1.UNITS_HZ = 32;
    nifti.NIFTI1.UNITS_PPM = 40;
    nifti.NIFTI1.UNITS_RADS = 48;

    // nifti1 codes
    nifti.NIFTI1.MAGIC_COOKIE = 348;
    nifti.NIFTI1.STANDARD_HEADER_SIZE = 348;
    nifti.NIFTI1.MAGIC_NUMBER_LOCATION = 344;
    nifti.NIFTI1.MAGIC_NUMBER = [0x6E, 0x2B, 0x31]; // n+1 (.nii)
    nifti.NIFTI1.MAGIC_NUMBER2 = [0x6E, 0x69, 0x31]; // ni1 (.hdr/.img)
    nifti.NIFTI1.EXTENSION_HEADER_SIZE = 8;

    /*** Prototype Methods ***/

    /**
     * Reads the header data.
     * @param {ArrayBuffer} data
     */
    nifti.NIFTI1.prototype.readHeader = function (data) {
        var rawData = new DataView(data),
            magicCookieVal = nifti.Utils.getIntAt(rawData, 0, this.littleEndian),
            ctr,
            ctrOut,
            ctrIn,
            index;

        if (magicCookieVal !== nifti.NIFTI1.MAGIC_COOKIE) {
            // try as little endian
            this.littleEndian = true;
            magicCookieVal = nifti.Utils.getIntAt(rawData, 0, this.littleEndian);
        }

        if (magicCookieVal !== nifti.NIFTI1.MAGIC_COOKIE) {
            throw new Error("This does not appear to be a NIFTI file!");
        }

        this.dim_info = nifti.Utils.getByteAt(rawData, 39);

        for (ctr = 0; ctr < 8; ctr += 1) {
            index = 40 + ctr * 2;
            this.dims[ctr] = nifti.Utils.getShortAt(rawData, index, this.littleEndian);
        }

        this.intent_p1 = nifti.Utils.getFloatAt(rawData, 56, this.littleEndian);
        this.intent_p2 = nifti.Utils.getFloatAt(rawData, 60, this.littleEndian);
        this.intent_p3 = nifti.Utils.getFloatAt(rawData, 64, this.littleEndian);
        this.intent_code = nifti.Utils.getShortAt(rawData, 68, this.littleEndian);

        this.datatypeCode = nifti.Utils.getShortAt(rawData, 70, this.littleEndian);
        this.numBitsPerVoxel = nifti.Utils.getShortAt(rawData, 72, this.littleEndian);

        this.slice_start = nifti.Utils.getShortAt(rawData, 74, this.littleEndian);

        for (ctr = 0; ctr < 8; ctr += 1) {
            index = 76 + ctr * 4;
            this.pixDims[ctr] = nifti.Utils.getFloatAt(rawData, index, this.littleEndian);
        }

        this.vox_offset = nifti.Utils.getFloatAt(rawData, 108, this.littleEndian);

        this.scl_slope = nifti.Utils.getFloatAt(rawData, 112, this.littleEndian);
        this.scl_inter = nifti.Utils.getFloatAt(rawData, 116, this.littleEndian);

        this.slice_end = nifti.Utils.getShortAt(rawData, 120, this.littleEndian);
        this.slice_code = nifti.Utils.getByteAt(rawData, 122);

        this.xyzt_units = nifti.Utils.getByteAt(rawData, 123);

        this.cal_max = nifti.Utils.getFloatAt(rawData, 124, this.littleEndian);
        this.cal_min = nifti.Utils.getFloatAt(rawData, 128, this.littleEndian);

        this.slice_duration = nifti.Utils.getFloatAt(rawData, 132, this.littleEndian);
        this.toffset = nifti.Utils.getFloatAt(rawData, 136, this.littleEndian);

        this.description = nifti.Utils.getStringAt(rawData, 148, 228);
        this.aux_file = nifti.Utils.getStringAt(rawData, 228, 252);

        this.qform_code = nifti.Utils.getShortAt(rawData, 252, this.littleEndian);
        this.sform_code = nifti.Utils.getShortAt(rawData, 254, this.littleEndian);

        this.quatern_b = nifti.Utils.getFloatAt(rawData, 256, this.littleEndian);
        this.quatern_c = nifti.Utils.getFloatAt(rawData, 260, this.littleEndian);
        this.quatern_d = nifti.Utils.getFloatAt(rawData, 264, this.littleEndian);
        this.qoffset_x = nifti.Utils.getFloatAt(rawData, 268, this.littleEndian);
        this.qoffset_y = nifti.Utils.getFloatAt(rawData, 272, this.littleEndian);
        this.qoffset_z = nifti.Utils.getFloatAt(rawData, 276, this.littleEndian);

        for (ctrOut = 0; ctrOut < 3; ctrOut += 1) {
            for (ctrIn = 0; ctrIn < 4; ctrIn += 1) {
                index = 280 + (ctrOut * 4 + ctrIn) * 4;
                this.affine[ctrOut][ctrIn] = nifti.Utils.getFloatAt(rawData, index, this.littleEndian);
            }
        }

        this.affine[3][0] = 0;
        this.affine[3][1] = 0;
        this.affine[3][2] = 0;
        this.affine[3][3] = 1;

        this.intent_name = nifti.Utils.getStringAt(rawData, 328, 344);
        this.magic = nifti.Utils.getStringAt(rawData, 344, 348);

        this.isHDR = this.magic === nifti.NIFTI1.MAGIC_NUMBER2;

        if (rawData.byteLength > nifti.NIFTI1.MAGIC_COOKIE) {
            this.extensionFlag[0] = nifti.Utils.getByteAt(rawData, 348);
            this.extensionFlag[1] = nifti.Utils.getByteAt(rawData, 348 + 1);
            this.extensionFlag[2] = nifti.Utils.getByteAt(rawData, 348 + 2);
            this.extensionFlag[3] = nifti.Utils.getByteAt(rawData, 348 + 3);

            if (this.extensionFlag[0]) {
                this.extensionSize = this.getExtensionSize(rawData);
                this.extensionCode = this.getExtensionCode(rawData);
            }
        }
    };

    /**
     * Returns a formatted string of header fields.
     * @returns {string}
     */
    nifti.NIFTI1.prototype.toFormattedString = function () {
        var fmt = nifti.Utils.formatNumber,
            string = "";

        string += "Dim Info = " + this.dim_info + "\n";

        string += "Image Dimensions (1-8): " + this.dims[0] + ", " + this.dims[1] + ", " + this.dims[2] + ", " + this.dims[3] + ", " + this.dims[4] + ", " + this.dims[5] + ", " + this.dims[6] + ", " + this.dims[7] + "\n";

        string += "Intent Parameters (1-3): " + this.intent_p1 + ", " + this.intent_p2 + ", " + this.intent_p3 + "\n";

        string += "Intent Code = " + this.intent_code + "\n";
        string += "Datatype = " + this.datatypeCode + " (" + this.getDatatypeCodeString(this.datatypeCode) + ")\n";
        string += "Bits Per Voxel = " + this.numBitsPerVoxel + "\n";
        string += "Slice Start = " + this.slice_start + "\n";
        string += "Voxel Dimensions (1-8): " + fmt(this.pixDims[0]) + ", " + fmt(this.pixDims[1]) + ", " + fmt(this.pixDims[2]) + ", " + fmt(this.pixDims[3]) + ", " + fmt(this.pixDims[4]) + ", " + fmt(this.pixDims[5]) + ", " + fmt(this.pixDims[6]) + ", " + fmt(this.pixDims[7]) + "\n";

        string += "Image Offset = " + this.vox_offset + "\n";
        string += "Data Scale:  Slope = " + fmt(this.scl_slope) + "  Intercept = " + fmt(this.scl_inter) + "\n";
        string += "Slice End = " + this.slice_end + "\n";
        string += "Slice Code = " + this.slice_code + "\n";
        string += "Units Code = " + this.xyzt_units + " (" + this.getUnitsCodeString(nifti.NIFTI1.SPATIAL_UNITS_MASK & this.xyzt_units) + ", " + this.getUnitsCodeString(nifti.NIFTI1.TEMPORAL_UNITS_MASK & this.xyzt_units) + ")\n";
        string += "Display Range:  Max = " + fmt(this.cal_max) + "  Min = " + fmt(this.cal_min) + "\n";
        string += "Slice Duration = " + this.slice_duration + "\n";
        string += "Time Axis Shift = " + this.toffset + "\n";
        string += "Description: \"" + this.description + "\"\n";
        string += "Auxiliary File: \"" + this.aux_file + "\"\n";
        string += "Q-Form Code = " + this.qform_code + " (" + this.getTransformCodeString(this.qform_code) + ")\n";
        string += "S-Form Code = " + this.sform_code + " (" + this.getTransformCodeString(this.sform_code) + ")\n";
        string += "Quaternion Parameters:  " + "b = " + fmt(this.quatern_b) + "  " + "c = " + fmt(this.quatern_c) + "  " + "d = " + fmt(this.quatern_d) + "\n";

        string += "Quaternion Offsets:  " + "x = " + this.qoffset_x + "  " + "y = " + this.qoffset_y + "  " + "z = " + this.qoffset_z + "\n";

        string += "S-Form Parameters X: " + fmt(this.affine[0][0]) + ", " + fmt(this.affine[0][1]) + ", " + fmt(this.affine[0][2]) + ", " + fmt(this.affine[0][3]) + "\n";

        string += "S-Form Parameters Y: " + fmt(this.affine[1][0]) + ", " + fmt(this.affine[1][1]) + ", " + fmt(this.affine[1][2]) + ", " + fmt(this.affine[1][3]) + "\n";

        string += "S-Form Parameters Z: " + fmt(this.affine[2][0]) + ", " + fmt(this.affine[2][1]) + ", " + fmt(this.affine[2][2]) + ", " + fmt(this.affine[2][3]) + "\n";

        string += "Intent Name: \"" + this.intent_name + "\"\n";

        if (this.extensionFlag[0]) {
            string += "Extension: Size = " + this.extensionSize + "  Code = " + this.extensionCode + "\n";
        }

        return string;
    };

    /**
     * Returns a human-readable string of datatype.
     * @param {number} code
     * @returns {string}
     */
    nifti.NIFTI1.prototype.getDatatypeCodeString = function (code) {
        if (code === nifti.NIFTI1.TYPE_UINT8) {
            return "1-Byte Unsigned Integer";
        } else if (code === nifti.NIFTI1.TYPE_INT16) {
            return "2-Byte Signed Integer";
        } else if (code === nifti.NIFTI1.TYPE_INT32) {
            return "4-Byte Signed Integer";
        } else if (code === nifti.NIFTI1.TYPE_FLOAT32) {
            return "4-Byte Float";
        } else if (code === nifti.NIFTI1.TYPE_FLOAT64) {
            return "8-Byte Float";
        } else if (code === nifti.NIFTI1.TYPE_RGB24) {
            return "RGB";
        } else if (code === nifti.NIFTI1.TYPE_INT8) {
            return "1-Byte Signed Integer";
        } else if (code === nifti.NIFTI1.TYPE_UINT16) {
            return "2-Byte Unsigned Integer";
        } else if (code === nifti.NIFTI1.TYPE_UINT32) {
            return "4-Byte Unsigned Integer";
        } else if (code === nifti.NIFTI1.TYPE_INT64) {
            return "8-Byte Signed Integer";
        } else if (code === nifti.NIFTI1.TYPE_UINT64) {
            return "8-Byte Unsigned Integer";
        } else {
            return "Unknown";
        }
    };

    /**
     * Returns a human-readable string of transform type.
     * @param {number} code
     * @returns {string}
     */
    nifti.NIFTI1.prototype.getTransformCodeString = function (code) {
        if (code === nifti.NIFTI1.XFORM_SCANNER_ANAT) {
            return "Scanner";
        } else if (code === nifti.NIFTI1.XFORM_ALIGNED_ANAT) {
            return "Aligned";
        } else if (code === nifti.NIFTI1.XFORM_TALAIRACH) {
            return "Talairach";
        } else if (code === nifti.NIFTI1.XFORM_MNI_152) {
            return "MNI";
        } else {
            return "Unknown";
        }
    };

    /**
     * Returns a human-readable string of spatial and temporal units.
     * @param {number} code
     * @returns {string}
     */
    nifti.NIFTI1.prototype.getUnitsCodeString = function (code) {
        if (code === nifti.NIFTI1.UNITS_METER) {
            return "Meters";
        } else if (code === nifti.NIFTI1.UNITS_MM) {
            return "Millimeters";
        } else if (code === nifti.NIFTI1.UNITS_MICRON) {
            return "Microns";
        } else if (code === nifti.NIFTI1.UNITS_SEC) {
            return "Seconds";
        } else if (code === nifti.NIFTI1.UNITS_MSEC) {
            return "Milliseconds";
        } else if (code === nifti.NIFTI1.UNITS_USEC) {
            return "Microseconds";
        } else if (code === nifti.NIFTI1.UNITS_HZ) {
            return "Hz";
        } else if (code === nifti.NIFTI1.UNITS_PPM) {
            return "PPM";
        } else if (code === nifti.NIFTI1.UNITS_RADS) {
            return "Rads";
        } else {
            return "Unknown";
        }
    };

    /**
     * Returns the qform matrix.
     * @returns {Array.<Array.<number>>}
     */
    nifti.NIFTI1.prototype.getQformMat = function () {
        return this.convertNiftiQFormToNiftiSForm(this.quatern_b, this.quatern_c, this.quatern_d, this.qoffset_x, this.qoffset_y, this.qoffset_z, this.pixDims[1], this.pixDims[2], this.pixDims[3], this.pixDims[0]);
    };

    /**
     * Converts qform to an affine.  (See http://nifti.nimh.nih.gov/pub/dist/src/niftilib/nifti1_io.c)
     * @param {number} qb
     * @param {number} qc
     * @param {number} qd
     * @param {number} qx
     * @param {number} qy
     * @param {number} qz
     * @param {number} dx
     * @param {number} dy
     * @param {number} dz
     * @param {number} qfac
     * @returns {Array.<Array.<number>>}
     */
    nifti.NIFTI1.prototype.convertNiftiQFormToNiftiSForm = function (qb, qc, qd, qx, qy, qz, dx, dy, dz, qfac) {
        var R = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]],
            a,
            b = qb,
            c = qc,
            d = qd,
            xd,
            yd,
            zd;

        // last row is always [ 0 0 0 1 ]
        R[3][0] = R[3][1] = R[3][2] = 0.0;
        R[3][3] = 1.0;

        // compute a parameter from b,c,d
        a = 1.0 - (b * b + c * c + d * d);
        if (a < 0.0000001) {
            /* special case */

            a = 1.0 / Math.sqrt(b * b + c * c + d * d);
            b *= a;
            c *= a;
            d *= a; /* normalize (b,c,d) vector */
            a = 0.0; /* a = 0 ==> 180 degree rotation */
        } else {

            a = Math.sqrt(a); /* angle = 2*arccos(a) */
        }

        // load rotation matrix, including scaling factors for voxel sizes
        xd = dx > 0.0 ? dx : 1.0; /* make sure are positive */
        yd = dy > 0.0 ? dy : 1.0;
        zd = dz > 0.0 ? dz : 1.0;

        if (qfac < 0.0) {
            zd = -zd; /* left handedness? */
        }

        R[0][0] = (a * a + b * b - c * c - d * d) * xd;
        R[0][1] = 2.0 * (b * c - a * d) * yd;
        R[0][2] = 2.0 * (b * d + a * c) * zd;
        R[1][0] = 2.0 * (b * c + a * d) * xd;
        R[1][1] = (a * a + c * c - b * b - d * d) * yd;
        R[1][2] = 2.0 * (c * d - a * b) * zd;
        R[2][0] = 2.0 * (b * d - a * c) * xd;
        R[2][1] = 2.0 * (c * d + a * b) * yd;
        R[2][2] = (a * a + d * d - c * c - b * b) * zd;

        // load offsets
        R[0][3] = qx;
        R[1][3] = qy;
        R[2][3] = qz;

        return R;
    };

    /**
     * Converts sform to an orientation string (e.g., XYZ+--).  (See http://nifti.nimh.nih.gov/pub/dist/src/niftilib/nifti1_io.c)
     * @param {Array.<Array.<number>>} R
     * @returns {string}
     */
    nifti.NIFTI1.prototype.convertNiftiSFormToNEMA = function (R) {
        var xi, xj, xk, yi, yj, yk, zi, zj, zk, val, detQ, detP, i, j, k, p, q, r, ibest, jbest, kbest, pbest, qbest, rbest, M, vbest, Q, P, iChar, jChar, kChar, iSense, jSense, kSense;
        k = 0;

        Q = [[0, 0, 0], [0, 0, 0], [0, 0, 0]];
        P = [[0, 0, 0], [0, 0, 0], [0, 0, 0]];

        //if( icod == NULL || jcod == NULL || kcod == NULL ) return ; /* bad */

        //*icod = *jcod = *kcod = 0 ; /* this.errorMessage returns, if sh*t happens */

        /* load column vectors for each (i,j,k) direction from matrix */

        /*-- i axis --*/ /*-- j axis --*/ /*-- k axis --*/

        xi = R[0][0];
        xj = R[0][1];
        xk = R[0][2];

        yi = R[1][0];
        yj = R[1][1];
        yk = R[1][2];

        zi = R[2][0];
        zj = R[2][1];
        zk = R[2][2];

        /* normalize column vectors to get unit vectors along each ijk-axis */

        /* normalize i axis */
        val = Math.sqrt(xi * xi + yi * yi + zi * zi);
        if (val === 0.0) {
            /* stupid input */
            return null;
        }

        xi /= val;
        yi /= val;
        zi /= val;

        /* normalize j axis */
        val = Math.sqrt(xj * xj + yj * yj + zj * zj);
        if (val === 0.0) {
            /* stupid input */
            return null;
        }

        xj /= val;
        yj /= val;
        zj /= val;

        /* orthogonalize j axis to i axis, if needed */
        val = xi * xj + yi * yj + zi * zj; /* dot product between i and j */
        if (Math.abs(val) > 1.E-4) {
            xj -= val * xi;
            yj -= val * yi;
            zj -= val * zi;
            val = Math.sqrt(xj * xj + yj * yj + zj * zj); /* must renormalize */
            if (val === 0.0) {
                /* j was parallel to i? */
                return null;
            }
            xj /= val;
            yj /= val;
            zj /= val;
        }

        /* normalize k axis; if it is zero, make it the cross product i x j */
        val = Math.sqrt(xk * xk + yk * yk + zk * zk);
        if (val === 0.0) {
            xk = yi * zj - zi * yj;
            yk = zi * xj - zj * xi;
            zk = xi * yj - yi * xj;
        } else {
            xk /= val;
            yk /= val;
            zk /= val;
        }

        /* orthogonalize k to i */
        val = xi * xk + yi * yk + zi * zk; /* dot product between i and k */
        if (Math.abs(val) > 1.E-4) {
            xk -= val * xi;
            yk -= val * yi;
            zk -= val * zi;
            val = Math.sqrt(xk * xk + yk * yk + zk * zk);
            if (val === 0.0) {
                /* bad */
                return null;
            }
            xk /= val;
            yk /= val;
            zk /= val;
        }

        /* orthogonalize k to j */
        val = xj * xk + yj * yk + zj * zk; /* dot product between j and k */
        if (Math.abs(val) > 1.e-4) {
            xk -= val * xj;
            yk -= val * yj;
            zk -= val * zj;
            val = Math.sqrt(xk * xk + yk * yk + zk * zk);
            if (val === 0.0) {
                /* bad */
                return null;
            }
            xk /= val;
            yk /= val;
            zk /= val;
        }

        Q[0][0] = xi;
        Q[0][1] = xj;
        Q[0][2] = xk;
        Q[1][0] = yi;
        Q[1][1] = yj;
        Q[1][2] = yk;
        Q[2][0] = zi;
        Q[2][1] = zj;
        Q[2][2] = zk;

        /* at this point, Q is the rotation matrix from the (i,j,k) to (x,y,z) axes */

        detQ = this.nifti_mat33_determ(Q);
        if (detQ === 0.0) {
            /* shouldn't happen unless user is a DUFIS */
            return null;
        }

        /* Build and test all possible +1/-1 coordinate permutation matrices P;
         then find the P such that the rotation matrix M=PQ is closest to the
         identity, in the sense of M having the smallest total rotation angle. */

        /* Despite the formidable looking 6 nested loops, there are
         only 3*3*3*2*2*2 = 216 passes, which will run very quickly. */

        vbest = -666.0;
        ibest = pbest = qbest = rbest = 1;
        jbest = 2;
        kbest = 3;

        for (i = 1; i <= 3; i += 1) {
            /* i = column number to use for row #1 */
            for (j = 1; j <= 3; j += 1) {
                /* j = column number to use for row #2 */
                if (i !== j) {
                    for (k = 1; k <= 3; k += 1) {
                        /* k = column number to use for row #3 */
                        if (!(i === k || j === k)) {
                            P[0][0] = P[0][1] = P[0][2] = P[1][0] = P[1][1] = P[1][2] = P[2][0] = P[2][1] = P[2][2] = 0.0;
                            for (p = -1; p <= 1; p += 2) {
                                /* p,q,r are -1 or +1      */
                                for (q = -1; q <= 1; q += 2) {
                                    /* and go into rows #1,2,3 */
                                    for (r = -1; r <= 1; r += 2) {
                                        P[0][i - 1] = p;
                                        P[1][j - 1] = q;
                                        P[2][k - 1] = r;
                                        detP = this.nifti_mat33_determ(P); /* sign of permutation */
                                        if (detP * detQ > 0.0) {
                                            M = this.nifti_mat33_mul(P, Q);

                                            /* angle of M rotation = 2.0*acos(0.5*sqrt(1.0+trace(M)))       */
                                            /* we want largest trace(M) == smallest angle == M nearest to I */

                                            val = M[0][0] + M[1][1] + M[2][2]; /* trace */
                                            if (val > vbest) {
                                                vbest = val;
                                                ibest = i;
                                                jbest = j;
                                                kbest = k;
                                                pbest = p;
                                                qbest = q;
                                                rbest = r;
                                            }
                                        } /* doesn't match sign of Q */
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        /* At this point ibest is 1 or 2 or 3; pbest is -1 or +1; etc.
          The matrix P that corresponds is the best permutation approximation
         to Q-inverse; that is, P (approximately) takes (x,y,z) coordinates
         to the (i,j,k) axes.
          For example, the first row of P (which contains pbest in column ibest)
         determines the way the i axis points relative to the anatomical
         (x,y,z) axes.  If ibest is 2, then the i axis is along the y axis,
         which is direction P2A (if pbest > 0) or A2P (if pbest < 0).
          So, using ibest and pbest, we can assign the output code for
         the i axis.  Mutatis mutandis for the j and k axes, of course. */

        iChar = jChar = kChar = iSense = jSense = kSense = 0;

        switch (ibest * pbest) {
            case 1:
                /*i = NIFTI_L2R*/
                iChar = 'X';
                iSense = '+';
                break;
            case -1:
                /*i = NIFTI_R2L*/
                iChar = 'X';
                iSense = '-';
                break;
            case 2:
                /*i = NIFTI_P2A*/
                iChar = 'Y';
                iSense = '+';
                break;
            case -2:
                /*i = NIFTI_A2P*/
                iChar = 'Y';
                iSense = '-';
                break;
            case 3:
                /*i = NIFTI_I2S*/
                iChar = 'Z';
                iSense = '+';
                break;
            case -3:
                /*i = NIFTI_S2I*/
                iChar = 'Z';
                iSense = '-';
                break;
        }

        switch (jbest * qbest) {
            case 1:
                /*j = NIFTI_L2R*/
                jChar = 'X';
                jSense = '+';
                break;
            case -1:
                /*j = NIFTI_R2L*/
                jChar = 'X';
                jSense = '-';
                break;
            case 2:
                /*j = NIFTI_P2A*/
                jChar = 'Y';
                jSense = '+';
                break;
            case -2:
                /*j = NIFTI_A2P*/
                jChar = 'Y';
                jSense = '-';
                break;
            case 3:
                /*j = NIFTI_I2S*/
                jChar = 'Z';
                jSense = '+';
                break;
            case -3:
                /*j = NIFTI_S2I*/
                jChar = 'Z';
                jSense = '-';
                break;
        }

        switch (kbest * rbest) {
            case 1:
                /*k = NIFTI_L2R*/
                kChar = 'X';
                kSense = '+';
                break;
            case -1:
                /*k = NIFTI_R2L*/
                kChar = 'X';
                kSense = '-';
                break;
            case 2:
                /*k = NIFTI_P2A*/
                kChar = 'Y';
                kSense = '+';
                break;
            case -2:
                /*k = NIFTI_A2P*/
                kChar = 'Y';
                kSense = '-';
                break;
            case 3:
                /*k = NIFTI_I2S*/
                kChar = 'Z';
                kSense = '+';
                break;
            case -3:
                /*k = NIFTI_S2I*/
                kChar = 'Z';
                kSense = '-';
                break;
        }

        return iChar + jChar + kChar + iSense + jSense + kSense;
    };

    nifti.NIFTI1.prototype.nifti_mat33_mul = function (A, B) {
        var C = [[0, 0, 0], [0, 0, 0], [0, 0, 0]],
            i,
            j;

        for (i = 0; i < 3; i += 1) {
            for (j = 0; j < 3; j += 1) {
                C[i][j] = A[i][0] * B[0][j] + A[i][1] * B[1][j] + A[i][2] * B[2][j];
            }
        }

        return C;
    };

    nifti.NIFTI1.prototype.nifti_mat33_determ = function (R) {
        var r11, r12, r13, r21, r22, r23, r31, r32, r33;
        /*  INPUT MATRIX:  */
        r11 = R[0][0];
        r12 = R[0][1];
        r13 = R[0][2];
        r21 = R[1][0];
        r22 = R[1][1];
        r23 = R[1][2];
        r31 = R[2][0];
        r32 = R[2][1];
        r33 = R[2][2];

        return r11 * r22 * r33 - r11 * r32 * r23 - r21 * r12 * r33 + r21 * r32 * r13 + r31 * r12 * r23 - r31 * r22 * r13;
    };

    /**
     * Returns the byte index of the extension.
     * @returns {number}
     */
    nifti.NIFTI1.prototype.getExtensionLocation = function () {
        return nifti.NIFTI1.MAGIC_COOKIE + 4;
    };

    /**
     * Returns the extension size.
     * @param {DataView} data
     * @returns {number}
     */
    nifti.NIFTI1.prototype.getExtensionSize = function (data) {
        return nifti.Utils.getIntAt(data, this.getExtensionLocation(), this.littleEndian);
    };

    /**
     * Returns the extension code.
     * @param {DataView} data
     * @returns {number}
     */
    nifti.NIFTI1.prototype.getExtensionCode = function (data) {
        return nifti.Utils.getIntAt(data, this.getExtensionLocation() + 4, this.littleEndian);
    };

    /*** Exports ***/

    var moduleType = 'object';
    if (moduleType !== 'undefined' && module.exports) {
        module.exports = nifti.NIFTI1;
    }
});

var nifti2 = createCommonjsModule$$1(function (module) {
    /*jslint browser: true, node: true */
    /*global */

    "use strict";

    /*** Imports ***/

    var nifti = nifti || {};
    nifti.Utils = nifti.Utils || (typeof commonjsRequire$$1 !== 'undefined' ? utilities : null);
    nifti.NIFTI1 = nifti.NIFTI1 || (typeof commonjsRequire$$1 !== 'undefined' ? nifti1 : null);

    /*** Constructor ***/

    /**
     * The NIFTI2 constructor.
     * @constructor
     * @property {boolean} littleEndian
     * @property {number} dim_info
     * @property {number[]} dims - image dimensions
     * @property {number} intent_p1
     * @property {number} intent_p2
     * @property {number} intent_p3
     * @property {number} intent_code
     * @property {number} datatypeCode
     * @property {number} numBitsPerVoxel
     * @property {number} slice_start
     * @property {number} slice_end
     * @property {number} slice_code
     * @property {number[]} pixDims - voxel dimensions
     * @property {number} vox_offset
     * @property {number} scl_slope
     * @property {number} scl_inter
     * @property {number} xyzt_units
     * @property {number} cal_max
     * @property {number} cal_min
     * @property {number} slice_duration
     * @property {number} toffset
     * @property {string} description
     * @property {string} aux_file
     * @property {string} intent_name
     * @property {number} qform_code
     * @property {number} sform_code
     * @property {number} quatern_b
     * @property {number} quatern_c
     * @property {number} quatern_d
     * @property {number} quatern_x
     * @property {number} quatern_y
     * @property {number} quatern_z
     * @property {Array.<Array.<number>>} affine
     * @property {string} magic
     * @property {number[]} extensionFlag
     * @type {Function}
     */
    nifti.NIFTI2 = nifti.NIFTI2 || function () {
        this.littleEndian = false;
        this.dim_info = 0;
        this.dims = [];
        this.intent_p1 = 0;
        this.intent_p2 = 0;
        this.intent_p3 = 0;
        this.intent_code = 0;
        this.datatypeCode = 0;
        this.numBitsPerVoxel = 0;
        this.slice_start = 0;
        this.slice_end = 0;
        this.slice_code = 0;
        this.pixDims = [];
        this.vox_offset = 0;
        this.scl_slope = 1;
        this.scl_inter = 0;
        this.xyzt_units = 0;
        this.cal_max = 0;
        this.cal_min = 0;
        this.slice_duration = 0;
        this.toffset = 0;
        this.description = "";
        this.aux_file = "";
        this.intent_name = "";
        this.qform_code = 0;
        this.sform_code = 0;
        this.quatern_b = 0;
        this.quatern_c = 0;
        this.quatern_d = 0;
        this.qoffset_x = 0;
        this.qoffset_y = 0;
        this.qoffset_z = 0;
        this.affine = [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];
        this.magic = 0;
        this.extensionFlag = [0, 0, 0, 0];
    };

    /*** Static Pseudo-constants ***/

    nifti.NIFTI2.MAGIC_COOKIE = 540;
    nifti.NIFTI2.MAGIC_NUMBER_LOCATION = 4;
    nifti.NIFTI2.MAGIC_NUMBER = [0x6E, 0x2B, 0x32, 0, 0x0D, 0x0A, 0x1A, 0x0A]; // n+2\0


    /*** Prototype Methods ***/

    /**
     * Reads the header data.
     * @param {ArrayBuffer} data
     */
    nifti.NIFTI2.prototype.readHeader = function (data) {
        var rawData = new DataView(data),
            magicCookieVal = nifti.Utils.getIntAt(rawData, 0, this.littleEndian),
            ctr,
            ctrOut,
            ctrIn,
            index;

        if (magicCookieVal !== nifti.NIFTI2.MAGIC_COOKIE) {
            // try as little endian
            this.littleEndian = true;
            magicCookieVal = nifti.Utils.getIntAt(rawData, 0, this.littleEndian);
        }

        if (magicCookieVal !== nifti.NIFTI2.MAGIC_COOKIE) {
            throw new Error("This does not appear to be a NIFTI file!");
        }

        this.datatypeCode = nifti.Utils.getShortAt(rawData, 12, this.littleEndian);
        this.numBitsPerVoxel = nifti.Utils.getShortAt(rawData, 14, this.littleEndian);

        for (ctr = 0; ctr < 8; ctr += 1) {
            index = 16 + ctr * 8;
            this.dims[ctr] = nifti.Utils.getLongAt(rawData, index, this.littleEndian);
        }

        this.intent_p1 = nifti.Utils.getDoubleAt(rawData, 80, this.littleEndian);
        this.intent_p2 = nifti.Utils.getDoubleAt(rawData, 88, this.littleEndian);
        this.intent_p3 = nifti.Utils.getDoubleAt(rawData, 96, this.littleEndian);

        for (ctr = 0; ctr < 8; ctr += 1) {
            index = 104 + ctr * 8;
            this.pixDims[ctr] = nifti.Utils.getDoubleAt(rawData, index, this.littleEndian);
        }

        this.vox_offset = nifti.Utils.getLongAt(rawData, 168, this.littleEndian);

        this.scl_slope = nifti.Utils.getDoubleAt(rawData, 176, this.littleEndian);
        this.scl_inter = nifti.Utils.getDoubleAt(rawData, 184, this.littleEndian);

        this.cal_max = nifti.Utils.getDoubleAt(rawData, 192, this.littleEndian);
        this.cal_min = nifti.Utils.getDoubleAt(rawData, 200, this.littleEndian);

        this.slice_duration = nifti.Utils.getDoubleAt(rawData, 208, this.littleEndian);

        this.toffset = nifti.Utils.getDoubleAt(rawData, 216, this.littleEndian);

        this.slice_start = nifti.Utils.getLongAt(rawData, 224, this.littleEndian);
        this.slice_end = nifti.Utils.getLongAt(rawData, 232, this.littleEndian);

        this.description = nifti.Utils.getStringAt(rawData, 240, 240 + 80);
        this.aux_file = nifti.Utils.getStringAt(rawData, 320, 320 + 24);

        this.qform_code = nifti.Utils.getIntAt(rawData, 344, this.littleEndian);
        this.sform_code = nifti.Utils.getIntAt(rawData, 348, this.littleEndian);

        this.quatern_b = nifti.Utils.getDoubleAt(rawData, 352, this.littleEndian);
        this.quatern_c = nifti.Utils.getDoubleAt(rawData, 360, this.littleEndian);
        this.quatern_d = nifti.Utils.getDoubleAt(rawData, 368, this.littleEndian);
        this.qoffset_x = nifti.Utils.getDoubleAt(rawData, 376, this.littleEndian);
        this.qoffset_y = nifti.Utils.getDoubleAt(rawData, 384, this.littleEndian);
        this.qoffset_z = nifti.Utils.getDoubleAt(rawData, 392, this.littleEndian);

        for (ctrOut = 0; ctrOut < 3; ctrOut += 1) {
            for (ctrIn = 0; ctrIn < 4; ctrIn += 1) {
                index = 400 + (ctrOut * 4 + ctrIn) * 8;
                this.affine[ctrOut][ctrIn] = nifti.Utils.getDoubleAt(rawData, index, this.littleEndian);
            }
        }

        this.affine[3][0] = 0;
        this.affine[3][1] = 0;
        this.affine[3][2] = 0;
        this.affine[3][3] = 1;

        this.slice_code = nifti.Utils.getIntAt(rawData, 496, this.littleEndian);
        this.xyzt_units = nifti.Utils.getIntAt(rawData, 500, this.littleEndian);
        this.intent_code = nifti.Utils.getIntAt(rawData, 504, this.littleEndian);
        this.intent_name = nifti.Utils.getStringAt(rawData, 508, 508 + 16);

        this.dim_info = nifti.Utils.getByteAt(rawData, 524);

        if (rawData.byteLength > nifti.NIFTI2.MAGIC_COOKIE) {
            this.extensionFlag[0] = nifti.Utils.getByteAt(rawData, 540);
            this.extensionFlag[1] = nifti.Utils.getByteAt(rawData, 540 + 1);
            this.extensionFlag[2] = nifti.Utils.getByteAt(rawData, 540 + 2);
            this.extensionFlag[3] = nifti.Utils.getByteAt(rawData, 540 + 3);

            if (this.extensionFlag[0]) {
                this.extensionSize = this.getExtensionSize(rawData);
                this.extensionCode = this.getExtensionCode(rawData);
            }
        }
    };

    /**
     * Returns a formatted string of header fields.
     * @returns {string}
     */
    nifti.NIFTI2.prototype.toFormattedString = function () {
        var fmt = nifti.Utils.formatNumber,
            string = "";

        string += "Datatype = " + +this.datatypeCode + " (" + this.getDatatypeCodeString(this.datatypeCode) + ")\n";
        string += "Bits Per Voxel = " + " = " + this.numBitsPerVoxel + "\n";
        string += "Image Dimensions" + " (1-8): " + this.dims[0] + ", " + this.dims[1] + ", " + this.dims[2] + ", " + this.dims[3] + ", " + this.dims[4] + ", " + this.dims[5] + ", " + this.dims[6] + ", " + this.dims[7] + "\n";

        string += "Intent Parameters (1-3): " + this.intent_p1 + ", " + this.intent_p2 + ", " + this.intent_p3 + "\n";

        string += "Voxel Dimensions (1-8): " + fmt(this.pixDims[0]) + ", " + fmt(this.pixDims[1]) + ", " + fmt(this.pixDims[2]) + ", " + fmt(this.pixDims[3]) + ", " + fmt(this.pixDims[4]) + ", " + fmt(this.pixDims[5]) + ", " + fmt(this.pixDims[6]) + ", " + fmt(this.pixDims[7]) + "\n";

        string += "Image Offset = " + this.vox_offset + "\n";
        string += "Data Scale:  Slope = " + fmt(this.scl_slope) + "  Intercept = " + fmt(this.scl_inter) + "\n";
        string += "Display Range:  Max = " + fmt(this.cal_max) + "  Min = " + fmt(this.cal_min) + "\n";
        string += "Slice Duration = " + this.slice_duration + "\n";
        string += "Time Axis Shift = " + this.toffset + "\n";
        string += "Slice Start = " + this.slice_start + "\n";
        string += "Slice End = " + this.slice_end + "\n";
        string += "Description: \"" + this.description + "\"\n";
        string += "Auxiliary File: \"" + this.aux_file + "\"\n";
        string += "Q-Form Code = " + this.qform_code + " (" + this.getTransformCodeString(this.qform_code) + ")\n";
        string += "S-Form Code = " + this.sform_code + " (" + this.getTransformCodeString(this.sform_code) + ")\n";
        string += "Quaternion Parameters:  " + "b = " + fmt(this.quatern_b) + "  " + "c = " + fmt(this.quatern_c) + "  " + "d = " + fmt(this.quatern_d) + "\n";

        string += "Quaternion Offsets:  " + "x = " + this.qoffset_x + "  " + "y = " + this.qoffset_y + "  " + "z = " + this.qoffset_z + "\n";

        string += "S-Form Parameters X: " + fmt(this.affine[0][0]) + ", " + fmt(this.affine[0][1]) + ", " + fmt(this.affine[0][2]) + ", " + fmt(this.affine[0][3]) + "\n";

        string += "S-Form Parameters Y: " + fmt(this.affine[1][0]) + ", " + fmt(this.affine[1][1]) + ", " + fmt(this.affine[1][2]) + ", " + fmt(this.affine[1][3]) + "\n";

        string += "S-Form Parameters Z: " + fmt(this.affine[2][0]) + ", " + fmt(this.affine[2][1]) + ", " + fmt(this.affine[2][2]) + ", " + fmt(this.affine[2][3]) + "\n";

        string += "Slice Code = " + this.slice_code + "\n";
        string += "Units Code = " + this.xyzt_units + " (" + this.getUnitsCodeString(nifti.NIFTI1.SPATIAL_UNITS_MASK & this.xyzt_units) + ", " + this.getUnitsCodeString(nifti.NIFTI1.TEMPORAL_UNITS_MASK & this.xyzt_units) + ")\n";
        string += "Intent Code = " + this.intent_code + "\n";
        string += "Intent Name: \"" + this.intent_name + "\"\n";

        string += "Dim Info = " + this.dim_info + "\n";

        return string;
    };

    /**
     * Returns the byte index of the extension.
     * @returns {number}
     */
    nifti.NIFTI2.prototype.getExtensionLocation = function () {
        return nifti.NIFTI2.MAGIC_COOKIE + 4;
    };

    /**
     * Returns the extension size.
     * @param {DataView} data
     * @returns {number}
     */
    nifti.NIFTI2.prototype.getExtensionSize = nifti.NIFTI1.prototype.getExtensionSize;

    /**
     * Returns the extension code.
     * @param {DataView} data
     * @returns {number}
     */
    nifti.NIFTI2.prototype.getExtensionCode = nifti.NIFTI1.prototype.getExtensionCode;

    /**
     * Returns a human-readable string of datatype.
     * @param {number} code
     * @returns {string}
     */
    nifti.NIFTI2.prototype.getDatatypeCodeString = nifti.NIFTI1.prototype.getDatatypeCodeString;

    /**
     * Returns a human-readable string of transform type.
     * @param {number} code
     * @returns {string}
     */
    nifti.NIFTI2.prototype.getTransformCodeString = nifti.NIFTI1.prototype.getTransformCodeString;

    /**
     * Returns a human-readable string of spatial and temporal units.
     * @param {number} code
     * @returns {string}
     */
    nifti.NIFTI2.prototype.getUnitsCodeString = nifti.NIFTI1.prototype.getUnitsCodeString;

    /**
     * Returns the qform matrix.
     * @returns {Array.<Array.<number>>}
     */
    nifti.NIFTI2.prototype.getQformMat = nifti.NIFTI1.prototype.getQformMat;

    /**
     * Converts qform to an affine.  (See http://nifti.nimh.nih.gov/pub/dist/src/niftilib/nifti1_io.c)
     * @param {number} qb
     * @param {number} qc
     * @param {number} qd
     * @param {number} qx
     * @param {number} qy
     * @param {number} qz
     * @param {number} dx
     * @param {number} dy
     * @param {number} dz
     * @param {number} qfac
     * @returns {Array.<Array.<number>>}
     */
    nifti.NIFTI2.prototype.convertNiftiQFormToNiftiSForm = nifti.NIFTI1.prototype.convertNiftiQFormToNiftiSForm;

    /**
     * Converts sform to an orientation string (e.g., XYZ+--).  (See http://nifti.nimh.nih.gov/pub/dist/src/niftilib/nifti1_io.c)
     * @param {Array.<Array.<number>>} R
     * @returns {string}
     */
    nifti.NIFTI2.prototype.convertNiftiSFormToNEMA = nifti.NIFTI1.prototype.convertNiftiSFormToNEMA;

    nifti.NIFTI2.prototype.nifti_mat33_mul = nifti.NIFTI1.prototype.nifti_mat33_mul;

    nifti.NIFTI2.prototype.nifti_mat33_determ = nifti.NIFTI1.prototype.nifti_mat33_determ;

    /*** Exports ***/

    var moduleType = 'object';
    if (moduleType !== 'undefined' && module.exports) {
        module.exports = nifti.NIFTI2;
    }
});

var nifti_1 = createCommonjsModule$$1(function (module) {
    /*jslint browser: true, node: true */
    /*global require, module */

    "use strict";

    /*** Imports ***/

    /**
     * nifti
     * @type {*|{}}
     */

    var nifti = nifti || {};
    nifti.NIFTI1 = nifti.NIFTI1 || (typeof commonjsRequire$$1 !== 'undefined' ? nifti1 : null);
    nifti.NIFTI2 = nifti.NIFTI2 || (typeof commonjsRequire$$1 !== 'undefined' ? nifti2 : null);
    nifti.Utils = nifti.Utils || (typeof commonjsRequire$$1 !== 'undefined' ? utilities : null);

    var pako = pako || (typeof commonjsRequire$$1 !== 'undefined' ? index$1 : null);

    /*** Static Methods ***/

    /**
     * Returns true if this data represents a NIFTI-1 header.
     * @param {ArrayBuffer} data
     * @returns {boolean}
     */
    nifti.isNIFTI1 = function (data) {
        var buf, mag1, mag2, mag3;

        if (data.byteLength < nifti.NIFTI1.STANDARD_HEADER_SIZE) {
            return false;
        }

        buf = new DataView(data);

        if (buf) mag1 = buf.getUint8(nifti.NIFTI1.MAGIC_NUMBER_LOCATION);
        mag2 = buf.getUint8(nifti.NIFTI1.MAGIC_NUMBER_LOCATION + 1);
        mag3 = buf.getUint8(nifti.NIFTI1.MAGIC_NUMBER_LOCATION + 2);

        return !!(mag1 === nifti.NIFTI1.MAGIC_NUMBER[0] && mag2 === nifti.NIFTI1.MAGIC_NUMBER[1] && mag3 === nifti.NIFTI1.MAGIC_NUMBER[2]);
    };

    /**
     * Returns true if this data represents a NIFTI-2 header.
     * @param {ArrayBuffer} data
     * @returns {boolean}
     */
    nifti.isNIFTI2 = function (data) {
        var buf, mag1, mag2, mag3;

        if (data.byteLength < nifti.NIFTI1.STANDARD_HEADER_SIZE) {
            return false;
        }

        buf = new DataView(data);
        mag1 = buf.getUint8(nifti.NIFTI2.MAGIC_NUMBER_LOCATION);
        mag2 = buf.getUint8(nifti.NIFTI2.MAGIC_NUMBER_LOCATION + 1);
        mag3 = buf.getUint8(nifti.NIFTI2.MAGIC_NUMBER_LOCATION + 2);

        return !!(mag1 === nifti.NIFTI2.MAGIC_NUMBER[0] && mag2 === nifti.NIFTI2.MAGIC_NUMBER[1] && mag3 === nifti.NIFTI2.MAGIC_NUMBER[2]);
    };

    /**
     * Returns true if this data represents a NIFTI header.
     * @param {ArrayBuffer} data
     * @returns {boolean}
     */
    nifti.isNIFTI = function (data) {
        return nifti.isNIFTI1(data) || nifti.isNIFTI2(data);
    };

    /**
     * Returns true if this data is GZIP compressed.
     * @param {ArrayBuffer} data
     * @returns {boolean}
     */
    nifti.isCompressed = function (data) {
        var buf, magicCookie1, magicCookie2;

        if (data) {
            buf = new DataView(data);

            magicCookie1 = buf.getUint8(0);
            magicCookie2 = buf.getUint8(1);

            if (magicCookie1 === nifti.Utils.GUNZIP_MAGIC_COOKIE1) {
                return true;
            }

            if (magicCookie2 === nifti.Utils.GUNZIP_MAGIC_COOKIE2) {
                return true;
            }
        }

        return false;
    };

    /**
     * Returns decompressed data.
     * @param {ArrayBuffer} data
     * @returns {ArrayBuffer}
     */
    nifti.decompress = function (data) {
        return pako.inflate(data).buffer;
    };

    /**
     * Reads and returns the header object.
     * @param {ArrayBuffer} data
     * @returns {nifti.NIFTI1|nifti.NIFTI2|null}
     */
    nifti.readHeader = function (data) {
        var header = null;

        if (nifti.isCompressed(data)) {
            data = nifti.decompress(data);
        }

        if (nifti.isNIFTI1(data)) {
            header = new nifti.NIFTI1();
        } else if (nifti.isNIFTI2(data)) {
            header = new nifti.NIFTI2();
        }

        if (header) {
            header.readHeader(data);
        } else {
            console.error("That file does not appear to be NIFTI!");
        }

        return header;
    };

    /**
     * Returns true if this header contains an extension.
     * @param {nifti.NIFTI1|nifti.NIFTI2} header
     * @returns {boolean}
     */
    nifti.hasExtension = function (header) {
        return header.extensionFlag[0] != 0;
    };

    /**
     * Returns the image data.
     * @param {nifti.NIFTI1|nifti.NIFTI2} header
     * @param {ArrayBuffer} data
     * @returns {ArrayBuffer}
     */
    nifti.readImage = function (header, data) {
        var imageOffset = header.vox_offset,
            timeDim = 1,
            statDim = 1;

        if (header.dims[4]) {
            timeDim = header.dims[4];
        }

        if (header.dims[5]) {
            statDim = header.dims[5];
        }

        var imageSize = header.dims[1] * header.dims[2] * header.dims[3] * timeDim * statDim * (header.numBitsPerVoxel / 8);
        return data.slice(imageOffset, imageOffset + imageSize);
    };

    /**
     * Returns the extension data (including extension header).
     * @param {nifti.NIFTI1|nifti.NIFTI2} header
     * @param {ArrayBuffer} data
     * @returns {ArrayBuffer}
     */
    nifti.readExtension = function (header, data) {
        var loc = header.getExtensionLocation(),
            size = header.extensionSize;

        return data.slice(loc, loc + size);
    };

    /**
     * Returns the extension data.
     * @param {nifti.NIFTI1|nifti.NIFTI2} header
     * @param {ArrayBuffer} data
     * @returns {ArrayBuffer}
     */
    nifti.readExtensionData = function (header, data) {
        var loc = header.getExtensionLocation(),
            size = header.extensionSize;

        return data.slice(loc + 8, loc + size - 8);
    };

    /*** Exports ***/

    var moduleType = 'object';
    if (moduleType !== 'undefined' && module.exports) {
        module.exports = nifti;
    }
});

/*
* Author    Jonathan Lurie - http://me.jonathanlurie.fr
*
* License   MIT
* Link      https://github.com/Pixpipe/pixpipejs
* Lab       MCIN - Montreal Neurological Institute
*/

/**
* Important information:
* NIfTI dataset are using two indexing methods:
* - A voxel based system (i, j, k), the most intuitive, where i is the fastest varying dim and k is the sloest varying dim.
*   Thus for a given (i, j, k) the value is at (i + j*dim[1] + k*dim[1]*dim[2])
* - A subject based system (x, y, z), where +x is right, +y is anterior, +z is superior (right handed coord system).
*   This system is CENTER pixel/voxel and is the result of a transformation from (i, j, k) and a scaling given by the size of
*   each voxel in a world unit (eg. mm)
*
* NIfTI provides three alternatives to characterize this transformation:
*
* METHOD 1 , when header.qform_code = 0
* Here, no specific orientation difers in [x, y, z], only spatial scaling based on voxel world dimensions.
* This method is NOT the default one, neither it is the most common. It is mainly for bacward compatibility
* to ANALYZE 7.5.
* Thus we simply have:
* x = pixdim[1] * i
* y = pixdim[2] * j
* z = pixdim[3] * k
*
* METHOD 2, the "normal" case, when header.qform_code > 0
* In this situation, three components are involved in the transformation:
* 1. voxel dimensions (header.pixDims[]) for the spatial scaling
* 2. a rotation matrix, for orientation
* 3. a shift
* Thus, we have:
* [ x ]   [ R11 R12 R13 ] [        header.pixDims[1] * i ]   [ header.qoffset_x ]
* [ y ] = [ R21 R22 R23 ] [        header.pixDims[2] * j ] + [ header.qoffset_y ]
* [ z ]   [ R31 R32 R33 ] [ qfac * header.pixDims[3] * k ]   [ header.qoffset_z ]
* Info:
* The official NIfTI header description ( https://nifti.nimh.nih.gov/pub/dist/src/niftilib/nifti1.h )
* was used to interpret the data.
*/

var NiftiDecoderAlt = function (_Filter) {
  inherits(NiftiDecoderAlt, _Filter);

  function NiftiDecoderAlt() {
    classCallCheck(this, NiftiDecoderAlt);

    var _this = possibleConstructorReturn(this, (NiftiDecoderAlt.__proto__ || Object.getPrototypeOf(NiftiDecoderAlt)).call(this));

    _this.addInputValidator(0, ArrayBuffer);
    return _this;
  }

  createClass(NiftiDecoderAlt, [{
    key: '_run',
    value: function _run() {
      var inputBuffer = this._getInput(0);

      if (!inputBuffer) {
        console.warn("NiftiDecoderAlt requires an ArrayBuffer as input \"0\". Unable to continue.");
        return;
      }

      if (!nifti_1.isNIFTI(inputBuffer)) {
        console.warn("Not a NIfTI file");
        return;
      }

      var metadata = {};
      var data = null;

      var header = nifti_1.readHeader(inputBuffer);
      var rawData = nifti_1.readImage(header, inputBuffer);

      data = this._fetchDataArray(header, rawData);

      if (!data) {
        console.warn("This NIfTI file is valid but does not contain any readable data.");
        return;
      }

      this._scaleData(data, header);
      var numberOfDimensions = header.dims[0];

      // copying all the original metadata into the field "formatSpecific", for the sake of quality.
      metadata.formatSpecific = header;
      metadata.statistics = { upToDate: true, min: "sdfsdf", max: NaN };
      metadata.ncpp = this._fetchNcpp(header);
      metadata.description = header.description;
      metadata.format = "nifti";
      metadata.spatialUnit = header.getUnitsCodeString(nifti_1.NIFTI1.SPATIAL_UNITS_MASK & header.xyzt_units);
      metadata.temporalUnit = header.getUnitsCodeString(nifti_1.NIFTI1.TEMPORAL_UNITS_MASK & header.xyzt_units);

      // the transformation
      var niftiTransfoMatrix = header.getQformMat(); // the default case (METHOD2)
      if (header.qform_code == 0) {
        // though sometimes qform_code is 0, then we have to use affine (METHOD3)
        niftiTransfoMatrix = header.affine;
      }

      console.log(header);

      // dimensions info ordered from the fastest varying to the slowest varying
      var voxelSpaceNames = ['k', 'j', 'i', 't'];
      var worldSpaceNames = ['x', 'y', 'z', 't'];
      var dimensions = [];

      for (var d = 0; d < numberOfDimensions; d++) {
        // compute the stride based on the previous dim
        var stride = 1;
        for (var pd = 0; pd < d; pd++) {
          stride *= header.dims[pd + 1];
        }

        var dimension = {
          length: header.dims[d + 1],
          widthDimension: -1, // to be filled later
          heightDimension: -1, // to be filled later
          nameVoxelSpace: voxelSpaceNames[d],
          nameWorldSpace: worldSpaceNames[d],
          worldUnitSize: header.pixDims[d + 1],
          stride: stride,
          step: header.pixDims[d + 1] // same to worldUnitSize but will prob be changed if swapped, except for time
          //direction: niftiTransfoMatrix[d][d] < 0 ? -1 : 1, // to be filled later
        };
        dimensions.push(dimension);
      }

      if (dimensions.length >= 3) {
        // dim x has for width  y and for heigth z
        dimensions[0].widthDimension = 1;
        dimensions[0].heightDimension = 2;

        // dim y has for width  x and for heigth z
        dimensions[1].widthDimension = 0;
        dimensions[1].heightDimension = 2;

        // dim z has for width  x and for heigth y
        dimensions[2].widthDimension = 0;
        dimensions[2].heightDimension = 1;
      }

      /*
      swaping dimensions:
      In some cases, a NIfTI does not respect the orientation from the specfication.
      In order to get the proper orientation, we have to swap some dimensions as 
      well as the corresponding rows in the v2w matrix.
      The criterion to find what dim is suposed to come first, what is supposed to
      be last is direction cosine fron the matrix:
      - the 1st row should be the one with the highest absolute value from all 1st columns
      - the 2nd row should be the one with the highest absolute value from all 2nd columns
      - the 3rd row should be the one with the highest absolute value from all 3rd columns
      */

      // give the index of the row that has the highest value among a given col
      function whichRowHasHighestValueFromGivenCol(arrOfArr, col) {
        var cx = Math.abs(arrOfArr[0][col]);
        var cy = Math.abs(arrOfArr[1][col]);
        var cz = Math.abs(arrOfArr[2][col]);

        if (cx > cy && cx > cz) {
          return 0;
        } else if (cy > cx && cy > cz) {
          return 1;
        } else {
          return 2;
        }
      }

      function getMagnitude(arr) {
        return Math.sqrt(arr[0] * arr[0] + arr[1] * arr[1] + arr[2] * arr[2]);
      }

      var shouldBeCol0 = whichRowHasHighestValueFromGivenCol(niftiTransfoMatrix, 0);
      var shouldBeCol1 = whichRowHasHighestValueFromGivenCol(niftiTransfoMatrix, 1);
      var shouldBeCol2 = whichRowHasHighestValueFromGivenCol(niftiTransfoMatrix, 2);

      // when we have shouldBeCol[ n ] = m it means that the current original row m 
      // of transfo-matrix should move to the position n
      var shouldBeCol = [shouldBeCol0, shouldBeCol1, shouldBeCol2];
      // this is the inverse lookup of shouldBeCol
      var wasCol = [shouldBeCol.indexOf(0), shouldBeCol.indexOf(1), shouldBeCol.indexOf(2)];

      var transfoMatrixToUse = JSON.parse(JSON.stringify(niftiTransfoMatrix));
      var dimensionsToUse = dimensions;

      // ******************* BEGIN TO SWAP ***************************************

      // if so, the dimension list and the matrix need swapping
      if (shouldBeCol[0] != 0 || shouldBeCol[1] != 1 || shouldBeCol[2] != 2) {

        // swap the matrix cols
        for (var i = 0; i < 3; i++) {
          for (var j = 0; j < 4; j++) {
            var volumeAxis = j;
            if (j < 3) {
              volumeAxis = shouldBeCol[j];
            }
            transfoMatrixToUse[i][volumeAxis] = niftiTransfoMatrix[i][j];
          }
        }

        // just making a safe copy
        var dimensionsCp = JSON.parse(JSON.stringify(dimensions));

        // renaming it. Then it seems to already be in the correct order. Not sure why?? TODO: see why!
        dimensionsCp[0].nameVoxelSpace = "k";
        dimensionsCp[1].nameVoxelSpace = "j";
        dimensionsCp[2].nameVoxelSpace = "i";

        dimensionsCp[wasCol[0]].nameWorldSpace = "x";
        dimensionsCp[wasCol[1]].nameWorldSpace = "y";
        dimensionsCp[wasCol[2]].nameWorldSpace = "z";

        // associating width and height
        dimensionsCp[wasCol[0]].widthDimension = wasCol[1];
        dimensionsCp[wasCol[0]].heightDimension = wasCol[2];
        dimensionsCp[wasCol[1]].widthDimension = wasCol[0];
        dimensionsCp[wasCol[1]].heightDimension = wasCol[2];
        dimensionsCp[wasCol[2]].widthDimension = wasCol[0];
        dimensionsCp[wasCol[2]].heightDimension = wasCol[1];

        dimensionsToUse = dimensionsCp;
      }
      // ******************* END OF SWAPING **************************************

      // return the dimsniosn object given its world name ('x', 'y' or 'z')
      function getDimensionByWorldName(name) {
        for (var i = 0; i < dimensionsToUse.length; i++) {
          if (dimensionsToUse[i].nameWorldSpace === name) return dimensionsToUse[i];
        }
        return null;
      }

      // set the directions
      for (var i = 0; i < 3; i++) {
        var stepSize = getMagnitude(transfoMatrixToUse[i]);
        var directionSign = Math.sign(transfoMatrixToUse[i][i]);
        //dimensionsToUse[i].step = stepSize * directionSign;

        // so that when i==0, dimension is x, etc.
        var dimension = getDimensionByWorldName(worldSpaceNames[i]);
        dimension.step = stepSize * directionSign;
      }

      metadata.dimensions = dimensionsToUse;

      var v2wMat = fromValues$3(transfoMatrixToUse[0][0], transfoMatrixToUse[1][0], transfoMatrixToUse[2][0], transfoMatrixToUse[3][0], transfoMatrixToUse[0][1], transfoMatrixToUse[1][1], transfoMatrixToUse[2][1], transfoMatrixToUse[3][1], transfoMatrixToUse[0][2], transfoMatrixToUse[1][2], transfoMatrixToUse[2][2], transfoMatrixToUse[3][2], transfoMatrixToUse[0][3], transfoMatrixToUse[1][3], transfoMatrixToUse[2][3], transfoMatrixToUse[3][3]);

      var w2vMat = create$3();
      invert$3(w2vMat, v2wMat);

      // register all the transformations available here
      metadata.transformations = {
        v2w: v2wMat,
        w2v: w2vMat
      };

      metadata.statistics = {
        upToDate: false,
        min: 0,
        max: 0
      };

      var output = new Image3DAlt();
      output.setRawData(data);
      output.setRawMetadata(metadata);

      console.log(metadata);

      if (output.metadataIntegrityCheck()) {
        output.scanDataRange();
        this._output[0] = output;
      }
    }

    /**
    * [PRIVATE]
    * The header field `scl_slope` is used to scale the data, thus if non-0,
    * we should scale the data.
    * @param {typed array} data - the nifti data array, WILL BE MODIFIED
    * @param {Object} header - nifti header
    */

  }, {
    key: '_scaleData',
    value: function _scaleData(data, header) {
      // We dont scale in the case RGB24
      if (header.datatypeCode == nifti_1.NIFTI1.TYPE_RGB24) {
        return;
      }

      // the data scaling wont change anything, thus we dont perform it
      if (header.scl_slope == 1 && header.scl_inter == 0) {
        return;
      }

      if (header.scl_slope) {
        for (var i = 0; i < data.length; i++) {
          data[i] = data[i] * header.scl_slope + header.scl_inter;
        }
      }
    }

    /**
    * [PRIVATE]
    * Get the number of components per pixel encoded in the Nifti file
    * @param {Object} header - Nifti header
    * @return {number} the ncpp
    */

  }, {
    key: '_fetchNcpp',
    value: function _fetchNcpp(header) {
      var ncpp = 0;

      switch (header.datatypeCode) {
        case nifti_1.NIFTI1.TYPE_BINARY:
          console.warn("The datatype nifti.TYPE_BINARY is not compatible yet.");
          break;
        case nifti_1.NIFTI1.TYPE_COMPLEX64:
          console.warn("The datatype nifti.TYPE_COMPLEX64 is not compatible yet.");
          break;
        case nifti_1.NIFTI1.TYPE_COMPLEX128:
          console.warn("The datatype nifti.TYPE_COMPLEX128 is not compatible yet.");
          break;
        case nifti_1.NIFTI1.TYPE_COMPLEX256:
          console.warn("The datatype nifti.TYPE_COMPLEX256 is not compatible yet.");
          break;
        case nifti_1.NIFTI1.TYPE_FLOAT128:
          console.warn("The datatype nifti.TYPE_FLOAT128 is not compatible yet.");
          break;
        case nifti_1.NIFTI1.TYPE_INT64:
          console.warn("The datatype nifti.TYPE_INT64 is not compatible yet.");
          break;
        case nifti_1.NIFTI1.TYPE_NONE:
          console.warn("The datatype nifti.TYPE_NONE is not compatible.");
          break;
        case nifti_1.NIFTI1.TYPE_UINT64:
          console.warn("The datatype nifti.TYPE_INT64 is not compatible yet.");
          break;

        case nifti_1.NIFTI1.TYPE_FLOAT32:
          ncpp = 1;
          break;
        case nifti_1.NIFTI1.TYPE_FLOAT64:
          ncpp = 1;
          break;
        case nifti_1.NIFTI1.TYPE_INT8:
          ncpp = 1;
          break;
        case nifti_1.NIFTI1.TYPE_INT16:
          ncpp = 1;
          break;
        case nifti_1.NIFTI1.TYPE_INT32:
          ncpp = 1;
          break;
        case nifti_1.NIFTI1.TYPE_UINT8:
          ncpp = 1;
          break;
        case nifti_1.NIFTI1.TYPE_UINT16:
          ncpp = 1;
          break;
        case nifti_1.NIFTI1.TYPE_UINT32:
          ncpp = 1;
          break;
        case nifti_1.NIFTI1.TYPE_RGB24:
          ncpp = 3;
          break;

        default:
          console.warn("The datatype is unknown.");
      }

      return ncpp;
    }

    /**
    * [PRIVATE]
    * Cast the raw ArrayBuffer into the appropriate type. Some Nifti types are not
    * compatible with Javascript and cannot be used.
    * @param {Object} header - the nifti header
    * @param {ArrayBuffer} rawData - the nifti data buffer
    * @return {typed array} a typed array with the data
    */

  }, {
    key: '_fetchDataArray',
    value: function _fetchDataArray(header, rawData) {
      var typedData = null;

      switch (header.datatypeCode) {
        case nifti_1.NIFTI1.TYPE_BINARY:
          console.warn("The datatype nifti.TYPE_BINARY is not compatible yet.");
          break;
        case nifti_1.NIFTI1.TYPE_COMPLEX64:
          console.warn("The datatype nifti.TYPE_COMPLEX64 is not compatible yet.");
          break;
        case nifti_1.NIFTI1.TYPE_COMPLEX128:
          console.warn("The datatype nifti.TYPE_COMPLEX128 is not compatible yet.");
          break;
        case nifti_1.NIFTI1.TYPE_COMPLEX256:
          console.warn("The datatype nifti.TYPE_COMPLEX256 is not compatible yet.");
          break;
        case nifti_1.NIFTI1.TYPE_FLOAT128:
          console.warn("The datatype nifti.TYPE_FLOAT128 is not compatible yet.");
          break;
        case nifti_1.NIFTI1.TYPE_INT64:
          console.warn("The datatype nifti.TYPE_INT64 is not compatible yet.");
          break;
        case nifti_1.NIFTI1.TYPE_NONE:
          console.warn("The datatype nifti.TYPE_NONE is not compatible.");
          break;
        case nifti_1.NIFTI1.TYPE_UINT64:
          console.warn("The datatype nifti.TYPE_INT64 is not compatible yet.");
          break;

        case nifti_1.NIFTI1.TYPE_FLOAT32:
          typedData = new Float32Array(rawData);
          break;
        case nifti_1.NIFTI1.TYPE_FLOAT64:
          typedData = new Float64Array(rawData);
          break;
        case nifti_1.NIFTI1.TYPE_INT8:
          typedData = new Int8Array(rawData);
          break;
        case nifti_1.NIFTI1.TYPE_INT16:
          typedData = new Int16Array(rawData);
          break;
        case nifti_1.NIFTI1.TYPE_INT32:
          typedData = new Int32Array(rawData);
          break;
        case nifti_1.NIFTI1.TYPE_UINT8:
          typedData = new Uint8Array(rawData);
          break;
        case nifti_1.NIFTI1.TYPE_UINT16:
          typedData = new Uint16Array(rawData);
          break;
        case nifti_1.NIFTI1.TYPE_UINT32:
          typedData = new Uint32Array(rawData);
          break;
        case nifti_1.NIFTI1.TYPE_RGB24:
          typedData = new Uint8Array(rawData);
          break;

        default:
          console.warn("The datatype is unknown.");
      }
      return typedData;
    }
  }, {
    key: '_computeSubjsctBasedCoord',
    value: function _computeSubjsctBasedCoord(header) {}
  }]);
  return NiftiDecoderAlt;
}(Filter); /* END of class NiftiDecoderAlt */

/*
* Author    Jonathan Lurie - http://me.jonathanlurie.fr
*
* License   MIT
* Link      https://github.com/Pixpipe/pixpipejs
* Lab       MCIN - Montreal Neurological Institute
*/

//import JSZip from "jszip";
/**
* A PixpEncoder instance takes an Image2D or Image3D as input with `addInput(...)`
* and encode it so that it can be saved as a *.pixp file.
* An output filename can be specified using `.setMetadata("filename", "yourName.pixp");`,
* by default, the name is "untitled.pixp".
* When `update()` is called, a gzip blog is prepared as output[0] and can then be downloaded
* when calling the method `.download()`. The gzip blob could also be sent over AJAX
* using a third party library.
*
* **Usage**
* - [examples/savePixpFile.html](../examples/savePixpFile.html)
*/

var PixpEncoder = function (_Filter) {
  inherits(PixpEncoder, _Filter);

  function PixpEncoder() {
    classCallCheck(this, PixpEncoder);

    var _this = possibleConstructorReturn(this, (PixpEncoder.__proto__ || Object.getPrototypeOf(PixpEncoder)).call(this));

    _this.setMetadata("filename", "untitled.pixp");

    return _this;
  }

  /**
  * [PRIVATE]
  * overwrite the original from Filter
  * Only accept Image2D and Image3D
  */


  createClass(PixpEncoder, [{
    key: 'hasValidInput',
    value: function hasValidInput() {
      var input = this._getInput();
      return input && (input.isOfType(Image2D.TYPE()) || input.isOfType(Image3D.TYPE()));
    }
  }, {
    key: '_run',
    value: function _run() {

      if (!this.hasValidInput()) {
        console.warn("PixpEncoder can only encode Image2D and Image3D.");
        return;
      }

      var input = this._getInput();

      var arrayAndMeta = {
        dataType: input.getData().constructor.name, // typed array type
        data: Array.prototype.slice.call(input.getData()), // data of pixel/voxel
        metadata: input.getMetadataCopy(), // Image2D/Image3D._metadata
        pixpipeType: input.constructor.name // most likely "Image2D", "Image3D", "MniVolume", "LineString", etc.
      };

      var pixpString = JSON.stringify(arrayAndMeta);

      var deflator = new index$1.Deflate({
        level: 6,
        //to: 'string',
        gzip: true,
        header: {
          text: true,
          time: +new Date(),
          comment: "This file was created by Pixpipe.js"
        }
      });

      deflator.push(pixpString, true);

      // making a blob to be saved
      this._output[0] = new Blob([deflator.result], { type: "application/gzip" });
    }

    /**
    * Download the generated file
    */

  }, {
    key: 'download',
    value: function download() {
      var output = this.getOutput();

      if (output) {
        FileSaver.saveAs(this.getOutput(), this.getMetadata("filename"));
      } else {
        console.warn("No output computed yet.");
      }
    }
  }]);
  return PixpEncoder;
}(Filter); /* END of class PixpEncoder */

/*
* Author    Jonathan Lurie - http://me.jonathanlurie.fr
*
* License   MIT
* Link      https://github.com/Pixpipe/pixpipejs
* Lab       MCIN - Montreal Neurological Institute
*/

/**
* A PixpDecoder instance decodes a *.pixp file and output an Image2D or Image3D.
* The input, specified by `.addInput(...)` must be an ArrayBuffer
* (from an `UrlToArrayBufferFilter`, an `UrlToArrayBufferReader` or anothrer source ).
*
* **Usage**
* - [examples/pixpFileToImage2D.html](../examples/pixpFileToImage2D.html)
*/

var PixpDecoder = function (_Filter) {
  inherits(PixpDecoder, _Filter);

  function PixpDecoder() {
    classCallCheck(this, PixpDecoder);

    var _this = possibleConstructorReturn(this, (PixpDecoder.__proto__ || Object.getPrototypeOf(PixpDecoder)).call(this));

    _this.addInputValidator(0, ArrayBuffer);
    return _this;
  }

  createClass(PixpDecoder, [{
    key: '_run',
    value: function _run() {

      if (!this.hasValidInput()) {
        console.warn("PixpDecoder can only decode ArrayBuffer.");
        return;
      }

      var input = this._getInput();

      //var pixpString2 = pako.inflate(input /*, { to: 'string' }*/);
      //var pixpObject = JSON.parse( pixpString2 );

      var inflator = new index$1.Inflate({
        level: 6,
        to: 'string'
      });

      inflator.push(input, true);

      // quit if not a gz file
      if (inflator.err) {
        console.warn("This file is not a Pixp file.");
        return;
      }

      var pixpObject = null;

      try {
        pixpObject = JSON.parse(inflator.result);
      } catch (e) {
        console.warn("Could not parse pixp file.");
        console.error(e);
        return;
      }

      if (!(pixpObject.pixpipeType in pixpipe)) {
        console.warn("Unknown type pixpipe." + pixpObject.pixpipeType + ", cannot create any output.");
        return;
      }

      var constructorHost = null;

      try {
        constructorHost = window;
      } catch (e) {
        try {
          constructorHost = GLOBAL;
        } catch (e) {
          console.warn("You are not in a Javascript environment?? Weird.");
          return;
        }
      }

      if (!constructorHost[pixpObject.dataType]) {
        console.warn("Data array from pixp file is unknown: " + pixpObject.dataType);
        return;
      }

      var outputRawData = new constructorHost[pixpObject.dataType](pixpObject.data);
      var output = new pixpipe[pixpObject.pixpipeType]();
      output.setRawData(outputRawData);
      output.setRawMetadata(pixpObject.metadata);

      this._output[0] = output;
    }
  }]);
  return PixpDecoder;
}(Filter); /* END of class PixpDecoder */

/*
* Author    Jonathan Lurie - http://me.jonathanlurie.fr
*           Robert D. Vincent
*
* License   MIT
* Link      https://github.com/Pixpipe/pixpipejs
* Lab       MCIN - Montreal Neurological Institute
*/

/**
* Decodes a MGH file.
* Takes an ArrayBuffer as input (0) and output a `MniVolume` (which inherit `Image3D`).
*
* **Usage**
* - [examples/fileToMgh.html](../examples/fileToMgh.html)
*/

var MghDecoder = function (_Filter) {
  inherits(MghDecoder, _Filter);

  function MghDecoder() {
    classCallCheck(this, MghDecoder);

    var _this = possibleConstructorReturn(this, (MghDecoder.__proto__ || Object.getPrototypeOf(MghDecoder)).call(this));

    _this.addInputValidator(0, ArrayBuffer);
    _this.setMetadata("debug", false);
    return _this;
  }

  /* Function to parse the basic MGH header. This is a 284-byte binary
   * object that begins at offset zero in the file.
   * The resulting header object will contain the following fields:
   *
   * header.order[] - An array of strings that gives the order of the
   * spatial dimensions.
   * header.xspace - Description of the X axis (patient left to right)
   * header.yspace - Description of the Y axis (patient posterior to anterior)
   * header.zspace - Description of the Z axis (patient inferior to superior)
   * header.time - Description of time axis, if any.
    * Non-standard fields used internally only:
   *
   * header.nvoxels - Total number of voxels in the image.
   * header.datatype - MGH data type of image.
   * header.little_endian - True if data is little endian (should be false!)
   */


  createClass(MghDecoder, [{
    key: '_parseMGHHeader',
    value: function _parseMGHHeader(raw_data, callback) {
      var header = {
        order: ["xspace", "yspace", "zspace"],
        xspace: {},
        yspace: {},
        zspace: {}
      };
      var dview = new DataView(raw_data, 0, 284);
      var little_endian = true;

      /* Read the header version, which should always have the value
       * 0x00000001. We use this to test the endian-ness of the data,
       * but it should always be big-endian.
       */
      var hdr_version = dview.getUint32(0, true);
      if (hdr_version === 0x00000001) {
        little_endian = true;
      } else if (hdr_version === 0x01000000) {
        little_endian = false; // Generally files are big-endian.
      } else {
        console.warn("This does not look like an MGH file.");
        return null;
      }

      /* Now read the dimension lengths. There are at most 4 dimensions
       * in the file. The lengths fields are always present, but they
       * unused dimensions may have the value 0 or 1.
       */
      var ndims = 0;
      var sizes = [0, 0, 0, 0];
      var header_offset = 4;
      var nvoxels = 1;
      for (ndims = 0; ndims < 4; ndims++) {
        sizes[ndims] = dview.getUint32(header_offset, little_endian);
        if (sizes[ndims] <= 1) {
          break;
        }
        nvoxels *= sizes[ndims];
        header_offset += 4;
      }

      if (ndims < 3 || ndims > 4) {
        console.warn("Cannot handle " + ndims + "-dimensional images yet.");
        return null;
      }

      var datatype = dview.getUint32(20, little_endian);
      // IGNORED var dof = dview.getUint32(24, little_endian);
      var good_transform_flag = dview.getUint16(28, little_endian);
      var spacing = [1.0, 1.0, 1.0];
      var i, j;
      var dircos = [[-1.0, 0.0, 0.0], [0.0, 0.0, -1.0], [0.0, 1.0, 0.0], [0.0, 0.0, 0.0]];
      if (good_transform_flag) {
        header_offset = 30;
        for (i = 0; i < 3; i++) {
          spacing[i] = dview.getFloat32(header_offset, little_endian);
          header_offset += 4;
        }
        for (i = 0; i < 4; i++) {
          for (j = 0; j < 3; j++) {
            dircos[i][j] = dview.getFloat32(header_offset, little_endian);
            header_offset += 4;
          }
        }
      }

      if (this._metadata.debug) {
        // Prints out the transform in a format similar to the output
        // of FreeSurfer's mri_info tool.
        //
        for (i = 0; i < 3; i++) {
          var s1 = "";
          for (j = 0; j < 4; j++) {
            s1 += "xyzc"[j] + "_" + "ras"[i] + " " + dircos[j][i] + " ";
          }
          console.log(s1);
        }
      }

      var axis_index_from_file = [0, 1, 2];

      for (var axis = 0; axis < 3; axis++) {
        var spatial_axis = 0;
        var c_x = Math.abs(dircos[axis][0]);
        var c_y = Math.abs(dircos[axis][1]);
        var c_z = Math.abs(dircos[axis][2]);

        header.order[axis] = "xspace";
        if (c_y > c_x && c_y > c_z) {
          spatial_axis = 1;
          header.order[axis] = "yspace";
        }
        if (c_z > c_x && c_z > c_y) {
          spatial_axis = 2;
          header.order[axis] = "zspace";
        }
        axis_index_from_file[axis] = spatial_axis;
      }

      /* If there are four dimensions, assume the last is the time
       * dimension. I use default values for step and start because as
       * far as I know MGH files do not carry any descriptive
       * information about the 4th dimension.
       */
      if (ndims === 4) {
        if (this._metadata.debug) {
          console.log("Creating time dimension: " + sizes[3]);
        }
        header.time = {
          space_length: sizes[3],
          step: 1,
          start: 0,
          name: "time"
        };
        header.order.push("time");
      }

      /** This is here because there are two different ways of interpreting
        * the origin of an MGH file. One can ignore the offsets in the
        * transform, using the centre of the voxel grid. Or you can correct
        * these naive grid centres using the values stored in the transform.
        * The first approach is what is used by surface files, so to get them
        * to register nicely, we want ignore_offsets to be true. However,
        * getting volumetric files to register correctly implies setting
        * ignore_offsets to false.
        */
      var ignore_offsets = false;
      var mgh_xform = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]];
      for (i = 0; i < 3; i++) {
        for (j = 0; j < 3; j++) {
          mgh_xform[i][j] = dircos[j][i] * spacing[i];
        }
      }

      for (i = 0; i < 3; i++) {
        var temp = 0.0;
        for (j = 0; j < 3; j++) {
          temp += mgh_xform[i][j] * (sizes[j] / 2.0);
        }

        if (ignore_offsets) {
          mgh_xform[i][4 - 1] = -temp;
        } else {
          mgh_xform[i][4 - 1] = dircos[4 - 1][i] - temp;
        }
      }

      var transform = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]];

      for (i = 0; i < 3; i++) {
        for (j = 0; j < 4; j++) {
          var volume_axis = j;
          if (j < 3) {
            volume_axis = axis_index_from_file[j];
          }
          transform[i][volume_axis] = mgh_xform[i][j];
        }
      }

      // Now that we have the transform, need to convert it to MINC-like
      // steps and direction_cosines.

      MniVolume.transformToMinc(transform, header);

      // Save the datatype so that we can refer to it later.
      header.datatype = datatype;
      header.little_endian = little_endian;
      header.nvoxels = nvoxels;

      // Save the voxel dimension lengths.
      for (i = 0; i < 3; i++) {
        header[header.order[i]].space_length = sizes[i];
      }

      return header;
    }
  }, {
    key: '_createMGHData',
    value: function _createMGHData(header, raw_data) {

      var native_data = null;
      var bytes_per_voxel = 1;

      switch (header.datatype) {
        case 0:
          // Unsigned characters.
          bytes_per_voxel = 1;
          break;
        case 1: // 4-byte signed integers.
        case 3:
          // 4-byte float.
          bytes_per_voxel = 4;
          break;
        case 4:
          // 2-byte signed integers.
          bytes_per_voxel = 2;
          break;
        default:
          console.warn("Unsupported data type: " + header.datatype);
          return null;
      }

      var nbytes = header.nvoxels * bytes_per_voxel;

      if (bytes_per_voxel > 1 && !header.little_endian) {
        MniVolume.swapn(new Uint8Array(raw_data, 284, nbytes), bytes_per_voxel);
      }

      switch (header.datatype) {
        case 0:
          // unsigned char
          native_data = new Uint8Array(raw_data, 284, header.nvoxels);
          break;
        case 1:
          // signed int
          native_data = new Int32Array(raw_data, 284, header.nvoxels);
          break;
        case 3:
          native_data = new Float32Array(raw_data, 284, header.nvoxels);
          break;
        case 4:
          // signed short
          native_data = new Int16Array(raw_data, 284, header.nvoxels);
          break;
      }

      // Incrementation offsets for each dimension of the volume. MGH
      // files store the fastest-varying dimension _first_, so the
      // "first" dimension actually has the smallest offset. That is
      // why this calculation is different from that for NIfTI-1.
      //
      var offset = 1;
      for (var d = 0; d < header.order.length; d++) {
        header[header.order[d]].offset = offset;
        offset *= header[header.order[d]].space_length;
      }
      return native_data;
    }
  }, {
    key: '_run',
    value: function _run() {
      var inputBuffer = this._getInput(0);

      if (!inputBuffer) {
        console.warn("MghDecoder requires an ArrayBuffer as input \"0\". Unable to continue.");
        return;
      }

      var header = null;

      try {
        header = this._parseMGHHeader(inputBuffer);
      } catch (e) {}
      //console.warn( e );


      // abort if header not valid
      if (!header) {
        console.log("The input file is not a MGH file.");
        return;
      }

      var dataArray = this._createMGHData(header, inputBuffer);

      if (!dataArray) return null;

      // add the output to this filter
      this._addOutput(MniVolume);
      var mniVol = this.getOutput();
      mniVol.setData(dataArray, header);
      mniVol.setMetadata("format", "mgh");
    }
  }]);
  return MghDecoder;
}(Filter); /* END of class MghDecoder */

/*
* Author    Jonathan Lurie - http://me.jonathanlurie.fr
*
* License   MIT
* Link      https://github.com/Pixpipe/pixpipejs
* Lab       MCIN - Montreal Neurological Institute
*/

// decoders
//import { PixBinDecoder } from './PixBinDecoder.js';


/**
* An instance of Image3DGenericDecoder takes a ArrayBuffer 
* as input 0 (`.addInput(myArrayBuffer)`) and output an Image3D.
* The `update` method will perform several decoding attempts, using the readers
* specified in the constructor.
* In case of success (one of the registered decoder was compatible to the data)
* the metadata `decoderConstructor` and `decoderName` are made accessible and give
* information about the file format. If no decoder managed to decode the input buffer,
* this filter will not have any output.
*
* Developers: if a new 3D dataset decoder is added, reference it here.
*/

var Image3DGenericDecoder = function (_Filter) {
  inherits(Image3DGenericDecoder, _Filter);

  function Image3DGenericDecoder() {
    classCallCheck(this, Image3DGenericDecoder);

    var _this = possibleConstructorReturn(this, (Image3DGenericDecoder.__proto__ || Object.getPrototypeOf(Image3DGenericDecoder)).call(this));

    _this._decoders = [Minc2Decoder, NiftiDecoder, MghDecoder, PixpDecoder];
    return _this;
  }

  createClass(Image3DGenericDecoder, [{
    key: '_run',
    value: function _run() {
      var inputBuffer = this._getInput(0);

      if (!inputBuffer) {
        console.warn("The input buffer must not be null.");
        return;
      }

      // try with each decoder
      for (var d = 0; d < this._decoders.length; d++) {
        var decoder = new this._decoders[d]();
        decoder.addInput(inputBuffer);
        decoder.update();

        if (decoder.getNumberOfOutputs()) {
          this._output[0] = decoder.getOutput();
          this.setMetadata("decoderConstructor", this._decoders[d]);
          this.setMetadata("decoderName", this._decoders[d].name);
          break;
        }
      }
    }
  }]);
  return Image3DGenericDecoder;
}(Filter); /* END of class Image3DGenericDecoder */

var Image3DMetadataConverter = function () {
  function Image3DMetadataConverter() {
    classCallCheck(this, Image3DMetadataConverter);
  }

  createClass(Image3DMetadataConverter, null, [{
    key: "convertOld2New",
    value: function convertOld2New(oldMeta) {
      var newMeta = {};

      // we never have RGB from MINC/NIfTI/MGH. Though it could happen...
      newMeta.ncpp = 1;
      newMeta.dimensions = [];

      //var spacenameLUT = {x: "i", y: "j", z: "k", t: "t"};
      var voxelSpaceNames = ["k", "j", "i", "t"];
      for (var i = 0; i < oldMeta.order.length; i++) {
        var oldDim = oldMeta[oldMeta.order[i]];
        var dimension = {};
        dimension.length = oldDim.space_length;
        dimension.nameWorldSpace = oldMeta.order[i][0];
        dimension.nameVoxelSpace = ''; //voxelSpaceNames[i]; //spacenameLUT[ dimension.nameWorldSpace ];
        dimension.worldUnitSize = Math.abs(oldDim.step);
        dimension.step = oldDim.step;
        dimension.worldStep = oldDim.step;
        dimension.stride = oldDim.offset;
        newMeta.dimensions.push(dimension);
      }

      newMeta.dimensions.sort(function (a, b) {
        return a.stride > b.stride;
      });

      for (var i = 0; i < oldMeta.order.length; i++) {
        newMeta.dimensions[i].nameVoxelSpace = voxelSpaceNames[i];
      }

      // return the index of a dimension based on the given world axis name
      function getIndexOfWorld(axisName) {
        for (var i = 0; i < newMeta.dimensions.length; i++) {
          if (newMeta.dimensions[i].nameWorldSpace === axisName) {
            return i;
          }
        }
        return -1;
      }

      // given a world axis name, return the the name of the world axis that goes as width
      function getWidthAxisFrom(axisName) {
        return axisName === "x" ? "y" : axisName === "y" ? "x" : axisName === "z" ? "x" : null;
      }

      // given a world axis name, return the the name of the world axis that goes as heigth
      function getHeightAxisFrom(axisName) {
        return axisName === "x" ? "z" : axisName === "y" ? "z" : axisName === "z" ? "y" : null;
      }

      for (var i = 0; i < newMeta.dimensions.length; i++) {
        var axisName = newMeta.dimensions[i].nameWorldSpace;
        newMeta.dimensions[i].widthDimension = getIndexOfWorld(getWidthAxisFrom(axisName));
        newMeta.dimensions[i].heightDimension = getIndexOfWorld(getHeightAxisFrom(axisName));
      }

      newMeta.statistics = {
        upToDate: false,
        min: 0,
        max: 0
      };

      newMeta.description = "";
      newMeta.spatialUnit = "";
      newMeta.temporalUnit = "";
      newMeta.format = "format" in oldMeta ? oldMeta.format : "generic";

      /*
      var v2wMat = mat4.fromValues(transfoMatrixToUse[0][0], transfoMatrixToUse[1][0], transfoMatrixToUse[2][0], transfoMatrixToUse[3][0],
                                   transfoMatrixToUse[0][1], transfoMatrixToUse[1][1], transfoMatrixToUse[2][1], transfoMatrixToUse[3][1],
                                   transfoMatrixToUse[0][2], transfoMatrixToUse[1][2], transfoMatrixToUse[2][2], transfoMatrixToUse[3][2],
                                   transfoMatrixToUse[0][3], transfoMatrixToUse[1][3], transfoMatrixToUse[2][3], transfoMatrixToUse[3][3] );
      */

      var w2vMat = fromValues$3(oldMeta.w2v[0][0], oldMeta.w2v[1][0], oldMeta.w2v[2][0], 0, oldMeta.w2v[0][1], oldMeta.w2v[1][1], oldMeta.w2v[2][1], 0, oldMeta.w2v[0][2], oldMeta.w2v[1][2], oldMeta.w2v[2][2], 0, oldMeta.w2v[0][3], oldMeta.w2v[1][3], oldMeta.w2v[2][3], 1);

      var v2wMat = create$3();
      invert$3(v2wMat, w2vMat);

      newMeta.transformations = {
        "v2w": v2wMat,
        "w2v": w2vMat
      };

      return newMeta;
    }

    /**
    * Converts the original Image3D metadata into the new
    * 
    */

  }, {
    key: "convertImage3DMetadata",
    value: function convertImage3DMetadata(oldMeta) {
      Image3DMetadataConverter.completeHeader(oldMeta);
      var newMetaObj = Image3DMetadataConverter.convertOld2New(oldMeta);

      return newMetaObj;
    }
  }, {
    key: "completeHeader",
    value: function completeHeader(oldMetaObj) {
      var xspace = oldMetaObj.xspace;
      var yspace = oldMetaObj.yspace;
      var zspace = oldMetaObj.zspace;

      var startx = xspace.start;
      var starty = yspace.start;
      var startz = zspace.start;
      var cx = xspace.direction_cosines;
      var cy = yspace.direction_cosines;
      var cz = zspace.direction_cosines;
      var stepx = xspace.step;
      var stepy = yspace.step;
      var stepz = zspace.step;

      // voxel_origin
      var o = {
        x: startx * cx[0] + starty * cy[0] + startz * cz[0],
        y: startx * cx[1] + starty * cy[1] + startz * cz[1],
        z: startx * cx[2] + starty * cy[2] + startz * cz[2]
      };

      oldMetaObj.voxel_origin = o;

      var tx = (-o.x * cx[0] - o.y * cx[1] - o.z * cx[2]) / stepx;
      var ty = (-o.x * cy[0] - o.y * cy[1] - o.z * cy[2]) / stepy;
      var tz = (-o.x * cz[0] - o.y * cz[1] - o.z * cz[2]) / stepz;

      var w2v = [[cx[0] / stepx, cx[1] / stepx, cx[2] / stepx, tx], [cy[0] / stepy, cy[1] / stepy, cy[2] / stepy, ty], [cz[0] / stepz, cz[1] / stepz, cz[2] / stepz, tz]];

      /*
      x: x * cx[0] * stepx + y * cy[0] * stepy + z * cz[0] * stepz + o.x,
      y: x * cx[1] * stepx + y * cy[1] * stepy + z * cz[1] * stepz + o.y,
      z: x * cx[2] * stepx + y * cy[2] * stepy + z * cz[2] * stepz + o.z
      */

      oldMetaObj.w2v = w2v;

      xspace.width_space = JSON.parse(JSON.stringify(yspace)); //yspace;
      xspace.width = yspace.space_length;
      xspace.height_space = JSON.parse(JSON.stringify(zspace)); //zspace;
      xspace.height = zspace.space_length;

      yspace.width_space = JSON.parse(JSON.stringify(xspace)); //xspace;
      yspace.width = xspace.space_length;
      yspace.height_space = JSON.parse(JSON.stringify(zspace)); //zspace;
      yspace.height = zspace.space_length;

      zspace.width_space = JSON.parse(JSON.stringify(xspace)); //xspace;
      zspace.width = xspace.space_length;
      zspace.height_space = JSON.parse(JSON.stringify(yspace)); //yspace;
      zspace.height = yspace.space_length;
    }

    /**
    * [STATIC]
    * mainly used by the ouside world (like from Nifti)
    */

  }, {
    key: "transformToMinc",
    value: function transformToMinc(transform, header) {
      var x_dir_cosines = [];
      var y_dir_cosines = [];
      var z_dir_cosines = [];

      // A tiny helper function to calculate the magnitude of the rotational
      // part of the transform.
      //
      function magnitude(v) {
        var dotprod = v[0] * v[0] + v[1] * v[1] + v[2] * v[2];
        if (dotprod <= 0) {
          dotprod = 1.0;
        }
        return Math.sqrt(dotprod);
      }

      // Calculate the determinant of a 3x3 matrix, from:
      // http://www.mathworks.com/help/aeroblks/determinantof3x3matrix.html
      //
      // det(A) = A_{11} (A_{22}A_{33} - A_{23}A_{32}) -
      //          A_{12} (A_{21}A_{33} - A_{23}A_{31}) +
      //          A_{13} (A_{21}A_{32} - A_{22}A_{31})
      //
      // Of course, I had to change the indices from 1-based to 0-based.
      //
      function determinant$$1(c0, c1, c2) {
        return c0[0] * (c1[1] * c2[2] - c1[2] * c2[1]) - c0[1] * (c1[0] * c2[2] - c1[2] * c2[0]) + c0[2] * (c1[0] * c2[1] - c1[1] * c2[0]);
      }

      // Now that we have the transform, need to convert it to MINC-like
      // steps and direction_cosines.

      var xmag = magnitude(transform[0]);
      var ymag = magnitude(transform[1]);
      var zmag = magnitude(transform[2]);

      var xstep = transform[0][0] < 0 ? -xmag : xmag;
      var ystep = transform[1][1] < 0 ? -ymag : ymag;
      var zstep = transform[2][2] < 0 ? -zmag : zmag;

      for (var i = 0; i < 3; i++) {
        x_dir_cosines[i] = transform[i][0] / xstep;
        y_dir_cosines[i] = transform[i][1] / ystep;
        z_dir_cosines[i] = transform[i][2] / zstep;
      }

      header.xspace.step = xstep;
      header.yspace.step = ystep;
      header.zspace.step = zstep;

      // Calculate the corrected start values.
      var starts = [transform[0][3], transform[1][3], transform[2][3]];

      // (bert): I believe that the determinant of the direction
      // cosines should always work out to 1, so the calculation of
      // this value should not be needed. But I have no idea if NIfTI
      // enforces this when sform transforms are written.
      var denom = determinant$$1(x_dir_cosines, y_dir_cosines, z_dir_cosines);
      var xstart = determinant$$1(starts, y_dir_cosines, z_dir_cosines);
      var ystart = determinant$$1(x_dir_cosines, starts, z_dir_cosines);
      var zstart = determinant$$1(x_dir_cosines, y_dir_cosines, starts);

      header.xspace.start = xstart / denom;
      header.yspace.start = ystart / denom;
      header.zspace.start = zstart / denom;

      header.xspace.direction_cosines = x_dir_cosines;
      header.yspace.direction_cosines = y_dir_cosines;
      header.zspace.direction_cosines = z_dir_cosines;
    }
  }, {
    key: "swapn",


    /**
    * [STATIC]
    * swap the data to be used from the outside (ie. nifti)
    */
    value: function swapn(byte_data, n_per_item) {
      for (var d = 0; d < byte_data.length; d += n_per_item) {
        var hi_offset = n_per_item - 1;
        var lo_offset = 0;
        while (hi_offset > lo_offset) {
          var tmp = byte_data[d + hi_offset];
          byte_data[d + hi_offset] = byte_data[d + lo_offset];
          byte_data[d + lo_offset] = tmp;
          hi_offset--;
          lo_offset++;
        }
      }
    }
  }]);
  return Image3DMetadataConverter;
}();

/*
* Author    Jonathan Lurie - http://me.jonathanlurie.fr
*           Robert D. Vincent
*
* License   MIT
* Link      https://github.com/Pixpipe/pixpipejs
* Lab       MCIN - Montreal Neurological Institute
*/

/**
* Decode a HDF5 file, but is most likely to be restricted to the features that are
* used for Minc2 file format.
* The metadata "debug" can be set to true to
* enable a verbose mode.
* Takes an ArrayBuffer as input (0) and output a `MniVolume` (which inherit `Image3D`).
*
* **Usage**
* - [examples/fileToMinc2.html](../examples/fileToMinc2.html)
*/

var Minc2DecoderAlt = function (_Filter) {
  inherits(Minc2DecoderAlt, _Filter);

  function Minc2DecoderAlt() {
    classCallCheck(this, Minc2DecoderAlt);

    var _this = possibleConstructorReturn(this, (Minc2DecoderAlt.__proto__ || Object.getPrototypeOf(Minc2DecoderAlt)).call(this));

    _this.addInputValidator(0, ArrayBuffer);

    _this.setMetadata("debug", false);

    _this._type_enum = {
      INT8: 1,
      UINT8: 2,
      INT16: 3,
      UINT16: 4,
      INT32: 5,
      UINT32: 6,
      FLT: 7,
      DBL: 8,
      STR: 9
    };

    _this._type_matching = ["int8", "uint8", "int16", "uint16", "int32", "uint32", "float32", "float64", "undef" // STR type is not compatible with minc
    // we deal rgb8 manually
    ];

    _this.type_sizes = [0, 1, 1, 2, 2, 4, 4, 4, 8, 0];

    _this._dv_offset = 0;
    _this._align = 8;
    _this._little_endian = true;
    _this._continuation_queue = [];
    _this._dv = null; //new DataView(abuf);
    _this._superblk = {};
    _this._start_offset = 0;
    _this._huge_id = 0;

    return _this;
  }

  /**
  * [PRIVATE]
  */


  createClass(Minc2DecoderAlt, [{
    key: 'createLink',
    value: function createLink() {
      var r = {};
      // internal/private
      r.hdr_offset = 0; // offset to object header.
      r.data_offset = 0; // offset to actual data.
      r.data_length = 0; // length of data.
      r.n_filled = 0; // counts elements written to array
      r.chunk_size = 0; // size of chunks
      r.sym_btree = 0; // offset of symbol table btree
      r.sym_lheap = 0; // offset of symbol table local heap
      // permanent/global
      r.name = ""; // name of this group or dataset.
      r.attributes = {}; // indexed by attribute name.
      r.children = []; // not associative for now.
      r.array = undefined; // actual data, if dataset.
      r.type = -1; // type of data.
      r.inflate = false; // true if need to inflate (gzip).
      r.dims = []; // dimension sizes.
      return r;
    }

    /**
    * [PRIVATE]
    *
    * Turns out that alignment of the messages in at least the
    * version 1 object header is actually relative to the start
    * of the header. So we update the start position of the
    * header here, so we can refer to it when calculating the
    * alignment in this.checkAlignment().
    */

  }, {
    key: 'startAlignment',
    value: function startAlignment() {
      this._start_offset = this._dv_offset;
    }

    /**
    * [PRIVATE]
    */

  }, {
    key: 'checkAlignment',
    value: function checkAlignment() {
      var tmp = this._dv_offset - this._start_offset;
      if (tmp % this._align !== 0) {
        var n = this._align - tmp % this._align;
        this._dv_offset += n;
        if (this.getMetadata("debug")) {
          console.log('skipping ' + n + ' bytes at ' + tmp + ' for alignmnent');
        }
      }
    }

    /**
    * [PRIVATE]
    *
    * helper functions to manipulate the current DataView offset.
    */

  }, {
    key: 'skip',
    value: function skip(n_bytes) {
      this._dv_offset += n_bytes;
    }

    /**
    * [PRIVATE]
    */

  }, {
    key: 'seek',
    value: function seek(new_offset) {
      this._dv_offset = new_offset;
    }

    /**
    * [PRIVATE]
    */

  }, {
    key: 'tell',
    value: function tell() {
      return this._dv_offset;
    }

    /**
    * [PRIVATE]
    *
    * helper functions for access to our DataView.
    */

  }, {
    key: 'getU8',
    value: function getU8() {
      var v = this._dv.getUint8(this._dv_offset);
      this._dv_offset += 1;
      return v;
    }

    /**
    * [PRIVATE]
    */

  }, {
    key: 'getU16',
    value: function getU16() {
      var v = this._dv.getUint16(this._dv_offset, this._little_endian);
      this._dv_offset += 2;
      return v;
    }

    /**
    * [PRIVATE]
    */

  }, {
    key: 'getU32',
    value: function getU32() {
      var v = this._dv.getUint32(this._dv_offset, this._little_endian);
      this._dv_offset += 4;
      return v;
    }

    /**
    * [PRIVATE]
    */

  }, {
    key: 'getU64',
    value: function getU64() {
      var v = this._dv.getUint64(this._dv_offset, this._little_endian);
      this._dv_offset += 8;
      return v;
    }

    /**
    * [PRIVATE]
    */

  }, {
    key: 'getF32',
    value: function getF32() {
      var v = this._dv.getFloat32(this._dv_offset, this._little_endian);
      this._dv_offset += 4;
      return v;
    }

    /**
    * [PRIVATE]
    */

  }, {
    key: 'getF64',
    value: function getF64() {
      var v = this._dv.getFloat64(this._dv_offset, this._little_endian);
      this._dv_offset += 8;
      return v;
    }

    /**
    * [PRIVATE]
    */

  }, {
    key: 'getOffset',
    value: function getOffset(offsz) {
      var v = 0;
      offsz = offsz || this._superblk.offsz;
      if (offsz === 4) {
        v = this._dv.getUint32(this._dv_offset, this._little_endian);
      } else if (offsz === 8) {
        v = this._dv.getUint64(this._dv_offset, this._little_endian);
      } else {
        throw new Error('Unsupported value for offset size ' + offsz);
      }
      this._dv_offset += offsz;
      return v;
    }

    /**
    * [PRIVATE]
    */

  }, {
    key: 'getLength',
    value: function getLength() {
      var v = this._dv.getUint64(this._dv_offset, this._little_endian);
      this._dv_offset += this._superblk.lensz;
      return v;
    }

    /**
    * [PRIVATE]
    */

  }, {
    key: 'getString',
    value: function getString(length) {
      var r = "";
      var i;
      var c;
      for (i = 0; i < length; i += 1) {
        c = this.getU8();
        if (c === 0) {
          this._dv_offset += length - i - 1;
          break;
        }
        r += String.fromCharCode(c);
      }
      return r;
    }

    /**
    * [PRIVATE]
    */

  }, {
    key: 'getArray',
    value: function getArray(typ, n_bytes, new_off) {
      var value;
      var n_values;
      var new_abuf;
      var abuf = this._getInput();
      var i;
      var spp = this._dv_offset;
      if (new_off) {
        this._dv_offset = new_off;
      }
      switch (typ) {
        case this._type_enum.INT8:
          value = new Int8Array(abuf, this._dv_offset, n_bytes);
          break;
        case this._type_enum.UINT8:
          value = new Uint8Array(abuf, this._dv_offset, n_bytes);
          break;
        case this._type_enum.INT16:
          if (this._dv_offset % 2 !== 0) {
            new_abuf = new ArrayBuffer(n_bytes);
            n_values = n_bytes / 2;
            value = new Int16Array(new_abuf);
            for (i = 0; i < n_values; i += 1) {
              value[i] = this.getU16();
            }
          } else {
            value = new Int16Array(abuf, this._dv_offset, n_bytes / 2);
            this._dv_offset += n_bytes;
          }
          break;
        case this._type_enum.UINT16:
          if (this._dv_offset % 2 !== 0) {
            new_abuf = new ArrayBuffer(n_bytes);
            n_values = n_bytes / 2;
            value = new Uint16Array(new_abuf);
            for (i = 0; i < n_values; i += 1) {
              value[i] = this.getU16();
            }
          } else {
            value = new Uint16Array(abuf, this._dv_offset, n_bytes / 2);
            this._dv_offset += n_bytes;
          }
          break;
        case this._type_enum.INT32:
          if (this._dv_offset % 4 !== 0) {
            new_abuf = new ArrayBuffer(n_bytes);
            n_values = n_bytes / 4;
            value = new Int32Array(new_abuf);
            for (i = 0; i < n_values; i += 1) {
              value[i] = this.getU32();
            }
          } else {
            value = new Int32Array(abuf, this._dv_offset, n_bytes / 4);
            this._dv_offset += n_bytes;
          }
          break;
        case this._type_enum.UINT32:
          if (this._dv_offset % 4 !== 0) {
            new_abuf = new ArrayBuffer(n_bytes);
            n_values = n_bytes / 4;
            value = new Uint32Array(new_abuf);
            for (i = 0; i < n_values; i += 1) {
              value[i] = this.getU32();
            }
          } else {
            value = new Uint32Array(abuf, this._dv_offset, n_bytes / 4);
            this._dv_offset += n_bytes;
          }
          break;
        case this._type_enum.FLT:
          if (this._dv_offset % 4 !== 0) {
            new_abuf = new ArrayBuffer(n_bytes);
            n_values = n_bytes / 4;
            value = new Float32Array(new_abuf);
            for (i = 0; i < n_values; i += 1) {
              value[i] = this.getF32();
            }
          } else {
            value = new Float32Array(abuf, this._dv_offset, n_bytes / 4);
            this._dv_offset += n_bytes;
          }
          break;
        case this._type_enum.DBL:
          if (this._dv_offset % 8 !== 0) {
            new_abuf = new ArrayBuffer(n_bytes);
            n_values = n_bytes / 8;
            value = new Float64Array(new_abuf);
            for (i = 0; i < n_values; i += 1) {
              value[i] = this.getF64();
            }
          } else {
            value = new Float64Array(abuf, this._dv_offset, n_bytes / 8);
            this._dv_offset += n_bytes;
          }
          break;
        default:
          throw new Error('Bad type in this.getArray ' + typ);
      }
      if (new_off) {
        this._dv_offset = spp;
      }
      return value;
    }

    /**
    * [PRIVATE]
    *
    * Get a variably-sized integer from the DataView.
    */

  }, {
    key: 'getUXX',
    value: function getUXX(n) {
      var v;
      var i;
      switch (n) {
        case 1:
          v = this._dv.getUint8(this._dv_offset);
          break;
        case 2:
          v = this._dv.getUint16(this._dv_offset, this._little_endian);
          break;
        case 4:
          v = this._dv.getUint32(this._dv_offset, this._little_endian);
          break;
        case 8:
          v = this._dv.getUint64(this._dv_offset, this._little_endian);
          break;
        default:
          /* Certain hdf5 types can have odd numbers of bytes. We try
           * to deal with that special case here.
           */
          v = 0;
          if (!this._little_endian) {
            for (i = 0; i < n; i++) {
              v = (v << 8) + this._dv.getUint8(this._dv_offset + i);
            }
          } else {
            for (i = n - 1; i >= 0; i--) {
              v = (v << 8) + this._dv.getUint8(this._dv_offset + i);
            }
          }
      }
      this._dv_offset += n;
      return v;
    }

    /**
    * [PRIVATE]
    *
    * Verify that the expected signature is found at this offset.
    */

  }, {
    key: 'checkSignature',
    value: function checkSignature(str) {
      var i;
      for (i = 0; i < str.length; i += 1) {
        if (this._dv.getUint8(this._dv_offset + i) !== str.charCodeAt(i)) {
          return false;
        }
      }
      this.skip(str.length);
      return true;
    }

    /**
    * [PRIVATE]
    */

  }, {
    key: 'hdf5Superblock',
    value: function hdf5Superblock() {
      var sb = {};
      if (!this.checkSignature('\x89HDF\r\n\x1A\n')) {
        throw new Error('Bad magic string in HDF5');
      }
      sb.sbver = this.getU8();
      if (sb.sbver > 2) {
        throw new Error('Unsupported HDF5 superblock version ' + sb.sbver);
      }
      if (sb.sbver <= 1) {
        sb.fsver = this.getU8();
        sb.rgver = this.getU8();
        this.skip(1); // reserved
        sb.shver = this.getU8();
        sb.offsz = this.getU8();
        sb.lensz = this.getU8();
        this.skip(1); // reserved
        sb.gln_k = this.getU16();
        sb.gin_k = this.getU16();
        sb.cflags = this.getU32();
        if (sb.sbver === 1) {
          sb.isin_k = this.getU16();
          this.skip(2); // reserved
        }
        sb.base_addr = this.getOffset(sb.offsz);
        sb.gfsi_addr = this.getOffset(sb.offsz);
        sb.eof_addr = this.getOffset(sb.offsz);
        sb.dib_addr = this.getOffset(sb.offsz);
        sb.root_ln_offs = this.getOffset(sb.offsz);
        sb.root_addr = this.getOffset(sb.offsz);
        sb.root_cache_type = this.getU32();
        this.skip(4);
        this.skip(16);
      } else {
        sb.offsz = this.getU8();
        sb.lensz = this.getU8();
        sb.cflags = this.getU8();
        sb.base_addr = this.getOffset(sb.offsz);
        sb.ext_addr = this.getOffset(sb.offsz);
        sb.eof_addr = this.getOffset(sb.offsz);
        sb.root_addr = this.getOffset(sb.offsz);
        sb.checksum = this.getU32();
      }
      if (this.getMetadata("debug")) {
        console.log("HDF5 SB " + sb.sbver + " " + sb.offsz + " " + sb.lensz + " " + sb.cflags);
      }
      return sb;
    }

    /**
    * [PRIVATE]
    *
    * read the v2 fractal heap header
    */

  }, {
    key: 'hdf5FractalHeapHeader',
    value: function hdf5FractalHeapHeader() {
      var fh = {};
      if (!this.checkSignature("FRHP")) {
        throw new Error('Bad or missing FRHP signature');
      }
      fh.ver = this.getU8(); // Version
      fh.idlen = this.getU16(); // Heap ID length
      fh.iof_el = this.getU16(); // I/O filter's encoded length
      fh.flags = this.getU8(); // Flags
      fh.objmax = this.getU32(); // Maximum size of managed objects.
      fh.objnid = this.getLength(); // Next huge object ID
      fh.objbta = this.getOffset(); // v2 B-tree address of huge objects
      fh.nf_blk = this.getLength(); // Amount of free space in managed blocks
      fh.af_blk = this.getOffset(); // Address of managed block free space manager
      fh.heap_total = this.getLength(); // Amount of managed space in heap
      fh.heap_alloc = this.getLength(); // Amount of allocated managed space in heap
      fh.bai_offset = this.getLength(); // Offset of direct block allocation iterator
      fh.heap_nobj = this.getLength(); // Number of managed objects in heap
      fh.heap_chuge = this.getLength(); // Size of huge objects in heap
      fh.heap_nhuge = this.getLength(); // Number of huge objects in heap
      fh.heap_ctiny = this.getLength(); // Size of tiny objects in heap
      fh.heap_ntiny = this.getLength(); // Number of tiny objects in heap
      fh.table_width = this.getU16(); // Table width
      fh.start_blksz = this.getLength(); // Starting block size
      fh.max_blksz = this.getLength(); // Maximum direct block size
      fh.max_heapsz = this.getU16(); // Maximum heap size
      fh.rib_srows = this.getU16(); // Starting # of rows in root indirect block
      fh.root_addr = this.getOffset(); // Address of root block
      fh.rib_crows = this.getU16(); // Current # of rows in root indirect block

      var max_dblock_rows = Math.log2(fh.max_blksz) - Math.log2(fh.start_blksz) + 2;
      fh.K = Math.min(fh.rib_crows, max_dblock_rows) * fh.table_width;
      fh.N = fh.rib_crows < max_dblock_rows ? 0 : fh.K - max_dblock_rows * fh.table_width;

      if (this.getMetadata("debug")) {
        console.log("FRHP V" + fh.ver + " F" + fh.flags + " " + fh.objbta + " Total:" + fh.heap_total + " Alloc:" + fh.heap_alloc + " #obj:" + fh.heap_nobj + " width:" + fh.table_width + " start_blksz:" + fh.start_blksz + " max_blksz:" + fh.max_blksz + " " + fh.max_heapsz + " srows:" + fh.rib_srows + " crows:" + fh.rib_crows + " " + fh.heap_nhuge);
        console.log("   K: " + fh.K + " N: " + fh.N);
      }

      if (fh.iof_el > 0) {
        throw new Error("Filters present in fractal heap.");
      }
      return fh;
    }

    /**
    * [PRIVATE]
    *
    * read the v2 btree header
    */

  }, {
    key: 'hdf5V2BtreeHeader',
    value: function hdf5V2BtreeHeader() {
      var bh = {};
      if (!this.checkSignature("BTHD")) {
        throw new Error('Bad or missing BTHD signature');
      }
      bh.ver = this.getU8();
      bh.type = this.getU8();
      bh.nodesz = this.getU32();
      bh.recsz = this.getU16();
      bh.depth = this.getU16();
      bh.splitp = this.getU8();
      bh.mergep = this.getU8();
      bh.root_addr = this.getOffset();
      bh.root_nrec = this.getU16();
      bh.total_nrec = this.getLength();
      bh.checksum = this.getU32();

      if (this.getMetadata("debug")) {
        console.log("BTHD V" + bh.ver + " T" + bh.type + " " + bh.nodesz + " " + bh.recsz + " " + bh.depth + " " + bh.root_addr + " " + bh.root_nrec + " " + bh.total_nrec);
      }
      return bh;
    }

    /**
    * [PRIVATE]
    *
    * Enumerates btree records in a block. Records are found both in direct
    * and indirect v2 btree blocks.
    */

  }, {
    key: 'hdf5V2BtreeRecords',
    value: function hdf5V2BtreeRecords(fh, bt_type, nrec, link) {
      var i;
      var spp; // saved position pointer
      var offset;
      var length;
      if (bt_type === 1) {
        for (i = 0; i < nrec; i++) {
          offset = this.getOffset();
          length = this.getLength();
          var id = this.getLength();
          if (this.getMetadata("debug")) {
            console.log("  -> " + offset + " " + length + " " + id + " " + this._this._huge_id);
          }
          spp = this.tell();
          if (id === this._this._huge_id) {
            this.seek(offset);
            this.hdf5MsgAttribute(length, link);
          }
          this.seek(spp);
        }
      } else if (bt_type === 8) {
        var cb_offs;
        var cb_leng;
        /* maximum heap size is stored in bits! */
        cb_offs = fh.max_heapsz / 8;
        var tmp = Math.min(fh.objmax, fh.max_blksz);
        if (tmp <= 256) {
          cb_leng = 1;
        } else if (tmp <= 65536) {
          cb_leng = 2;
        } else {
          cb_leng = 4;
        }
        for (i = 0; i < nrec; i++) {
          /* Read managed fractal heap ID.
           */
          var vt = this.getU8();
          if ((vt & 0xc0) !== 0) {
            throw new Error('Bad Fractal Heap ID version ' + vt);
          }
          var id_type = vt & 0x30;
          var flags;
          if (id_type === 0x10) {
            // huge!
            this._this._huge_id = this.getUXX(7);
          } else if (id_type === 0x00) {
            // managed.
            offset = this.getUXX(cb_offs);
            length = this.getUXX(cb_leng);
          } else {
            throw new Error("Can't handle this Heap ID: " + vt);
          }
          flags = this.getU8();

          /* Read the rest of the record.
           */
          this.getU32(); // creation order (IGNORE)
          this.getU32(); // hash (IGNORE)
          if (this.getMetadata("debug")) {
            console.log("  -> " + vt + " " + offset + " " + length + " " + flags);
          }
          spp = this.tell();
          if (id_type === 0x10) {
            /* A "huge" object is found by indexing through the btree
             * present in the header
             */
            this.seek(fh.objbta);
            var bh = this.hdf5V2BtreeHeader();
            if (bh.type === 1) {
              this.seek(bh.root_addr);
              this.hdf5V2BtreeLeafNode(fh, bh.root_nrec, link);
            } else {
              throw new Error("Can only handle type-1 btrees");
            }
          } else {
            /*
             * A managed object implies that the attribute message is
             * found in the associated fractal heap at the specified
             * offset in the heap. We get the actual address
             * corresponding to the offset here.
             */
            var location = this.hdf5FractalHeapOffset(fh, offset);
            this.seek(location);
            this.hdf5MsgAttribute(length, link);
          }
          this.seek(spp);
        }
      } else {
        throw new Error("Unhandled V2 btree type.");
      }
    }

    /**
    * [PRIVATE]
    *
    * read a v2 btree leaf node
    */

  }, {
    key: 'hdf5V2BtreeLeafNode',
    value: function hdf5V2BtreeLeafNode(fh, nrec, link) {

      if (!this.checkSignature("BTLF")) {
        throw new Error('Bad or missing BTLF signature');
      }

      var ver = this.getU8();
      var typ = this.getU8();

      if (this.getMetadata("debug")) {
        console.log("BTLF V" + ver + " T" + typ + " " + this.tell());
      }
      this.hdf5V2BtreeRecords(fh, typ, nrec, link);
    }

    /**
    * [PRIVATE]
    *
    * read the hdf5 v2 btree internal node
    */

  }, {
    key: 'hdf5V2BtreeInternalNode',
    value: function hdf5V2BtreeInternalNode(fh, nrec, depth, link) {

      if (!this.checkSignature("BTIN")) {
        throw new Error('Bad or missing BTIN signature');
      }
      var ver = this.getU8();
      var type = this.getU8();
      var i;

      if (this.getMetadata("debug")) {
        console.log("BTIN V" + ver + " T" + type);
      }
      this.hdf5V2BtreeRecords(fh, type, nrec, link);
      for (i = 0; i <= nrec; i++) {
        var child_offset = this.getOffset();
        var child_nrec = this.getUXX(1); // TODO: calculate real size!!
        var child_total;
        /* TODO: unfortunately, this field is optional and
         * variably-sized. Calculating the size is non-trivial, as it
         * depends on the total depth and size of the tree. For now
         * we will just assume it is its minimum size, as I've never
         * encountered a file with depth > 1 anyway.
         */
        if (depth > 1) {
          child_total = this.getUXX(1);
        }
        if (this.getMetadata("debug")) {
          console.log(" child->" + child_offset + " " + child_nrec + " " + child_total);
        }
      }
    }

    /**
    * [PRIVATE]
    */

  }, {
    key: 'hdf5GetMsgName',
    value: function hdf5GetMsgName(n) {

      // JO: used to be in the global scope.
      /* Names of the various HDF5 messages.
       * Note that MESSAGE23 appears to be illegal. All the rest are defined,
       * although I've never encountered a BOGUS message!
       */
      var msg_names = ["NIL", "Dataspace", "LinkInfo", "Datatype", "FillValue 1", "FillValue 2", "Link", "ExternalFiles", "Layout", "BOGUS", "GroupInfo", "FilterPipeline", "Attribute", "ObjectComment", "ObjectModTime 1", "SharedMsgTable", "ObjHdrContinue", "SymbolTable", "ObjectModTime 2", "BtreeKValue", "DriverInfo", "AttrInfo", "ObjectRefCnt", "MESSAGE23", "FileSpaceInfo"];

      if (n < msg_names.length) {
        return msg_names[n];
      }
      throw new Error('Unknown message type ' + n + " " + this.tell());
    }

    /**
    * [PRIVATE]
    */

  }, {
    key: 'hdf5V1BtreeNode',
    value: function hdf5V1BtreeNode(link) {
      var abuf = this._getInput();
      var i;
      var bt = {};
      if (!this.checkSignature("TREE")) {
        throw new Error('Bad TREE signature at ' + this.tell());
      }

      bt.keys = [];

      bt.node_type = this.getU8();
      bt.node_level = this.getU8();
      bt.entries_used = this.getU16();
      bt.left_sibling = this.getOffset();
      bt.right_sibling = this.getOffset();

      if (this.getMetadata("debug")) {
        console.log("BTREE type " + bt.node_type + " lvl " + bt.node_level + " n_used " + bt.entries_used + " " + bt.left_sibling + " " + bt.right_sibling);
      }

      if (!link) {
        /* If this BTREE is associated with a group (not a dataset),
         * then its keys are single "length" value.
         */
        for (i = 0; i < bt.entries_used; i += 1) {
          bt.keys[i] = {};
          bt.keys[i].key_value = this.getLength();
          bt.keys[i].child_address = this.getOffset();
          if (this.getMetadata("debug")) {
            console.log("  BTREE " + i + " key " + bt.keys[i].key_value + " adr " + bt.keys[i].child_address);
          }
        }
      } else {
        var j;

        /* If this BTREE is a "chunked raw data node" associated
         * with a dataset, then its keys are complex, consisting
         * of the chunk size in bytes, a filter mask, and a set of
         * offsets matching the dimensionality of the chunk layout.
         * The chunk size stores the actual stored length of the
         * data, so it may not equal the uncompressed chunk size.
         */
        var chunks = [];

        for (i = 0; i < bt.entries_used; i += 1) {
          bt.keys[i] = {};
          chunks[i] = {};
          chunks[i].chunk_size = this.getU32();
          chunks[i].filter_mask = this.getU32();
          chunks[i].chunk_offsets = [];
          for (j = 0; j < link.dims.length + 1; j += 1) {
            chunks[i].chunk_offsets.push(this.getU64());
          }
          bt.keys[i].child_address = this.getOffset();
          if (i < bt.entries_used) {
            if (this.getMetadata("debug")) {
              console.log("  BTREE " + i + " chunk_size " + chunks[i].chunk_size + " filter_mask " + chunks[i].filter_mask + " addr " + bt.keys[i].child_address);
            }
          }
        }
        chunks[i] = {};
        chunks[i].chunk_size = this.getU32();
        chunks[i].filter_mask = this.getU32();
        chunks[i].chunk_offsets = [];
        for (j = 0; j < link.dims.length + 1; j += 1) {
          chunks[i].chunk_offsets.push(this.getU64());
        }

        /* If we're at a leaf node, we have data to deal with.
         * We might have to uncompress!
         */
        if (bt.node_level === 0) {
          var length;
          var offset;
          var sp;
          var dp;

          for (i = 0; i < bt.entries_used; i += 1) {
            length = chunks[i].chunk_size;
            offset = bt.keys[i].child_address;

            if (link.inflate) {
              sp = new Uint8Array(abuf, offset, length);
              dp = index$1.inflate(sp);
              switch (link.type) {
                case this._type_enum.INT8:
                  dp = new Int8Array(dp.buffer);
                  break;
                case this._type_enum.UINT8:
                  dp = new Uint8Array(dp.buffer);
                  break;
                case this._type_enum.INT16:
                  dp = new Int16Array(dp.buffer);
                  break;
                case this._type_enum.UINT16:
                  dp = new Uint16Array(dp.buffer);
                  break;
                case this._type_enum.INT32:
                  dp = new Int32Array(dp.buffer);
                  break;
                case this._type_enum.UINT32:
                  dp = new Uint32Array(dp.buffer);
                  break;
                case this._type_enum.FLT:
                  dp = new Float32Array(dp.buffer);
                  break;
                case this._type_enum.DBL:
                  dp = new Float64Array(dp.buffer);
                  break;
                default:
                  throw new Error('Unknown type code ' + link.type);
              }
              if (link.array.length - link.n_filled < dp.length) {
                dp = dp.subarray(0, link.array.length - link.n_filled);
              }
              link.array.set(dp, link.n_filled);
              link.n_filled += dp.length;
              if (this.getMetadata("debug")) {
                console.log(link.name + " " + sp.length + " " + dp.length + " " + link.n_filled + "/" + link.array.length);
              }
            } else {
              /* no need to inflate data. */
              dp = this.getArray(link.type, length, offset);
              link.array.set(dp, link.n_filled);
              link.n_filled += dp.length;
            }
          }
        } else {
          for (i = 0; i < bt.entries_used; i += 1) {
            this.seek(bt.keys[i].child_address);
            this.hdf5V1BtreeNode(link);
          }
        }
      }
      return bt;
    }

    /**
    * [PRIVATE]
    */

  }, {
    key: 'hdf5GroupSymbolTable',
    value: function hdf5GroupSymbolTable(lh, link) {
      if (!this.checkSignature("SNOD")) {
        throw new Error('Bad or missing SNOD signature');
      }
      var ver = this.getU8();
      this.skip(1);
      var n_sym = this.getU16();
      if (this.getMetadata("debug")) {
        console.log("this.hdf5GroupSymbolTable V" + ver + " #" + n_sym + " '" + link.name + "'");
      }
      var i;
      var link_name_offset;
      var ohdr_address;
      var cache_type;
      var child;
      var spp;

      for (i = 0; i < 2 * this._superblk.gln_k; i += 1) {
        link_name_offset = this.getOffset();
        ohdr_address = this.getOffset();
        cache_type = this.getU32();
        this.skip(20);

        if (i < n_sym) {
          child = this.createLink();
          child.hdr_offset = ohdr_address;
          if (lh) {
            spp = this.tell();
            /* The link name is a zero-terminated string
             * starting at the link_name_off relative to
             * the beginning of the data segment of the local
             * heap.
             */
            this.seek(lh.lh_dseg_off + link_name_offset);
            child.name = this.getString(lh.lh_dseg_len);
            this.seek(spp);
          }
          if (this.getMetadata("debug")) {
            console.log("    " + i + " O " + link_name_offset + " A " + ohdr_address + " T " + cache_type + " '" + child.name + "'");
          }
          link.children.push(child);
        }
      }
    }

    /**
    * [PRIVATE]
    *
    * Read a v1 local heap header. These define relatively small
    * regions used primarily for storing symbol names associated with
    * a symbol table message.
    */

  }, {
    key: 'hdf5LocalHeap',
    value: function hdf5LocalHeap() {
      var lh = {};
      if (!this.checkSignature("HEAP")) {
        throw new Error('Bad or missing HEAP signature');
      }
      lh.lh_ver = this.getU8();
      this.skip(3);
      lh.lh_dseg_len = this.getLength();
      lh.lh_flst_len = this.getLength();
      lh.lh_dseg_off = this.getOffset();
      if (this.getMetadata("debug")) {
        console.log("LHEAP V" + lh.lh_ver + " " + lh.lh_dseg_len + " " + lh.lh_flst_len + " " + lh.lh_dseg_off);
      }
      return lh;
    }

    /**
    * [PRIVATE]
    *
    * Process a "dataspace" message. Dataspaces define the
    * dimensionality of a dataset or attribute. They define the
    * number of dimensions (rank) and the current length of each
    * dimension. It is possible to specify a "maximum" length that is
    * greater than or equal to the current length, but MINC doesn't
    * rely on that feature so these values are ignored.  Finally it
    * is also possible to specify a "permutation index" that alters
    * storage order of the dataset, but again, MINC doesn't rely on
    * this feature, so the values are ignored.
    */

  }, {
    key: 'hdf5MsgDataspace',
    value: function hdf5MsgDataspace(sz, link) {
      var cb;
      var ver = this.getU8();
      var n_dim = this.getU8();
      var flag = this.getU8();
      if (ver <= 1) {
        this.skip(5);
      } else {
        this.skip(1);
      }

      var n_items = 1;
      var dlen = [];
      var i;
      for (i = 0; i < n_dim; i += 1) {
        dlen[i] = this.getLength();
        n_items *= dlen[i];
      }

      cb = n_dim * this._superblk.lensz + (ver <= 1 ? 8 : 4);

      var dmax = [];
      if ((flag & 1) !== 0) {
        cb += n_dim * this._superblk.lensz;
        for (i = 0; i < n_dim; i += 1) {
          dmax[i] = this.getLength();
        }
      }

      var dind = [];
      if ((flag & 2) !== 0) {
        cb += n_dim * this._superblk.lensz;
        for (i = 0; i < n_dim; i += 1) {
          dind[i] = this.getLength();
        }
      }
      var msg = "this.hdf5MsgDataspace V" + ver + " N" + n_dim + " F" + flag;
      if (this.getMetadata("debug")) {
        if (n_dim !== 0) {
          msg += "[" + dlen.join(', ') + "]";
        }
        console.log(msg);
      }
      if (cb < sz) {
        this.skip(sz - cb);
      }
      if (link) {
        link.dims = dlen;
      }
      return n_items;
    }

    /**
    * [PRIVATE]
    *
    *
    * link info messages may contain a fractal heap address where we
    * can find additional link messages for this object. This
    * happens, for example, when there are lots of links in a
    * particular group.
    */

  }, {
    key: 'hdf5MsgLinkInfo',
    value: function hdf5MsgLinkInfo(link) {
      var that = this;

      var ver = this.getU8();
      var flags = this.getU8();
      if ((flags & 1) !== 0) {
        this.getU64(); // max. creation index (IGNORE).
      }
      var fh_address = this.getOffset(); // fractal heap address
      var bt_address = this.getOffset(); // v2 btree for name index
      if ((flags & 2) !== 0) {
        this.getOffset(); // creation order index (IGNORE).
      }
      if (this.getMetadata("debug")) {
        console.log("this.hdf5MsgLinkInfo V" + ver + " F" + flags + " FH " + fh_address + " BT " + bt_address);
      }
      var spp = this.tell();
      if (fh_address < this._superblk.eof_addr) {
        this.seek(fh_address);
        /* If there is a valid fractal heap address in the link info message, that
         * means the fractal heap is a collection of link messages. We can ignore
         * the btree address because we can get the names from the link messages.
         */
        var fh = this.hdf5FractalHeapHeader();
        var n_msg = 0;
        this.hdf5FractalHeapEnumerate(fh, function (row, address, block_offset, block_length) {
          var end_address = address + block_length;
          while (n_msg < fh.heap_nobj && that.tell() < end_address) {
            that.hdf5MsgLink(link);
            n_msg += 1;
          }
          return true; // continue with enumeration.
        });
      }
      this.seek(spp);
    }

    /**
    * [PRIVATE]
    */

  }, {
    key: 'dt_class_name',
    value: function dt_class_name(cls) {
      var names = ["Fixed-Point", "Floating-Point", "Time", "String", "BitField", "Opaque", "Compound", "Reference", "Enumerated", "Variable-Length", "Array"];

      if (cls < names.length) {
        return names[cls];
      }
      throw new Error('Unknown datatype class: ' + cls);
    }

    /**
    * [PRIVATE]
    *
    * Process a "datatype" message. These messages specify the data
    * type of a single element within a dataset or attribute. Data
    * types are extremely flexible, HDF5 supports a range of options
    * for bit widths and organization atomic types. We support only
    * fixed, float, and string atomic types, and those only for
    * certain restricted (but common) cases.  At this point we
    * provide no support for more exotic types such as bit field,
    * enumerated, array, opaque, compound, time, reference,
    * variable-length, etc.
    *
    * TODO: should support enumerated types, possibly a few others.
    */

  }, {
    key: 'hdf5MsgDatatype',
    value: function hdf5MsgDatatype(sz) {
      var type = {};
      var cb = 8;
      var msg = "";
      var bit_offs;
      var bit_prec;
      var exp_loc;
      var exp_sz;
      var mnt_loc;
      var mnt_sz;
      var exp_bias;

      var cv = this.getU8();
      var ver = cv >> 4;
      var cls = cv & 15;
      var bf = [];
      var i;
      for (i = 0; i < 3; i += 1) {
        bf[i] = this.getU8();
      }
      var dt_size = this.getU32();

      if (this.getMetadata("debug")) {
        console.log("this.hdf5MsgDatatype V" + ver + " C" + cls + " " + this.dt_class_name(cls) + " " + bf[0] + "." + bf[1] + "." + bf[2] + " " + dt_size);
      }

      switch (cls) {
        case 0:
          /* Fixed (integer): bit 0 for byte order, bit 3 for signed */
          bit_offs = this.getU16();
          bit_prec = this.getU16();
          switch (dt_size) {
            case 4:
              type.typ_type = bf[0] & 8 ? this._type_enum.INT32 : this._type_enum.UINT32;
              break;
            case 2:
              type.typ_type = bf[0] & 8 ? this._type_enum.INT16 : this._type_enum.UINT16;
              break;
            case 1:
              type.typ_type = bf[0] & 8 ? this._type_enum.INT8 : this._type_enum.UINT8;
              break;
            default:
              throw new Error('Unknown type size ' + dt_size);
          }
          type.typ_length = dt_size;
          cb += 4;
          if (this.getMetadata("debug")) {
            console.log('  (' + bit_offs + ' ' + bit_prec + ')');
          }
          break;
        case 1:
          /* Float: uses bits 0,6 for byte order */
          msg = "";
          if (this.getMetadata("debug")) {
            switch (bf[0] & 0x41) {
              case 0:
                msg += "LE ";
                break;
              case 1:
                msg += "BE ";
                break;
              case 0x41:
                msg += "VX ";
                break;
              default:
                throw new Error('Reserved fp byte order: ' + bf[0]);
            }
          }
          bit_offs = this.getU16();
          bit_prec = this.getU16();
          exp_loc = this.getU8();
          exp_sz = this.getU8();
          mnt_loc = this.getU8();
          mnt_sz = this.getU8();
          exp_bias = this.getU32();
          if (this.getMetadata("debug")) {
            msg += bit_offs + " " + bit_prec + " " + exp_loc + " " + exp_sz + " " + mnt_loc + " " + mnt_sz + " " + exp_bias;
          }
          /* See if it's one of the formats we recognize.
             IEEE 64-bit or IEEE 32-bit are the only two we handle.
          */
          if (bit_prec === 64 && bit_offs === 0 && exp_loc === 52 && exp_sz === 11 && mnt_loc === 0 && mnt_sz === 52 && exp_bias === 1023 && dt_size === 8) {
            type.typ_type = this._type_enum.DBL;
          } else if (bit_prec === 32 && bit_offs === 0 && exp_loc === 23 && exp_sz === 8 && mnt_loc === 0 && mnt_sz === 23 && exp_bias === 127 && dt_size === 4) {
            type.typ_type = this._type_enum.FLT;
          } else {
            throw new Error("Unsupported floating-point type");
          }
          if (this.getMetadata("debug")) {
            console.log(msg);
          }
          type.typ_length = dt_size;
          cb += 12;
          break;

        case 3:
          // string
          /* bits 0-3 = 0: null terminate, 1: null pad, 2: space pad */
          /* bits 4-7 = 0: ASCII, 1: UTF-8 */
          type.typ_type = this._type_enum.STR;
          type.typ_length = dt_size;
          break;

        default:
          throw new Error('Unimplemented HDF5 data class ' + cls);
      }
      if (sz > cb) {
        this.skip(sz - cb);
      }
      return type;
    }

    /**
    * [PRIVATE]
    *
    * Process a "layout" message. These messages specify the location and organization
    * of data in a dataset. The organization can be either compact, contiguous, or
    * chunked. Compact data is stored in the message as a contiguous block. Contiguous
    * data is stored elsewhere in the file in a single chunk. Chunked data is stored within
    * a V1 Btree as a series of possibly filtered (e.g. compressed) chunks.
    */

  }, {
    key: 'hdf5MsgLayout',
    value: function hdf5MsgLayout(link) {
      var msg = "";

      var ver = this.getU8();
      var cls;
      var n_dim;
      var cdsz;
      var dim = [];
      var i;
      var dtadr;
      var dtsz;
      var elsz;

      var n_items = 1;
      if (ver === 1 || ver === 2) {
        n_dim = this.getU8();
        cls = this.getU8();
        this.skip(5);
        if (this.getMetadata("debug")) {
          msg += "this.hdf5MsgLayout V" + ver + " N" + n_dim + " C" + cls;
        }
        if (cls === 1 || cls === 2) {
          // contiguous or chunked
          var addr = this.getOffset();
          if (this.getMetadata("debug")) {
            msg += " A" + addr;
          }
          link.data_offset = addr;
        }

        for (i = 0; i < n_dim; i += 1) {
          dim[i] = this.getU32();
          n_items *= dim[i];
        }

        if (this.getMetadata("debug")) {
          msg += "[" + dim.join(', ') + "]";
        }

        if (cls === 2) {
          // chunked
          elsz = this.getU32();
          link.chunk_size = n_items * elsz;
          if (this.getMetadata("debug")) {
            msg += " E" + elsz;
          }
        }
        if (cls === 0) {
          // compact
          cdsz = this.getU32();
          if (this.getMetadata("debug")) {
            msg += "(" + cdsz + ")";
          }
          link.data_offset = this.tell();
          link.data_length = cdsz;
        } else if (cls === 1) {
          link.data_length = n_items;
        }
      } else if (ver === 3) {
        cls = this.getU8();
        msg = "this.hdf5MsgLayout V" + ver + " C" + cls;

        if (cls === 0) {
          cdsz = this.getU16();
          if (this.getMetadata("debug")) {
            msg += "(" + cdsz + ")";
          }
          link.data_offset = this.tell();
          link.data_length = cdsz;
        } else if (cls === 1) {
          dtadr = this.getOffset();
          dtsz = this.getLength();
          if (this.getMetadata("debug")) {
            msg += "(" + dtadr + ", " + dtsz + ")";
          }
          link.data_offset = dtadr;
          link.data_length = dtsz;
        } else if (cls === 2) {
          n_dim = this.getU8();
          dtadr = this.getOffset();
          link.data_offset = dtadr;
          link.chunk_size = 1;
          for (i = 0; i < n_dim - 1; i += 1) {
            dim[i] = this.getU32();
            n_items *= dim[i];
          }
          if (this.getMetadata("debug")) {
            msg += "(N" + n_dim + ", A" + dtadr + " [" + dim.join(',') + "]";
          }
          elsz = this.getU32();
          link.chunk_size = n_items * elsz;
          if (this.getMetadata("debug")) {
            msg += " E" + elsz;
          }
        }
      } else {
        throw new Error("Illegal layout version " + ver);
      }
      if (this.getMetadata("debug")) {
        console.log(msg);
      }
    }

    /**
    * [PRIVATE]
    *
    * Read a "filter pipeline" message. At the moment we _only_ handle
    * deflate/inflate. Anything else will cause us to throw an exception.
    */

  }, {
    key: 'hdf5MsgPipeline',
    value: function hdf5MsgPipeline(link) {
      var ver = this.getU8();
      var nflt = this.getU8();

      var msg = "this.hdf5MsgPipeline V" + ver + " N" + nflt;
      if (ver === 1) {
        this.skip(6);
      }

      if (this.getMetadata("debug")) {
        console.log(msg);
      }

      var i;
      var fiv;
      var nlen;
      var flags;
      var ncdv;
      for (i = 0; i < nflt; i += 1) {
        fiv = this.getU16();
        if (fiv !== 1) {
          /* deflate */
          throw new Error("Unimplemented HDF5 filter " + fiv);
        } else {
          if ((typeof index$1 === 'undefined' ? 'undefined' : _typeof(index$1)) !== 'object') {
            throw new Error('Need pako to inflate data.');
          }
          link.inflate = true;
        }
        if (ver === 1 || fiv > 256) {
          nlen = this.getU16();
        } else {
          nlen = 0;
        }

        flags = this.getU16();
        ncdv = this.getU16();
        if ((ncdv & 1) !== 0) {
          ncdv += 1;
        }
        if (nlen !== 0) {
          this.skip(nlen); // ignore name.
        }

        this.skip(ncdv * 4);

        if (this.getMetadata("debug")) {
          console.log("  " + i + " ID" + fiv + " F" + flags + " " + ncdv);
        }
      }
    }

    /**
    * [PRIVATE]
    *
    * Process an "attribute" message. This actually defines an attribute that is
    * to be associated with a group or dataset (what I generally call a "link"
    * in this code. Attributes include a name, a datatype, and a dataspace, followed
    * by the actual data.
    */

  }, {
    key: 'hdf5MsgAttribute',
    value: function hdf5MsgAttribute(sz, link) {
      var ver = this.getU8();
      var flags = this.getU8();
      var nm_len = this.getU16();
      var dt_len = this.getU16();
      var ds_len = this.getU16();
      var msg = "this.hdf5MsgAttribute V" + ver + " F" + flags + " " + sz + ": ";

      if ((flags & 3) !== 0) {
        throw new Error('Shared dataspaces and datatypes are not supported.');
      }

      if (ver === 3) {
        var cset = this.getU8();
        if (this.getMetadata("debug")) {
          msg += cset === 0 ? "ASCII" : "UTF-8";
        }
      }
      if (this.getMetadata("debug")) {
        msg += "(" + nm_len + " " + dt_len + " " + ds_len + ")";
      }
      if (ver < 3) {
        nm_len = Math.floor((nm_len + 7) / 8) * 8;
        dt_len = Math.floor((dt_len + 7) / 8) * 8;
        ds_len = Math.floor((ds_len + 7) / 8) * 8;

        if (this.getMetadata("debug")) {
          msg += "/(" + nm_len + " " + dt_len + " " + ds_len + ")";
        }
      }

      var att_name = this.getString(nm_len);
      if (this.getMetadata("debug")) {
        msg += " Name: " + att_name;
        console.log(msg);
      }
      var val_type = this.hdf5MsgDatatype(dt_len);
      var n_items = this.hdf5MsgDataspace(ds_len);
      var val_len = 0;
      if (sz > 0) {
        if (ver < 3) {
          val_len = sz - (8 + nm_len + dt_len + ds_len);
        } else {
          val_len = sz - (9 + nm_len + dt_len + ds_len);
        }
      } else {
        val_len = val_type.typ_length * n_items;
      }
      if (this.getMetadata("debug")) {
        console.log("  attribute data size " + val_len + " " + this.tell());
      }
      var att_value;
      if (val_type.typ_type === this._type_enum.STR) {
        att_value = this.getString(val_len);
      } else {
        att_value = this.getArray(val_type.typ_type, val_len);
      }
      link.attributes[att_name] = att_value;
    }

    /**
    * [PRIVATE]
    *
    * Process a "group info" message. We don't actually do anything with these.
    */

  }, {
    key: 'hdf5MsgGroupInfo',
    value: function hdf5MsgGroupInfo() {
      var n_ent = 4;
      var n_lnl = 8;
      var ver = this.getU8();
      var flags = this.getU8();
      if ((flags & 1) !== 0) {
        this.getU16(); // link phase change: max compact value (IGNORE)
        this.getU16(); // link phase cange: max dense value (IGNORE)
      }
      if ((flags & 2) !== 0) {
        n_ent = this.getU16();
        n_lnl = this.getU16();
      }
      if (this.getMetadata("debug")) {
        console.log("this.hdf5MsgGroupInfo V" + ver + " F" + flags + " ENT " + n_ent + " LNL " + n_lnl);
      }
    }

    /**
    * [PRIVATE]
    *
    * Process a "link" message. This specifies the name and header location of either a
    * group or a dataset within the current group. It is probably also used to implement
    * internal links but we don't really support that.
    */

  }, {
    key: 'hdf5MsgLink',
    value: function hdf5MsgLink(link) {
      var ver = this.getU8();
      var ltype = 0;
      if (ver !== 1) {
        throw new Error("Bad link message version " + ver);
      }
      var flags = this.getU8();
      if ((flags & 8) !== 0) {
        ltype = this.getU8();
      }
      if ((flags & 4) !== 0) {
        this.getU64(); // creation order (IGNORE)
      }
      if ((flags & 16) !== 0) {
        this.getU8(); // link name character set (IGNORE)
      }
      var cb = 1 << (flags & 3);
      var lnsz = this.getUXX(cb);

      var child = this.createLink();

      child.name = this.getString(lnsz);

      if ((flags & 8) === 0) {
        child.hdr_offset = this.getOffset();
      }

      if (this.getMetadata("debug")) {
        console.log("this.hdf5MsgLink V" + ver + " F" + flags + " T" + ltype + " NM " + child.name + " OF " + child.hdr_offset);
      }
      link.children.push(child);
    }

    /**
    * [PRIVATE]
    *
    * The fractal heap direct block contains:
    * 1. A signature.
    * 2. a byte version.
    * 3. an offset pointing to the header (for integrity checking).
    * 4. A variably-sized block offset that gives (_I think_) the mininum block offset
    * associated with this block.
    * 5. Variably-sized data. Block size varies with row number in a slightly tricky
    * fashion. Each "row" consists of "table_width" blocks. The first two rows, row 0 and 1,
    * have blocks of the "starting block size". Row 2-N have blocks of size 2^(row-1) times
    * the starting block size.
    */

  }, {
    key: 'hdf5FractalHeapDirectBlock',
    value: function hdf5FractalHeapDirectBlock(fh, row, address, callback) {
      if (!this.checkSignature("FHDB")) {
        throw new Error("Bad or missing FHDB signature");
      }
      var ver = this.getU8();
      if (ver !== 0) {
        throw new Error('Bad FHDB version: ' + ver);
      }
      this.getOffset(); // heap header address (IGNORE)
      var cb = Math.ceil(fh.max_heapsz / 8.0);
      var block_offset = this.getUXX(cb); // block offset
      if ((fh.flags & 2) !== 0) {
        this.getU32(); // checksum (IGNORE)
      }

      if (this.getMetadata("debug")) {
        console.log("FHDB V:" + ver + " R:" + row + " O:" + block_offset + " A:" + address);
      }
      var block_length;
      if (row <= 1) {
        block_length = fh.start_blksz;
      } else {
        block_length = Math.pow(2, row - 1) * fh.start_blksz;
      }
      if (callback) {
        return callback(row, address, block_offset, block_length);
      } else {
        return true; // continue enumeration.
      }
    }

    /**
    * [PRIVATE]
    *
    * The fractal heap indirect block contains:
    * 1. A signature.
    * 2. a byte version
    * 3. an offset pointing to the header (for integrity checking).
    * 4. a variably-sized block offset that gives (_I think_) the mininum block offset
    * associated with children of this block.
    * 5. pointers to K direct blocks
    * 6. pointers to N indirect blocks
    * 7. A checksum. This code completely ignores checksums.
    * See calculations of K and N in this.hdf5FractalHeapHeader(). Note that there can also
    * be additional information in the header if "filtered" direct blocks are used. I have
    * made no attempt to support this.
    */

  }, {
    key: 'hdf5FractalHeapIndirectBlock',
    value: function hdf5FractalHeapIndirectBlock(fh, callback) {
      if (!this.checkSignature("FHIB")) {
        throw new Error("Bad or missing FHIB signature");
      }
      var ver = this.getU8();
      if (ver !== 0) {
        throw new Error('Bad FHIB version: ' + ver);
      }
      this.getOffset(); // heap header address (IGNORE)
      var cb = Math.ceil(fh.max_heapsz / 8.0);
      var block_offset = this.getUXX(cb); // block offset

      if (this.getMetadata("debug")) {
        console.log("FHIB V:" + ver + " O:" + block_offset);
      }
      var i;
      var address;
      var db_addrs = [];
      for (i = 0; i < fh.K; i += 1) {
        address = this.getOffset();
        if (address < this._superblk.eof_addr) {
          if (this.getMetadata("debug")) {
            console.log("direct block at " + address);
          }
          db_addrs.push(address);
        }
      }

      var ib_addrs = [];
      for (i = 0; i < fh.N; i += 1) {
        address = this.getOffset();
        if (address < this._superblk.eof_addr) {
          if (this.getMetadata("debug")) {
            console.log("indirect block at " + address);
          }
          ib_addrs.push(address);
        }
      }
      this.getU32(); // checksum (IGNORE)

      /* Finished reading the indirect block, now go read its children.
       */
      for (i = 0; i < db_addrs.length; i++) {
        this.seek(db_addrs[i]);
        /* TODO: check row calculation!
         */
        if (!this.hdf5FractalHeapDirectBlock(fh, i / fh.table_width, db_addrs[i], callback)) {
          return false;
        }
      }
      for (i = 0; i < ib_addrs.length; i++) {
        this.seek(ib_addrs[i]);
        if (!this.hdf5FractalHeapIndirectBlock(fh, callback)) {
          return false;
        }
      }
      return true;
    }

    /**
    * [PRIVATE]
    *
    * enumerate over all of the direct blocks in the fractal heap.
    */

  }, {
    key: 'hdf5FractalHeapEnumerate',
    value: function hdf5FractalHeapEnumerate(fh, callback) {
      this.seek(fh.root_addr);
      if (fh.K === 0) {
        this.hdf5FractalHeapDirectBlock(fh, 0, fh.root_addr, callback);
      } else {
        this.hdf5FractalHeapIndirectBlock(fh, callback);
      }
    }

    /**
    * [PRIVATE]
    */

  }, {
    key: 'hdf5FractalHeapOffset',
    value: function hdf5FractalHeapOffset(fh, offset) {
      var location;
      this.hdf5FractalHeapEnumerate(fh, function (row, address, block_offset, block_length) {
        if (offset >= block_offset && offset < block_offset + block_length) {
          location = address + (offset - block_offset);
          return false; // stop enumeration.
        }
        return true; // continue enumeration.
      });
      return location;
    }

    /**
    * [PRIVATE]
    *
    * Attribute info messages contain pointers to a fractal heap and a v2 btree.
    * If these pointers are valid, we must follow them to find more attributes.
    * The attributes are indexed by records in the "type 8" btree. These btree
    * records
    */

  }, {
    key: 'hdf5MsgAttrInfo',
    value: function hdf5MsgAttrInfo(link) {
      var ver = this.getU8();
      if (ver !== 0) {
        throw new Error('Bad attribute information message version: ' + ver);
      }

      var flags = this.getU8();

      if ((flags & 1) !== 0) {
        this.getU16(); // maximum creation index (IGNORE)
      }
      var fh_addr = this.getOffset();
      var bt_addr = this.getOffset();
      if ((flags & 2) !== 0) {
        this.getOffset(); // attribute creation order (IGNORE)
      }

      if (this.getMetadata("debug")) {
        console.log("this.hdf5MsgAttrInfo V" + ver + " F" + flags + " HP " + fh_addr + " AN " + bt_addr);
      }

      var spp = this.tell();
      var fh; // fractal heap header.
      if (fh_addr < this._superblk.eof_addr) {
        this.seek(fh_addr);
        fh = this.hdf5FractalHeapHeader();
      }
      if (bt_addr < this._superblk.eof_addr) {
        this.seek(bt_addr);
        var bh = this.hdf5V2BtreeHeader();
        if (bh.type !== 8) {
          throw new Error("Can only handle indexed attributes.");
        }
        this.seek(bh.root_addr);
        if (bh.depth > 0) {
          this.hdf5V2BtreeInternalNode(fh, bh.root_nrec, bh.depth, link);
        } else {
          this.hdf5V2BtreeLeafNode(fh, bh.root_nrec, link);
        }
      }
      this.seek(spp);
    }

    /**
    * [PRIVATE]
    *
    * Process a single message, given a message header. Assumes that
    * the data view offset is pointing to the remainder of the
    * message.
    *
    * V1 and V2 files use different sets of messages to accomplish
    * similar things. For example, V1 files tend to use "symbol
    * table" messages to describe links within a group, whereas V2
    * files use "link" and "linkinfo" messages.
    */

  }, {
    key: 'hdf5ProcessMessage',
    value: function hdf5ProcessMessage(msg, link) {
      var cq_new = {};
      var val_type;

      switch (msg.hm_type) {
        case 1:
          this.hdf5MsgDataspace(msg.hm_size, link);
          break;
        case 2:
          this.hdf5MsgLinkInfo(link);
          break;
        case 3:
          val_type = this.hdf5MsgDatatype(msg.hm_size);
          if (link) {
            link.type = val_type.typ_type;
          }
          break;
        case 6:
          this.hdf5MsgLink(link);
          break;
        case 8:
          this.hdf5MsgLayout(link);
          break;
        case 10:
          this.hdf5MsgGroupInfo();
          break;
        case 11:
          this.hdf5MsgPipeline(link);
          break;
        case 12:
          this.hdf5MsgAttribute(msg.hm_size, link);
          break;
        case 16:
          /* Process an object header continuation message. These
           * basically just say this header continues with a new segment
           * with a given location and length. They can come before the
           * end of the current message segment, and multiple
           * continuation messages can occur in any particular segment.
           * This means we have to enqueue them and shift them off the
           * queue when we finish processing the current segment.
           */
          cq_new.cq_off = this.getOffset();
          cq_new.cq_len = this.getLength();
          this._continuation_queue.push(cq_new);
          if (this.getMetadata("debug")) {
            console.log("hdf5MsgObjHdrContinue " + cq_new.cq_off + " " + cq_new.cq_len);
          }
          break;
        case 17:
          // SymbolTable
          link.sym_btree = this.getOffset();
          link.sym_lheap = this.getOffset();
          if (this.getMetadata("debug")) {
            console.log("hdf5MsgSymbolTable " + link.sym_btree + " " + link.sym_lheap);
          }
          break;
        case 21:
          this.hdf5MsgAttrInfo(link);
          break;
        case 0:
        case 4:
        case 5:
        case 7:
        case 18:
        case 19:
        case 20:
        case 22:
        case 24:
          this.skip(msg.hm_size);
          break;
        default:
          throw new Error('Unknown message type: ' + msg.hm_type);
      }
    }

    /**
    * [PRIVATE]
    *
    * Read a V2 object header. Object headers contain a series of messages that define
    * an HDF5 object, primarily a group or a dataset. V2 object headers, and V2 objects
    * generally, are much less concerned about alignment than V1 objects.
    */

  }, {
    key: 'hdf5V2ObjectHeader',
    value: function hdf5V2ObjectHeader(link) {
      if (!this.checkSignature("OHDR")) {
        throw new Error('Bad or missing OHDR signature');
      }

      var that = this;
      var ver = this.getU8();
      var flags = this.getU8();

      if ((flags & 0x20) !== 0) {
        this.getU32(); // access time (IGNORE)
        this.getU32(); // modify time (IGNORE)
        this.getU32(); // change time (IGNORE)
        this.getU32(); // birth time (IGNORE)
      }

      if ((flags & 0x10) !== 0) {
        this.getU16(); // maximum number of compact attributes (IGNORE)
        this.getU16(); // maximum number of dense attributes (IGNORE)
      }

      var cb = 1 << (flags & 3);
      var ck0_size = this.getUXX(cb);

      var msg_num = 0;
      var msg_offs = 0;
      var msg_bytes = ck0_size;

      if (this.getMetadata("debug")) {
        console.log("this.hdf5V2ObjectHeader V" + ver + " F" + flags + " HS" + ck0_size);
      }

      var hmsg;
      var cq_head;
      var spp;

      while (true) {
        while (msg_bytes - msg_offs >= 8) {
          hmsg = {};
          hmsg.hm_type = this.getU8();
          hmsg.hm_size = this.getU16();
          hmsg.hm_flags = this.getU8();
          if (this.getMetadata("debug")) {
            console.log("  msg" + msg_num + " F" + hmsg.hm_flags + " T " + hmsg.hm_type + " S " + hmsg.hm_size + " (" + msg_offs + "/" + msg_bytes + ") " + this.hdf5GetMsgName(hmsg.hm_type));
          }
          if ((flags & 0x04) !== 0) {
            hmsg.hm_corder = this.getU16();
          }
          spp = this.tell();
          this.hdf5ProcessMessage(hmsg, link);
          this.seek(spp + hmsg.hm_size); // this.skip past message.

          msg_offs += hmsg.hm_size + 4;

          msg_num += 1;
        }

        if (msg_bytes - msg_offs > 4) {
          this.skip(msg_bytes - (msg_offs + 4));
        }

        this.getU32(); // checksum (IGNORE)

        if (this._continuation_queue.length !== 0) {
          cq_head = this._continuation_queue.shift();
          this.seek(cq_head.cq_off);
          msg_bytes = cq_head.cq_len - 4;
          msg_offs = 0;
          if (this.getMetadata("debug")) {
            console.log('continuing with ' + cq_head.cq_len + ' bytes at ' + this.tell());
          }
          if (!this.checkSignature("OCHK")) {
            throw new Error("Bad v2 object continuation");
          }
        } else {
          break;
        }
      }

      link.children.forEach(function (child, link_num) {
        that.seek(child.hdr_offset);
        if (that.getMetadata("debug")) {
          console.log(link_num + " " + child.hdr_offset + " " + child.name);
        }
        if (that.checkSignature("OHDR")) {
          that.seek(child.hdr_offset);
          that.hdf5V2ObjectHeader(child);
        } else {
          that.seek(child.hdr_offset);
          that.hdf5V1ObjectHeader(child);
        }
      });
    }

    /**
    * [PRIVATE]
    */

  }, {
    key: 'loadData',
    value: function loadData(link) {
      var that = this;

      if (link.chunk_size !== 0) {
        this.seek(link.data_offset);

        var n_bytes = 1;
        var i;
        for (i = 0; i < link.dims.length; i += 1) {
          n_bytes *= link.dims[i];
        }
        n_bytes *= this.typeSize(link.type);
        if (this.getMetadata("debug")) {
          console.log('allocating ' + n_bytes + ' bytes');
        }
        var ab = new ArrayBuffer(n_bytes);
        link.n_filled = 0;
        switch (link.type) {
          case this._type_enum.INT8:
            link.array = new Int8Array(ab);
            break;
          case this._type_enum.UINT8:
            link.array = new Uint8Array(ab);
            break;
          case this._type_enum.INT16:
            link.array = new Int16Array(ab);
            break;
          case this._type_enum.UINT16:
            link.array = new Uint16Array(ab);
            break;
          case this._type_enum.INT32:
            link.array = new Int32Array(ab);
            break;
          case this._type_enum.UINT32:
            link.array = new Uint32Array(ab);
            break;
          case this._type_enum.FLT:
            link.array = new Float32Array(ab);
            break;
          case this._type_enum.DBL:
            link.array = new Float64Array(ab);
            break;
          default:
            throw new Error('Illegal type: ' + link.type);
        }
        this.hdf5V1BtreeNode(link);
      } else {
        if (link.data_offset > 0 && link.data_offset < this._superblk.eof_addr) {
          if (this.getMetadata("debug")) {
            console.log('loading ' + link.data_length + ' bytes from ' + link.data_offset + ' to ' + link.name);
          }
          link.array = this.getArray(link.type, link.data_length, link.data_offset);
        } else {
          if (this.getMetadata("debug")) {
            console.log('data not present for /' + link.name + '/');
          }
        }
      }

      link.children.forEach(function (child) {
        that.loadData(child);
      });
    }

    /**
    * [PRIVATE]
    *
    * Read a v1 object header. Object headers contain a series of
    * messages that define an HDF5 object, primarily a group or a
    * dataset. The v1 object header, like most of the v1 format, is
    * very careful about alignment. Every message must be on an
    * 8-byte alignment RELATIVE TO THE START OF THE HEADER. So if the
    * header starts on an odd boundary, messages may start on odd
    * boundaries as well. No, this doesn't make much sense.
    */

  }, {
    key: 'hdf5V1ObjectHeader',
    value: function hdf5V1ObjectHeader(link) {
      var that = this;
      var oh = {};
      this.startAlignment();
      oh.oh_ver = this.getU8();
      this.skip(1); // reserved
      oh.oh_n_msgs = this.getU16();
      oh.oh_ref_cnt = this.getU32();
      oh.oh_hdr_sz = this.getU32();
      if (oh.oh_ver !== 1) {
        throw new Error("Bad v1 object header version: " + oh.oh_ver);
      }
      if (this.getMetadata("debug")) {
        console.log("this.hdf5V1ObjectHeader V" + oh.oh_ver + " #M " + oh.oh_n_msgs + " RC " + oh.oh_ref_cnt + " HS " + oh.oh_hdr_sz);
      }

      var msg_bytes = oh.oh_hdr_sz;
      var cq_head;
      var msg_num;
      var hmsg;
      var spp;

      for (msg_num = 0; msg_num < oh.oh_n_msgs; msg_num += 1) {
        if (msg_bytes <= 8) {
          if (this._continuation_queue.length !== 0) {
            cq_head = this._continuation_queue.shift();
            this.seek(cq_head.cq_off);
            msg_bytes = cq_head.cq_len;
            if (this.getMetadata("debug")) {
              console.log('continuing with ' + msg_bytes + ' bytes at ' + this.tell());
            }
            this.startAlignment();
          } else {
            break;
          }
        }

        this.checkAlignment();

        hmsg = {};
        hmsg.hm_type = this.getU16();
        hmsg.hm_size = this.getU16();
        hmsg.hm_flags = this.getU8();

        if (hmsg.hm_size % 8 !== 0) {
          throw new Error('Size is not 8-byte aligned: ' + hmsg.hm_size);
        }
        this.skip(3); // this.skip reserved
        msg_bytes -= 8 + hmsg.hm_size;
        if (this.getMetadata("debug")) {
          console.log("  msg" + msg_num + " F " + hmsg.hm_flags + " T " + hmsg.hm_type + " S " + hmsg.hm_size + "(" + msg_bytes + ") " + this.hdf5GetMsgName(hmsg.hm_type));
        }

        spp = this.tell();
        this.hdf5ProcessMessage(hmsg, link);
        this.seek(spp + hmsg.hm_size); // this.skip whole message.
      }

      if (link.sym_btree !== 0 && link.sym_lheap !== 0) {
        this.seek(link.sym_btree);
        var bt = this.hdf5V1BtreeNode();
        this.seek(link.sym_lheap);
        var lh = this.hdf5LocalHeap();
        var i;
        for (i = 0; i < bt.entries_used; i += 1) {
          this.seek(bt.keys[i].child_address);
          if (this.checkSignature("SNOD")) {
            this.seek(bt.keys[i].child_address);
            this.hdf5GroupSymbolTable(lh, link);
          } else {
            this.seek(bt.keys[i].child_address);
            this.hdf5V1ObjectHeader(link);
          }
        }

        link.children.forEach(function (child) {
          that.seek(child.hdr_offset);
          that.hdf5V1ObjectHeader(child);
        });
      }
    }

    //------------------------------------------------------------------------------
    //      FROM hdf5_tools.js

  }, {
    key: 'getTypeMatchMinc',
    value: function getTypeMatchMinc(typeEnumVal) {
      return this._type_matching[typeEnumVal - 1];
    }
  }, {
    key: 'defined',
    value: function defined(x) {
      return typeof x !== 'undefined';
    }
  }, {
    key: 'typeName',
    value: function typeName(x) {
      if (!this.defined(x)) {
        return "undefined";
      }
      return x.constructor.name;
    }
  }, {
    key: 'typeSize',
    value: function typeSize(typ) {
      if (typ >= this._type_enum.INT8 && typ < this.type_sizes.length) {
        return this.type_sizes[typ];
      }
      throw new Error('Unknown type ' + typ);
    }
  }, {
    key: 'typeIsFloat',
    value: function typeIsFloat(typ) {
      return typ >= this._type_enum.FLT && typ <= this._type_enum.DBL;
    }

    /*
     * The remaining code after this point is not truly HDF5 specific -
     * it's mostly about converting the MINC file into the form
     * BrainBrowser is able to use. Therefore it is used for both HDF5
     * and NetCDF files.
     */

    /*
     * Join does not seem to be defined on the typed arrays in
     * javascript, so I've re-implemented it here, sadly.
     */

  }, {
    key: 'join',
    value: function join(array, string) {
      var result = "";
      if (array && array.length) {
        var i;
        for (i = 0; i < array.length - 1; i += 1) {
          result += array[i];
          result += string;
        }
        result += array[i];
      }
      return result;
    }

    /*
     * Recursively print out the structure and contents of the file.
     * Primarily useful for debugging.
     */

  }, {
    key: 'printStructure',
    value: function printStructure(link, level) {
      var that = this;

      var i;
      var msg = "";
      for (i = 0; i < level * 2; i += 1) {
        msg += " ";
      }
      msg += link.name + (link.children.length ? "/" : "");
      if (link.type > 0) {
        msg += ' ' + this.typeName(link.array);
        if (link.dims.length) {
          msg += '[' + link.dims.join(', ') + ']';
        }
        if (link.array) {
          msg += ":" + link.array.length;
        } else {
          msg += " NULL";
        }
      }
      console.log(msg);

      Object.keys(link.attributes).forEach(function (name) {
        var value = link.attributes[name];

        msg = "";
        for (i = 0; i < level * 2 + 1; i += 1) {
          msg += " ";
        }
        msg += link.name + ':' + name + " " + that.typeName(value) + "[" + value.length + "] ";
        if (typeof value === "string") {
          msg += JSON.stringify(value);
        } else {
          msg += "{" + that.join(value.slice(0, 16), ', ');
          if (value.length > 16) {
            msg += ", ...";
          }
          msg += "}";
        }
        console.log(msg);
      });

      link.children.forEach(function (child) {
        that.printStructure(child, level + 1);
      });
    }

    /* Find a dataset with a given name, by recursively searching through
     * the links. Groups will have 'type' fields of -1, since they contain
     * no data.
     * TODO (maybe): Use associative array for children?
     */

  }, {
    key: 'findDataset',
    value: function findDataset(link, name, level) {
      var that = this;
      var result;
      if (link && link.name === name && link.type > 0) {
        result = link;
      } else {
        link.children.find(function (child) {
          result = that.findDataset(child, name, level + 1);
          return that.defined(result);
        });
      }
      return result;
    }

    /* Find an attribute with a given name.
     */

  }, {
    key: 'findAttribute',
    value: function findAttribute(link, name, level) {
      var that = this;
      var result = link.attributes[name];
      if (result) return result;

      link.children.find(function (child) {
        result = that.findAttribute(child, name, level + 1);
        return that.defined(result);
      });
      return result;
    }

    /**
     * @doc function
     * @name hdf5.this.scaleVoxels
     * @param {object} image The link object corresponding to the image data.
     * @param {object} image_min The link object corresponding to the image-min
     * data.
     * @param {object} image_max The link object corresponding to the image-max
     * data.
     * @param {object} valid_range An array of exactly two items corresponding
     * to the minimum and maximum valid _raw_ voxel values.
     * @param {boolean} debug True if we should print debugging information.
     * @returns A new ArrayBuffer containing the rescaled data.
     * @description
     * Convert the MINC data from voxel to real range. This returns a
     * new buffer that contains the "real" voxel values. It does less
     * work for floating-point volumes, since they don't need scaling.
     *
     * For debugging/testing purposes, also gathers basic voxel statistics,
     * for comparison against mincstats.
     */

  }, {
    key: 'scaleVoxels',
    value: function scaleVoxels(image, image_min, image_max, valid_range, debug) {
      /*
      var new_abuf = new ArrayBuffer(image.array.length *
                                     Float32Array.BYTES_PER_ELEMENT);
      var new_data = new Float32Array(new_abuf);
       */

      // 1D array to store the voxel data,
      // not initialized yet because it depends on the hdf5 type.
      var new_abuf = null;
      var new_data = null;

      // we could simply use image.type, but written types are easier to read...
      switch (this.getTypeMatchMinc(image.type)) {
        case 'int8':
          new_abuf = new ArrayBuffer(image.array.length * Int8Array.BYTES_PER_ELEMENT);
          new_data = new Int8Array(new_abuf);
          break;

        case 'int16':
          new_abuf = new ArrayBuffer(image.array.length * Int16Array.BYTES_PER_ELEMENT);
          new_data = new Int16Array(new_abuf);
          break;

        case 'int32':
          new_abuf = new ArrayBuffer(image.array.length * Int32Array.BYTES_PER_ELEMENT);
          new_data = new Int32Array(new_abuf);
          break;

        case 'float32':
          new_abuf = new ArrayBuffer(image.array.length * Float32Array.BYTES_PER_ELEMENT);
          new_data = new Float32Array(new_abuf);
          break;

        case 'float64':
          new_abuf = new ArrayBuffer(image.array.length * Float64Array.BYTES_PER_ELEMENT);
          new_data = new Float64Array(new_abuf);
          break;

        case 'uint8':
          new_abuf = new ArrayBuffer(image.array.length * Uint8Array.BYTES_PER_ELEMENT);
          new_data = new Uint8Array(new_abuf);
          break;

        case 'uint16':
          new_abuf = new ArrayBuffer(image.array.length * Uint16Array.BYTES_PER_ELEMENT);
          new_data = new Uint16Array(new_abuf);
          break;

        case 'uint32':
          new_abuf = new ArrayBuffer(image.array.length * Uint32Array.BYTES_PER_ELEMENT);
          new_data = new Uint32Array(new_abuf);
          break;

        default:
          var error_message = "Unsupported data type: " + header.datatype;
          console.log({ message: error_message });
          //BrainBrowser.events.triggerEvent("error", { message: error_message } );
          throw new Error(error_message);

      }

      var n_slice_dims = image.dims.length - image_min.dims.length;

      if (n_slice_dims < 1) {
        throw new Error("Too few slice dimensions: " + image.dims.length + " " + image_min.dims.length);
      }
      var n_slice_elements = 1;
      var i;
      for (i = image_min.dims.length; i < image.dims.length; i += 1) {
        n_slice_elements *= image.dims[i];
      }
      if (debug) {
        console.log(n_slice_elements + " voxels in slice.");
      }
      var s = 0;
      var c = 0;
      var x = -Number.MAX_VALUE;
      var n = Number.MAX_VALUE;
      var im = image.array;
      var im_max = image_max.array;
      var im_min = image_min.array;
      if (debug) {
        console.log("valid range is " + valid_range[0] + " to " + valid_range[1]);
      }

      var vrange;
      var rrange;
      var vmin = valid_range[0];
      var rmin;
      var j;
      var v;
      var is_float = this.typeIsFloat(image.type);
      for (i = 0; i < image_min.array.length; i += 1) {
        if (debug) {
          console.log(i + " " + im_min[i] + " " + im_max[i] + " " + im[i * n_slice_elements]);
        }
        if (is_float) {
          /* For floating-point volumes there is no scaling to be performed.
           * We do scan the data and make sure voxels are within the valid
           * range, and collect our statistics.
           */
          for (j = 0; j < n_slice_elements; j += 1) {
            v = im[c];
            if (v < valid_range[0] || v > valid_range[1]) {
              new_data[c] = 0.0;
            } else {
              new_data[c] = v;
              s += v;
              if (v > x) {
                x = v;
              }
              if (v < n) {
                n = v;
              }
            }
            c += 1;
          }
        } else {
          /* For integer volumes we have to scale each slice according to image-min,
           * image-max, and valid_range.
           */
          vrange = valid_range[1] - valid_range[0];
          rrange = im_max[i] - im_min[i];
          rmin = im_min[i];

          /*
          console.log(n_slice_elements);
          console.log(vrange);
          console.log(rrange);
          console.log(rmin);
          console.log("-----------------");
          */

          for (j = 0; j < n_slice_elements; j += 1) {

            // v normalization to avoid "flickering".
            // v is scaled to the range [0, im_max[i]]
            // (possibly uint16 if the original per-slice min-max was not scaled up/down)
            v = (im[c] - vmin) / vrange * rrange + rmin;

            // we scale up/down to match the type of the target array
            v = v / im_max[i] * valid_range[1];

            new_data[c] = v;
            s += v;
            c += 1;
            if (v > x) {
              x = v;
            }
            if (v < n) {
              n = v;
            }
          }
        }
      }

      if (debug) {
        console.log("Min: " + n);
        console.log("Max: " + x);
        console.log("Sum: " + s);
        console.log("Mean: " + s / c);
      }

      return new_abuf;
    }

    /**
     * @doc function
     * @name hdf5.this.isRgbVolume
     * @param {object} header The header object representing the structure
     * of the MINC file.
     * @param {object} image The typed array object used to represent the
     * image data.
     * @returns {boolean} True if this is an RGB volume.
     * @description
     * A MINC volume is an RGB volume if all three are true:
     * 1. The voxel type is unsigned byte.
     * 2. It has a vector_dimension in the last (fastest-varying) position.
     * 3. The vector dimension has length 3.
     */

  }, {
    key: 'isRgbVolume',
    value: function isRgbVolume(header, image) {
      var order = header.order;
      return image.array.constructor.name === 'Uint8Array' && order.length > 0 && order[order.length - 1] === "vector_dimension" && header.vector_dimension.space_length === 3;
    }

    /**
     * @doc function
     * @name hdf5.this.rgbVoxels
     * @param {object} image The 'link' object created using createLink(),
     * that corresponds to the image within the HDF5 or NetCDF file.
     * @returns {object} A new ArrayBuffer that contains the original RGB
     * data augmented with alpha values.
     * @description
     * This function copies the RGB voxels to the destination buffer.
     * Essentially we just convert from 24 to 32 bits per voxel. This
     * is another MINC-specific function.
     */

  }, {
    key: 'rgbVoxels',
    value: function rgbVoxels(image) {
      var im = image.array;
      var n = im.length;
      var new_abuf = new ArrayBuffer(n / 3 * 4);
      var new_byte = new Uint8Array(new_abuf);
      var i,
          j = 0;
      for (i = 0; i < n; i += 3) {
        new_byte[j + 0] = im[i + 0];
        new_byte[j + 1] = im[i + 1];
        new_byte[j + 2] = im[i + 2];
        new_byte[j + 3] = 255;
        j += 4;
      }
      return new_abuf;
    }

    //----------------------------------------------------------------------------
    // FROM minc_reader.js

  }, {
    key: 'parseHeader',
    value: function parseHeader(header_text) {
      var header;
      var error_message;

      try {
        header = JSON.parse(header_text);
      } catch (error) {
        error_message = "server did not respond with valid JSON" + "\n" + "Response was: \n" + header_text;

        console.log({ message: error_message });

        //  BrainBrowser.events.triggerEvent("error", { message: error_message });
        throw new Error(error_message);
      }

      if (header.order.length === 4) {
        header.order = header.order.slice(1);
      }

      header.datatype = header.datatype || "uint8";

      header.xspace.space_length = parseFloat(header.xspace.space_length);
      header.yspace.space_length = parseFloat(header.yspace.space_length);
      header.zspace.space_length = parseFloat(header.zspace.space_length);

      header.xspace.start = parseFloat(header.xspace.start);
      header.yspace.start = parseFloat(header.yspace.start);
      header.zspace.start = parseFloat(header.zspace.start);

      header.xspace.step = parseFloat(header.xspace.step);
      header.yspace.step = parseFloat(header.yspace.step);
      header.zspace.step = parseFloat(header.zspace.step);

      header.xspace.direction_cosines = header.xspace.direction_cosines || [1, 0, 0];
      header.yspace.direction_cosines = header.yspace.direction_cosines || [0, 1, 0];
      header.zspace.direction_cosines = header.zspace.direction_cosines || [0, 0, 1];

      header.xspace.direction_cosines = header.xspace.direction_cosines.map(parseFloat);
      header.yspace.direction_cosines = header.yspace.direction_cosines.map(parseFloat);
      header.zspace.direction_cosines = header.zspace.direction_cosines.map(parseFloat);

      /* Incrementation offsets for each dimension of the volume.
      * Note that this somewhat format-specific, so it does not
      * belong in the generic "createVolume()" code.
      */
      header[header.order[0]].offset = header[header.order[1]].space_length * header[header.order[2]].space_length;
      header[header.order[1]].offset = header[header.order[2]].space_length;
      header[header.order[2]].offset = 1;

      if (header.time) {
        header.time.space_length = parseFloat(header.time.space_length);
        header.time.start = parseFloat(header.time.start);
        header.time.step = parseFloat(header.time.step);
        header.time.offset = header.xspace.space_length * header.yspace.space_length * header.zspace.space_length;
      }

      return header;
    }

    /*
      createMincVolume(header, raw_data){
        var volume = createVolume(header, this.createMincData(header, raw_data));
        volume.type = "minc";
    
        volume.saveOriginAndTransform(header);
        volume.intensity_min = header.voxel_min;
        volume.intensity_max = header.voxel_max;
    
        return volume;
    
      }
    */

    /*
      initialize the large 1D array of data depending on the type found.
      Rearange the original ArrayBuffer into a typed array.
      args:
        header: obj - header of the data
        raw_data: ArrayBuffer - sub object given by hdf5Loader
    */

  }, {
    key: 'createMincData',
    value: function createMincData(header, raw_data) {

      var native_data = null;

      switch (header.datatype) {
        case 'int8':
          native_data = new Int8Array(raw_data);
          break;
        case 'int16':
          native_data = new Int16Array(raw_data);
          break;
        case 'int32':
          native_data = new Int32Array(raw_data);
          break;
        case 'float32':
          native_data = new Float32Array(raw_data);
          break;
        case 'float64':
          native_data = new Float64Array(raw_data);
          break;
        case 'uint8':
          native_data = new Uint8Array(raw_data);
          break;
        case 'uint16':
          native_data = new Uint16Array(raw_data);
          break;
        case 'uint32':
        case 'rgb8':
          native_data = new Uint32Array(raw_data);
          break;
        default:
          var error_message = "Unsupported data type: " + header.datatype;
          console.log({ message: error_message });
          //BrainBrowser.events.triggerEvent("error", { message: error_message } );
          throw new Error(error_message);
      }

      return native_data;
    }

    //----------------------------------------------------------------------------

  }, {
    key: '_run',
    value: function _run() {
      var that = this;

      var inputBuffer = this._getInput(0);

      if (!inputBuffer) {
        console.warn("Minc2DecoderAlt requires an ArrayBuffer as input \"0\". Unable to continue.");
        return;
      }

      this._dv = new DataView(inputBuffer);

      /* Patch in the missing function to get 64-bit integers.
       * Note: this won't really quite work b/c Javascript doesn't
       * have support for 64-bit integers.
       */
      this._dv.getUint64 = function (off, little_endian) {
        var l4 = that._dv.getUint32(off + 0, little_endian);
        var u4 = that._dv.getUint32(off + 4, little_endian);
        if (little_endian) {
          return (u4 << 32) + l4;
        } else {
          return (l4 << 32) + u4;
        }
      };

      var root = this.createLink();

      try {
        this._superblk = this.hdf5Superblock();
      } catch (e) {
        //console.error(e);
        console.warn("The input file is not a Minc2 file.");
        return;
      }

      this.seek(this._superblk.root_addr);

      if (this._superblk.sbver <= 1) {
        this.hdf5V1ObjectHeader(root);
      } else {
        this.hdf5V2ObjectHeader(root);
      }

      this.loadData(root);

      if (this.getMetadata("debug")) {
        this.printStructure(root, 0);
      }

      /* The rest of this code is MINC-specific, so like some of the
       * functions above, it can migrate into minc.js once things have
       * stabilized.
       *
       * This code is responsible for collecting up the various pieces
       * of important data and metadata, and reorganizing them into the
       * form the volume viewer can handle.
       */
      var image = this.findDataset(root, "image");
      if (!this.defined(image)) {
        throw new Error("Can't find image dataset.");
      }

      var valid_range = this.findAttribute(image, "valid_range", 0);
      /* If no valid_range is found, we substitute our own. */
      if (!this.defined(valid_range)) {
        var min_val;
        var max_val;
        switch (image.type) {
          case this._type_enum.INT8:
            min_val = -(1 << 7);
            max_val = (1 << 7) - 1;
            break;
          case this._type_enum.UINT8:
            min_val = 0;
            max_val = (1 << 8) - 1;
            break;
          case this._type_enum.INT16:
            min_val = -(1 << 15);
            max_val = (1 << 15) - 1;
            break;
          case this._type_enum.UINT16:
            min_val = 0;
            max_val = (1 << 16) - 1;
            break;
          case this._type_enum.INT32:
            min_val = -(1 << 31);
            max_val = (1 << 31) - 1;
            break;
          case this._type_enum.UINT32:
            min_val = 0;
            max_val = (1 << 32) - 1;
            break;
        }
        valid_range = Float32Array.of(min_val, max_val);
      }

      var image_min = this.findDataset(root, "image-min");
      if (!this.defined(image_min)) {
        image_min = {
          array: Float32Array.of(0),
          dims: []
        };
      }

      var image_max = this.findDataset(root, "image-max");
      if (!this.defined(image_max)) {
        image_max = {
          array: Float32Array.of(1),
          dims: []
        };
      }

      /* Create the header expected by the existing brainbrowser code.
       */
      var header = {};
      var tmp = this.findAttribute(image, "dimorder", 0);
      if (typeof tmp !== 'string') {
        throw new Error("Can't find dimension order.");
      }
      header.order = tmp.split(',');

      header.order.forEach(function (dimname) {
        var dim = that.findDataset(root, dimname);
        if (!that.defined(dim)) {
          throw new Error("Can't find dimension variable " + dimname);
        }

        header[dimname] = {};

        tmp = that.findAttribute(dim, "step", 0);
        if (!that.defined(tmp)) {
          tmp = Float32Array.of(1);
        }
        header[dimname].step = tmp[0];

        tmp = that.findAttribute(dim, "start", 0);
        if (!that.defined(tmp)) {
          tmp = Float32Array.of(0);
        }
        header[dimname].start = tmp[0];

        tmp = that.findAttribute(dim, "length", 0);
        if (!that.defined(tmp)) {
          throw new Error("Can't find length for " + dimname);
        }
        header[dimname].space_length = tmp[0];

        tmp = that.findAttribute(dim, "direction_cosines", 0);
        if (that.defined(tmp)) {
          // why is the bizarre call to slice needed?? it seems to work, though!
          header[dimname].direction_cosines = Array.prototype.slice.call(tmp);
        } else {
          if (dimname === "xspace") {
            header[dimname].direction_cosines = [1, 0, 0];
          } else if (dimname === "yspace") {
            header[dimname].direction_cosines = [0, 1, 0];
          } else if (dimname === "zspace") {
            header[dimname].direction_cosines = [0, 0, 1];
          }
        }
      });

      var new_abuf;

      if (this.isRgbVolume(header, image)) {
        header.order.pop();
        header.datatype = 'rgb8';
        new_abuf = this.rgbVoxels(image);
      } else {

        //header.datatype = 'float32';
        header.datatype = this.getTypeMatchMinc(image.type);

        new_abuf = this.scaleVoxels(image, image_min, image_max, valid_range, this.getMetadata("debug"));
      }

      var minc_header = this.parseHeader(JSON.stringify(header));
      minc_header.format = "minc2";
      var dataArray = this.createMincData(minc_header, new_abuf);

      /*
      // add the output to this filter
      this._addOutput(MniVolume);
      var mniVol = this.getOutput();
      mniVol.setData(dataArray, minc_header);
      mniVol.setMetadata("format", "minc2");
      */

      var metadata = Image3DMetadataConverter.convertImage3DMetadata(minc_header);

      var output = new Image3DAlt();
      output.setRawData(dataArray);
      output.setRawMetadata(metadata);

      if (output.metadataIntegrityCheck()) {
        output.scanDataRange();
        this._output[0] = output;
      }
    }
  }]);
  return Minc2DecoderAlt;
}(Filter); /* END of class Minc2DecoderAlt */

/*
* Author    Jonathan Lurie - http://me.jonathanlurie.fr
*           Robert D. Vincent
*
* License   MIT
* Link      https://github.com/Pixpipe/pixpipejs
* Lab       MCIN - Montreal Neurological Institute
*/

/**
* Decodes a MGH file.
* Takes an ArrayBuffer as input (0) and output a `MniVolume` (which inherit `Image3D`).
*
* **Usage**
* - [examples/fileToMgh.html](../examples/fileToMgh.html)
*/

var MghDecoderAlt = function (_Filter) {
  inherits(MghDecoderAlt, _Filter);

  function MghDecoderAlt() {
    classCallCheck(this, MghDecoderAlt);

    var _this = possibleConstructorReturn(this, (MghDecoderAlt.__proto__ || Object.getPrototypeOf(MghDecoderAlt)).call(this));

    _this.addInputValidator(0, ArrayBuffer);
    _this.setMetadata("debug", false);
    return _this;
  }

  /* Function to parse the basic MGH header. This is a 284-byte binary
   * object that begins at offset zero in the file.
   * The resulting header object will contain the following fields:
   *
   * header.order[] - An array of strings that gives the order of the
   * spatial dimensions.
   * header.xspace - Description of the X axis (patient left to right)
   * header.yspace - Description of the Y axis (patient posterior to anterior)
   * header.zspace - Description of the Z axis (patient inferior to superior)
   * header.time - Description of time axis, if any.
    * Non-standard fields used internally only:
   *
   * header.nvoxels - Total number of voxels in the image.
   * header.datatype - MGH data type of image.
   * header.little_endian - True if data is little endian (should be false!)
   */


  createClass(MghDecoderAlt, [{
    key: '_parseMGHHeader',
    value: function _parseMGHHeader(raw_data, callback) {
      var header = {
        order: ["xspace", "yspace", "zspace"],
        xspace: {},
        yspace: {},
        zspace: {}
      };
      var dview = new DataView(raw_data, 0, 284);
      var little_endian = true;

      /* Read the header version, which should always have the value
       * 0x00000001. We use this to test the endian-ness of the data,
       * but it should always be big-endian.
       */
      var hdr_version = dview.getUint32(0, true);
      if (hdr_version === 0x00000001) {
        little_endian = true;
      } else if (hdr_version === 0x01000000) {
        little_endian = false; // Generally files are big-endian.
      } else {
        console.warn("This does not look like an MGH file.");
        return null;
      }

      /* Now read the dimension lengths. There are at most 4 dimensions
       * in the file. The lengths fields are always present, but they
       * unused dimensions may have the value 0 or 1.
       */
      var ndims = 0;
      var sizes = [0, 0, 0, 0];
      var header_offset = 4;
      var nvoxels = 1;
      for (ndims = 0; ndims < 4; ndims++) {
        sizes[ndims] = dview.getUint32(header_offset, little_endian);
        if (sizes[ndims] <= 1) {
          break;
        }
        nvoxels *= sizes[ndims];
        header_offset += 4;
      }

      if (ndims < 3 || ndims > 4) {
        console.warn("Cannot handle " + ndims + "-dimensional images yet.");
        return null;
      }

      var datatype = dview.getUint32(20, little_endian);
      // IGNORED var dof = dview.getUint32(24, little_endian);
      var good_transform_flag = dview.getUint16(28, little_endian);
      var spacing = [1.0, 1.0, 1.0];
      var i, j;
      var dircos = [[-1.0, 0.0, 0.0], [0.0, 0.0, -1.0], [0.0, 1.0, 0.0], [0.0, 0.0, 0.0]];
      if (good_transform_flag) {
        header_offset = 30;
        for (i = 0; i < 3; i++) {
          spacing[i] = dview.getFloat32(header_offset, little_endian);
          header_offset += 4;
        }
        for (i = 0; i < 4; i++) {
          for (j = 0; j < 3; j++) {
            dircos[i][j] = dview.getFloat32(header_offset, little_endian);
            header_offset += 4;
          }
        }
      }

      if (this._metadata.debug) {
        // Prints out the transform in a format similar to the output
        // of FreeSurfer's mri_info tool.
        //
        for (i = 0; i < 3; i++) {
          for (j = 0; j < 4; j++) {
            
          }
        }
      }

      var axis_index_from_file = [0, 1, 2];

      for (var axis = 0; axis < 3; axis++) {
        var spatial_axis = 0;
        var c_x = Math.abs(dircos[axis][0]);
        var c_y = Math.abs(dircos[axis][1]);
        var c_z = Math.abs(dircos[axis][2]);

        header.order[axis] = "xspace";
        if (c_y > c_x && c_y > c_z) {
          spatial_axis = 1;
          header.order[axis] = "yspace";
        }
        if (c_z > c_x && c_z > c_y) {
          spatial_axis = 2;
          header.order[axis] = "zspace";
        }
        axis_index_from_file[axis] = spatial_axis;
      }

      /* If there are four dimensions, assume the last is the time
       * dimension. I use default values for step and start because as
       * far as I know MGH files do not carry any descriptive
       * information about the 4th dimension.
       */
      if (ndims === 4) {
        if (this._metadata.debug) {
          console.log("Creating time dimension: " + sizes[3]);
        }
        header.time = {
          space_length: sizes[3],
          step: 1,
          start: 0,
          name: "time"
        };
        header.order.push("time");
      }

      /** This is here because there are two different ways of interpreting
        * the origin of an MGH file. One can ignore the offsets in the
        * transform, using the centre of the voxel grid. Or you can correct
        * these naive grid centres using the values stored in the transform.
        * The first approach is what is used by surface files, so to get them
        * to register nicely, we want ignore_offsets to be true. However,
        * getting volumetric files to register correctly implies setting
        * ignore_offsets to false.
        */
      var ignore_offsets = false;
      var mgh_xform = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]];
      for (i = 0; i < 3; i++) {
        for (j = 0; j < 3; j++) {
          mgh_xform[i][j] = dircos[j][i] * spacing[i];
        }
      }

      for (i = 0; i < 3; i++) {
        var temp = 0.0;
        for (j = 0; j < 3; j++) {
          temp += mgh_xform[i][j] * (sizes[j] / 2.0);
        }

        if (ignore_offsets) {
          mgh_xform[i][4 - 1] = -temp;
        } else {
          mgh_xform[i][4 - 1] = dircos[4 - 1][i] - temp;
        }
      }

      var transform = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]];

      for (i = 0; i < 3; i++) {
        for (j = 0; j < 4; j++) {
          var volume_axis = j;
          if (j < 3) {
            volume_axis = axis_index_from_file[j];
          }
          transform[i][volume_axis] = mgh_xform[i][j];
        }
      }

      // Now that we have the transform, need to convert it to MINC-like
      // steps and direction_cosines.

      Image3DMetadataConverter.transformToMinc(transform, header);

      // Save the datatype so that we can refer to it later.
      header.datatype = datatype;
      header.little_endian = little_endian;
      header.nvoxels = nvoxels;

      // Save the voxel dimension lengths.
      for (i = 0; i < 3; i++) {
        header[header.order[i]].space_length = sizes[i];
      }

      return header;
    }
  }, {
    key: '_createMGHData',
    value: function _createMGHData(header, raw_data) {

      var native_data = null;
      var bytes_per_voxel = 1;

      switch (header.datatype) {
        case 0:
          // Unsigned characters.
          bytes_per_voxel = 1;
          break;
        case 1: // 4-byte signed integers.
        case 3:
          // 4-byte float.
          bytes_per_voxel = 4;
          break;
        case 4:
          // 2-byte signed integers.
          bytes_per_voxel = 2;
          break;
        default:
          console.warn("Unsupported data type: " + header.datatype);
          return null;
      }

      var nbytes = header.nvoxels * bytes_per_voxel;

      if (bytes_per_voxel > 1 && !header.little_endian) {
        Image3DMetadataConverter.swapn(new Uint8Array(raw_data, 284, nbytes), bytes_per_voxel);
      }

      switch (header.datatype) {
        case 0:
          // unsigned char
          native_data = new Uint8Array(raw_data, 284, header.nvoxels);
          break;
        case 1:
          // signed int
          native_data = new Int32Array(raw_data, 284, header.nvoxels);
          break;
        case 3:
          native_data = new Float32Array(raw_data, 284, header.nvoxels);
          break;
        case 4:
          // signed short
          native_data = new Int16Array(raw_data, 284, header.nvoxels);
          break;
      }

      // Incrementation offsets for each dimension of the volume. MGH
      // files store the fastest-varying dimension _first_, so the
      // "first" dimension actually has the smallest offset. That is
      // why this calculation is different from that for NIfTI-1.
      //
      var offset = 1;
      for (var d = 0; d < header.order.length; d++) {
        header[header.order[d]].offset = offset;
        offset *= header[header.order[d]].space_length;
      }
      return native_data;
    }
  }, {
    key: '_run',
    value: function _run() {
      var inputBuffer = this._getInput(0);

      if (!inputBuffer) {
        console.warn("MghDecoderAlt requires an ArrayBuffer as input \"0\". Unable to continue.");
        return;
      }

      var header = null;

      try {
        header = this._parseMGHHeader(inputBuffer);
      } catch (e) {}
      //console.warn( e );


      // abort if header not valid
      if (!header) {
        console.log("The input file is not a MGH file.");
        return;
      }

      var dataArray = this._createMGHData(header, inputBuffer);

      if (!dataArray) return null;

      /*
      // add the output to this filter
      this._addOutput(MniVolume);
      var mniVol = this.getOutput();
      mniVol.setData(dataArray, header);
      mniVol.setMetadata("format", "mgh");
      */

      var metadata = Image3DMetadataConverter.convertImage3DMetadata(header);

      // ********** SWAPPING DIM *************

      var dims = metadata.dimensions;
      dims.sort(function (a, b) {
        return a.stride < b.stride;
      });

      // return the dimsniosn object given its world name ('x', 'y' or 'z')
      function getWidthDimension(directionDim) {
        return directionDim === "x" ? "y" : directionDim === "y" ? "x" : directionDim === "z" ? "x" : null;
      }

      function getHeightDimension(directionDim) {
        return directionDim === "x" ? "z" : directionDim === "y" ? "z" : directionDim === "z" ? "y" : null;
      }

      function getDimIndexByDimName(dimName) {
        for (var i = 0; i < dims.length; i++) {
          if (dims[i].nameWorldSpace === dimName) return i;
        }
        return -1;
      }

      for (var i = 0; i < dims.length; i++) {
        var dimName = dims[i].nameWorldSpace;
        dims[i].heightDimension = getDimIndexByDimName(getHeightDimension(dimName));
        dims[i].widthDimension = getDimIndexByDimName(getWidthDimension(dimName));
      }

      // ********** END OF SWAPPING **********


      var output = new Image3DAlt();
      output.setRawData(dataArray);
      output.setRawMetadata(metadata);

      if (output.metadataIntegrityCheck()) {
        output.scanDataRange();
        this._output[0] = output;
      }
    }
  }]);
  return MghDecoderAlt;
}(Filter); /* END of class MghDecoderAlt */

/*
* Author    Jonathan Lurie - http://me.jonathanlurie.fr
*
* License   MIT
* Link      https://github.com/Pixpipe/pixpipejs
* Lab       MCIN - Montreal Neurological Institute
*/

// decoders
//import { PixpDecoder } from './PixpDecoder.js';
//import { PixBinDecoder } from './PixBinDecoder.js';


/**
* An instance of Image3DGenericDecoderAlt takes a ArrayBuffer 
* as input 0 (`.addInput(myArrayBuffer)`) and output an Image3D.
* The `update` method will perform several decoding attempts, using the readers
* specified in the constructor.
* In case of success (one of the registered decoder was compatible to the data)
* the metadata `decoderConstructor` and `decoderName` are made accessible and give
* information about the file format. If no decoder managed to decode the input buffer,
* this filter will not have any output.
*
* Developers: if a new 3D dataset decoder is added, reference it here.
*/

var Image3DGenericDecoderAlt = function (_Filter) {
  inherits(Image3DGenericDecoderAlt, _Filter);

  function Image3DGenericDecoderAlt() {
    classCallCheck(this, Image3DGenericDecoderAlt);

    var _this = possibleConstructorReturn(this, (Image3DGenericDecoderAlt.__proto__ || Object.getPrototypeOf(Image3DGenericDecoderAlt)).call(this));

    _this._decoders = [Minc2DecoderAlt, NiftiDecoderAlt, MghDecoderAlt];
    return _this;
  }

  createClass(Image3DGenericDecoderAlt, [{
    key: '_run',
    value: function _run() {
      var inputBuffer = this._getInput(0);

      if (!inputBuffer) {
        console.warn("The input buffer must not be null.");
        return;
      }

      // try with each decoder
      for (var d = 0; d < this._decoders.length; d++) {
        var decoder = new this._decoders[d]();
        decoder.addInput(inputBuffer);
        decoder.update();

        if (decoder.getNumberOfOutputs()) {
          this._output[0] = decoder.getOutput();
          console.log(this._output[0]);
          this.setMetadata("decoderConstructor", this._decoders[d]);
          this.setMetadata("decoderName", this._decoders[d].name);
          break;
        }
      }
    }
  }]);
  return Image3DGenericDecoderAlt;
}(Filter); /* END of class Image3DGenericDecoderAlt */

//[4]   	NameStartChar	   ::=   	":" | [A-Z] | "_" | [a-z] | [#xC0-#xD6] | [#xD8-#xF6] | [#xF8-#x2FF] | [#x370-#x37D] | [#x37F-#x1FFF] | [#x200C-#x200D] | [#x2070-#x218F] | [#x2C00-#x2FEF] | [#x3001-#xD7FF] | [#xF900-#xFDCF] | [#xFDF0-#xFFFD] | [#x10000-#xEFFFF]
//[4a]   	NameChar	   ::=   	NameStartChar | "-" | "." | [0-9] | #xB7 | [#x0300-#x036F] | [#x203F-#x2040]
//[5]   	Name	   ::=   	NameStartChar (NameChar)*
var nameStartChar = /[A-Z_a-z\xC0-\xD6\xD8-\xF6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/; //\u10000-\uEFFFF
var nameChar = new RegExp("[\\-\\.0-9" + nameStartChar.source.slice(1, -1) + "\\u00B7\\u0300-\\u036F\\u203F-\\u2040]");
var tagNamePattern = new RegExp('^' + nameStartChar.source + nameChar.source + '*(?:\:' + nameStartChar.source + nameChar.source + '*)?$');
//var tagNamePattern = /^[a-zA-Z_][\w\-\.]*(?:\:[a-zA-Z_][\w\-\.]*)?$/
//var handlers = 'resolveEntity,getExternalSubset,characters,endDocument,endElement,endPrefixMapping,ignorableWhitespace,processingInstruction,setDocumentLocator,skippedEntity,startDocument,startElement,startPrefixMapping,notationDecl,unparsedEntityDecl,error,fatalError,warning,attributeDecl,elementDecl,externalEntityDecl,internalEntityDecl,comment,endCDATA,endDTD,endEntity,startCDATA,startDTD,startEntity'.split(',')

//S_TAG,	S_ATTR,	S_EQ,	S_ATTR_NOQUOT_VALUE
//S_ATTR_SPACE,	S_ATTR_END,	S_TAG_SPACE, S_TAG_CLOSE
var S_TAG = 0; //tag name offerring
var S_ATTR = 1; //attr name offerring 
var S_ATTR_SPACE = 2; //attr name end and space offer
var S_EQ = 3; //=space?
var S_ATTR_NOQUOT_VALUE = 4; //attr value(no quot value only)
var S_ATTR_END = 5; //attr value end and no space(quot end)
var S_TAG_SPACE = 6; //(attr value end || tag end ) && (space offer)
var S_TAG_CLOSE = 7; //closed el<el />

function XMLReader() {}

XMLReader.prototype = {
	parse: function parse(source, defaultNSMap, entityMap) {
		var domBuilder = this.domBuilder;
		domBuilder.startDocument();
		_copy(defaultNSMap, defaultNSMap = {});
		_parse(source, defaultNSMap, entityMap, domBuilder, this.errorHandler);
		domBuilder.endDocument();
	}
};
function _parse(source, defaultNSMapCopy, entityMap, domBuilder, errorHandler) {
	function fixedFromCharCode(code) {
		// String.prototype.fromCharCode does not supports
		// > 2 bytes unicode chars directly
		if (code > 0xffff) {
			code -= 0x10000;
			var surrogate1 = 0xd800 + (code >> 10),
			    surrogate2 = 0xdc00 + (code & 0x3ff);

			return String.fromCharCode(surrogate1, surrogate2);
		} else {
			return String.fromCharCode(code);
		}
	}
	function entityReplacer(a) {
		var k = a.slice(1, -1);
		if (k in entityMap) {
			return entityMap[k];
		} else if (k.charAt(0) === '#') {
			return fixedFromCharCode(parseInt(k.substr(1).replace('x', '0x')));
		} else {
			errorHandler.error('entity not found:' + a);
			return a;
		}
	}
	function appendText(end) {
		//has some bugs
		if (end > start) {
			var xt = source.substring(start, end).replace(/&#?\w+;/g, entityReplacer);
			locator && position(start);
			domBuilder.characters(xt, 0, end - start);
			start = end;
		}
	}
	function position(p, m) {
		while (p >= lineEnd && (m = linePattern.exec(source))) {
			lineStart = m.index;
			lineEnd = lineStart + m[0].length;
			locator.lineNumber++;
			//console.log('line++:',locator,startPos,endPos)
		}
		locator.columnNumber = p - lineStart + 1;
	}
	var lineStart = 0;
	var lineEnd = 0;
	var linePattern = /.*(?:\r\n?|\n)|.*$/g;
	var locator = domBuilder.locator;

	var parseStack = [{ currentNSMap: defaultNSMapCopy }];
	var closeMap = {};
	var start = 0;
	while (true) {
		try {
			var tagStart = source.indexOf('<', start);
			if (tagStart < 0) {
				if (!source.substr(start).match(/^\s*$/)) {
					var doc = domBuilder.doc;
					var text = doc.createTextNode(source.substr(start));
					doc.appendChild(text);
					domBuilder.currentElement = text;
				}
				return;
			}
			if (tagStart > start) {
				appendText(tagStart);
			}
			switch (source.charAt(tagStart + 1)) {
				case '/':
					var end = source.indexOf('>', tagStart + 3);
					var tagName = source.substring(tagStart + 2, end);
					var config = parseStack.pop();
					if (end < 0) {

						tagName = source.substring(tagStart + 2).replace(/[\s<].*/, '');
						//console.error('#@@@@@@'+tagName)
						errorHandler.error("end tag name: " + tagName + ' is not complete:' + config.tagName);
						end = tagStart + 1 + tagName.length;
					} else if (tagName.match(/\s</)) {
						tagName = tagName.replace(/[\s<].*/, '');
						errorHandler.error("end tag name: " + tagName + ' maybe not complete');
						end = tagStart + 1 + tagName.length;
					}
					//console.error(parseStack.length,parseStack)
					//console.error(config);
					var localNSMap = config.localNSMap;
					var endMatch = config.tagName == tagName;
					var endIgnoreCaseMach = endMatch || config.tagName && config.tagName.toLowerCase() == tagName.toLowerCase();
					if (endIgnoreCaseMach) {
						domBuilder.endElement(config.uri, config.localName, tagName);
						if (localNSMap) {
							for (var prefix in localNSMap) {
								domBuilder.endPrefixMapping(prefix);
							}
						}
						if (!endMatch) {
							errorHandler.fatalError("end tag name: " + tagName + ' is not match the current start tagName:' + config.tagName);
						}
					} else {
						parseStack.push(config);
					}

					end++;
					break;
				// end elment
				case '?':
					// <?...?>
					locator && position(tagStart);
					end = parseInstruction(source, tagStart, domBuilder);
					break;
				case '!':
					// <!doctype,<![CDATA,<!--
					locator && position(tagStart);
					end = parseDCC(source, tagStart, domBuilder, errorHandler);
					break;
				default:
					locator && position(tagStart);
					var el = new ElementAttributes();
					var currentNSMap = parseStack[parseStack.length - 1].currentNSMap;
					//elStartEnd
					var end = parseElementStartPart(source, tagStart, el, currentNSMap, entityReplacer, errorHandler);
					var len = el.length;

					if (!el.closed && fixSelfClosed(source, end, el.tagName, closeMap)) {
						el.closed = true;
						if (!entityMap.nbsp) {
							errorHandler.warning('unclosed xml attribute');
						}
					}
					if (locator && len) {
						var locator2 = copyLocator(locator, {});
						//try{//attribute position fixed
						for (var i = 0; i < len; i++) {
							var a = el[i];
							position(a.offset);
							a.locator = copyLocator(locator, {});
						}
						//}catch(e){console.error('@@@@@'+e)}
						domBuilder.locator = locator2;
						if (appendElement(el, domBuilder, currentNSMap)) {
							parseStack.push(el);
						}
						domBuilder.locator = locator;
					} else {
						if (appendElement(el, domBuilder, currentNSMap)) {
							parseStack.push(el);
						}
					}

					if (el.uri === 'http://www.w3.org/1999/xhtml' && !el.closed) {
						end = parseHtmlSpecialContent(source, end, el.tagName, entityReplacer, domBuilder);
					} else {
						end++;
					}
			}
		} catch (e) {
			errorHandler.error('element parse error: ' + e);
			//errorHandler.error('element parse error: '+e);
			end = -1;
			//throw e;
		}
		if (end > start) {
			start = end;
		} else {
			//TODO: 这里有可能sax回退，有位置错误风险
			appendText(Math.max(tagStart, start) + 1);
		}
	}
}
function copyLocator(f, t) {
	t.lineNumber = f.lineNumber;
	t.columnNumber = f.columnNumber;
	return t;
}

/**
 * @see #appendElement(source,elStartEnd,el,selfClosed,entityReplacer,domBuilder,parseStack);
 * @return end of the elementStartPart(end of elementEndPart for selfClosed el)
 */
function parseElementStartPart(source, start, el, currentNSMap, entityReplacer, errorHandler) {
	var attrName;
	var value;
	var p = ++start;
	var s = S_TAG; //status
	while (true) {
		var c = source.charAt(p);
		switch (c) {
			case '=':
				if (s === S_ATTR) {
					//attrName
					attrName = source.slice(start, p);
					s = S_EQ;
				} else if (s === S_ATTR_SPACE) {
					s = S_EQ;
				} else {
					//fatalError: equal must after attrName or space after attrName
					throw new Error('attribute equal must after attrName');
				}
				break;
			case '\'':
			case '"':
				if (s === S_EQ || s === S_ATTR //|| s == S_ATTR_SPACE
				) {
						//equal
						if (s === S_ATTR) {
							errorHandler.warning('attribute value must after "="');
							attrName = source.slice(start, p);
						}
						start = p + 1;
						p = source.indexOf(c, start);
						if (p > 0) {
							value = source.slice(start, p).replace(/&#?\w+;/g, entityReplacer);
							el.add(attrName, value, start - 1);
							s = S_ATTR_END;
						} else {
							//fatalError: no end quot match
							throw new Error('attribute value no end \'' + c + '\' match');
						}
					} else if (s == S_ATTR_NOQUOT_VALUE) {
					value = source.slice(start, p).replace(/&#?\w+;/g, entityReplacer);
					//console.log(attrName,value,start,p)
					el.add(attrName, value, start);
					//console.dir(el)
					errorHandler.warning('attribute "' + attrName + '" missed start quot(' + c + ')!!');
					start = p + 1;
					s = S_ATTR_END;
				} else {
					//fatalError: no equal before
					throw new Error('attribute value must after "="');
				}
				break;
			case '/':
				switch (s) {
					case S_TAG:
						el.setTagName(source.slice(start, p));
					case S_ATTR_END:
					case S_TAG_SPACE:
					case S_TAG_CLOSE:
						s = S_TAG_CLOSE;
						el.closed = true;
					case S_ATTR_NOQUOT_VALUE:
					case S_ATTR:
					case S_ATTR_SPACE:
						break;
					//case S_EQ:
					default:
						throw new Error("attribute invalid close char('/')");
				}
				break;
			case '':
				//end document
				//throw new Error('unexpected end of input')
				errorHandler.error('unexpected end of input');
				if (s == S_TAG) {
					el.setTagName(source.slice(start, p));
				}
				return p;
			case '>':
				switch (s) {
					case S_TAG:
						el.setTagName(source.slice(start, p));
					case S_ATTR_END:
					case S_TAG_SPACE:
					case S_TAG_CLOSE:
						break; //normal
					case S_ATTR_NOQUOT_VALUE: //Compatible state
					case S_ATTR:
						value = source.slice(start, p);
						if (value.slice(-1) === '/') {
							el.closed = true;
							value = value.slice(0, -1);
						}
					case S_ATTR_SPACE:
						if (s === S_ATTR_SPACE) {
							value = attrName;
						}
						if (s == S_ATTR_NOQUOT_VALUE) {
							errorHandler.warning('attribute "' + value + '" missed quot(")!!');
							el.add(attrName, value.replace(/&#?\w+;/g, entityReplacer), start);
						} else {
							if (currentNSMap[''] !== 'http://www.w3.org/1999/xhtml' || !value.match(/^(?:disabled|checked|selected)$/i)) {
								errorHandler.warning('attribute "' + value + '" missed value!! "' + value + '" instead!!');
							}
							el.add(value, value, start);
						}
						break;
					case S_EQ:
						throw new Error('attribute value missed!!');
				}
				//			console.log(tagName,tagNamePattern,tagNamePattern.test(tagName))
				return p;
			/*xml space '\x20' | #x9 | #xD | #xA; */
			case "\x80":
				c = ' ';
			default:
				if (c <= ' ') {
					//space
					switch (s) {
						case S_TAG:
							el.setTagName(source.slice(start, p)); //tagName
							s = S_TAG_SPACE;
							break;
						case S_ATTR:
							attrName = source.slice(start, p);
							s = S_ATTR_SPACE;
							break;
						case S_ATTR_NOQUOT_VALUE:
							var value = source.slice(start, p).replace(/&#?\w+;/g, entityReplacer);
							errorHandler.warning('attribute "' + value + '" missed quot(")!!');
							el.add(attrName, value, start);
						case S_ATTR_END:
							s = S_TAG_SPACE;
							break;
						//case S_TAG_SPACE:
						//case S_EQ:
						//case S_ATTR_SPACE:
						//	void();break;
						//case S_TAG_CLOSE:
						//ignore warning
					}
				} else {
					//not space
					//S_TAG,	S_ATTR,	S_EQ,	S_ATTR_NOQUOT_VALUE
					//S_ATTR_SPACE,	S_ATTR_END,	S_TAG_SPACE, S_TAG_CLOSE
					switch (s) {
						//case S_TAG:void();break;
						//case S_ATTR:void();break;
						//case S_ATTR_NOQUOT_VALUE:void();break;
						case S_ATTR_SPACE:
							
							if (currentNSMap[''] !== 'http://www.w3.org/1999/xhtml' || !attrName.match(/^(?:disabled|checked|selected)$/i)) {
								errorHandler.warning('attribute "' + attrName + '" missed value!! "' + attrName + '" instead2!!');
							}
							el.add(attrName, attrName, start);
							start = p;
							s = S_ATTR;
							break;
						case S_ATTR_END:
							errorHandler.warning('attribute space is required"' + attrName + '"!!');
						case S_TAG_SPACE:
							s = S_ATTR;
							start = p;
							break;
						case S_EQ:
							s = S_ATTR_NOQUOT_VALUE;
							start = p;
							break;
						case S_TAG_CLOSE:
							throw new Error("elements closed character '/' and '>' must be connected to");
					}
				}
		} //end outer switch
		//console.log('p++',p)
		p++;
	}
}
/**
 * @return true if has new namespace define
 */
function appendElement(el, domBuilder, currentNSMap) {
	var tagName = el.tagName;
	var localNSMap = null;
	//var currentNSMap = parseStack[parseStack.length-1].currentNSMap;
	var i = el.length;
	while (i--) {
		var a = el[i];
		var qName = a.qName;
		var value = a.value;
		var nsp = qName.indexOf(':');
		if (nsp > 0) {
			var prefix = a.prefix = qName.slice(0, nsp);
			var localName = qName.slice(nsp + 1);
			var nsPrefix = prefix === 'xmlns' && localName;
		} else {
			localName = qName;
			prefix = null;
			nsPrefix = qName === 'xmlns' && '';
		}
		//can not set prefix,because prefix !== ''
		a.localName = localName;
		//prefix == null for no ns prefix attribute 
		if (nsPrefix !== false) {
			//hack!!
			if (localNSMap == null) {
				localNSMap = {};
				//console.log(currentNSMap,0)
				_copy(currentNSMap, currentNSMap = {});
				//console.log(currentNSMap,1)
			}
			currentNSMap[nsPrefix] = localNSMap[nsPrefix] = value;
			a.uri = 'http://www.w3.org/2000/xmlns/';
			domBuilder.startPrefixMapping(nsPrefix, value);
		}
	}
	var i = el.length;
	while (i--) {
		a = el[i];
		var prefix = a.prefix;
		if (prefix) {
			//no prefix attribute has no namespace
			if (prefix === 'xml') {
				a.uri = 'http://www.w3.org/XML/1998/namespace';
			}if (prefix !== 'xmlns') {
				a.uri = currentNSMap[prefix || ''];

				//{console.log('###'+a.qName,domBuilder.locator.systemId+'',currentNSMap,a.uri)}
			}
		}
	}
	var nsp = tagName.indexOf(':');
	if (nsp > 0) {
		prefix = el.prefix = tagName.slice(0, nsp);
		localName = el.localName = tagName.slice(nsp + 1);
	} else {
		prefix = null; //important!!
		localName = el.localName = tagName;
	}
	//no prefix element has default namespace
	var ns = el.uri = currentNSMap[prefix || ''];
	domBuilder.startElement(ns, localName, tagName, el);
	//endPrefixMapping and startPrefixMapping have not any help for dom builder
	//localNSMap = null
	if (el.closed) {
		domBuilder.endElement(ns, localName, tagName);
		if (localNSMap) {
			for (prefix in localNSMap) {
				domBuilder.endPrefixMapping(prefix);
			}
		}
	} else {
		el.currentNSMap = currentNSMap;
		el.localNSMap = localNSMap;
		//parseStack.push(el);
		return true;
	}
}
function parseHtmlSpecialContent(source, elStartEnd, tagName, entityReplacer, domBuilder) {
	if (/^(?:script|textarea)$/i.test(tagName)) {
		var elEndStart = source.indexOf('</' + tagName + '>', elStartEnd);
		var text = source.substring(elStartEnd + 1, elEndStart);
		if (/[&<]/.test(text)) {
			if (/^script$/i.test(tagName)) {
				//if(!/\]\]>/.test(text)){
				//lexHandler.startCDATA();
				domBuilder.characters(text, 0, text.length);
				//lexHandler.endCDATA();
				return elEndStart;
				//}
			} //}else{//text area
			text = text.replace(/&#?\w+;/g, entityReplacer);
			domBuilder.characters(text, 0, text.length);
			return elEndStart;
			//}
		}
	}
	return elStartEnd + 1;
}
function fixSelfClosed(source, elStartEnd, tagName, closeMap) {
	//if(tagName in closeMap){
	var pos = closeMap[tagName];
	if (pos == null) {
		//console.log(tagName)
		pos = source.lastIndexOf('</' + tagName + '>');
		if (pos < elStartEnd) {
			//忘记闭合
			pos = source.lastIndexOf('</' + tagName);
		}
		closeMap[tagName] = pos;
	}
	return pos < elStartEnd;
	//} 
}
function _copy(source, target) {
	for (var n in source) {
		target[n] = source[n];
	}
}
function parseDCC(source, start, domBuilder, errorHandler) {
	//sure start with '<!'
	var next = source.charAt(start + 2);
	switch (next) {
		case '-':
			if (source.charAt(start + 3) === '-') {
				var end = source.indexOf('-->', start + 4);
				//append comment source.substring(4,end)//<!--
				if (end > start) {
					domBuilder.comment(source, start + 4, end - start - 4);
					return end + 3;
				} else {
					errorHandler.error("Unclosed comment");
					return -1;
				}
			} else {
				//error
				return -1;
			}
		default:
			if (source.substr(start + 3, 6) == 'CDATA[') {
				var end = source.indexOf(']]>', start + 9);
				domBuilder.startCDATA();
				domBuilder.characters(source, start + 9, end - start - 9);
				domBuilder.endCDATA();
				return end + 3;
			}
			//<!DOCTYPE
			//startDTD(java.lang.String name, java.lang.String publicId, java.lang.String systemId) 
			var matchs = split(source, start);
			var len = matchs.length;
			if (len > 1 && /!doctype/i.test(matchs[0][0])) {
				var name = matchs[1][0];
				var pubid = len > 3 && /^public$/i.test(matchs[2][0]) && matchs[3][0];
				var sysid = len > 4 && matchs[4][0];
				var lastMatch = matchs[len - 1];
				domBuilder.startDTD(name, pubid && pubid.replace(/^(['"])(.*?)\1$/, '$2'), sysid && sysid.replace(/^(['"])(.*?)\1$/, '$2'));
				domBuilder.endDTD();

				return lastMatch.index + lastMatch[0].length;
			}
	}
	return -1;
}

function parseInstruction(source, start, domBuilder) {
	var end = source.indexOf('?>', start);
	if (end) {
		var match = source.substring(start, end).match(/^<\?(\S*)\s*([\s\S]*?)\s*$/);
		if (match) {
			domBuilder.processingInstruction(match[1], match[2]);
			return end + 2;
		} else {
			//error
			return -1;
		}
	}
	return -1;
}

/**
 * @param source
 */
function ElementAttributes(source) {}
ElementAttributes.prototype = {
	setTagName: function setTagName(tagName) {
		if (!tagNamePattern.test(tagName)) {
			throw new Error('invalid tagName:' + tagName);
		}
		this.tagName = tagName;
	},
	add: function add(qName, value, offset) {
		if (!tagNamePattern.test(qName)) {
			throw new Error('invalid attribute:' + qName);
		}
		this[this.length++] = { qName: qName, value: value, offset: offset };
	},
	length: 0,
	getLocalName: function getLocalName(i) {
		return this[i].localName;
	},
	getLocator: function getLocator(i) {
		return this[i].locator;
	},
	getQName: function getQName(i) {
		return this[i].qName;
	},
	getURI: function getURI(i) {
		return this[i].uri;
	},
	getValue: function getValue(i) {
		return this[i].value;
	}
	//	,getIndex:function(uri, localName)){
	//		if(localName){
	//			
	//		}else{
	//			var qName = uri
	//		}
	//	},
	//	getValue:function(){return this.getValue(this.getIndex.apply(this,arguments))},
	//	getType:function(uri,localName){}
	//	getType:function(i){},
};

function _set_proto_(thiz, parent) {
	thiz.__proto__ = parent;
	return thiz;
}
if (!(_set_proto_({}, _set_proto_.prototype) instanceof _set_proto_)) {
	_set_proto_ = function _set_proto_(thiz, parent) {
		function p() {}
		p.prototype = parent;
		p = new p();
		for (parent in thiz) {
			p[parent] = thiz[parent];
		}
		return p;
	};
}

function split(source, start) {
	var match;
	var buf = [];
	var reg = /'[^']+'|"[^"]+"|[^\s<>\/=]+=?|(\/?\s*>|<)/g;
	reg.lastIndex = start;
	reg.exec(source); //skip <
	while (match = reg.exec(source)) {
		buf.push(match);
		if (match[1]) return buf;
	}
}

var XMLReader_1 = XMLReader;

var sax = {
	XMLReader: XMLReader_1
};

/*
 * DOM Level 2
 * Object DOMException
 * @see http://www.w3.org/TR/REC-DOM-Level-1/ecma-script-language-binding.html
 * @see http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/ecma-script-binding.html
 */

function copy$8(src, dest) {
	for (var p in src) {
		dest[p] = src[p];
	}
}
/**
^\w+\.prototype\.([_\w]+)\s*=\s*((?:.*\{\s*?[\r\n][\s\S]*?^})|\S.*?(?=[;\r\n]));?
^\w+\.prototype\.([_\w]+)\s*=\s*(\S.*?(?=[;\r\n]));?
 */
function _extends$1(Class, Super) {
	var pt = Class.prototype;
	if (Object.create) {
		var ppt = Object.create(Super.prototype);
		pt.__proto__ = ppt;
	}
	if (!(pt instanceof Super)) {
		var t = function t() {};

		
		t.prototype = Super.prototype;
		t = new t();
		copy$8(pt, t);
		Class.prototype = pt = t;
	}
	if (pt.constructor != Class) {
		if (typeof Class != 'function') {
			console.error("unknow Class:" + Class);
		}
		pt.constructor = Class;
	}
}
var htmlns = 'http://www.w3.org/1999/xhtml';
// Node Types
var NodeType = {};
var ELEMENT_NODE = NodeType.ELEMENT_NODE = 1;
var ATTRIBUTE_NODE = NodeType.ATTRIBUTE_NODE = 2;
var TEXT_NODE = NodeType.TEXT_NODE = 3;
var CDATA_SECTION_NODE = NodeType.CDATA_SECTION_NODE = 4;
var ENTITY_REFERENCE_NODE = NodeType.ENTITY_REFERENCE_NODE = 5;
var ENTITY_NODE = NodeType.ENTITY_NODE = 6;
var PROCESSING_INSTRUCTION_NODE = NodeType.PROCESSING_INSTRUCTION_NODE = 7;
var COMMENT_NODE = NodeType.COMMENT_NODE = 8;
var DOCUMENT_NODE = NodeType.DOCUMENT_NODE = 9;
var DOCUMENT_TYPE_NODE = NodeType.DOCUMENT_TYPE_NODE = 10;
var DOCUMENT_FRAGMENT_NODE = NodeType.DOCUMENT_FRAGMENT_NODE = 11;
var NOTATION_NODE = NodeType.NOTATION_NODE = 12;

// ExceptionCode
var ExceptionCode = {};
var ExceptionMessage = {};
var INDEX_SIZE_ERR = ExceptionCode.INDEX_SIZE_ERR = (ExceptionMessage[1] = "Index size error", 1);
var DOMSTRING_SIZE_ERR = ExceptionCode.DOMSTRING_SIZE_ERR = (ExceptionMessage[2] = "DOMString size error", 2);
var HIERARCHY_REQUEST_ERR = ExceptionCode.HIERARCHY_REQUEST_ERR = (ExceptionMessage[3] = "Hierarchy request error", 3);
var WRONG_DOCUMENT_ERR = ExceptionCode.WRONG_DOCUMENT_ERR = (ExceptionMessage[4] = "Wrong document", 4);
var INVALID_CHARACTER_ERR = ExceptionCode.INVALID_CHARACTER_ERR = (ExceptionMessage[5] = "Invalid character", 5);
var NO_DATA_ALLOWED_ERR = ExceptionCode.NO_DATA_ALLOWED_ERR = (ExceptionMessage[6] = "No data allowed", 6);
var NO_MODIFICATION_ALLOWED_ERR = ExceptionCode.NO_MODIFICATION_ALLOWED_ERR = (ExceptionMessage[7] = "No modification allowed", 7);
var NOT_FOUND_ERR = ExceptionCode.NOT_FOUND_ERR = (ExceptionMessage[8] = "Not found", 8);
var NOT_SUPPORTED_ERR = ExceptionCode.NOT_SUPPORTED_ERR = (ExceptionMessage[9] = "Not supported", 9);
var INUSE_ATTRIBUTE_ERR = ExceptionCode.INUSE_ATTRIBUTE_ERR = (ExceptionMessage[10] = "Attribute in use", 10);
//level2
var INVALID_STATE_ERR = ExceptionCode.INVALID_STATE_ERR = (ExceptionMessage[11] = "Invalid state", 11);
var SYNTAX_ERR = ExceptionCode.SYNTAX_ERR = (ExceptionMessage[12] = "Syntax error", 12);
var INVALID_MODIFICATION_ERR = ExceptionCode.INVALID_MODIFICATION_ERR = (ExceptionMessage[13] = "Invalid modification", 13);
var NAMESPACE_ERR = ExceptionCode.NAMESPACE_ERR = (ExceptionMessage[14] = "Invalid namespace", 14);
var INVALID_ACCESS_ERR = ExceptionCode.INVALID_ACCESS_ERR = (ExceptionMessage[15] = "Invalid access", 15);

function DOMException(code, message) {
	if (message instanceof Error) {
		var error = message;
	} else {
		error = this;
		Error.call(this, ExceptionMessage[code]);
		this.message = ExceptionMessage[code];
		if (Error.captureStackTrace) Error.captureStackTrace(this, DOMException);
	}
	error.code = code;
	if (message) this.message = this.message + ": " + message;
	return error;
}
DOMException.prototype = Error.prototype;
copy$8(ExceptionCode, DOMException);
/**
 * @see http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/core.html#ID-536297177
 * The NodeList interface provides the abstraction of an ordered collection of nodes, without defining or constraining how this collection is implemented. NodeList objects in the DOM are live.
 * The items in the NodeList are accessible via an integral index, starting from 0.
 */
function NodeList() {}
NodeList.prototype = {
	/**
  * The number of nodes in the list. The range of valid child node indices is 0 to length-1 inclusive.
  * @standard level1
  */
	length: 0,
	/**
  * Returns the indexth item in the collection. If index is greater than or equal to the number of nodes in the list, this returns null.
  * @standard level1
  * @param index  unsigned long 
  *   Index into the collection.
  * @return Node
  * 	The node at the indexth position in the NodeList, or null if that is not a valid index. 
  */
	item: function item(index) {
		return this[index] || null;
	},
	toString: function toString(isHTML, nodeFilter) {
		for (var buf = [], i = 0; i < this.length; i++) {
			serializeToString(this[i], buf, isHTML, nodeFilter);
		}
		return buf.join('');
	}
};
function LiveNodeList(node, refresh) {
	this._node = node;
	this._refresh = refresh;
	_updateLiveList(this);
}
function _updateLiveList(list) {
	var inc = list._node._inc || list._node.ownerDocument._inc;
	if (list._inc != inc) {
		var ls = list._refresh(list._node);
		//console.log(ls.length)
		__set__(list, 'length', ls.length);
		copy$8(ls, list);
		list._inc = inc;
	}
}
LiveNodeList.prototype.item = function (i) {
	_updateLiveList(this);
	return this[i];
};

_extends$1(LiveNodeList, NodeList);
/**
 * 
 * Objects implementing the NamedNodeMap interface are used to represent collections of nodes that can be accessed by name. Note that NamedNodeMap does not inherit from NodeList; NamedNodeMaps are not maintained in any particular order. Objects contained in an object implementing NamedNodeMap may also be accessed by an ordinal index, but this is simply to allow convenient enumeration of the contents of a NamedNodeMap, and does not imply that the DOM specifies an order to these Nodes.
 * NamedNodeMap objects in the DOM are live.
 * used for attributes or DocumentType entities 
 */
function NamedNodeMap() {}

function _findNodeIndex(list, node) {
	var i = list.length;
	while (i--) {
		if (list[i] === node) {
			return i;
		}
	}
}

function _addNamedNode(el, list, newAttr, oldAttr) {
	if (oldAttr) {
		list[_findNodeIndex(list, oldAttr)] = newAttr;
	} else {
		list[list.length++] = newAttr;
	}
	if (el) {
		newAttr.ownerElement = el;
		var doc = el.ownerDocument;
		if (doc) {
			oldAttr && _onRemoveAttribute(doc, el, oldAttr);
			_onAddAttribute(doc, el, newAttr);
		}
	}
}
function _removeNamedNode(el, list, attr) {
	//console.log('remove attr:'+attr)
	var i = _findNodeIndex(list, attr);
	if (i >= 0) {
		var lastIndex = list.length - 1;
		while (i < lastIndex) {
			list[i] = list[++i];
		}
		list.length = lastIndex;
		if (el) {
			var doc = el.ownerDocument;
			if (doc) {
				_onRemoveAttribute(doc, el, attr);
				attr.ownerElement = null;
			}
		}
	} else {
		throw DOMException(NOT_FOUND_ERR, new Error(el.tagName + '@' + attr));
	}
}
NamedNodeMap.prototype = {
	length: 0,
	item: NodeList.prototype.item,
	getNamedItem: function getNamedItem(key) {
		//		if(key.indexOf(':')>0 || key == 'xmlns'){
		//			return null;
		//		}
		//console.log()
		var i = this.length;
		while (i--) {
			var attr = this[i];
			//console.log(attr.nodeName,key)
			if (attr.nodeName == key) {
				return attr;
			}
		}
	},
	setNamedItem: function setNamedItem(attr) {
		var el = attr.ownerElement;
		if (el && el != this._ownerElement) {
			throw new DOMException(INUSE_ATTRIBUTE_ERR);
		}
		var oldAttr = this.getNamedItem(attr.nodeName);
		_addNamedNode(this._ownerElement, this, attr, oldAttr);
		return oldAttr;
	},
	/* returns Node */
	setNamedItemNS: function setNamedItemNS(attr) {
		// raises: WRONG_DOCUMENT_ERR,NO_MODIFICATION_ALLOWED_ERR,INUSE_ATTRIBUTE_ERR
		var el = attr.ownerElement,
		    oldAttr;
		if (el && el != this._ownerElement) {
			throw new DOMException(INUSE_ATTRIBUTE_ERR);
		}
		oldAttr = this.getNamedItemNS(attr.namespaceURI, attr.localName);
		_addNamedNode(this._ownerElement, this, attr, oldAttr);
		return oldAttr;
	},

	/* returns Node */
	removeNamedItem: function removeNamedItem(key) {
		var attr = this.getNamedItem(key);
		_removeNamedNode(this._ownerElement, this, attr);
		return attr;
	}, // raises: NOT_FOUND_ERR,NO_MODIFICATION_ALLOWED_ERR

	//for level2
	removeNamedItemNS: function removeNamedItemNS(namespaceURI, localName) {
		var attr = this.getNamedItemNS(namespaceURI, localName);
		_removeNamedNode(this._ownerElement, this, attr);
		return attr;
	},
	getNamedItemNS: function getNamedItemNS(namespaceURI, localName) {
		var i = this.length;
		while (i--) {
			var node = this[i];
			if (node.localName == localName && node.namespaceURI == namespaceURI) {
				return node;
			}
		}
		return null;
	}
};
/**
 * @see http://www.w3.org/TR/REC-DOM-Level-1/level-one-core.html#ID-102161490
 */
function DOMImplementation( /* Object */features) {
	this._features = {};
	if (features) {
		for (var feature in features) {
			this._features = features[feature];
		}
	}
}

DOMImplementation.prototype = {
	hasFeature: function hasFeature( /* string */feature, /* string */version) {
		var versions = this._features[feature.toLowerCase()];
		if (versions && (!version || version in versions)) {
			return true;
		} else {
			return false;
		}
	},
	// Introduced in DOM Level 2:
	createDocument: function createDocument(namespaceURI, qualifiedName, doctype) {
		// raises:INVALID_CHARACTER_ERR,NAMESPACE_ERR,WRONG_DOCUMENT_ERR
		var doc = new Document();
		doc.implementation = this;
		doc.childNodes = new NodeList();
		doc.doctype = doctype;
		if (doctype) {
			doc.appendChild(doctype);
		}
		if (qualifiedName) {
			var root = doc.createElementNS(namespaceURI, qualifiedName);
			doc.appendChild(root);
		}
		return doc;
	},
	// Introduced in DOM Level 2:
	createDocumentType: function createDocumentType(qualifiedName, publicId, systemId) {
		// raises:INVALID_CHARACTER_ERR,NAMESPACE_ERR
		var node = new DocumentType();
		node.name = qualifiedName;
		node.nodeName = qualifiedName;
		node.publicId = publicId;
		node.systemId = systemId;
		// Introduced in DOM Level 2:
		//readonly attribute DOMString        internalSubset;

		//TODO:..
		//  readonly attribute NamedNodeMap     entities;
		//  readonly attribute NamedNodeMap     notations;
		return node;
	}
};

/**
 * @see http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/core.html#ID-1950641247
 */

function Node() {}

Node.prototype = {
	firstChild: null,
	lastChild: null,
	previousSibling: null,
	nextSibling: null,
	attributes: null,
	parentNode: null,
	childNodes: null,
	ownerDocument: null,
	nodeValue: null,
	namespaceURI: null,
	prefix: null,
	localName: null,
	// Modified in DOM Level 2:
	insertBefore: function insertBefore(newChild, refChild) {
		//raises 
		return _insertBefore(this, newChild, refChild);
	},
	replaceChild: function replaceChild(newChild, oldChild) {
		//raises 
		this.insertBefore(newChild, oldChild);
		if (oldChild) {
			this.removeChild(oldChild);
		}
	},
	removeChild: function removeChild(oldChild) {
		return _removeChild(this, oldChild);
	},
	appendChild: function appendChild(newChild) {
		return this.insertBefore(newChild, null);
	},
	hasChildNodes: function hasChildNodes() {
		return this.firstChild != null;
	},
	cloneNode: function cloneNode(deep) {
		return _cloneNode(this.ownerDocument || this, this, deep);
	},
	// Modified in DOM Level 2:
	normalize: function normalize() {
		var child = this.firstChild;
		while (child) {
			var next = child.nextSibling;
			if (next && next.nodeType == TEXT_NODE && child.nodeType == TEXT_NODE) {
				this.removeChild(next);
				child.appendData(next.data);
			} else {
				child.normalize();
				child = next;
			}
		}
	},
	// Introduced in DOM Level 2:
	isSupported: function isSupported(feature, version) {
		return this.ownerDocument.implementation.hasFeature(feature, version);
	},
	// Introduced in DOM Level 2:
	hasAttributes: function hasAttributes() {
		return this.attributes.length > 0;
	},
	lookupPrefix: function lookupPrefix(namespaceURI) {
		var el = this;
		while (el) {
			var map = el._nsMap;
			//console.dir(map)
			if (map) {
				for (var n in map) {
					if (map[n] == namespaceURI) {
						return n;
					}
				}
			}
			el = el.nodeType == ATTRIBUTE_NODE ? el.ownerDocument : el.parentNode;
		}
		return null;
	},
	// Introduced in DOM Level 3:
	lookupNamespaceURI: function lookupNamespaceURI(prefix) {
		var el = this;
		while (el) {
			var map = el._nsMap;
			//console.dir(map)
			if (map) {
				if (prefix in map) {
					return map[prefix];
				}
			}
			el = el.nodeType == ATTRIBUTE_NODE ? el.ownerDocument : el.parentNode;
		}
		return null;
	},
	// Introduced in DOM Level 3:
	isDefaultNamespace: function isDefaultNamespace(namespaceURI) {
		var prefix = this.lookupPrefix(namespaceURI);
		return prefix == null;
	}
};

function _xmlEncoder(c) {
	return c == '<' && '&lt;' || c == '>' && '&gt;' || c == '&' && '&amp;' || c == '"' && '&quot;' || '&#' + c.charCodeAt() + ';';
}

copy$8(NodeType, Node);
copy$8(NodeType, Node.prototype);

/**
 * @param callback return true for continue,false for break
 * @return boolean true: break visit;
 */
function _visitNode(node, callback) {
	if (callback(node)) {
		return true;
	}
	if (node = node.firstChild) {
		do {
			if (_visitNode(node, callback)) {
				return true;
			}
		} while (node = node.nextSibling);
	}
}

function Document() {}
function _onAddAttribute(doc, el, newAttr) {
	doc && doc._inc++;
	var ns = newAttr.namespaceURI;
	if (ns == 'http://www.w3.org/2000/xmlns/') {
		//update namespace
		el._nsMap[newAttr.prefix ? newAttr.localName : ''] = newAttr.value;
	}
}
function _onRemoveAttribute(doc, el, newAttr, remove) {
	doc && doc._inc++;
	var ns = newAttr.namespaceURI;
	if (ns == 'http://www.w3.org/2000/xmlns/') {
		//update namespace
		delete el._nsMap[newAttr.prefix ? newAttr.localName : ''];
	}
}
function _onUpdateChild(doc, el, newChild) {
	if (doc && doc._inc) {
		doc._inc++;
		//update childNodes
		var cs = el.childNodes;
		if (newChild) {
			cs[cs.length++] = newChild;
		} else {
			//console.log(1)
			var child = el.firstChild;
			var i = 0;
			while (child) {
				cs[i++] = child;
				child = child.nextSibling;
			}
			cs.length = i;
		}
	}
}

/**
 * attributes;
 * children;
 * 
 * writeable properties:
 * nodeValue,Attr:value,CharacterData:data
 * prefix
 */
function _removeChild(parentNode, child) {
	var previous = child.previousSibling;
	var next = child.nextSibling;
	if (previous) {
		previous.nextSibling = next;
	} else {
		parentNode.firstChild = next;
	}
	if (next) {
		next.previousSibling = previous;
	} else {
		parentNode.lastChild = previous;
	}
	_onUpdateChild(parentNode.ownerDocument, parentNode);
	return child;
}
/**
 * preformance key(refChild == null)
 */
function _insertBefore(parentNode, newChild, nextChild) {
	var cp = newChild.parentNode;
	if (cp) {
		cp.removeChild(newChild); //remove and update
	}
	if (newChild.nodeType === DOCUMENT_FRAGMENT_NODE) {
		var newFirst = newChild.firstChild;
		if (newFirst == null) {
			return newChild;
		}
		var newLast = newChild.lastChild;
	} else {
		newFirst = newLast = newChild;
	}
	var pre = nextChild ? nextChild.previousSibling : parentNode.lastChild;

	newFirst.previousSibling = pre;
	newLast.nextSibling = nextChild;

	if (pre) {
		pre.nextSibling = newFirst;
	} else {
		parentNode.firstChild = newFirst;
	}
	if (nextChild == null) {
		parentNode.lastChild = newLast;
	} else {
		nextChild.previousSibling = newLast;
	}
	do {
		newFirst.parentNode = parentNode;
	} while (newFirst !== newLast && (newFirst = newFirst.nextSibling));
	_onUpdateChild(parentNode.ownerDocument || parentNode, parentNode);
	//console.log(parentNode.lastChild.nextSibling == null)
	if (newChild.nodeType == DOCUMENT_FRAGMENT_NODE) {
		newChild.firstChild = newChild.lastChild = null;
	}
	return newChild;
}
function _appendSingleChild(parentNode, newChild) {
	var cp = newChild.parentNode;
	if (cp) {
		var pre = parentNode.lastChild;
		cp.removeChild(newChild); //remove and update
		var pre = parentNode.lastChild;
	}
	var pre = parentNode.lastChild;
	newChild.parentNode = parentNode;
	newChild.previousSibling = pre;
	newChild.nextSibling = null;
	if (pre) {
		pre.nextSibling = newChild;
	} else {
		parentNode.firstChild = newChild;
	}
	parentNode.lastChild = newChild;
	_onUpdateChild(parentNode.ownerDocument, parentNode, newChild);
	return newChild;
	//console.log("__aa",parentNode.lastChild.nextSibling == null)
}
Document.prototype = {
	//implementation : null,
	nodeName: '#document',
	nodeType: DOCUMENT_NODE,
	doctype: null,
	documentElement: null,
	_inc: 1,

	insertBefore: function insertBefore(newChild, refChild) {
		//raises 
		if (newChild.nodeType == DOCUMENT_FRAGMENT_NODE) {
			var child = newChild.firstChild;
			while (child) {
				var next = child.nextSibling;
				this.insertBefore(child, refChild);
				child = next;
			}
			return newChild;
		}
		if (this.documentElement == null && newChild.nodeType == ELEMENT_NODE) {
			this.documentElement = newChild;
		}

		return _insertBefore(this, newChild, refChild), newChild.ownerDocument = this, newChild;
	},
	removeChild: function removeChild(oldChild) {
		if (this.documentElement == oldChild) {
			this.documentElement = null;
		}
		return _removeChild(this, oldChild);
	},
	// Introduced in DOM Level 2:
	importNode: function importNode(importedNode, deep) {
		return _importNode(this, importedNode, deep);
	},
	// Introduced in DOM Level 2:
	getElementById: function getElementById(id) {
		var rtv = null;
		_visitNode(this.documentElement, function (node) {
			if (node.nodeType == ELEMENT_NODE) {
				if (node.getAttribute('id') == id) {
					rtv = node;
					return true;
				}
			}
		});
		return rtv;
	},

	//document factory method:
	createElement: function createElement(tagName) {
		var node = new Element();
		node.ownerDocument = this;
		node.nodeName = tagName;
		node.tagName = tagName;
		node.childNodes = new NodeList();
		var attrs = node.attributes = new NamedNodeMap();
		attrs._ownerElement = node;
		return node;
	},
	createDocumentFragment: function createDocumentFragment() {
		var node = new DocumentFragment();
		node.ownerDocument = this;
		node.childNodes = new NodeList();
		return node;
	},
	createTextNode: function createTextNode(data) {
		var node = new Text();
		node.ownerDocument = this;
		node.appendData(data);
		return node;
	},
	createComment: function createComment(data) {
		var node = new Comment();
		node.ownerDocument = this;
		node.appendData(data);
		return node;
	},
	createCDATASection: function createCDATASection(data) {
		var node = new CDATASection();
		node.ownerDocument = this;
		node.appendData(data);
		return node;
	},
	createProcessingInstruction: function createProcessingInstruction(target, data) {
		var node = new ProcessingInstruction();
		node.ownerDocument = this;
		node.tagName = node.target = target;
		node.nodeValue = node.data = data;
		return node;
	},
	createAttribute: function createAttribute(name) {
		var node = new Attr();
		node.ownerDocument = this;
		node.name = name;
		node.nodeName = name;
		node.localName = name;
		node.specified = true;
		return node;
	},
	createEntityReference: function createEntityReference(name) {
		var node = new EntityReference();
		node.ownerDocument = this;
		node.nodeName = name;
		return node;
	},
	// Introduced in DOM Level 2:
	createElementNS: function createElementNS(namespaceURI, qualifiedName) {
		var node = new Element();
		var pl = qualifiedName.split(':');
		var attrs = node.attributes = new NamedNodeMap();
		node.childNodes = new NodeList();
		node.ownerDocument = this;
		node.nodeName = qualifiedName;
		node.tagName = qualifiedName;
		node.namespaceURI = namespaceURI;
		if (pl.length == 2) {
			node.prefix = pl[0];
			node.localName = pl[1];
		} else {
			//el.prefix = null;
			node.localName = qualifiedName;
		}
		attrs._ownerElement = node;
		return node;
	},
	// Introduced in DOM Level 2:
	createAttributeNS: function createAttributeNS(namespaceURI, qualifiedName) {
		var node = new Attr();
		var pl = qualifiedName.split(':');
		node.ownerDocument = this;
		node.nodeName = qualifiedName;
		node.name = qualifiedName;
		node.namespaceURI = namespaceURI;
		node.specified = true;
		if (pl.length == 2) {
			node.prefix = pl[0];
			node.localName = pl[1];
		} else {
			//el.prefix = null;
			node.localName = qualifiedName;
		}
		return node;
	}
};
_extends$1(Document, Node);

function Element() {
	this._nsMap = {};
}
Element.prototype = {
	nodeType: ELEMENT_NODE,
	hasAttribute: function hasAttribute(name) {
		return this.getAttributeNode(name) != null;
	},
	getAttribute: function getAttribute(name) {
		var attr = this.getAttributeNode(name);
		return attr && attr.value || '';
	},
	getAttributeNode: function getAttributeNode(name) {
		return this.attributes.getNamedItem(name);
	},
	setAttribute: function setAttribute(name, value) {
		var attr = this.ownerDocument.createAttribute(name);
		attr.value = attr.nodeValue = "" + value;
		this.setAttributeNode(attr);
	},
	removeAttribute: function removeAttribute(name) {
		var attr = this.getAttributeNode(name);
		attr && this.removeAttributeNode(attr);
	},

	//four real opeartion method
	appendChild: function appendChild(newChild) {
		if (newChild.nodeType === DOCUMENT_FRAGMENT_NODE) {
			return this.insertBefore(newChild, null);
		} else {
			return _appendSingleChild(this, newChild);
		}
	},
	setAttributeNode: function setAttributeNode(newAttr) {
		return this.attributes.setNamedItem(newAttr);
	},
	setAttributeNodeNS: function setAttributeNodeNS(newAttr) {
		return this.attributes.setNamedItemNS(newAttr);
	},
	removeAttributeNode: function removeAttributeNode(oldAttr) {
		//console.log(this == oldAttr.ownerElement)
		return this.attributes.removeNamedItem(oldAttr.nodeName);
	},
	//get real attribute name,and remove it by removeAttributeNode
	removeAttributeNS: function removeAttributeNS(namespaceURI, localName) {
		var old = this.getAttributeNodeNS(namespaceURI, localName);
		old && this.removeAttributeNode(old);
	},

	hasAttributeNS: function hasAttributeNS(namespaceURI, localName) {
		return this.getAttributeNodeNS(namespaceURI, localName) != null;
	},
	getAttributeNS: function getAttributeNS(namespaceURI, localName) {
		var attr = this.getAttributeNodeNS(namespaceURI, localName);
		return attr && attr.value || '';
	},
	setAttributeNS: function setAttributeNS(namespaceURI, qualifiedName, value) {
		var attr = this.ownerDocument.createAttributeNS(namespaceURI, qualifiedName);
		attr.value = attr.nodeValue = "" + value;
		this.setAttributeNode(attr);
	},
	getAttributeNodeNS: function getAttributeNodeNS(namespaceURI, localName) {
		return this.attributes.getNamedItemNS(namespaceURI, localName);
	},

	getElementsByTagName: function getElementsByTagName(tagName) {
		return new LiveNodeList(this, function (base) {
			var ls = [];
			_visitNode(base, function (node) {
				if (node !== base && node.nodeType == ELEMENT_NODE && (tagName === '*' || node.tagName == tagName)) {
					ls.push(node);
				}
			});
			return ls;
		});
	},
	getElementsByTagNameNS: function getElementsByTagNameNS(namespaceURI, localName) {
		return new LiveNodeList(this, function (base) {
			var ls = [];
			_visitNode(base, function (node) {
				if (node !== base && node.nodeType === ELEMENT_NODE && (namespaceURI === '*' || node.namespaceURI === namespaceURI) && (localName === '*' || node.localName == localName)) {
					ls.push(node);
				}
			});
			return ls;
		});
	}
};
Document.prototype.getElementsByTagName = Element.prototype.getElementsByTagName;
Document.prototype.getElementsByTagNameNS = Element.prototype.getElementsByTagNameNS;

_extends$1(Element, Node);
function Attr() {}
Attr.prototype.nodeType = ATTRIBUTE_NODE;
_extends$1(Attr, Node);

function CharacterData() {}
CharacterData.prototype = {
	data: '',
	substringData: function substringData(offset, count) {
		return this.data.substring(offset, offset + count);
	},
	appendData: function appendData(text) {
		text = this.data + text;
		this.nodeValue = this.data = text;
		this.length = text.length;
	},
	insertData: function insertData(offset, text) {
		this.replaceData(offset, 0, text);
	},
	appendChild: function appendChild(newChild) {
		throw new Error(ExceptionMessage[HIERARCHY_REQUEST_ERR]);
	},
	deleteData: function deleteData(offset, count) {
		this.replaceData(offset, count, "");
	},
	replaceData: function replaceData(offset, count, text) {
		var start = this.data.substring(0, offset);
		var end = this.data.substring(offset + count);
		text = start + text + end;
		this.nodeValue = this.data = text;
		this.length = text.length;
	}
};
_extends$1(CharacterData, Node);
function Text() {}
Text.prototype = {
	nodeName: "#text",
	nodeType: TEXT_NODE,
	splitText: function splitText(offset) {
		var text = this.data;
		var newText = text.substring(offset);
		text = text.substring(0, offset);
		this.data = this.nodeValue = text;
		this.length = text.length;
		var newNode = this.ownerDocument.createTextNode(newText);
		if (this.parentNode) {
			this.parentNode.insertBefore(newNode, this.nextSibling);
		}
		return newNode;
	}
};
_extends$1(Text, CharacterData);
function Comment() {}
Comment.prototype = {
	nodeName: "#comment",
	nodeType: COMMENT_NODE
};
_extends$1(Comment, CharacterData);

function CDATASection() {}
CDATASection.prototype = {
	nodeName: "#cdata-section",
	nodeType: CDATA_SECTION_NODE
};
_extends$1(CDATASection, CharacterData);

function DocumentType() {}
DocumentType.prototype.nodeType = DOCUMENT_TYPE_NODE;
_extends$1(DocumentType, Node);

function Notation() {}
Notation.prototype.nodeType = NOTATION_NODE;
_extends$1(Notation, Node);

function Entity() {}
Entity.prototype.nodeType = ENTITY_NODE;
_extends$1(Entity, Node);

function EntityReference() {}
EntityReference.prototype.nodeType = ENTITY_REFERENCE_NODE;
_extends$1(EntityReference, Node);

function DocumentFragment() {}
DocumentFragment.prototype.nodeName = "#document-fragment";
DocumentFragment.prototype.nodeType = DOCUMENT_FRAGMENT_NODE;
_extends$1(DocumentFragment, Node);

function ProcessingInstruction() {}
ProcessingInstruction.prototype.nodeType = PROCESSING_INSTRUCTION_NODE;
_extends$1(ProcessingInstruction, Node);
function XMLSerializer() {}
XMLSerializer.prototype.serializeToString = function (node, isHtml, nodeFilter) {
	return nodeSerializeToString.call(node, isHtml, nodeFilter);
};
Node.prototype.toString = nodeSerializeToString;
function nodeSerializeToString(isHtml, nodeFilter) {
	var buf = [];
	var refNode = this.nodeType == 9 ? this.documentElement : this;
	var prefix = refNode.prefix;
	var uri = refNode.namespaceURI;

	if (uri && prefix == null) {
		//console.log(prefix)
		var prefix = refNode.lookupPrefix(uri);
		if (prefix == null) {
			//isHTML = true;
			var visibleNamespaces = [{ namespace: uri, prefix: null
				//{namespace:uri,prefix:''}
			}];
		}
	}
	serializeToString(this, buf, isHtml, nodeFilter, visibleNamespaces);
	//console.log('###',this.nodeType,uri,prefix,buf.join(''))
	return buf.join('');
}
function needNamespaceDefine(node, isHTML, visibleNamespaces) {
	var prefix = node.prefix || '';
	var uri = node.namespaceURI;
	if (!prefix && !uri) {
		return false;
	}
	if (prefix === "xml" && uri === "http://www.w3.org/XML/1998/namespace" || uri == 'http://www.w3.org/2000/xmlns/') {
		return false;
	}

	var i = visibleNamespaces.length;
	//console.log('@@@@',node.tagName,prefix,uri,visibleNamespaces)
	while (i--) {
		var ns = visibleNamespaces[i];
		// get namespace prefix
		//console.log(node.nodeType,node.tagName,ns.prefix,prefix)
		if (ns.prefix == prefix) {
			return ns.namespace != uri;
		}
	}
	//console.log(isHTML,uri,prefix=='')
	//if(isHTML && prefix ==null && uri == 'http://www.w3.org/1999/xhtml'){
	//	return false;
	//}
	//node.flag = '11111'
	//console.error(3,true,node.flag,node.prefix,node.namespaceURI)
	return true;
}
function serializeToString(node, buf, isHTML, nodeFilter, visibleNamespaces) {
	if (nodeFilter) {
		node = nodeFilter(node);
		if (node) {
			if (typeof node == 'string') {
				buf.push(node);
				return;
			}
		} else {
			return;
		}
		//buf.sort.apply(attrs, attributeSorter);
	}
	switch (node.nodeType) {
		case ELEMENT_NODE:
			if (!visibleNamespaces) visibleNamespaces = [];
			
			var attrs = node.attributes;
			var len = attrs.length;
			var child = node.firstChild;
			var nodeName = node.tagName;

			isHTML = htmlns === node.namespaceURI || isHTML;
			buf.push('<', nodeName);

			for (var i = 0; i < len; i++) {
				// add namespaces for attributes
				var attr = attrs.item(i);
				if (attr.prefix == 'xmlns') {
					visibleNamespaces.push({ prefix: attr.localName, namespace: attr.value });
				} else if (attr.nodeName == 'xmlns') {
					visibleNamespaces.push({ prefix: '', namespace: attr.value });
				}
			}
			for (var i = 0; i < len; i++) {
				var attr = attrs.item(i);
				if (needNamespaceDefine(attr, isHTML, visibleNamespaces)) {
					var prefix = attr.prefix || '';
					var uri = attr.namespaceURI;
					var ns = prefix ? ' xmlns:' + prefix : " xmlns";
					buf.push(ns, '="', uri, '"');
					visibleNamespaces.push({ prefix: prefix, namespace: uri });
				}
				serializeToString(attr, buf, isHTML, nodeFilter, visibleNamespaces);
			}
			// add namespace for current node		
			if (needNamespaceDefine(node, isHTML, visibleNamespaces)) {
				var prefix = node.prefix || '';
				var uri = node.namespaceURI;
				var ns = prefix ? ' xmlns:' + prefix : " xmlns";
				buf.push(ns, '="', uri, '"');
				visibleNamespaces.push({ prefix: prefix, namespace: uri });
			}

			if (child || isHTML && !/^(?:meta|link|img|br|hr|input)$/i.test(nodeName)) {
				buf.push('>');
				//if is cdata child node
				if (isHTML && /^script$/i.test(nodeName)) {
					while (child) {
						if (child.data) {
							buf.push(child.data);
						} else {
							serializeToString(child, buf, isHTML, nodeFilter, visibleNamespaces);
						}
						child = child.nextSibling;
					}
				} else {
					while (child) {
						serializeToString(child, buf, isHTML, nodeFilter, visibleNamespaces);
						child = child.nextSibling;
					}
				}
				buf.push('</', nodeName, '>');
			} else {
				buf.push('/>');
			}
			// remove added visible namespaces
			//visibleNamespaces.length = startVisibleNamespaces;
			return;
		case DOCUMENT_NODE:
		case DOCUMENT_FRAGMENT_NODE:
			var child = node.firstChild;
			while (child) {
				serializeToString(child, buf, isHTML, nodeFilter, visibleNamespaces);
				child = child.nextSibling;
			}
			return;
		case ATTRIBUTE_NODE:
			return buf.push(' ', node.name, '="', node.value.replace(/[<&"]/g, _xmlEncoder), '"');
		case TEXT_NODE:
			return buf.push(node.data.replace(/[<&]/g, _xmlEncoder));
		case CDATA_SECTION_NODE:
			return buf.push('<![CDATA[', node.data, ']]>');
		case COMMENT_NODE:
			return buf.push("<!--", node.data, "-->");
		case DOCUMENT_TYPE_NODE:
			var pubid = node.publicId;
			var sysid = node.systemId;
			buf.push('<!DOCTYPE ', node.name);
			if (pubid) {
				buf.push(' PUBLIC "', pubid);
				if (sysid && sysid != '.') {
					buf.push('" "', sysid);
				}
				buf.push('">');
			} else if (sysid && sysid != '.') {
				buf.push(' SYSTEM "', sysid, '">');
			} else {
				var sub = node.internalSubset;
				if (sub) {
					buf.push(" [", sub, "]");
				}
				buf.push(">");
			}
			return;
		case PROCESSING_INSTRUCTION_NODE:
			return buf.push("<?", node.target, " ", node.data, "?>");
		case ENTITY_REFERENCE_NODE:
			return buf.push('&', node.nodeName, ';');
		//case ENTITY_NODE:
		//case NOTATION_NODE:
		default:
			buf.push('??', node.nodeName);
	}
}
function _importNode(doc, node, deep) {
	var node2;
	switch (node.nodeType) {
		case ELEMENT_NODE:
			node2 = node.cloneNode(false);
			node2.ownerDocument = doc;
		//var attrs = node2.attributes;
		//var len = attrs.length;
		//for(var i=0;i<len;i++){
		//node2.setAttributeNodeNS(importNode(doc,attrs.item(i),deep));
		//}
		case DOCUMENT_FRAGMENT_NODE:
			break;
		case ATTRIBUTE_NODE:
			deep = true;
			break;
		//case ENTITY_REFERENCE_NODE:
		//case PROCESSING_INSTRUCTION_NODE:
		////case TEXT_NODE:
		//case CDATA_SECTION_NODE:
		//case COMMENT_NODE:
		//	deep = false;
		//	break;
		//case DOCUMENT_NODE:
		//case DOCUMENT_TYPE_NODE:
		//cannot be imported.
		//case ENTITY_NODE:
		//case NOTATION_NODE：
		//can not hit in level3
		//default:throw e;
	}
	if (!node2) {
		node2 = node.cloneNode(false); //false
	}
	node2.ownerDocument = doc;
	node2.parentNode = null;
	if (deep) {
		var child = node.firstChild;
		while (child) {
			node2.appendChild(_importNode(doc, child, deep));
			child = child.nextSibling;
		}
	}
	return node2;
}
//
//var _relationMap = {firstChild:1,lastChild:1,previousSibling:1,nextSibling:1,
//					attributes:1,childNodes:1,parentNode:1,documentElement:1,doctype,};
function _cloneNode(doc, node, deep) {
	var node2 = new node.constructor();
	for (var n in node) {
		var v = node[n];
		if ((typeof v === 'undefined' ? 'undefined' : _typeof(v)) != 'object') {
			if (v != node2[n]) {
				node2[n] = v;
			}
		}
	}
	if (node.childNodes) {
		node2.childNodes = new NodeList();
	}
	node2.ownerDocument = doc;
	switch (node2.nodeType) {
		case ELEMENT_NODE:
			var attrs = node.attributes;
			var attrs2 = node2.attributes = new NamedNodeMap();
			var len = attrs.length;
			attrs2._ownerElement = node2;
			for (var i = 0; i < len; i++) {
				node2.setAttributeNode(_cloneNode(doc, attrs.item(i), true));
			}
			break;;
		case ATTRIBUTE_NODE:
			deep = true;
	}
	if (deep) {
		var child = node.firstChild;
		while (child) {
			node2.appendChild(_cloneNode(doc, child, deep));
			child = child.nextSibling;
		}
	}
	return node2;
}

function __set__(object, key, value) {
	object[key] = value;
}
//do dynamic
try {
	if (Object.defineProperty) {
		var getTextContent = function getTextContent(node) {
			switch (node.nodeType) {
				case ELEMENT_NODE:
				case DOCUMENT_FRAGMENT_NODE:
					var buf = [];
					node = node.firstChild;
					while (node) {
						if (node.nodeType !== 7 && node.nodeType !== 8) {
							buf.push(getTextContent(node));
						}
						node = node.nextSibling;
					}
					return buf.join('');
				default:
					return node.nodeValue;
			}
		};

		Object.defineProperty(LiveNodeList.prototype, 'length', {
			get: function get$$1() {
				_updateLiveList(this);
				return this.$$length;
			}
		});
		Object.defineProperty(Node.prototype, 'textContent', {
			get: function get$$1() {
				return getTextContent(this);
			},
			set: function set(data) {
				switch (this.nodeType) {
					case ELEMENT_NODE:
					case DOCUMENT_FRAGMENT_NODE:
						while (this.firstChild) {
							this.removeChild(this.firstChild);
						}
						if (data || String(data)) {
							this.appendChild(this.ownerDocument.createTextNode(data));
						}
						break;
					default:
						//TODO:
						this.data = data;
						this.value = data;
						this.nodeValue = data;
				}
			}
		});

		__set__ = function __set__(object, key, value) {
			//console.log(value)
			object['$$' + key] = value;
		};
	}
} catch (e) {} //ie8


//if(typeof require == 'function'){
var DOMImplementation_1 = DOMImplementation;
var XMLSerializer_1 = XMLSerializer;
//}

var dom = {
	DOMImplementation: DOMImplementation_1,
	XMLSerializer: XMLSerializer_1
};

var domParser = createCommonjsModule$$1(function (module, exports) {
	function DOMParser(options) {
		this.options = options || { locator: {} };
	}
	DOMParser.prototype.parseFromString = function (source, mimeType) {
		var options = this.options;
		var sax$$1 = new XMLReader();
		var domBuilder = options.domBuilder || new DOMHandler(); //contentHandler and LexicalHandler
		var errorHandler = options.errorHandler;
		var locator = options.locator;
		var defaultNSMap = options.xmlns || {};
		var entityMap = { 'lt': '<', 'gt': '>', 'amp': '&', 'quot': '"', 'apos': "'" };
		if (locator) {
			domBuilder.setDocumentLocator(locator);
		}

		sax$$1.errorHandler = buildErrorHandler(errorHandler, domBuilder, locator);
		sax$$1.domBuilder = options.domBuilder || domBuilder;
		if (/\/x?html?$/.test(mimeType)) {
			entityMap.nbsp = '\xa0';
			entityMap.copy = '\xa9';
			defaultNSMap[''] = 'http://www.w3.org/1999/xhtml';
		}
		defaultNSMap.xml = defaultNSMap.xml || 'http://www.w3.org/XML/1998/namespace';
		if (source) {
			sax$$1.parse(source, defaultNSMap, entityMap);
		} else {
			sax$$1.errorHandler.error("invalid doc source");
		}
		return domBuilder.doc;
	};
	function buildErrorHandler(errorImpl, domBuilder, locator) {
		if (!errorImpl) {
			if (domBuilder instanceof DOMHandler) {
				return domBuilder;
			}
			errorImpl = domBuilder;
		}
		var errorHandler = {};
		var isCallback = errorImpl instanceof Function;
		locator = locator || {};
		function build(key) {
			var fn = errorImpl[key];
			if (!fn && isCallback) {
				fn = errorImpl.length == 2 ? function (msg) {
					errorImpl(key, msg);
				} : errorImpl;
			}
			errorHandler[key] = fn && function (msg) {
				fn('[xmldom ' + key + ']\t' + msg + _locator(locator));
			} || function () {};
		}
		build('warning');
		build('error');
		build('fatalError');
		return errorHandler;
	}

	//console.log('#\n\n\n\n\n\n\n####')
	/**
  * +ContentHandler+ErrorHandler
  * +LexicalHandler+EntityResolver2
  * -DeclHandler-DTDHandler 
  * 
  * DefaultHandler:EntityResolver, DTDHandler, ContentHandler, ErrorHandler
  * DefaultHandler2:DefaultHandler,LexicalHandler, DeclHandler, EntityResolver2
  * @link http://www.saxproject.org/apidoc/org/xml/sax/helpers/DefaultHandler.html
  */
	function DOMHandler() {
		this.cdata = false;
	}
	function position(locator, node) {
		node.lineNumber = locator.lineNumber;
		node.columnNumber = locator.columnNumber;
	}
	/**
  * @see org.xml.sax.ContentHandler#startDocument
  * @link http://www.saxproject.org/apidoc/org/xml/sax/ContentHandler.html
  */
	DOMHandler.prototype = {
		startDocument: function startDocument() {
			this.doc = new DOMImplementation().createDocument(null, null, null);
			if (this.locator) {
				this.doc.documentURI = this.locator.systemId;
			}
		},
		startElement: function startElement(namespaceURI, localName, qName, attrs) {
			var doc = this.doc;
			var el = doc.createElementNS(namespaceURI, qName || localName);
			var len = attrs.length;
			appendElement(this, el);
			this.currentElement = el;

			this.locator && position(this.locator, el);
			for (var i = 0; i < len; i++) {
				var namespaceURI = attrs.getURI(i);
				var value = attrs.getValue(i);
				var qName = attrs.getQName(i);
				var attr = doc.createAttributeNS(namespaceURI, qName);
				this.locator && position(attrs.getLocator(i), attr);
				attr.value = attr.nodeValue = value;
				el.setAttributeNode(attr);
			}
		},
		endElement: function endElement(namespaceURI, localName, qName) {
			var current = this.currentElement;
			this.currentElement = current.parentNode;
		},
		startPrefixMapping: function startPrefixMapping(prefix, uri) {},
		endPrefixMapping: function endPrefixMapping(prefix) {},
		processingInstruction: function processingInstruction(target, data) {
			var ins = this.doc.createProcessingInstruction(target, data);
			this.locator && position(this.locator, ins);
			appendElement(this, ins);
		},
		ignorableWhitespace: function ignorableWhitespace(ch, start, length) {},
		characters: function characters(chars, start, length) {
			chars = _toString.apply(this, arguments);
			//console.log(chars)
			if (chars) {
				if (this.cdata) {
					var charNode = this.doc.createCDATASection(chars);
				} else {
					var charNode = this.doc.createTextNode(chars);
				}
				if (this.currentElement) {
					this.currentElement.appendChild(charNode);
				} else if (/^\s*$/.test(chars)) {
					this.doc.appendChild(charNode);
					//process xml
				}
				this.locator && position(this.locator, charNode);
			}
		},
		skippedEntity: function skippedEntity(name) {},
		endDocument: function endDocument() {
			this.doc.normalize();
		},
		setDocumentLocator: function setDocumentLocator(locator) {
			if (this.locator = locator) {
				// && !('lineNumber' in locator)){
				locator.lineNumber = 0;
			}
		},
		//LexicalHandler
		comment: function comment(chars, start, length) {
			chars = _toString.apply(this, arguments);
			var comm = this.doc.createComment(chars);
			this.locator && position(this.locator, comm);
			appendElement(this, comm);
		},

		startCDATA: function startCDATA() {
			//used in characters() methods
			this.cdata = true;
		},
		endCDATA: function endCDATA() {
			this.cdata = false;
		},

		startDTD: function startDTD(name, publicId, systemId) {
			var impl = this.doc.implementation;
			if (impl && impl.createDocumentType) {
				var dt = impl.createDocumentType(name, publicId, systemId);
				this.locator && position(this.locator, dt);
				appendElement(this, dt);
			}
		},
		/**
   * @see org.xml.sax.ErrorHandler
   * @link http://www.saxproject.org/apidoc/org/xml/sax/ErrorHandler.html
   */
		warning: function warning(error) {
			console.warn('[xmldom warning]\t' + error, _locator(this.locator));
		},
		error: function error(_error) {
			console.error('[xmldom error]\t' + _error, _locator(this.locator));
		},
		fatalError: function fatalError(error) {
			console.error('[xmldom fatalError]\t' + error, _locator(this.locator));
			throw error;
		}
	};
	function _locator(l) {
		if (l) {
			return '\n@' + (l.systemId || '') + '#[line:' + l.lineNumber + ',col:' + l.columnNumber + ']';
		}
	}
	function _toString(chars, start, length) {
		if (typeof chars == 'string') {
			return chars.substr(start, length);
		} else {
			//java sax connect width xmldom on rhino(what about: "? && !(chars instanceof String)")
			if (chars.length >= start + length || start) {
				return new java.lang.String(chars, start, length) + '';
			}
			return chars;
		}
	}

	/*
  * @link http://www.saxproject.org/apidoc/org/xml/sax/ext/LexicalHandler.html
  * used method of org.xml.sax.ext.LexicalHandler:
  *  #comment(chars, start, length)
  *  #startCDATA()
  *  #endCDATA()
  *  #startDTD(name, publicId, systemId)
  *
  *
  * IGNORED method of org.xml.sax.ext.LexicalHandler:
  *  #endDTD()
  *  #startEntity(name)
  *  #endEntity(name)
  *
  *
  * @link http://www.saxproject.org/apidoc/org/xml/sax/ext/DeclHandler.html
  * IGNORED method of org.xml.sax.ext.DeclHandler
  * 	#attributeDecl(eName, aName, type, mode, value)
  *  #elementDecl(name, model)
  *  #externalEntityDecl(name, publicId, systemId)
  *  #internalEntityDecl(name, value)
  * @link http://www.saxproject.org/apidoc/org/xml/sax/ext/EntityResolver2.html
  * IGNORED method of org.xml.sax.EntityResolver2
  *  #resolveEntity(String name,String publicId,String baseURI,String systemId)
  *  #resolveEntity(publicId, systemId)
  *  #getExternalSubset(name, baseURI)
  * @link http://www.saxproject.org/apidoc/org/xml/sax/DTDHandler.html
  * IGNORED method of org.xml.sax.DTDHandler
  *  #notationDecl(name, publicId, systemId) {};
  *  #unparsedEntityDecl(name, publicId, systemId, notationName) {};
  */
	"endDTD,startEntity,endEntity,attributeDecl,elementDecl,externalEntityDecl,internalEntityDecl,resolveEntity,getExternalSubset,notationDecl,unparsedEntityDecl".replace(/\w+/g, function (key) {
		DOMHandler.prototype[key] = function () {
			return null;
		};
	});

	/* Private static helpers treated below as private instance methods, so don't need to add these to the public API; we might use a Relator to also get rid of non-standard public properties */
	function appendElement(hander, node) {
		if (!hander.currentElement) {
			hander.doc.appendChild(node);
		} else {
			hander.currentElement.appendChild(node);
		}
	} //appendChild and setAttributeNS are preformance key

	//if(typeof require == 'function'){
	var XMLReader = sax.XMLReader;
	var DOMImplementation = exports.DOMImplementation = dom.DOMImplementation;
	exports.XMLSerializer = dom.XMLSerializer;
	exports.DOMParser = DOMParser;
	//}
});

"use strict";

var fieldTagNames$1 = {
  // TIFF Baseline
  0x013B: 'Artist',
  0x0102: 'BitsPerSample',
  0x0109: 'CellLength',
  0x0108: 'CellWidth',
  0x0140: 'ColorMap',
  0x0103: 'Compression',
  0x8298: 'Copyright',
  0x0132: 'DateTime',
  0x0152: 'ExtraSamples',
  0x010A: 'FillOrder',
  0x0121: 'FreeByteCounts',
  0x0120: 'FreeOffsets',
  0x0123: 'GrayResponseCurve',
  0x0122: 'GrayResponseUnit',
  0x013C: 'HostComputer',
  0x010E: 'ImageDescription',
  0x0101: 'ImageLength',
  0x0100: 'ImageWidth',
  0x010F: 'Make',
  0x0119: 'MaxSampleValue',
  0x0118: 'MinSampleValue',
  0x0110: 'Model',
  0x00FE: 'NewSubfileType',
  0x0112: 'Orientation',
  0x0106: 'PhotometricInterpretation',
  0x011C: 'PlanarConfiguration',
  0x0128: 'ResolutionUnit',
  0x0116: 'RowsPerStrip',
  0x0115: 'SamplesPerPixel',
  0x0131: 'Software',
  0x0117: 'StripByteCounts',
  0x0111: 'StripOffsets',
  0x00FF: 'SubfileType',
  0x0107: 'Threshholding',
  0x011A: 'XResolution',
  0x011B: 'YResolution',

  // TIFF Extended
  0x0146: 'BadFaxLines',
  0x0147: 'CleanFaxData',
  0x0157: 'ClipPath',
  0x0148: 'ConsecutiveBadFaxLines',
  0x01B1: 'Decode',
  0x01B2: 'DefaultImageColor',
  0x010D: 'DocumentName',
  0x0150: 'DotRange',
  0x0141: 'HalftoneHints',
  0x015A: 'Indexed',
  0x015B: 'JPEGTables',
  0x011D: 'PageName',
  0x0129: 'PageNumber',
  0x013D: 'Predictor',
  0x013F: 'PrimaryChromaticities',
  0x0214: 'ReferenceBlackWhite',
  0x0153: 'SampleFormat',
  0x0154: 'SMinSampleValue',
  0x0155: 'SMaxSampleValue',
  0x022F: 'StripRowCounts',
  0x014A: 'SubIFDs',
  0x0124: 'T4Options',
  0x0125: 'T6Options',
  0x0145: 'TileByteCounts',
  0x0143: 'TileLength',
  0x0144: 'TileOffsets',
  0x0142: 'TileWidth',
  0x012D: 'TransferFunction',
  0x013E: 'WhitePoint',
  0x0158: 'XClipPathUnits',
  0x011E: 'XPosition',
  0x0211: 'YCbCrCoefficients',
  0x0213: 'YCbCrPositioning',
  0x0212: 'YCbCrSubSampling',
  0x0159: 'YClipPathUnits',
  0x011F: 'YPosition',

  // EXIF
  0x9202: 'ApertureValue',
  0xA001: 'ColorSpace',
  0x9004: 'DateTimeDigitized',
  0x9003: 'DateTimeOriginal',
  0x8769: 'Exif IFD',
  0x9000: 'ExifVersion',
  0x829A: 'ExposureTime',
  0xA300: 'FileSource',
  0x9209: 'Flash',
  0xA000: 'FlashpixVersion',
  0x829D: 'FNumber',
  0xA420: 'ImageUniqueID',
  0x9208: 'LightSource',
  0x927C: 'MakerNote',
  0x9201: 'ShutterSpeedValue',
  0x9286: 'UserComment',

  // IPTC
  0x83BB: 'IPTC',

  // ICC
  0x8773: 'ICC Profile',

  // XMP
  0x02BC: 'XMP',

  // GDAL
  0xA480: 'GDAL_METADATA',
  0xA481: 'GDAL_NODATA',

  // Photoshop
  0x8649: 'Photoshop',

  // GeoTiff
  0x830E: 'ModelPixelScale',
  0x8482: 'ModelTiepoint',
  0x85D8: 'ModelTransformation',
  0x87AF: 'GeoKeyDirectory',
  0x87B0: 'GeoDoubleParams',
  0x87B1: 'GeoAsciiParams'
};

var key;
var fieldTags = {};
for (key in fieldTagNames$1) {
  fieldTags[fieldTagNames$1[key]] = parseInt(key);
}

var arrayFields$1 = [fieldTags.BitsPerSample, fieldTags.ExtraSamples, fieldTags.SampleFormat, fieldTags.StripByteCounts, fieldTags.StripOffsets, fieldTags.StripRowCounts, fieldTags.TileByteCounts, fieldTags.TileOffsets];

var fieldTypeNames = {
  0x0001: 'BYTE',
  0x0002: 'ASCII',
  0x0003: 'SHORT',
  0x0004: 'LONG',
  0x0005: 'RATIONAL',
  0x0006: 'SBYTE',
  0x0007: 'UNDEFINED',
  0x0008: 'SSHORT',
  0x0009: 'SLONG',
  0x000A: 'SRATIONAL',
  0x000B: 'FLOAT',
  0x000C: 'DOUBLE',
  // introduced by BigTIFF
  0x0010: 'LONG8',
  0x0011: 'SLONG8',
  0x0012: 'IFD8'
};

var fieldTypes$1 = {};
for (key in fieldTypeNames) {
  fieldTypes$1[fieldTypeNames[key]] = parseInt(key);
}

var photometricInterpretations = {
  WhiteIsZero: 0,
  BlackIsZero: 1,
  RGB: 2,
  Palette: 3,
  TransparencyMask: 4,
  CMYK: 5,
  YCbCr: 6,

  CIELab: 8,
  ICCLab: 9
};

var geoKeyNames$1 = {
  1024: 'GTModelTypeGeoKey',
  1025: 'GTRasterTypeGeoKey',
  1026: 'GTCitationGeoKey',
  2048: 'GeographicTypeGeoKey',
  2049: 'GeogCitationGeoKey',
  2050: 'GeogGeodeticDatumGeoKey',
  2051: 'GeogPrimeMeridianGeoKey',
  2052: 'GeogLinearUnitsGeoKey',
  2053: 'GeogLinearUnitSizeGeoKey',
  2054: 'GeogAngularUnitsGeoKey',
  2055: 'GeogAngularUnitSizeGeoKey',
  2056: 'GeogEllipsoidGeoKey',
  2057: 'GeogSemiMajorAxisGeoKey',
  2058: 'GeogSemiMinorAxisGeoKey',
  2059: 'GeogInvFlatteningGeoKey',
  2060: 'GeogAzimuthUnitsGeoKey',
  2061: 'GeogPrimeMeridianLongGeoKey',
  2062: 'GeogTOWGS84GeoKey',
  3072: 'ProjectedCSTypeGeoKey',
  3073: 'PCSCitationGeoKey',
  3074: 'ProjectionGeoKey',
  3075: 'ProjCoordTransGeoKey',
  3076: 'ProjLinearUnitsGeoKey',
  3077: 'ProjLinearUnitSizeGeoKey',
  3078: 'ProjStdParallel1GeoKey',
  3079: 'ProjStdParallel2GeoKey',
  3080: 'ProjNatOriginLongGeoKey',
  3081: 'ProjNatOriginLatGeoKey',
  3082: 'ProjFalseEastingGeoKey',
  3083: 'ProjFalseNorthingGeoKey',
  3084: 'ProjFalseOriginLongGeoKey',
  3085: 'ProjFalseOriginLatGeoKey',
  3086: 'ProjFalseOriginEastingGeoKey',
  3087: 'ProjFalseOriginNorthingGeoKey',
  3088: 'ProjCenterLongGeoKey',
  3089: 'ProjCenterLatGeoKey',
  3090: 'ProjCenterEastingGeoKey',
  3091: 'ProjCenterNorthingGeoKey',
  3092: 'ProjScaleAtNatOriginGeoKey',
  3093: 'ProjScaleAtCenterGeoKey',
  3094: 'ProjAzimuthAngleGeoKey',
  3095: 'ProjStraightVertPoleLongGeoKey',
  3096: 'ProjRectifiedGridAngleGeoKey',
  4096: 'VerticalCSTypeGeoKey',
  4097: 'VerticalCitationGeoKey',
  4098: 'VerticalDatumGeoKey',
  4099: 'VerticalUnitsGeoKey'
};

var geoKeys = {};
for (key in geoKeyNames$1) {
  geoKeys[geoKeyNames$1[key]] = parseInt(key);
}

var parseXml;
// node.js version
if (typeof window === "undefined") {
  parseXml = function parseXml(xmlStr) {
    // requires xmldom module
    var DOMParser = domParser.DOMParser;
    return new DOMParser().parseFromString(xmlStr, "text/xml");
  };
} else if (typeof window.DOMParser !== "undefined") {
  parseXml = function parseXml(xmlStr) {
    return new window.DOMParser().parseFromString(xmlStr, "text/xml");
  };
} else if (typeof window.ActiveXObject !== "undefined" && new window.ActiveXObject("Microsoft.XMLDOM")) {
  parseXml = function parseXml(xmlStr) {
    var xmlDoc = new window.ActiveXObject("Microsoft.XMLDOM");
    xmlDoc.async = "false";
    xmlDoc.loadXML(xmlStr);
    return xmlDoc;
  };
}

var globals = {
  fieldTags: fieldTags,
  fieldTagNames: fieldTagNames$1,
  arrayFields: arrayFields$1,
  fieldTypes: fieldTypes$1,
  fieldTypeNames: fieldTypeNames,
  photometricInterpretations: photometricInterpretations,
  geoKeys: geoKeys,
  geoKeyNames: geoKeyNames$1,
  parseXml: parseXml
};

"use strict";

function fromWhiteIsZero(raster, max, width, height) {
  var rgbRaster = new Uint8Array(width * height * 3);
  var value;
  for (var i = 0, j = 0; i < raster.length; ++i, j += 3) {
    value = 256 - raster[i] / max * 256;
    rgbRaster[j] = value;
    rgbRaster[j + 1] = value;
    rgbRaster[j + 2] = value;
  }
  return rgbRaster;
}

function fromBlackIsZero(raster, max, width, height) {
  var rgbRaster = new Uint8Array(width * height * 3);
  var value;
  for (var i = 0, j = 0; i < raster.length; ++i, j += 3) {
    value = raster[i] / max * 256;
    rgbRaster[j] = value;
    rgbRaster[j + 1] = value;
    rgbRaster[j + 2] = value;
  }
  return rgbRaster;
}

function fromPalette(raster, colorMap, width, height) {
  var rgbRaster = new Uint8Array(width * height * 3);
  var greenOffset = colorMap.length / 3;
  var blueOffset = colorMap.length / 3 * 2;
  for (var i = 0, j = 0; i < raster.length; ++i, j += 3) {
    var mapIndex = raster[i];
    rgbRaster[j] = colorMap[mapIndex] / 65536 * 256;
    rgbRaster[j + 1] = colorMap[mapIndex + greenOffset] / 65536 * 256;
    rgbRaster[j + 2] = colorMap[mapIndex + blueOffset] / 65536 * 256;
  }
  return rgbRaster;
}

function fromCMYK(cmykRaster, width, height) {
  var rgbRaster = new Uint8Array(width * height * 3);
  var c, m, y, k;
  for (var i = 0, j = 0; i < cmykRaster.length; i += 4, j += 3) {
    c = cmykRaster[i];
    m = cmykRaster[i + 1];
    y = cmykRaster[i + 2];
    k = cmykRaster[i + 3];

    rgbRaster[j] = 255 * ((255 - c) / 256) * ((255 - k) / 256);
    rgbRaster[j + 1] = 255 * ((255 - m) / 256) * ((255 - k) / 256);
    rgbRaster[j + 2] = 255 * ((255 - y) / 256) * ((255 - k) / 256);
  }
  return rgbRaster;
}

function fromYCbCr(yCbCrRaster, width, height) {
  var rgbRaster = new Uint8Array(width * height * 3);
  var y, cb, cr;
  for (var i = 0, j = 0; i < yCbCrRaster.length; i += 3, j += 3) {
    y = yCbCrRaster[i];
    cb = yCbCrRaster[i + 1];
    cr = yCbCrRaster[i + 2];

    rgbRaster[j] = y + 1.40200 * (cr - 0x80);
    rgbRaster[j + 1] = y - 0.34414 * (cb - 0x80) - 0.71414 * (cr - 0x80);
    rgbRaster[j + 2] = y + 1.77200 * (cb - 0x80);
  }
  return rgbRaster;
}

// converted from here:
// http://de.mathworks.com/matlabcentral/fileexchange/24010-lab2rgb/content/Lab2RGB.m
// still buggy
function fromCIELab(cieLabRaster, width, height) {
  var T1 = 0.008856;
  var T2 = 0.206893;
  var MAT = [3.240479, -1.537150, -0.498535, -0.969256, 1.875992, 0.041556, 0.055648, -0.204043, 1.057311];
  var rgbRaster = new Uint8Array(width * height * 3);
  var L, a, b;
  var fX, fY, fZ, XT, YT, ZT, X, Y, Z;
  for (var i = 0, j = 0; i < cieLabRaster.length; i += 3, j += 3) {
    L = cieLabRaster[i];
    a = cieLabRaster[i + 1];
    b = cieLabRaster[i + 2];

    // Compute Y
    fY = Math.pow((L + 16) / 116, 3);
    YT = fY > T1;
    fY = (YT !== 0) * (L / 903.3) + YT * fY;
    Y = fY;

    fY = YT * Math.pow(fY, 1 / 3) + (YT !== 0) * (7.787 * fY + 16 / 116);

    // Compute X
    fX = a / 500 + fY;
    XT = fX > T2;
    X = XT * Math.pow(fX, 3) + (XT !== 0) * ((fX - 16 / 116) / 7.787);

    // Compute Z
    fZ = fY - b / 200;
    ZT = fZ > T2;
    Z = ZT * Math.pow(fZ, 3) + (ZT !== 0) * ((fZ - 16 / 116) / 7.787);

    // Normalize for D65 white point
    X = X * 0.950456;
    Z = Z * 1.088754;

    rgbRaster[j] = X * MAT[0] + Y * MAT[1] + Z * MAT[2];
    rgbRaster[j + 1] = X * MAT[3] + Y * MAT[4] + Z * MAT[5];
    rgbRaster[j + 2] = X * MAT[6] + Y * MAT[7] + Z * MAT[8];
  }
  return rgbRaster;
}

var rgb = {
  fromWhiteIsZero: fromWhiteIsZero,
  fromBlackIsZero: fromBlackIsZero,
  fromPalette: fromPalette,
  fromCMYK: fromCMYK,
  fromYCbCr: fromYCbCr,
  fromCIELab: fromCIELab
};

"use strict";

function AbstractDecoder() {}

AbstractDecoder.prototype = {
  isAsync: function isAsync() {
    // TODO: check if async reading func is enabled or not.
    return typeof this.decodeBlock === "undefined";
  }
};

var abstractdecoder = AbstractDecoder;

"use strict";

function RawDecoder() {}

RawDecoder.prototype = Object.create(abstractdecoder.prototype);
RawDecoder.prototype.constructor = RawDecoder;
RawDecoder.prototype.decodeBlock = function (buffer) {
  return buffer;
};

var raw = RawDecoder;

"use strict";

//var lzwCompress = require("lzwcompress");


var MIN_BITS = 9;
var MAX_BITS$2 = 12;
var CLEAR_CODE = 256; // clear code
var EOI_CODE = 257; // end of information

function LZW() {
  this.littleEndian = false;
  this.position = 0;

  this._makeEntryLookup = false;
  this.dictionary = [];
}

LZW.prototype = {
  constructor: LZW,
  initDictionary: function initDictionary() {
    this.dictionary = new Array(258);
    this.entryLookup = {};
    this.byteLength = MIN_BITS;
    for (var i = 0; i <= 257; i++) {
      // i really feal like i <= 257, but I get strange unknown words that way.
      this.dictionary[i] = [i];
      if (this._makeEntryLookup) {
        this.entryLookup[i] = i;
      }
    }
  },

  decompress: function decompress(input) {
    this._makeEntryLookup = false; // for speed
    this.initDictionary();
    this.position = 0;
    this.result = [];
    if (!input.buffer) {
      input = new Uint8Array(input);
    }
    var mydataview = new DataView(input.buffer);
    var code = this.getNext(mydataview);
    var oldCode;
    while (code !== EOI_CODE) {
      if (code === CLEAR_CODE) {
        this.initDictionary();
        code = this.getNext(mydataview);
        while (code === CLEAR_CODE) {
          code = this.getNext(mydataview);
        }
        if (code > CLEAR_CODE) {
          throw 'corrupted code at scanline ' + code;
        }
        if (code === EOI_CODE) {
          break;
        } else {
          var val = this.dictionary[code];
          this.appendArray(this.result, val);
          oldCode = code;
        }
      } else {
        if (this.dictionary[code] !== undefined) {
          var _val = this.dictionary[code];
          this.appendArray(this.result, _val);
          var newVal = this.dictionary[oldCode].concat(this.dictionary[code][0]);
          this.addToDictionary(newVal);
          oldCode = code;
        } else {
          var oldVal = this.dictionary[oldCode];
          if (!oldVal) {
            throw "Bogus entry. Not in dictionary, " + oldCode + " / " + this.dictionary.length + ", position: " + this.position;
          }
          var _newVal = oldVal.concat(this.dictionary[oldCode][0]);
          this.appendArray(this.result, _newVal);
          this.addToDictionary(_newVal);
          oldCode = code;
        }
      }
      // This is strange. It seems like the
      if (this.dictionary.length >= Math.pow(2, this.byteLength) - 1) {
        this.byteLength++;
      }
      code = this.getNext(mydataview);
    }
    return new Uint8Array(this.result);
  },

  appendArray: function appendArray(dest, source) {
    for (var i = 0; i < source.length; i++) {
      dest.push(source[i]);
    }
    return dest;
  },

  haveBytesChanged: function haveBytesChanged() {
    if (this.dictionary.length >= Math.pow(2, this.byteLength)) {
      this.byteLength++;
      return true;
    }
    return false;
  },

  addToDictionary: function addToDictionary(arr) {
    this.dictionary.push(arr);
    if (this._makeEntryLookup) {
      this.entryLookup[arr] = this.dictionary.length - 1;
    }
    this.haveBytesChanged();
    return this.dictionary.length - 1;
  },

  getNext: function getNext(dataview) {
    var byte = this.getByte(dataview, this.position, this.byteLength);
    this.position += this.byteLength;
    return byte;
  },

  // This binary representation might actually be as fast as the completely illegible bit shift approach
  //
  getByte: function getByte(dataview, position, length) {
    var d = position % 8;
    var a = Math.floor(position / 8);
    var de = 8 - d;
    var ef = position + length - (a + 1) * 8;
    var fg = 8 * (a + 2) - (position + length);
    var dg = (a + 2) * 8 - position;
    fg = Math.max(0, fg);
    if (a >= dataview.byteLength) {
      console.warn('ran off the end of the buffer before finding EOI_CODE (end on input code)');
      return EOI_CODE;
    }
    var chunk1 = dataview.getUint8(a, this.littleEndian) & Math.pow(2, 8 - d) - 1;
    chunk1 = chunk1 << length - de;
    var chunks = chunk1;
    if (a + 1 < dataview.byteLength) {
      var chunk2 = dataview.getUint8(a + 1, this.littleEndian) >>> fg;
      chunk2 = chunk2 << Math.max(0, length - dg);
      chunks += chunk2;
    }
    if (ef > 8 && a + 2 < dataview.byteLength) {
      var hi = (a + 3) * 8 - (position + length);
      var chunk3 = dataview.getUint8(a + 2, this.littleEndian) >>> hi;
      chunks += chunk3;
    }
    return chunks;
  },

  // compress has not been optimized and uses a uint8 array to hold binary values.
  compress: function compress(input) {
    this._makeEntryLookup = true;
    this.initDictionary();
    this.position = 0;
    var resultBits = [];
    var omega = [];
    resultBits = this.appendArray(resultBits, this.binaryFromByte(CLEAR_CODE, this.byteLength)); // resultBits.concat(Array.from(this.binaryFromByte(this.CLEAR_CODE, this.byteLength)))
    for (var i = 0; i < input.length; i++) {
      var k = [input[i]];
      var omk = omega.concat(k);
      if (this.entryLookup[omk] !== undefined) {
        omega = omk;
      } else {
        var _code = this.entryLookup[omega];
        var _bin = this.binaryFromByte(_code, this.byteLength);
        resultBits = this.appendArray(resultBits, _bin);
        this.addToDictionary(omk);
        omega = k;
        if (this.dictionary.length >= Math.pow(2, MAX_BITS$2)) {
          resultBits = this.appendArray(resultBits, this.binaryFromByte(CLEAR_CODE, this.byteLength));
          this.initDictionary();
        }
      }
    }
    var code = this.entryLookup[omega];
    var bin = this.binaryFromByte(code, this.byteLength);
    resultBits = this.appendArray(resultBits, bin);
    resultBits = resultBits = this.appendArray(resultBits, this.binaryFromByte(EOI_CODE, this.byteLength));
    this.binary = resultBits;
    this.result = this.binaryToUint8(resultBits);
    return this.result;
  },

  byteFromCode: function byteFromCode(code) {
    var res = this.dictionary[code];
    return res;
  },

  binaryFromByte: function binaryFromByte(byte) {
    var byteLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 8;

    var res = new Uint8Array(byteLength);
    for (var i = 0; i < res.length; i++) {
      var mask = Math.pow(2, i);
      var isOne = (byte & mask) > 0;
      res[res.length - 1 - i] = isOne;
    }
    return res;
  },

  binaryToNumber: function binaryToNumber(bin) {
    var res = 0;
    for (var i = 0; i < bin.length; i++) {
      res += Math.pow(2, bin.length - i - 1) * bin[i];
    }
    return res;
  },

  inputToBinary: function inputToBinary(input) {
    var inputByteLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 8;

    var res = new Uint8Array(input.length * inputByteLength);
    for (var i = 0; i < input.length; i++) {
      var bin = this.binaryFromByte(input[i], inputByteLength);
      res.set(bin, i * inputByteLength);
    }
    return res;
  },

  binaryToUint8: function binaryToUint8(bin) {
    var result = new Uint8Array(Math.ceil(bin.length / 8));
    var index = 0;
    for (var i = 0; i < bin.length; i += 8) {
      var val = 0;
      for (var j = 0; j < 8 && i + j < bin.length; j++) {
        val = val + bin[i + j] * Math.pow(2, 8 - j - 1);
      }
      result[index] = val;
      index++;
    }
    return result;
  }
};

// the actual decoder interface

function LZWDecoder() {
  this.decompressor = new LZW();
}

LZWDecoder.prototype = Object.create(abstractdecoder.prototype);
LZWDecoder.prototype.constructor = LZWDecoder;
LZWDecoder.prototype.decodeBlock = function (buffer) {
  return this.decompressor.decompress(buffer).buffer;
};

var lzw = LZWDecoder;

"use strict";

var pakoInflate = inflate_1.inflate;

function DeflateDecoder() {}

DeflateDecoder.prototype = Object.create(abstractdecoder.prototype);
DeflateDecoder.prototype.constructor = DeflateDecoder;
DeflateDecoder.prototype.decodeBlock = function (buffer) {
  return pakoInflate(new Uint8Array(buffer)).buffer;
};

var deflate$3 = DeflateDecoder;

"use strict";

function PackbitsDecoder() {}

PackbitsDecoder.prototype = Object.create(abstractdecoder.prototype);
PackbitsDecoder.prototype.constructor = PackbitsDecoder;
PackbitsDecoder.prototype.decodeBlock = function (buffer) {
  var dataView = new DataView(buffer);
  var out = [];
  var i, j;

  for (i = 0; i < buffer.byteLength; ++i) {
    var header = dataView.getInt8(i);
    if (header < 0) {
      var next = dataView.getUint8(i + 1);
      header = -header;
      for (j = 0; j <= header; ++j) {
        out.push(next);
      }
      i += 1;
    } else {
      for (j = 0; j <= header; ++j) {
        out.push(dataView.getUint8(i + j + 1));
      }
      i += header + 1;
    }
  }
  return new Uint8Array(out).buffer;
};

var packbits = PackbitsDecoder;

"use strict";

var sum = function sum(array, start, end) {
  var s = 0;
  for (var i = start; i < end; ++i) {
    s += array[i];
  }
  return s;
};

var arrayForType = function arrayForType(format, bitsPerSample, size) {
  switch (format) {
    case 1:
      // unsigned integer data
      switch (bitsPerSample) {
        case 8:
          return new Uint8Array(size);
        case 16:
          return new Uint16Array(size);
        case 32:
          return new Uint32Array(size);
      }
      break;
    case 2:
      // twos complement signed integer data
      switch (bitsPerSample) {
        case 8:
          return new Int8Array(size);
        case 16:
          return new Int16Array(size);
        case 32:
          return new Int32Array(size);
      }
      break;
    case 3:
      // floating point data
      switch (bitsPerSample) {
        case 32:
          return new Float32Array(size);
        case 64:
          return new Float64Array(size);
      }
      break;
  }
  throw Error("Unsupported data format/bitsPerSample");
};

/**
 * GeoTIFF sub-file image.
 * @constructor
 * @param {Object} fileDirectory The parsed file directory
 * @param {Object} geoKeys The parsed geo-keys
 * @param {DataView} dataView The DataView for the underlying file.
 * @param {Boolean} littleEndian Whether the file is encoded in little or big endian
 * @param {Boolean} cache Whether or not decoded tiles shall be cached
 */
function GeoTIFFImage(fileDirectory, geoKeys, dataView, littleEndian, cache) {
  this.fileDirectory = fileDirectory;
  this.geoKeys = geoKeys;
  this.dataView = dataView;
  this.littleEndian = littleEndian;
  this.tiles = cache ? {} : null;
  this.isTiled = fileDirectory.StripOffsets ? false : true;
  var planarConfiguration = fileDirectory.PlanarConfiguration;
  this.planarConfiguration = typeof planarConfiguration === "undefined" ? 1 : planarConfiguration;
  if (this.planarConfiguration !== 1 && this.planarConfiguration !== 2) {
    throw new Error("Invalid planar configuration.");
  }

  switch (this.fileDirectory.Compression) {
    case undefined:
    case 1:
      // no compression
      this.decoder = new raw();
      break;
    case 5:
      // LZW
      this.decoder = new lzw();
      break;
    case 6:
      // JPEG
      throw new Error("JPEG compression not supported.");
    case 8:
      // Deflate
      this.decoder = new deflate$3();
      break;
    //case 32946: // deflate ??
    //  throw new Error("Deflate compression not supported.");
    case 32773:
      // packbits
      this.decoder = new packbits();
      break;
    default:
      throw new Error("Unknown compresseion method identifier: " + this.fileDirectory.Compression);
  }
}

GeoTIFFImage.prototype = {
  /**
   * Returns the associated parsed file directory.
   * @returns {Object} the parsed file directory
   */
  getFileDirectory: function getFileDirectory() {
    return this.fileDirectory;
  },
  /**
  * Returns the associated parsed geo keys.
  * @returns {Object} the parsed geo keys
  */
  getGeoKeys: function getGeoKeys() {
    return this.geoKeys;
  },
  /**
   * Returns the width of the image.
   * @returns {Number} the width of the image
   */
  getWidth: function getWidth() {
    return this.fileDirectory.ImageWidth;
  },
  /**
   * Returns the height of the image.
   * @returns {Number} the height of the image
   */
  getHeight: function getHeight() {
    return this.fileDirectory.ImageLength;
  },
  /**
   * Returns the number of samples per pixel.
   * @returns {Number} the number of samples per pixel
   */
  getSamplesPerPixel: function getSamplesPerPixel() {
    return this.fileDirectory.SamplesPerPixel;
  },
  /**
   * Returns the width of each tile.
   * @returns {Number} the width of each tile
   */
  getTileWidth: function getTileWidth() {
    return this.isTiled ? this.fileDirectory.TileWidth : this.getWidth();
  },
  /**
   * Returns the height of each tile.
   * @returns {Number} the height of each tile
   */
  getTileHeight: function getTileHeight() {
    return this.isTiled ? this.fileDirectory.TileLength : this.fileDirectory.RowsPerStrip;
  },

  /**
   * Calculates the number of bytes for each pixel across all samples. Only full
   * bytes are supported, an exception is thrown when this is not the case.
   * @returns {Number} the bytes per pixel
   */
  getBytesPerPixel: function getBytesPerPixel() {
    var bitsPerSample = 0;
    for (var i = 0; i < this.fileDirectory.BitsPerSample.length; ++i) {
      var bits = this.fileDirectory.BitsPerSample[i];
      if (bits % 8 !== 0) {
        throw new Error("Sample bit-width of " + bits + " is not supported.");
      } else if (bits !== this.fileDirectory.BitsPerSample[0]) {
        throw new Error("Differing size of samples in a pixel are not supported.");
      }
      bitsPerSample += bits;
    }
    return bitsPerSample / 8;
  },

  getSampleByteSize: function getSampleByteSize(i) {
    if (i >= this.fileDirectory.BitsPerSample.length) {
      throw new RangeError("Sample index " + i + " is out of range.");
    }
    var bits = this.fileDirectory.BitsPerSample[i];
    if (bits % 8 !== 0) {
      throw new Error("Sample bit-width of " + bits + " is not supported.");
    }
    return bits / 8;
  },

  getReaderForSample: function getReaderForSample(sampleIndex) {
    var format = this.fileDirectory.SampleFormat ? this.fileDirectory.SampleFormat[sampleIndex] : 1;
    var bitsPerSample = this.fileDirectory.BitsPerSample[sampleIndex];
    switch (format) {
      case 1:
        // unsigned integer data
        switch (bitsPerSample) {
          case 8:
            return DataView.prototype.getUint8;
          case 16:
            return DataView.prototype.getUint16;
          case 32:
            return DataView.prototype.getUint32;
        }
        break;
      case 2:
        // twos complement signed integer data
        switch (bitsPerSample) {
          case 8:
            return DataView.prototype.getInt8;
          case 16:
            return DataView.prototype.getInt16;
          case 32:
            return DataView.prototype.getInt32;
        }
        break;
      case 3:
        switch (bitsPerSample) {
          case 32:
            return DataView.prototype.getFloat32;
          case 64:
            return DataView.prototype.getFloat64;
        }
        break;
    }
  },

  getArrayForSample: function getArrayForSample(sampleIndex, size) {
    var format = this.fileDirectory.SampleFormat ? this.fileDirectory.SampleFormat[sampleIndex] : 1;
    var bitsPerSample = this.fileDirectory.BitsPerSample[sampleIndex];
    return arrayForType(format, bitsPerSample, size);
  },

  getDecoder: function getDecoder() {
    return this.decoder;
  },

  /**
   * Returns the decoded strip or tile.
   * @param {Number} x the strip or tile x-offset
   * @param {Number} y the tile y-offset (0 for stripped images)
   * @param {Number} plane the planar configuration (1: "chunky", 2: "separate samples")
   * @returns {(Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Float32Array|Float64Array)}
   */
  getTileOrStrip: function getTileOrStrip(x, y, sample, callback) {
    var numTilesPerRow = Math.ceil(this.getWidth() / this.getTileWidth());
    var numTilesPerCol = Math.ceil(this.getHeight() / this.getTileHeight());
    var index;
    var tiles = this.tiles;
    if (this.planarConfiguration === 1) {
      index = y * numTilesPerRow + x;
    } else if (this.planarConfiguration === 2) {
      index = sample * numTilesPerRow * numTilesPerCol + y * numTilesPerRow + x;
    }

    if (tiles !== null && index in tiles) {
      if (callback) {
        return callback(null, { x: x, y: y, sample: sample, data: tiles[index] });
      }
      return tiles[index];
    } else {
      var offset, byteCount;
      if (this.isTiled) {
        offset = this.fileDirectory.TileOffsets[index];
        byteCount = this.fileDirectory.TileByteCounts[index];
      } else {
        offset = this.fileDirectory.StripOffsets[index];
        byteCount = this.fileDirectory.StripByteCounts[index];
      }
      var slice = this.dataView.buffer.slice(offset, offset + byteCount);
      if (callback) {
        return this.getDecoder().decodeBlockAsync(slice, function (error, data) {
          if (!error && tiles !== null) {
            tiles[index] = data;
          }
          callback(error, { x: x, y: y, sample: sample, data: data });
        });
      }
      var block = this.getDecoder().decodeBlock(slice);
      if (tiles !== null) {
        tiles[index] = block;
      }
      return block;
    }
  },

  _readRasterAsync: function _readRasterAsync(imageWindow, samples, valueArrays, interleave, callback, callbackError) {
    var tileWidth = this.getTileWidth();
    var tileHeight = this.getTileHeight();

    var minXTile = Math.floor(imageWindow[0] / tileWidth);
    var maxXTile = Math.ceil(imageWindow[2] / tileWidth);
    var minYTile = Math.floor(imageWindow[1] / tileHeight);
    var maxYTile = Math.ceil(imageWindow[3] / tileHeight);

    var numTilesPerRow = Math.ceil(this.getWidth() / tileWidth);

    var windowWidth = imageWindow[2] - imageWindow[0];
    var bytesPerPixel = this.getBytesPerPixel();
    var imageWidth = this.getWidth();

    var predictor = this.fileDirectory.Predictor || 1;

    var srcSampleOffsets = [];
    var sampleReaders = [];
    for (var i = 0; i < samples.length; ++i) {
      if (this.planarConfiguration === 1) {
        srcSampleOffsets.push(sum(this.fileDirectory.BitsPerSample, 0, samples[i]) / 8);
      } else {
        srcSampleOffsets.push(0);
      }
      sampleReaders.push(this.getReaderForSample(samples[i]));
    }

    var allStacked = false;
    var unfinishedTiles = 0;
    var littleEndian = this.littleEndian;
    var globalError = null;

    function checkFinished() {
      if (allStacked && unfinishedTiles === 0) {
        if (globalError) {
          callbackError(globalError);
        } else {
          callback(valueArrays);
        }
      }
    }

    function onTileGot(error, tile) {
      if (!error) {
        var dataView = new DataView(tile.data);

        var firstLine = tile.y * tileHeight;
        var firstCol = tile.x * tileWidth;
        var lastLine = (tile.y + 1) * tileHeight;
        var lastCol = (tile.x + 1) * tileWidth;
        var sampleIndex = tile.sample;

        for (var y = Math.max(0, imageWindow[1] - firstLine); y < Math.min(tileHeight, tileHeight - (lastLine - imageWindow[3])); ++y) {
          for (var x = Math.max(0, imageWindow[0] - firstCol); x < Math.min(tileWidth, tileWidth - (lastCol - imageWindow[2])); ++x) {
            var pixelOffset = (y * tileWidth + x) * bytesPerPixel;
            var value = sampleReaders[sampleIndex].call(dataView, pixelOffset + srcSampleOffsets[sampleIndex], littleEndian);
            var windowCoordinate;
            if (interleave) {
              if (predictor !== 1 && x > 0) {
                windowCoordinate = (y + firstLine - imageWindow[1]) * windowWidth * samples.length + (x + firstCol - imageWindow[0] - 1) * samples.length + sampleIndex;
                value += valueArrays[windowCoordinate];
              }

              windowCoordinate = (y + firstLine - imageWindow[1]) * windowWidth * samples.length + (x + firstCol - imageWindow[0]) * samples.length + sampleIndex;
              valueArrays[windowCoordinate] = value;
            } else {
              if (predictor !== 1 && x > 0) {
                windowCoordinate = (y + firstLine - imageWindow[1]) * windowWidth + x - 1 + firstCol - imageWindow[0];
                value += valueArrays[sampleIndex][windowCoordinate];
              }

              windowCoordinate = (y + firstLine - imageWindow[1]) * windowWidth + x + firstCol - imageWindow[0];
              valueArrays[sampleIndex][windowCoordinate] = value;
            }
          }
        }
      } else {
        globalError = error;
      }

      // check end condition and call callbacks
      unfinishedTiles -= 1;
      checkFinished();
    }

    for (var yTile = minYTile; yTile <= maxYTile; ++yTile) {
      for (var xTile = minXTile; xTile <= maxXTile; ++xTile) {
        for (var sampleIndex = 0; sampleIndex < samples.length; ++sampleIndex) {
          var sample = samples[sampleIndex];
          if (this.planarConfiguration === 2) {
            bytesPerPixel = this.getSampleByteSize(sample);
          }
          unfinishedTiles += 1;
          this.getTileOrStrip(xTile, yTile, sample, onTileGot);
        }
      }
    }
    allStacked = true;
    checkFinished();
  },

  _readRaster: function _readRaster(imageWindow, samples, valueArrays, interleave, callback, callbackError) {
    try {
      var tileWidth = this.getTileWidth();
      var tileHeight = this.getTileHeight();

      var minXTile = Math.floor(imageWindow[0] / tileWidth);
      var maxXTile = Math.ceil(imageWindow[2] / tileWidth);
      var minYTile = Math.floor(imageWindow[1] / tileHeight);
      var maxYTile = Math.ceil(imageWindow[3] / tileHeight);

      var numTilesPerRow = Math.ceil(this.getWidth() / tileWidth);

      var windowWidth = imageWindow[2] - imageWindow[0];
      var bytesPerPixel = this.getBytesPerPixel();
      var imageWidth = this.getWidth();

      var predictor = this.fileDirectory.Predictor || 1;

      var srcSampleOffsets = [];
      var sampleReaders = [];
      for (var i = 0; i < samples.length; ++i) {
        if (this.planarConfiguration === 1) {
          srcSampleOffsets.push(sum(this.fileDirectory.BitsPerSample, 0, samples[i]) / 8);
        } else {
          srcSampleOffsets.push(0);
        }
        sampleReaders.push(this.getReaderForSample(samples[i]));
      }

      for (var yTile = minYTile; yTile < maxYTile; ++yTile) {
        for (var xTile = minXTile; xTile < maxXTile; ++xTile) {
          var firstLine = yTile * tileHeight;
          var firstCol = xTile * tileWidth;
          var lastLine = (yTile + 1) * tileHeight;
          var lastCol = (xTile + 1) * tileWidth;

          for (var sampleIndex = 0; sampleIndex < samples.length; ++sampleIndex) {
            var sample = samples[sampleIndex];
            if (this.planarConfiguration === 2) {
              bytesPerPixel = this.getSampleByteSize(sample);
            }
            var tile = new DataView(this.getTileOrStrip(xTile, yTile, sample));

            var reader = sampleReaders[sampleIndex];
            var ymax = Math.min(tileHeight, tileHeight - (lastLine - imageWindow[3]));
            var xmax = Math.min(tileWidth, tileWidth - (lastCol - imageWindow[2]));
            var totalbytes = (ymax * tileWidth + xmax) * bytesPerPixel;
            var tileLength = new Uint8Array(tile.buffer).length;
            if (2 * tileLength !== totalbytes && this._debugMessages) {
              console.warn('dimension mismatch', tileLength, totalbytes);
            }
            for (var y = Math.max(0, imageWindow[1] - firstLine); y < ymax; ++y) {
              for (var x = Math.max(0, imageWindow[0] - firstCol); x < xmax; ++x) {
                var pixelOffset = (y * tileWidth + x) * bytesPerPixel;
                var value = 0;
                if (pixelOffset < tileLength - 1) {
                  value = reader.call(tile, pixelOffset + srcSampleOffsets[sampleIndex], this.littleEndian);
                }

                var windowCoordinate;
                if (interleave) {
                  if (predictor !== 1 && x > 0) {
                    windowCoordinate = (y + firstLine - imageWindow[1]) * windowWidth * samples.length + (x + firstCol - imageWindow[0] - 1) * samples.length + sampleIndex;
                    value += valueArrays[windowCoordinate];
                  }

                  windowCoordinate = (y + firstLine - imageWindow[1]) * windowWidth * samples.length + (x + firstCol - imageWindow[0]) * samples.length + sampleIndex;
                  valueArrays[windowCoordinate] = value;
                } else {
                  if (predictor !== 1 && x > 0) {
                    windowCoordinate = (y + firstLine - imageWindow[1]) * windowWidth + x - 1 + firstCol - imageWindow[0];
                    value += valueArrays[sampleIndex][windowCoordinate];
                  }

                  windowCoordinate = (y + firstLine - imageWindow[1]) * windowWidth + x + firstCol - imageWindow[0];
                  valueArrays[sampleIndex][windowCoordinate] = value;
                }
              }
            }
          }
        }
      }
      callback(valueArrays);
      return valueArrays;
    } catch (error) {
      return callbackError(error);
    }
  },

  /**
   * This callback is called upon successful reading of a GeoTIFF image. The
   * resulting arrays are passed as a single argument.
   * @callback GeoTIFFImage~readCallback
   * @param {(TypedArray|TypedArray[])} array the requested data as a either a
   *                                          single typed array or a list of
   *                                          typed arrays, depending on the
   *                                          'interleave' option.
   */

  /**
   * This callback is called upon encountering an error while reading of a
   * GeoTIFF image
   * @callback GeoTIFFImage~readErrorCallback
   * @param {Error} error the encountered error
   */

  /**
   * Reads raster data from the image. This function reads all selected samples
   * into separate arrays of the correct type for that sample. When provided,
   * only a subset of the raster is read for each sample.
   *
   * @param {Object} [options] optional parameters
   * @param {Array} [options.window=whole image] the subset to read data from.
   * @param {Array} [options.samples=all samples] the selection of samples to read from.
   * @param {Boolean} [options.interleave=false] whether the data shall be read
   *                                             in one single array or separate
   *                                             arrays.
   * @param {GeoTIFFImage~readCallback} [callback] the success callback. this
   *                                               parameter is mandatory for
   *                                               asynchronous decoders (some
   *                                               compression mechanisms).
   * @param {GeoTIFFImage~readErrorCallback} [callbackError] the error callback
   * @returns {(TypedArray|TypedArray[]|null)} in synchonous cases, the decoded
   *                                           array(s) is/are returned. In
   *                                           asynchronous cases, nothing is
   *                                           returned.
   */
  readRasters: function readRasters() /* arguments are read via the 'arguments' object */{
    // parse the arguments
    var options, callback, callbackError;
    switch (arguments.length) {
      case 0:
        break;
      case 1:
        if (typeof arguments[0] === "function") {
          callback = arguments[0];
        } else {
          options = arguments[0];
        }
        break;
      case 2:
        if (typeof arguments[0] === "function") {
          callback = arguments[0];
          callbackError = arguments[1];
        } else {
          options = arguments[0];
          callback = arguments[1];
        }
        break;
      case 3:
        options = arguments[0];
        callback = arguments[1];
        callbackError = arguments[2];
        break;
      default:
        throw new Error("Invalid number of arguments passed.");
    }

    // set up default arguments
    options = options || {};
    callbackError = callbackError || function (error) {
      console.error(error);
    };

    var imageWindow = options.window || [0, 0, this.getWidth(), this.getHeight()],
        samples = options.samples,
        interleave = options.interleave;

    // check parameters
    if (imageWindow[0] < 0 || imageWindow[1] < 0 || imageWindow[2] > this.getWidth() || imageWindow[3] > this.getHeight()) {
      throw new Error("Select window is out of image bounds.");
    } else if (imageWindow[0] > imageWindow[2] || imageWindow[1] > imageWindow[3]) {
      throw new Error("Invalid subsets");
    }

    var imageWindowWidth = imageWindow[2] - imageWindow[0];
    var imageWindowHeight = imageWindow[3] - imageWindow[1];
    var numPixels = imageWindowWidth * imageWindowHeight;
    var i;

    if (!samples) {
      samples = [];
      for (i = 0; i < this.fileDirectory.SamplesPerPixel; ++i) {
        samples.push(i);
      }
    } else {
      for (i = 0; i < samples.length; ++i) {
        if (samples[i] >= this.fileDirectory.SamplesPerPixel) {
          throw new RangeError("Invalid sample index '" + samples[i] + "'.");
        }
      }
    }
    var valueArrays;
    if (interleave) {
      var format = this.fileDirectory.SampleFormat ? Math.max.apply(null, this.fileDirectory.SampleFormat) : 1,
          bitsPerSample = Math.max.apply(null, this.fileDirectory.BitsPerSample);
      valueArrays = arrayForType(format, bitsPerSample, numPixels * samples.length);
    } else {
      valueArrays = [];
      for (i = 0; i < samples.length; ++i) {
        valueArrays.push(this.getArrayForSample(samples[i], numPixels));
      }
    }

    // start reading data, sync or async
    var decoder = this.getDecoder();
    if (decoder.isAsync()) {
      if (!callback) {
        throw new Error("No callback specified for asynchronous raster reading.");
      }
      return this._readRasterAsync(imageWindow, samples, valueArrays, interleave, callback, callbackError);
    } else {
      callback = callback || function () {};
      return this._readRaster(imageWindow, samples, valueArrays, interleave, callback, callbackError);
    }
  },

  /**
   * Reads raster data from the image as RGB. The result is always an
   * interleaved typed array.
   * Colorspaces other than RGB will be transformed to RGB, color maps expanded.
   * When no other method is applicable, the first sample is used to produce a
   * greayscale image.
   * When provided, only a subset of the raster is read for each sample.
   *
   * @param {Object} [options] optional parameters
   * @param {Array} [options.window=whole image] the subset to read data from.
   * @param {GeoTIFFImage~readCallback} callback the success callback. this
   *                                             parameter is mandatory.
   * @param {GeoTIFFImage~readErrorCallback} [callbackError] the error callback
   */
  readRGB: function readRGB() {
    // parse the arguments
    var options = null,
        callback = null,
        callbackError = null;
    switch (arguments.length) {
      case 0:
        break;
      case 1:
        if (typeof arguments[0] === "function") {
          callback = arguments[0];
        } else {
          options = arguments[0];
        }
        break;
      case 2:
        if (typeof arguments[0] === "function") {
          callback = arguments[0];
          callbackError = arguments[1];
        } else {
          options = arguments[0];
          callback = arguments[1];
        }
        break;
      case 3:
        options = arguments[0];
        callback = arguments[1];
        callbackError = arguments[2];
        break;
      default:
        throw new Error("Invalid number of arguments passed.");
    }

    // set up default arguments
    options = options || {};
    callbackError = callbackError || function (error) {
      console.error(error);
    };

    var imageWindow = options.window || [0, 0, this.getWidth(), this.getHeight()];

    // check parameters
    if (imageWindow[0] < 0 || imageWindow[1] < 0 || imageWindow[2] > this.getWidth() || imageWindow[3] > this.getHeight()) {
      throw new Error("Select window is out of image bounds.");
    } else if (imageWindow[0] > imageWindow[2] || imageWindow[1] > imageWindow[3]) {
      throw new Error("Invalid subsets");
    }

    var width = imageWindow[2] - imageWindow[0];
    var height = imageWindow[3] - imageWindow[1];

    var pi = this.fileDirectory.PhotometricInterpretation;

    var bits = this.fileDirectory.BitsPerSample[0];
    var max = Math.pow(2, bits);

    if (pi === globals.photometricInterpretations.RGB) {
      return this.readRasters({
        window: options.window,
        interleave: true
      }, callback, callbackError);
    }

    var samples;
    switch (pi) {
      case globals.photometricInterpretations.WhiteIsZero:
      case globals.photometricInterpretations.BlackIsZero:
      case globals.photometricInterpretations.Palette:
        samples = [0];
        break;
      case globals.photometricInterpretations.CMYK:
        samples = [0, 1, 2, 3];
        break;
      case globals.photometricInterpretations.YCbCr:
      case globals.photometricInterpretations.CIELab:
        samples = [0, 1, 2];
        break;
      default:
        throw new Error("Invalid or unsupported photometric interpretation.");
    }

    var subOptions = {
      window: options.window,
      interleave: true,
      samples: samples
    };
    var fileDirectory = this.fileDirectory;
    return this.readRasters(subOptions, function (raster) {
      switch (pi) {
        case globals.photometricInterpretations.WhiteIsZero:
          return callback(rgb.fromWhiteIsZero(raster, max, width, height));
        case globals.photometricInterpretations.BlackIsZero:
          return callback(rgb.fromBlackIsZero(raster, max, width, height));
        case globals.photometricInterpretations.Palette:
          return callback(rgb.fromPalette(raster, fileDirectory.ColorMap, width, height));
        case globals.photometricInterpretations.CMYK:
          return callback(rgb.fromCMYK(raster, width, height));
        case globals.photometricInterpretations.YCbCr:
          return callback(rgb.fromYCbCr(raster, width, height));
        case globals.photometricInterpretations.CIELab:
          return callback(rgb.fromCIELab(raster, width, height));
      }
    }, callbackError);
  },

  /**
   * Returns an array of tiepoints.
   * @returns {Object[]}
   */
  getTiePoints: function getTiePoints() {
    if (!this.fileDirectory.ModelTiepoint) {
      return [];
    }

    var tiePoints = [];
    for (var i = 0; i < this.fileDirectory.ModelTiepoint.length; i += 6) {
      tiePoints.push({
        i: this.fileDirectory.ModelTiepoint[i],
        j: this.fileDirectory.ModelTiepoint[i + 1],
        k: this.fileDirectory.ModelTiepoint[i + 2],
        x: this.fileDirectory.ModelTiepoint[i + 3],
        y: this.fileDirectory.ModelTiepoint[i + 4],
        z: this.fileDirectory.ModelTiepoint[i + 5]
      });
    }
    return tiePoints;
  },

  /**
   * Returns the parsed GDAL metadata items.
   * @returns {Object}
   */
  getGDALMetadata: function getGDALMetadata() {
    var metadata = {};
    if (!this.fileDirectory.GDAL_METADATA) {
      return null;
    }
    var string = this.fileDirectory.GDAL_METADATA;
    var xmlDom = globals.parseXml(string.substring(0, string.length - 1));
    var result = xmlDom.evaluate("GDALMetadata/Item", xmlDom, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
    for (var i = 0; i < result.snapshotLength; ++i) {
      var node = result.snapshotItem(i);
      metadata[node.getAttribute("name")] = node.textContent;
    }
    return metadata;
  },

  /**
   * Returns the image origin as a XYZ-vector. When the image has no affine
   * transformation, then an exception is thrown.
   * @returns {Array} The origin as a vector
   */
  getOrigin: function getOrigin() {
    var tiePoints = this.fileDirectory.ModelTiepoint;
    if (!tiePoints || tiePoints.length !== 6) {
      throw new Error("The image does not have an affine transformation.");
    }

    return [tiePoints[3], tiePoints[4], tiePoints[5]];
  },

  /**
   * Returns the image resolution as a XYZ-vector. When the image has no affine
   * transformation, then an exception is thrown.
   * @returns {Array} The resolution as a vector
   */
  getResolution: function getResolution() {
    if (!this.fileDirectory.ModelPixelScale) {
      throw new Error("The image does not have an affine transformation.");
    }

    return [this.fileDirectory.ModelPixelScale[0], this.fileDirectory.ModelPixelScale[1], this.fileDirectory.ModelPixelScale[2]];
  },

  /**
   * Returns whether or not the pixels of the image depict an area (or point).
   * @returns {Boolean} Whether the pixels are a point
   */
  pixelIsArea: function pixelIsArea() {
    return this.geoKeys.GTRasterTypeGeoKey === 1;
  },

  /**
   * Returns the image bounding box as an array of 4 values: min-x, min-y,
   * max-x and max-y. When the image has no affine transformation, then an
   * exception is thrown.
   * @returns {Array} The bounding box
   */
  getBoundingBox: function getBoundingBox() {
    var origin = this.getOrigin();
    var resolution = this.getResolution();

    var x1 = origin[0];
    var y1 = origin[1];

    var x2 = x1 + resolution[0] * this.getWidth();
    var y2 = y1 + resolution[1] * this.getHeight();

    return [Math.min(x1, x2), Math.min(y1, y2), Math.max(x1, x2), Math.max(y1, y2)];
  }
};

var geotiffimage = GeoTIFFImage;

"use strict";

var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

var DataView64 = function () {
  function DataView64(arrayBuffer) {
    _classCallCheck(this, DataView64);

    this._dataView = new DataView(arrayBuffer);
  }

  _createClass(DataView64, [{
    key: "getUint64",
    value: function getUint64(offset, littleEndian) {
      var left = this.getUint32(offset, littleEndian);
      var right = this.getUint32(offset + 4, littleEndian);
      if (littleEndian) {
        return left << 32 | right;
      }
      return right << 32 | left;
    }
  }, {
    key: "getInt64",
    value: function getInt64(offset, littleEndian) {
      var left, right;
      if (littleEndian) {
        left = this.getInt32(offset, littleEndian);
        right = this.getUint32(offset + 4, littleEndian);

        return left << 32 | right;
      }
      left = this.getUint32(offset, littleEndian);
      right = this.getInt32(offset + 4, littleEndian);
      return right << 32 | left;
    }
  }, {
    key: "getUint8",
    value: function getUint8(offset, littleEndian) {
      return this._dataView.getUint8(offset, littleEndian);
    }
  }, {
    key: "getInt8",
    value: function getInt8(offset, littleEndian) {
      return this._dataView.getInt8(offset, littleEndian);
    }
  }, {
    key: "getUint16",
    value: function getUint16(offset, littleEndian) {
      return this._dataView.getUint16(offset, littleEndian);
    }
  }, {
    key: "getInt16",
    value: function getInt16(offset, littleEndian) {
      return this._dataView.getInt16(offset, littleEndian);
    }
  }, {
    key: "getUint32",
    value: function getUint32(offset, littleEndian) {
      return this._dataView.getUint32(offset, littleEndian);
    }
  }, {
    key: "getInt32",
    value: function getInt32(offset, littleEndian) {
      return this._dataView.getInt32(offset, littleEndian);
    }
  }, {
    key: "getFloat32",
    value: function getFloat32(offset, littleEndian) {
      return this._dataView.getFloat32(offset, littleEndian);
    }
  }, {
    key: "getFloat64",
    value: function getFloat64(offset, littleEndian) {
      return this._dataView.getFloat64(offset, littleEndian);
    }
  }, {
    key: "buffer",
    get: function get() {
      return this._dataView.buffer;
    }
  }]);

  return DataView64;
}();

var dataview64 = DataView64;

"use strict";

var fieldTypes = globals.fieldTypes;
var fieldTagNames = globals.fieldTagNames;
var arrayFields = globals.arrayFields;
var geoKeyNames = globals.geoKeyNames;

/**
 * The abstraction for a whole GeoTIFF file.
 * @constructor
 * @param {ArrayBuffer} rawData the raw data stream of the file as an ArrayBuffer.
 * @param {Object} [options] further options.
 * @param {Boolean} [options.cache=false] whether or not decoded tiles shall be cached.
 */
function GeoTIFF(rawData, options) {
  this.dataView = new dataview64(rawData);
  options = options || {};
  this.cache = options.cache || false;

  var BOM = this.dataView.getUint16(0, 0);
  if (BOM === 0x4949) {
    this.littleEndian = true;
  } else if (BOM === 0x4D4D) {
    this.littleEndian = false;
  } else {
    throw new TypeError("Invalid byte order value.");
  }

  var magicNumber = this.dataView.getUint16(2, this.littleEndian);
  if (this.dataView.getUint16(2, this.littleEndian) === 42) {
    this.bigTiff = false;
  } else if (magicNumber === 43) {
    this.bigTiff = true;
    var offsetBytesize = this.dataView.getUint16(4, this.littleEndian);
    if (offsetBytesize !== 8) {
      throw new Error("Unsupported offset byte-size.");
    }
  } else {
    throw new TypeError("Invalid magic number.");
  }

  this.fileDirectories = this.parseFileDirectories(this.getOffset(this.bigTiff ? 8 : 4));
}

GeoTIFF.prototype = {
  getOffset: function getOffset(offset) {
    if (this.bigTiff) {
      return this.dataView.getUint64(offset, this.littleEndian);
    }
    return this.dataView.getUint32(offset, this.littleEndian);
  },

  getFieldTypeLength: function getFieldTypeLength(fieldType) {
    switch (fieldType) {
      case fieldTypes.BYTE:case fieldTypes.ASCII:case fieldTypes.SBYTE:case fieldTypes.UNDEFINED:
        return 1;
      case fieldTypes.SHORT:case fieldTypes.SSHORT:
        return 2;
      case fieldTypes.LONG:case fieldTypes.SLONG:case fieldTypes.FLOAT:
        return 4;
      case fieldTypes.RATIONAL:case fieldTypes.SRATIONAL:case fieldTypes.DOUBLE:
      case fieldTypes.LONG8:case fieldTypes.SLONG8:case fieldTypes.IFD8:
        return 8;
      default:
        throw new RangeError("Invalid field type: " + fieldType);
    }
  },

  getValues: function getValues(fieldType, count, offset) {
    var values = null;
    var readMethod = null;
    var fieldTypeLength = this.getFieldTypeLength(fieldType);
    var i;

    switch (fieldType) {
      case fieldTypes.BYTE:case fieldTypes.ASCII:case fieldTypes.UNDEFINED:
        values = new Uint8Array(count);readMethod = this.dataView.getUint8;
        break;
      case fieldTypes.SBYTE:
        values = new Int8Array(count);readMethod = this.dataView.getInt8;
        break;
      case fieldTypes.SHORT:
        values = new Uint16Array(count);readMethod = this.dataView.getUint16;
        break;
      case fieldTypes.SSHORT:
        values = new Int16Array(count);readMethod = this.dataView.getInt16;
        break;
      case fieldTypes.LONG:
        values = new Uint32Array(count);readMethod = this.dataView.getUint32;
        break;
      case fieldTypes.SLONG:
        values = new Int32Array(count);readMethod = this.dataView.getInt32;
        break;
      case fieldTypes.LONG8:case fieldTypes.IFD8:
        values = new Array(count);readMethod = this.dataView.getUint64;
        break;
      case fieldTypes.SLONG8:
        values = new Array(count);readMethod = this.dataView.getInt64;
        break;
      case fieldTypes.RATIONAL:
        values = new Uint32Array(count * 2);readMethod = this.dataView.getUint32;
        break;
      case fieldTypes.SRATIONAL:
        values = new Int32Array(count * 2);readMethod = this.dataView.getInt32;
        break;
      case fieldTypes.FLOAT:
        values = new Float32Array(count);readMethod = this.dataView.getFloat32;
        break;
      case fieldTypes.DOUBLE:
        values = new Float64Array(count);readMethod = this.dataView.getFloat64;
        break;
      default:
        throw new RangeError("Invalid field type: " + fieldType);
    }

    // normal fields
    if (!(fieldType === fieldTypes.RATIONAL || fieldType === fieldTypes.SRATIONAL)) {
      for (i = 0; i < count; ++i) {
        values[i] = readMethod.call(this.dataView, offset + i * fieldTypeLength, this.littleEndian);
      }
    }
    // RATIONAL or SRATIONAL
    else {
        for (i = 0; i < count; i += 2) {
          values[i] = readMethod.call(this.dataView, offset + i * fieldTypeLength, this.littleEndian);
          values[i + 1] = readMethod.call(this.dataView, offset + (i * fieldTypeLength + 4), this.littleEndian);
        }
      }

    if (fieldType === fieldTypes.ASCII) {
      return String.fromCharCode.apply(null, values);
    }
    return values;
  },

  getFieldValues: function getFieldValues(fieldTag, fieldType, typeCount, valueOffset) {
    var fieldValues;
    var fieldTypeLength = this.getFieldTypeLength(fieldType);

    if (fieldTypeLength * typeCount <= (this.bigTiff ? 8 : 4)) {
      fieldValues = this.getValues(fieldType, typeCount, valueOffset);
    } else {
      var actualOffset = this.getOffset(valueOffset);
      fieldValues = this.getValues(fieldType, typeCount, actualOffset);
    }

    if (typeCount === 1 && arrayFields.indexOf(fieldTag) === -1 && !(fieldType === fieldTypes.RATIONAL || fieldType === fieldTypes.SRATIONAL)) {
      return fieldValues[0];
    }

    return fieldValues;
  },

  parseGeoKeyDirectory: function parseGeoKeyDirectory(fileDirectory) {
    var rawGeoKeyDirectory = fileDirectory.GeoKeyDirectory;
    if (!rawGeoKeyDirectory) {
      return null;
    }

    var geoKeyDirectory = {};
    for (var i = 4; i < rawGeoKeyDirectory[3] * 4; i += 4) {
      var key = geoKeyNames[rawGeoKeyDirectory[i]],
          location = rawGeoKeyDirectory[i + 1] ? fieldTagNames[rawGeoKeyDirectory[i + 1]] : null,
          count = rawGeoKeyDirectory[i + 2],
          offset = rawGeoKeyDirectory[i + 3];

      var value = null;
      if (!location) {
        value = offset;
      } else {
        value = fileDirectory[location];
        if (typeof value === "undefined" || value === null) {
          throw new Error("Could not get value of geoKey '" + key + "'.");
        } else if (typeof value === "string") {
          value = value.substring(offset, offset + count - 1);
        } else if (value.subarray) {
          value = value.subarray(offset, offset + count - 1);
        }
      }
      geoKeyDirectory[key] = value;
    }
    return geoKeyDirectory;
  },

  parseFileDirectories: function parseFileDirectories(byteOffset) {
    var nextIFDByteOffset = byteOffset;
    var fileDirectories = [];

    while (nextIFDByteOffset !== 0x00000000) {
      var numDirEntries = this.bigTiff ? this.dataView.getUint64(nextIFDByteOffset, this.littleEndian) : this.dataView.getUint16(nextIFDByteOffset, this.littleEndian);

      var fileDirectory = {};
      var i = nextIFDByteOffset + (this.bigTiff ? 8 : 2);
      for (var entryCount = 0; entryCount < numDirEntries; i += this.bigTiff ? 20 : 12, ++entryCount) {
        var fieldTag = this.dataView.getUint16(i, this.littleEndian);
        var fieldType = this.dataView.getUint16(i + 2, this.littleEndian);
        var typeCount = this.bigTiff ? this.dataView.getUint64(i + 4, this.littleEndian) : this.dataView.getUint32(i + 4, this.littleEndian);

        fileDirectory[fieldTagNames[fieldTag]] = this.getFieldValues(fieldTag, fieldType, typeCount, i + (this.bigTiff ? 12 : 8));
      }
      fileDirectories.push([fileDirectory, this.parseGeoKeyDirectory(fileDirectory)]);

      nextIFDByteOffset = this.getOffset(i);
    }
    return fileDirectories;
  },

  /**
   * Get the n-th internal subfile a an image. By default, the first is returned.
   *
   * @param {Number} [index=0] the index of the image to return.
   * @returns {GeoTIFFImage} the image at the given index
   */
  getImage: function getImage(index) {
    index = index || 0;
    var fileDirectoryAndGeoKey = this.fileDirectories[index];
    if (!fileDirectoryAndGeoKey) {
      throw new RangeError("Invalid image index");
    }
    return new geotiffimage(fileDirectoryAndGeoKey[0], fileDirectoryAndGeoKey[1], this.dataView, this.littleEndian, this.cache);
  },

  /**
   * Returns the count of the internal subfiles.
   *
   * @returns {Number} the number of internal subfile images
   */
  getImageCount: function getImageCount() {
    return this.fileDirectories.length;
  }
};

var geotiff$1 = GeoTIFF;

var main = createCommonjsModule$$1(function (module) {
  "use strict";

  /**
   * Main parsing function for GeoTIFF files.
   * @param {(string|ArrayBuffer)} data Raw data to parse the GeoTIFF from.
   * @param {Object} [options] further options.
   * @param {Boolean} [options.cache=false] whether or not decoded tiles shall be cached.
   * @returns {GeoTIFF} the parsed geotiff file.
   */

  var parse = function parse(data, options) {
    var rawData, i, strLen, view;
    if (typeof data === "string" || data instanceof String) {
      rawData = new ArrayBuffer(data.length * 2); // 2 bytes for each char
      view = new Uint16Array(rawData);
      for (i = 0, strLen = data.length; i < strLen; ++i) {
        view[i] = data.charCodeAt(i);
      }
    } else if (data instanceof ArrayBuffer) {
      rawData = data;
    } else {
      throw new Error("Invalid input data given.");
    }
    return new geotiff$1(rawData, options);
  };

  {
    module.exports.parse = parse;
  }
  if (typeof window !== "undefined") {
    window["GeoTIFF"] = { parse: parse };
  }
});

/*
* Author   Jonathan Lurie - http://me.jonathanlurie.fr
* License  MIT
* Link      https://github.com/Pixpipe/pixpipejs
* Lab       MCIN - Montreal Neurological Institute
*/

/**
* Read and decode Tiff format. The decoder for BigTiff is experimental.
* Takes an ArrayBuffer of a tiff file as input and the TiffDecoder outputs an Image2D.
* Tiff format is very broad and this decoder, thanks to the Geotiff npm package
* is compatible with single or multiband images, with or without compression, using
* various bith depth and types (8bits, 32bits, etc.)
*
* Info: Tiff 6.0 specification http://www.npes.org/pdf/TIFF-v6.pdf
*
* **Usage**
* - [examples/fileToTiff.html](../examples/fileToTiff.html)
*
*/

var TiffDecoder = function (_Filter) {
  inherits(TiffDecoder, _Filter);

  function TiffDecoder() {
    classCallCheck(this, TiffDecoder);

    var _this = possibleConstructorReturn(this, (TiffDecoder.__proto__ || Object.getPrototypeOf(TiffDecoder)).call(this));

    _this.addInputValidator(0, ArrayBuffer);
    return _this;
  }

  createClass(TiffDecoder, [{
    key: '_run',
    value: function _run() {

      var inputBuffer = this._getInput(0);

      if (!inputBuffer) {
        console.warn("TiffDecoder requires an ArrayBuffer as input \"0\". Unable to continue.");
        return;
      }

      var success = false;

      try {
        var tiffData = main.parse(inputBuffer);
        var tiffImage = tiffData.getImage();

        var data = tiffImage.readRasters({ interleave: true });
        var width = tiffImage.getWidth();
        var height = tiffImage.getHeight();
        var ncpp = tiffImage.getSamplesPerPixel();

        if (ncpp == data.length / (width * height)) {
          success = true;
        }

        if (success) {
          var outputImg = this._addOutput(Image2D);
          outputImg.setData(data, width, height, ncpp);
        } else {
          console.warn("Tiff support is experimental and this file is not compatible.");
        }
      } catch (e) {
        console.warn("This buffer is not from a TIFF file.");
      }
    }
  }]);
  return TiffDecoder;
}(Filter); /* END of class TiffDecoder */

/*
* Author    Jonathan Lurie - http://me.jonahanlurie.fr
* License   MIT
* Link      https://github.com/jonathanlurie/es6module
* Lab       MCIN - http://mcin.ca/ - Montreal Neurological Institute
*/

/**
* An instance of QeegModFileParser can be used to parse several file
* (you don't need to create a QeegModFileParser instance per file to parse).
* The Qeeg MOD file usually have the .MOD extension, though this parser does not
* need the filename or the extension.
*
*/
var QeegModFileParser = function () {
  function QeegModFileParser() {
    classCallCheck(this, QeegModFileParser);

    this._rawData = null;
  }

  /**
  * Feed the parser with raw data to be parsed
  * @param {ArrayBuffer} data - the raw data
  */


  createClass(QeegModFileParser, [{
    key: "setRawData",
    value: function setRawData(data) {
      this._rawData = data;
    }

    /**
    * Launch the parsing of the ArrayBuffer that was given with the method setRawData
    * @return {Object} - the MOD file data in a readable format
    */

  }, {
    key: "parse",
    value: function parse() {
      var qeegData = null;
      try {
        qeegData = this._parseNoException();
      } catch (e) {
        //console.error( e );
        console.warn("This file is not compatible.");
      }

      return qeegData;
    }

    /**
    * [PRIVATE]
    * This method parses the data without caring of potential exception to be raised,
    * it does not handle them. Thus, this method is unsafe to use as is and should
    * no be used directly.
    * @return {Object} - the MOD file data in a readable format
    */

  }, {
    key: "_parseNoException",
    value: function _parseNoException() {
      if (!this._rawData) {
        console.warn("The input buffer is null. Nothing to be parsed here.");
        return null;
      }

      var inputBuffer = this._rawData;

      var view = new DataView(inputBuffer);
      var littleEndian = true;

      // ------------- DECODING HEADER -------------------

      var header = {};

      // Protection Mask
      // Offset: 0, length: 2
      header.protectionMask = view.getUint16(0, littleEndian);

      // Comment (first byte is the real length)
      // Offset: 2, length: 81
      var commentRealLength = view.getUint8(2);
      var commentBytes = new Uint8Array(inputBuffer, 3, commentRealLength);
      header.comment = String.fromCharCode.apply(String, commentBytes);

      // Measure (M) Size
      // Offset: 83, length: 2
      header.measureSize = view.getUint16(83, littleEndian);

      // Duration (D) Size
      // Offset: 85, length: 2
      header.durationSize = view.getUint16(85, littleEndian);

      // First space (F) Size
      // Offset: 87, length: 2
      header.firstSpaceSize = view.getUint16(87, littleEndian);

      // Second space (S) Size
      // Offset: 89, length: 2
      header.secondSpaceSize = view.getUint16(89, littleEndian);

      // Reserved bytes
      // Offset: 91, length: 2
      header.reservedBytes = view.getUint16(91, littleEndian);

      // Data size
      // Offset: 93, length: 2
      header.dataSize = view.getUint16(93, littleEndian);

      // ------------- DECODING MATRIX -------------------
      var matrixOffset = 95;

      var matrixSizeElements = header.measureSize * header.durationSize * header.firstSpaceSize * header.secondSpaceSize;

      var matrixSizeBytes = matrixSizeElements * header.dataSize;

      var matrixData = new Float32Array(matrixSizeElements);

      for (var i = 0; i < matrixSizeElements; i++) {
        matrixData[i] = view.getFloat32(matrixOffset + i * header.dataSize, littleEndian);
      }

      // ------------- DECODING RESERVED BYTE SECTION -------------------
      var reservedBytesSectionOffset = matrixOffset + matrixSizeBytes;
      // we dont care about this section - we wont use it

      // ------------- DECODING INFO SECTION -------------------
      // This info section is lways corrupted - we wont use it
      var infoSectionOffset = reservedBytesSectionOffset + header.reservedBytes;
      var infoRealLength = view.getUint8(infoSectionOffset);
      var infoBytes = new Uint8Array(inputBuffer, infoSectionOffset + 1, infoRealLength);
      var info = String.fromCharCode.apply(String, infoBytes);

      // ------------- DECODING HEADER OF LIST SECTION -------------------
      var headerOfListOffset = infoSectionOffset + 9;

      var listSize = 8;
      var offsetByteSize = 4;
      var totalByteSize = 2;
      var headerOfList = new Array(listSize);

      for (var i = 0; i < listSize; i++) {
        var record = {
          // !! IMPORTANT !! there is a known BUG in the offset value
          //offset: view.getInt16(headerOfListOffset + i * (offsetByteSize+totalByteSize), littleEndian),
          total: view.getUint16(headerOfListOffset + i * (offsetByteSize + totalByteSize) + offsetByteSize, littleEndian),
          labels: null
        };
        headerOfList[i] = record;
      }

      headerOfList[0].description = "list of labels for measure dimension";
      headerOfList[1].description = "list of labels for duration dimension";
      headerOfList[2].description = "list of labels for first space dimension";
      headerOfList[3].description = "list of labels for second space dimension";
      headerOfList[4].description = "list of scales";
      headerOfList[5].description = "list of units";
      headerOfList[6].description = "list of transformations";
      headerOfList[7].description = "list of contexts";

      var infoSection2Offset = headerOfListOffset + 48;
      var localOffset = infoSection2Offset;

      // list 1 to 6 (0 to 5 on out 0-indexed array)
      for (var i = 0; i < headerOfList.length - 2; i++) {
        var nbOfElem = headerOfList[i].total;

        headerOfList[i].labels = nbOfElem ? new Array(nbOfElem).fill("") : 0;

        for (var j = 0; j < nbOfElem; j++) {
          var strByteLength = view.getUint8(localOffset);

          if (strByteLength) {
            var strBytes = new Uint8Array(inputBuffer, localOffset + 1, strByteLength);
            //var str = String.fromCharCode.apply(String, strBytes);
            var str = String.fromCharCode.apply(String, toConsumableArray(strBytes));
            // some ASCII charcode are wrong, hopefully always in the same way
            headerOfList[i].labels[j] = str.replace("æ", "µ").replace("ý", "²");
          }

          localOffset += strByteLength + 1;
        }
      }

      // particular case for list 7 (6 on our 0-indexed array) -- the transformations
      // the total value is not the length but the actual value to consider
      var transformation = view.getUint8(localOffset);
      headerOfList[6].labels = transformation;
      localOffset += headerOfList[6].total * (transformation + 1);

      // ------------- DECODING THE LIST OF CONTEXT -------------------

      // parsing the list of contexts
      var listOfContexts = headerOfList[headerOfList.length - 1];
      listOfContexts.contextsByteLength = new Array(listOfContexts.total);
      listOfContexts.types = new Array(listOfContexts.total);
      listOfContexts.values = new Array(listOfContexts.total);

      var regexTypeDetection = /[a-zA-Z ]*\:{1}([a-zA-Z]*)[\[]?\d*[\]]?/;

      listOfContexts.labels = new Array(listOfContexts.total).fill("");

      for (var iCtx = 0; iCtx < listOfContexts.total; iCtx++) {
        var strByteLength = view.getUint8(localOffset);
        var strBytes = new Uint8Array(inputBuffer, localOffset + 1, strByteLength);
        var str = String.fromCharCode.apply(String, strBytes);
        listOfContexts.labels[iCtx] = str.split(":")[0];
        listOfContexts.contextsByteLength[iCtx] = view.getUint16(localOffset + strByteLength + 1, littleEndian);

        var typeMatch = regexTypeDetection.exec(str);
        if (typeMatch) {
          listOfContexts.types[iCtx] = typeMatch[1].toLowerCase();
        } else {
          listOfContexts.types[iCtx] = null;
        }

        localOffset += strByteLength + 3;
      }

      // getting the values for the contexts
      for (var iCtx = 0; iCtx < listOfContexts.total; iCtx++) {
        var value = null;
        if (listOfContexts.types[iCtx] === "single") {
          // single precision floats are on 4 bytes
          value = view.getFloat32(localOffset, littleEndian);
        } else if (listOfContexts.types[iCtx] === "boolean") {
          value = new Array(listOfContexts.contextsByteLength[iCtx]);
          for (var b = 0; b < value.length; b++) {
            value[b] = !!view.getUint8(localOffset + b);
          }
        } else if (listOfContexts.types[iCtx] === "string") {
          var strByteLength = view.getUint8(localOffset);
          var strBytes = new Uint8Array(inputBuffer, localOffset + 1, strByteLength);
          value = String.fromCharCode.apply(String, strBytes);
        }

        localOffset += listOfContexts.contextsByteLength[iCtx];
        listOfContexts.values[iCtx] = value;
      }

      // ------------- CLEANING HEADER OF LIST -------------------

      for (var i = 0; i < headerOfList.length; i++) {
        delete headerOfList[i].total;
      }

      delete headerOfList[7].contextsByteLength;
      delete headerOfList[7].types;

      var modEeg = {
        metadata: {
          comment: header.comment,
          sizes: {
            measure: header.measureSize,
            duration: header.durationSize,
            firstSpace: header.firstSpaceSize,
            secondSpace: header.secondSpaceSize
          },
          informationList: headerOfList
        },

        data: matrixData
      };

      return modEeg;
    }
  }]);
  return QeegModFileParser;
}(); /* END of QeegModFileParser */

var QeegModFileInterpreter = function () {
  function QeegModFileInterpreter() {
    var qeegModObj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    classCallCheck(this, QeegModFileInterpreter);

    this._qeegModObj = null;
    this._typeCode = null;

    this._typeCodeMap = {
      "Z Electrical Tomography for Cortex and Basal Ganglia": "ZETCBG",
      "Z Electrical Tomography for Cortex": "ZETC",
      "Z Cross Spectrum": "ZCROSS",
      "Z Broad Band": "ZBBSP",
      "Phase": "PHA",
      "Electrical Tomography for Cortex and Basal Ganglia": "ETCBG",
      "Electrical Tomography for Cortex": "ETC",
      "Cross Spectrum": "CROSS",
      "Correlation": "COR",
      "Coherence": "COH",
      "Broad Band": "BBSP"
      // "Raw Electrical Tomography Individual": "ET" // no file of this type to check if it's the correct string
    };

    this.setQeegModObj(qeegModObj);
  }

  /**
  * [PRIVATE]
  * find the typecode by correspondance with the `comment` metadata
  */


  createClass(QeegModFileInterpreter, [{
    key: "_defineTypeCode",
    value: function _defineTypeCode() {
      var type = this.getType();

      if (type in this._typeCodeMap) {
        this._typeCode = this._typeCodeMap[type];
      }
    }

    /**
    * In case the qeeg MOD object from the parser is not set in the constructor, it can be set here.
    * @param {Object} qeegModObj - output of a QeegModFileParser instance
    */

  }, {
    key: "setQeegModObj",
    value: function setQeegModObj() {
      var qeegModObj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

      if (!qeegModObj) return;

      this._qeegModObj = qeegModObj;
      this._defineTypeCode();
    }

    /**
    * Get the qeeg type from the object comment
    * @return {String} the type
    */

  }, {
    key: "getType",
    value: function getType() {
      return this._qeegModObj.metadata.comment;
    }

    /**
    * Get the type code of the data. Can be 'CROSS', 'ZCROSS', 'BBSP', 'ZBBSP',
    * 'ETC', 'ZETC', 'ETCBG', 'ZETCBG', 'ET', 'COR', 'COH', 'PHA'
    * @return {string} the type code or null if it was impossible to determine
    */

  }, {
    key: "getTypeCode",
    value: function getTypeCode() {
      return this._typeCode;
    }

    /**
    * Get all the measure labels
    * @return {Array} array of strings
    */

  }, {
    key: "getMeasureNames",
    value: function getMeasureNames() {
      return this._qeegModObj.metadata.informationList[0].labels;
    }

    /**
    * Get all the duration labels
    * @return {Array} array of strings
    */

  }, {
    key: "getDurationsLabels",
    value: function getDurationsLabels() {
      return this._qeegModObj.metadata.informationList[1].labels;
    }

    /**
    * Get all the first-space labels
    * @return {Array} array of strings
    */

  }, {
    key: "getFirstSpaceNames",
    value: function getFirstSpaceNames() {
      return this._qeegModObj.metadata.informationList[2].labels;
    }

    /**
    * Get all the second-space labels
    * @return {Array} array of strings
    */

  }, {
    key: "getSecondSpaceNames",
    value: function getSecondSpaceNames() {
      return this._qeegModObj.metadata.informationList[3].labels;
    }

    /**
    * Get all the unit labels
    * @return {Array} array of strings
    */

  }, {
    key: "getUnitsLabels",
    value: function getUnitsLabels() {
      return this._qeegModObj.metadata.informationList[5].labels;
    }

    /**
    * Get the size of the measure dimension
    * @return {Number} the size
    */

  }, {
    key: "getMeasureSize",
    value: function getMeasureSize() {
      return this._qeegModObj.metadata.sizes.measure;
    }

    /**
    * Get the size of the duration dimension
    * Note: the name "duration" is missleading, take it as a sort of measure,
    *       aka. just another dimension
    * @return {Number} the size
    */

  }, {
    key: "getDurationSize",
    value: function getDurationSize() {
      return this._qeegModObj.metadata.sizes.duration;
    }

    /**
    * Get the size of the first-space dimension
    * @return {Number} the size
    */

  }, {
    key: "getFirstSpaceSize",
    value: function getFirstSpaceSize() {
      return this._qeegModObj.metadata.sizes.firstSpace;
    }

    /**
    * Get the size of the second-space dimension
    * @return {Number} the size
    */

  }, {
    key: "getSecondSpaceSize",
    value: function getSecondSpaceSize() {
      return this._qeegModObj.metadata.sizes.secondSpace;
    }

    /**
    * Get the size of the dimensions, in the order of varying speed
    * (the last varies faster)
    * @return {Array} the dimensions
    */

  }, {
    key: "getDimensionSizes",
    value: function getDimensionSizes() {
      return [this._qeegModObj.metadata.sizes.measure, this._qeegModObj.metadata.sizes.duration, this._qeegModObj.metadata.sizes.firstSpace, this._qeegModObj.metadata.sizes.secondSpace];
    }

    /**
    * Get the number of dimensions actually used in this dataset.
    * Note: the second-space is not used by all files and even the first-space
    * for some other. No matter the number of dimensions used,
    * they are always the first N dim in the sens that they are always the
    * first N slowest varying dim.
    * @return {Number} the 
    */

  }, {
    key: "getNumberOfDimensionsUsed",
    value: function getNumberOfDimensionsUsed() {
      var sizes = this.getDimensionSizes();

      for (var i = sizes.length - 1; i >= 0; i--) {
        if (sizes[i] > 1) {
          return i + 1;
        }
      }
      return 0;
    }

    /**
    * Get the transformation applied to the data.
    *   0 => no transformation
    *   3 => natural logarithm (log e) 
    */

  }, {
    key: "getTranformation",
    value: function getTranformation() {
      return this._qeegModObj.metadata.informationList[6].labels;
    }

    /**
    * Get a context by its index
    * @param {Number} n - index of the context
    * @return {Object} context object in the form { label: String, value: Number/Array }
    */

  }, {
    key: "getContext",
    value: function getContext(n) {
      if (n < 0 || n >= this._qeegModObj.metadata.informationList[7].labels.length) {
        console.warn("The context index is out of range");
        return null;
      }

      return {
        label: this._qeegModObj.metadata.informationList[7].labels[n],
        value: this._qeegModObj.metadata.informationList[7].values[n]
      };
    }

    /**
    * get all the context as an array of pairs { label: String, value: Number/Array }
    * @return {Array} the list of contexts
    */

  }, {
    key: "getAllContexts",
    value: function getAllContexts() {
      var ctx = this._qeegModObj.metadata.informationList[7];

      if (ctx.labels.length != ctx.values.length) {
        console.warn("The contexts is corrupted. Inequal amount of values/labels.");
        return null;
      }

      var allContexts = [];

      for (var i = 0; i < ctx.labels.length; i++) {
        allContexts.push({
          label: ctx.labels[i],
          value: ctx.values[i]
        });
      }

      return allContexts;
    }

    /**
    * Get the start Frequency
    * @return {Number} the start frequency as a float
    */

  }, {
    key: "getStartFrequency",
    value: function getStartFrequency() {
      if (this._typeCode === "COR") // do not exist for COR
        return -1;

      return this._qeegModObj.metadata.informationList[7].values[0];
    }

    /**
    * Get the frequency resolution
    * @return {Number} the resolution as a float
    */

  }, {
    key: "getFrequencyResolution",
    value: function getFrequencyResolution() {
      if (this._typeCode === "COR") // do not exist for COR
        return -1;

      return this._qeegModObj.metadata.informationList[7].values[1];
    }

    /**
    * Get the scale factor
    * @return {Number} the factor as a float
    */

  }, {
    key: "getScaleFactor",
    value: function getScaleFactor() {
      var index = 2;

      if (this._typeCode === "COR") // the 2 first elements dont exist for COR
        index -= 2;

      return this._qeegModObj.metadata.informationList[7].values[index];
    }

    /**
    * Get an array of boolean informing of the measure has to be scaled with the scale factor
    * @return {Array} the booleans
    */

  }, {
    key: "getScaleIfScaleMeasures",
    value: function getScaleIfScaleMeasures() {
      var index = 3;

      if (this._typeCode === "COR") // the 2 first elements dont exist for COR
        index -= 2;

      return this._qeegModObj.metadata.informationList[7].values[index];
    }

    /**
    * Get the actual name for the "measure" dimension
    * @return {String} the name 
    */

  }, {
    key: "getMeasureName",
    value: function getMeasureName() {
      var index = 4;

      if (this._typeCode === "COR") // the 2 first elements dont exist for COR
        index -= 2;

      return this._qeegModObj.metadata.informationList[7].values[index];
    }

    /**
    * Get the actual name for the "duration" dimension
    * @return {String} the name 
    */

  }, {
    key: "getDurationName",
    value: function getDurationName() {
      var index = 5;

      if (this._typeCode === "COR") // the 2 first elements dont exist for COR
        index -= 2;

      return this._qeegModObj.metadata.informationList[7].values[index];
    }

    /**
    * Get the actual name for the "first-space" dimension
    * @return {String} the name 
    */

  }, {
    key: "getFirstSpaceName",
    value: function getFirstSpaceName() {
      var index = 6;

      if (this._typeCode === "COR") // the 2 first elements dont exist for COR
        index -= 2;

      return this._qeegModObj.metadata.informationList[7].values[index];
    }

    /**
    * Get the actual name for the "second-space" dimension
    * @return {String} the name 
    */

  }, {
    key: "getSecondSpaceName",
    value: function getSecondSpaceName() {
      var index = 7;

      if (this._typeCode === "COR") // the 2 first elements dont exist for COR
        index -= 2;

      return this._qeegModObj.metadata.informationList[7].values[index];
    }

    /**
    *
    */

  }, {
    key: "getAllDimensionsNames",
    value: function getAllDimensionsNames() {
      return [this.getMeasureName(), this.getDurationName(), this.getFirstSpaceName(), this.getSecondSpaceName()];
    }

    /**
    * Get a single value, given some indexes
    * @param {Number} measureIndex - index among the "measure" dimension
    * @param {Number} durationIndex - index among the "duration" dimension
    * @param {Number} firstSpaceIndex - index among the "first space" dimension
    * @param {Number} secondSpaceIndex - index among the "second space" dimension
    * @return {Number} the value
    */

  }, {
    key: "getValue",
    value: function getValue(measureIndex, durationIndex, firstSpaceIndex, secondSpaceIndex) {
      var sizes = this._qeegModObj.metadata.sizes;

      if (measureIndex < 0 || measureIndex >= sizes.measure) {
        console.warn("measureIndex is out of range.");
        return null;
      }

      if (durationIndex < 0 || durationIndex >= sizes.duration) {
        console.warn("durationIndex is out of range.");
        return null;
      }

      if (firstSpaceIndex < 0 || firstSpaceIndex >= sizes.firstSpace) {
        console.warn("firstSpaceIndex is out of range.");
        return null;
      }

      if (secondSpaceIndex < 0 || secondSpaceIndex >= sizes.secondSpace) {
        console.warn("secondSpaceIndex is out of range.");
        return null;
      }

      var offset = this._getOffset(measureIndex, durationIndex, firstSpaceIndex, secondSpaceIndex);
      return this._qeegModObj.data[offset];
    }

    /**
    * Get an array of values for such measureIndex, durationIndex and firstSpaceIndex.
    * These 3 arguments are optional but the unused ones must be on the right.
    * If using no argument, or only measureIndex, or only measureIndex and durationIndex,
    * then a larger array corresponding o broarder range of data will be returned
    * @param {Number} measureIndex - the  index within the "measure" dimension
    * @param {Number} durationIndex - the  index within the "duration" dimension
    * @param {Number} firstSpaceIndex - the  index within the "first-space" dimension
    * @return {Array} the data, or null
    */

  }, {
    key: "getSpectrum",
    value: function getSpectrum() {
      var measureIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -1;
      var durationIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;
      var firstSpaceIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;

      var sizes = this._qeegModObj.metadata.sizes;
      var data = this._qeegModObj.data;

      // get the whole data
      if (measureIndex == -1 && durationIndex == -1 && firstSpaceIndex == -1) {
        return data.slice();
      }

      // get spectrum at a given measureIndex
      if (measureIndex >= 0 && measureIndex < sizes.measure && durationIndex == -1 && firstSpaceIndex == -1) {
        var startIndex = this._getOffset(measureIndex, 0, 0, 0);
        var endIndex = this._getOffset(measureIndex + 1, 0, 0, 0);

        return data.slice(startIndex, endIndex);
      }

      // get spectrum at a given measureIndex and a durationIndex
      if (measureIndex >= 0 && measureIndex < sizes.measure && durationIndex >= 0 && durationIndex < sizes.duration && firstSpaceIndex == -1) {
        var startIndex = this._getOffset(measureIndex, durationIndex, 0, 0);
        var endIndex = this._getOffset(measureIndex, durationIndex + 1, 0, 0);

        return data.slice(startIndex, endIndex);
      }

      // get spectrum at a given measureIndex, a durationIndex and a firstSpaceIndex
      if (measureIndex >= 0 && measureIndex < sizes.measure && durationIndex >= 0 && durationIndex < sizes.duration && firstSpaceIndex >= 0 && firstSpaceIndex < sizes.firstSpace) {
        var startIndex = this._getOffset(measureIndex, durationIndex, firstSpaceIndex, 0);
        var endIndex = this._getOffset(measureIndex, durationIndex, firstSpaceIndex + 1, 0);

        return data.slice(startIndex, endIndex);
      }

      return null;
    }

    /**
    * Instead of using indexes among each dimension, it can be easier to call values by their names.
    * Does the same as `.getSpectrum()` but uses names instead of indexes.
    * @param {String} measureLabel - the desired label within the 'measure' dimension (optional)
    * @param {String} durationLabel - the desired label within the 'duration' dimension (optional)
    * @param {String} firstSpaceLabel - the desired label within the 'first-space' dimension (optional)
    * @return {Array} matched data, or null if using a non-existing label
    */

  }, {
    key: "getSpectrumByLabels",
    value: function getSpectrumByLabels() {
      var measureLabel = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var durationLabel = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var firstSpaceLabel = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

      var info = this._qeegModObj.metadata.informationList;
      var measureIndex = info[0].labels.indexOf(measureLabel);
      var durationIndex = info[1].labels.indexOf(durationLabel);
      var firstSpaceIndex = info[2].labels.indexOf(firstSpaceLabel);

      if (measureLabel && measureIndex == -1) {
        console.warn("The measure label " + measureLabel + " could not be found.");
        return null;
      }

      if (durationLabel && durationIndex == -1) {
        console.warn("The duration label " + durationLabel + " could not be found.");
        return null;
      }

      if (firstSpaceLabel && firstSpaceIndex == -1) {
        console.warn("The first-space label " + firstSpaceLabel + " could not be found.");
        return null;
      }

      return this.getSpectrum(measureIndex, durationIndex, firstSpaceIndex);
    }

    /**
    * Get all the labels as a hierarchical cascade. For examples, if you feel
    * the 3 arguments for a dataset that have a second-space dimension of size
    * greater than 1, it will return an array [ "the measure label",
    * "the duration label", "the first space label", ["1st label of 2nd sp"
    * "2nd label of 2nd sp", "3rd label of 2nd sp"]]. Only the last argument
    * (the array) is not already given in argument but this sort of repeat is so
    * that the returned values has all the cascade.
    * @param {String} measureLabel - the desired label within the 'measure' dimension (optional)
    * @param {String} durationLabel - the desired label within the 'duration' dimension (optional)
    * @param {String} firstSpaceLabel - the desired label within the 'first-space' dimension (optional)
    * @return {Array} contains the hierarchical cascade of labels, the last element being an array
    */

  }, {
    key: "getSpectrumLabelsByLabels",
    value: function getSpectrumLabelsByLabels() {
      var measureLabel = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var durationLabel = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var firstSpaceLabel = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

      var info = this._qeegModObj.metadata.informationList;
      var measureIndex = info[0].labels.indexOf(measureLabel);
      var durationIndex = info[1].labels.indexOf(durationLabel);
      var firstSpaceIndex = info[2].labels.indexOf(firstSpaceLabel);

      if (measureLabel && measureIndex == -1) {
        console.warn("The measure label " + measureLabel + " could not be found.");
        return null;
      }

      if (durationLabel && durationIndex == -1) {
        console.warn("The duration label " + durationLabel + " could not be found.");
        return null;
      }

      if (firstSpaceLabel && firstSpaceIndex == -1) {
        console.warn("The first-space label " + firstSpaceLabel + " could not be found.");
        return null;
      }

      return this.getSpectrumLabels(measureIndex, durationIndex, firstSpaceIndex);
    }

    /**
    * Does like getSpectrumLabelsByLabels but uses the indexes among each dimension
    * rather than their labels.
    * @param {Number} measureIndex - the  index within the "measure" dimension
    * @param {Number} durationIndex - the  index within the "duration" dimension
    * @param {Number} firstSpaceIndex - the  index within the "first-space" dimension
    * @return {Array} contains the hierarchical cascade of labels, the last element being an array
    */

  }, {
    key: "getSpectrumLabels",
    value: function getSpectrumLabels() {
      var measureIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -1;
      var durationIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;
      var firstSpaceIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;

      var sizes = this._qeegModObj.metadata.sizes;
      var info = this._qeegModObj.metadata.informationList;
      var arrayOfLabels = [];

      // get the whole data labels
      if (measureIndex == -1 && durationIndex == -1 && firstSpaceIndex == -1) {
        if (info[0].labels) arrayOfLabels.push(info[0].labels.slice());

        if (info[1].labels) arrayOfLabels.push(info[1].labels.slice());

        if (info[2].labels) arrayOfLabels.push(info[2].labels.slice());

        if (info[3].labels) arrayOfLabels.push(info[3].labels.slice());

        return arrayOfLabels;
      }

      // get spectrum labels starting from a given measureIndex
      if (measureIndex >= 0 && measureIndex < sizes.measure && durationIndex == -1 && firstSpaceIndex == -1) {
        var startIndex = this._getOffset(measureIndex, 0, 0, 0);
        var endIndex = this._getOffset(measureIndex + 1, 0, 0, 0);

        if (info[0].labels && info[0].labels.length > measureIndex) arrayOfLabels.push(info[0].labels[measureIndex]);

        if (info[1].labels) arrayOfLabels.push(info[1].labels.slice());

        if (info[2].labels) arrayOfLabels.push(info[2].labels.slice());

        if (info[3].labels) arrayOfLabels.push(info[3].labels.slice());

        return arrayOfLabels;
      }

      // get spectrum at a given measureIndex and a durationIndex
      if (measureIndex >= 0 && measureIndex < sizes.measure && durationIndex >= 0 && durationIndex < sizes.duration && firstSpaceIndex == -1) {
        var startIndex = this._getOffset(measureIndex, durationIndex, 0, 0);
        var endIndex = this._getOffset(measureIndex, durationIndex + 1, 0, 0);

        if (info[0].labels && info[0].labels.length > measureIndex) arrayOfLabels.push(info[0].labels[measureIndex]);

        if (info[1].labels && info[1].labels.length > durationIndex) arrayOfLabels.push(info[1].labels[durationIndex]);

        if (info[2].labels) arrayOfLabels.push(info[2].labels.slice());

        if (info[3].labels) arrayOfLabels.push(info[3].labels.slice());

        return arrayOfLabels;
      }

      // get spectrum at a given measureIndex, a durationIndex and a firstSpaceIndex
      if (measureIndex >= 0 && measureIndex < sizes.measure && durationIndex >= 0 && durationIndex < sizes.duration && firstSpaceIndex >= 0 && firstSpaceIndex < sizes.firstSpace) {
        var startIndex = this._getOffset(measureIndex, durationIndex, firstSpaceIndex, 0);
        var endIndex = this._getOffset(measureIndex, durationIndex, firstSpaceIndex + 1, 0);

        if (info[0].labels && info[0].labels.length > measureIndex) arrayOfLabels.push(info[0].labels[measureIndex]);

        if (info[1].labels && info[1].labels.length > durationIndex) arrayOfLabels.push(info[1].labels[durationIndex]);

        if (info[2].labels && info[2].labels.length > firstSpaceIndex) arrayOfLabels.push(info[2].labels[firstSpaceIndex]);

        if (info[3].labels) arrayOfLabels.push(info[3].labels.slice());

        return arrayOfLabels;
      }

      return null;
    }

    /**
    * [PRIVATE]
    * Get the offset of the querried data withing the 1D array
    */

  }, {
    key: "_getOffset",
    value: function _getOffset(measureIndex, durationIndex, firstSpaceIndex, secondSpaceIndex) {
      var sizes = this._qeegModObj.metadata.sizes;
      return (measureIndex * sizes.duration * sizes.firstSpace + durationIndex * sizes.firstSpace + firstSpaceIndex) * sizes.secondSpace + secondSpaceIndex;
    }
  }]);
  return QeegModFileInterpreter;
}(); /* END of class QeegModFileInterpreter */

var EegModDecoder = function (_Filter) {
  inherits(EegModDecoder, _Filter);

  function EegModDecoder() {
    classCallCheck(this, EegModDecoder);

    var _this = possibleConstructorReturn(this, (EegModDecoder.__proto__ || Object.getPrototypeOf(EegModDecoder)).call(this));

    _this.addInputValidator(0, ArrayBuffer);
    _this.setMetadata("debug", false);

    // a soon-to-be DataView to read the input buffer
    _this._view = null;
    return _this;
  }

  createClass(EegModDecoder, [{
    key: '_run',
    value: function _run() {
      var inputBuffer = this._getInput(0);

      if (!inputBuffer) {
        console.warn("EegModDecoder requires an ArrayBuffer as input \"0\". Unable to continue.");
        return;
      }

      var modParser = new QeegModFileParser();
      modParser.setRawData(inputBuffer);
      var qeegData = modParser.parse();

      if (qeegData) {
        this._output[0] = qeegData;
      }
    }
  }]);
  return EegModDecoder;
}(Filter); /* END of class EegModDecoder */

var commonjsGlobal$1 = typeof window !== 'undefined' ? window : typeof global$1 !== 'undefined' ? global$1 : typeof self !== 'undefined' ? self : {};

function createCommonjsModule$2(fn, module) {
  return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var common$2 = createCommonjsModule$2(function (module, exports) {
  'use strict';

  var TYPED_OK = typeof Uint8Array !== 'undefined' && typeof Uint16Array !== 'undefined' && typeof Int32Array !== 'undefined';

  function _has(obj, key) {
    return Object.prototype.hasOwnProperty.call(obj, key);
  }

  exports.assign = function (obj /*from1, from2, from3, ...*/) {
    var sources = Array.prototype.slice.call(arguments, 1);
    while (sources.length) {
      var source = sources.shift();
      if (!source) {
        continue;
      }

      if ((typeof source === 'undefined' ? 'undefined' : _typeof(source)) !== 'object') {
        throw new TypeError(source + 'must be non-object');
      }

      for (var p in source) {
        if (_has(source, p)) {
          obj[p] = source[p];
        }
      }
    }

    return obj;
  };

  // reduce buffer size, avoiding mem copy
  exports.shrinkBuf = function (buf, size) {
    if (buf.length === size) {
      return buf;
    }
    if (buf.subarray) {
      return buf.subarray(0, size);
    }
    buf.length = size;
    return buf;
  };

  var fnTyped = {
    arraySet: function arraySet(dest, src, src_offs, len, dest_offs) {
      if (src.subarray && dest.subarray) {
        dest.set(src.subarray(src_offs, src_offs + len), dest_offs);
        return;
      }
      // Fallback to ordinary array
      for (var i = 0; i < len; i++) {
        dest[dest_offs + i] = src[src_offs + i];
      }
    },
    // Join array of chunks to single array.
    flattenChunks: function flattenChunks(chunks) {
      var i, l, len, pos, chunk, result;

      // calculate data length
      len = 0;
      for (i = 0, l = chunks.length; i < l; i++) {
        len += chunks[i].length;
      }

      // join chunks
      result = new Uint8Array(len);
      pos = 0;
      for (i = 0, l = chunks.length; i < l; i++) {
        chunk = chunks[i];
        result.set(chunk, pos);
        pos += chunk.length;
      }

      return result;
    }
  };

  var fnUntyped = {
    arraySet: function arraySet(dest, src, src_offs, len, dest_offs) {
      for (var i = 0; i < len; i++) {
        dest[dest_offs + i] = src[src_offs + i];
      }
    },
    // Join array of chunks to single array.
    flattenChunks: function flattenChunks(chunks) {
      return [].concat.apply([], chunks);
    }
  };

  // Enable/Disable typed arrays use, for testing
  //
  exports.setTyped = function (on) {
    if (on) {
      exports.Buf8 = Uint8Array;
      exports.Buf16 = Uint16Array;
      exports.Buf32 = Int32Array;
      exports.assign(exports, fnTyped);
    } else {
      exports.Buf8 = Array;
      exports.Buf16 = Array;
      exports.Buf32 = Array;
      exports.assign(exports, fnUntyped);
    }
  };

  exports.setTyped(TYPED_OK);
});

'use strict';

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.


/* Public constants ==========================================================*/
/* ===========================================================================*/

//var Z_FILTERED          = 1;
//var Z_HUFFMAN_ONLY      = 2;
//var Z_RLE               = 3;
var Z_FIXED$1$1 = 4;
//var Z_DEFAULT_STRATEGY  = 0;

/* Possible values of the data_type field (though see inflate()) */
var Z_BINARY$1 = 0;
var Z_TEXT$1 = 1;
//var Z_ASCII             = 1; // = Z_TEXT
var Z_UNKNOWN$1$1 = 2;

/*============================================================================*/

function zero$1$1(buf) {
  var len = buf.length;while (--len >= 0) {
    buf[len] = 0;
  }
}

// From zutil.h

var STORED_BLOCK$1 = 0;
var STATIC_TREES$1 = 1;
var DYN_TREES$1 = 2;
/* The three kinds of block type */

var MIN_MATCH$1$1 = 3;
var MAX_MATCH$1$1 = 258;
/* The minimum and maximum match lengths */

// From deflate.h
/* ===========================================================================
 * Internal compression state.
 */

var LENGTH_CODES$1$1 = 29;
/* number of length codes, not counting the special END_BLOCK code */

var LITERALS$1$1 = 256;
/* number of literal bytes 0..255 */

var L_CODES$1$1 = LITERALS$1$1 + 1 + LENGTH_CODES$1$1;
/* number of Literal or Length codes, including the END_BLOCK code */

var D_CODES$1$1 = 30;
/* number of distance codes */

var BL_CODES$1$1 = 19;
/* number of codes used to transfer the bit lengths */

var HEAP_SIZE$1$1 = 2 * L_CODES$1$1 + 1;
/* maximum heap size */

var MAX_BITS$1$1 = 15;
/* All codes must not exceed MAX_BITS bits */

var Buf_size$1 = 16;
/* size of bit buffer in bi_buf */

/* ===========================================================================
 * Constants
 */

var MAX_BL_BITS$1 = 7;
/* Bit length codes must not exceed MAX_BL_BITS bits */

var END_BLOCK$1 = 256;
/* end of block literal code */

var REP_3_6$1 = 16;
/* repeat previous bit length 3-6 times (2 bits of repeat count) */

var REPZ_3_10$1 = 17;
/* repeat a zero length 3-10 times  (3 bits of repeat count) */

var REPZ_11_138$1 = 18;
/* repeat a zero length 11-138 times  (7 bits of repeat count) */

/* eslint-disable comma-spacing,array-bracket-spacing */
var extra_lbits$1 = /* extra bits for each length code */
[0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0];

var extra_dbits$1 = /* extra bits for each distance code */
[0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13];

var extra_blbits$1 = /* extra bits for each bit length code */
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 7];

var bl_order$1 = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];
/* eslint-enable comma-spacing,array-bracket-spacing */

/* The lengths of the bit length codes are sent in order of decreasing
 * probability, to avoid transmitting the lengths for unused bit length codes.
 */

/* ===========================================================================
 * Local data. These are initialized only once.
 */

// We pre-fill arrays with 0 to avoid uninitialized gaps

var DIST_CODE_LEN$1 = 512; /* see definition of array dist_code below */

// !!!! Use flat array instead of structure, Freq = i*2, Len = i*2+1
var static_ltree$1 = new Array((L_CODES$1$1 + 2) * 2);
zero$1$1(static_ltree$1);
/* The static literal tree. Since the bit lengths are imposed, there is no
 * need for the L_CODES extra codes used during heap construction. However
 * The codes 286 and 287 are needed to build a canonical tree (see _tr_init
 * below).
 */

var static_dtree$1 = new Array(D_CODES$1$1 * 2);
zero$1$1(static_dtree$1);
/* The static distance tree. (Actually a trivial tree since all codes use
 * 5 bits.)
 */

var _dist_code$1 = new Array(DIST_CODE_LEN$1);
zero$1$1(_dist_code$1);
/* Distance codes. The first 256 values correspond to the distances
 * 3 .. 258, the last 256 values correspond to the top 8 bits of
 * the 15 bit distances.
 */

var _length_code$1 = new Array(MAX_MATCH$1$1 - MIN_MATCH$1$1 + 1);
zero$1$1(_length_code$1);
/* length code for each normalized match length (0 == MIN_MATCH) */

var base_length$1 = new Array(LENGTH_CODES$1$1);
zero$1$1(base_length$1);
/* First normalized length for each code (0 = MIN_MATCH) */

var base_dist$1 = new Array(D_CODES$1$1);
zero$1$1(base_dist$1);
/* First normalized distance for each code (0 = distance of 1) */

function StaticTreeDesc$1(static_tree, extra_bits, extra_base, elems, max_length) {

  this.static_tree = static_tree; /* static tree or NULL */
  this.extra_bits = extra_bits; /* extra bits for each code or NULL */
  this.extra_base = extra_base; /* base index for extra_bits */
  this.elems = elems; /* max number of elements in the tree */
  this.max_length = max_length; /* max bit length for the codes */

  // show if `static_tree` has data or dummy - needed for monomorphic objects
  this.has_stree = static_tree && static_tree.length;
}

var static_l_desc$1;
var static_d_desc$1;
var static_bl_desc$1;

function TreeDesc$1(dyn_tree, stat_desc) {
  this.dyn_tree = dyn_tree; /* the dynamic tree */
  this.max_code = 0; /* largest code with non zero frequency */
  this.stat_desc = stat_desc; /* the corresponding static tree */
}

function d_code$1(dist) {
  return dist < 256 ? _dist_code$1[dist] : _dist_code$1[256 + (dist >>> 7)];
}

/* ===========================================================================
 * Output a short LSB first on the stream.
 * IN assertion: there is enough room in pendingBuf.
 */
function put_short$1(s, w) {
  //    put_byte(s, (uch)((w) & 0xff));
  //    put_byte(s, (uch)((ush)(w) >> 8));
  s.pending_buf[s.pending++] = w & 0xff;
  s.pending_buf[s.pending++] = w >>> 8 & 0xff;
}

/* ===========================================================================
 * Send a value on a given number of bits.
 * IN assertion: length <= 16 and value fits in length bits.
 */
function send_bits$1(s, value, length) {
  if (s.bi_valid > Buf_size$1 - length) {
    s.bi_buf |= value << s.bi_valid & 0xffff;
    put_short$1(s, s.bi_buf);
    s.bi_buf = value >> Buf_size$1 - s.bi_valid;
    s.bi_valid += length - Buf_size$1;
  } else {
    s.bi_buf |= value << s.bi_valid & 0xffff;
    s.bi_valid += length;
  }
}

function send_code$1(s, c, tree) {
  send_bits$1(s, tree[c * 2] /*.Code*/, tree[c * 2 + 1] /*.Len*/);
}

/* ===========================================================================
 * Reverse the first len bits of a code, using straightforward code (a faster
 * method would use a table)
 * IN assertion: 1 <= len <= 15
 */
function bi_reverse$1(code, len) {
  var res = 0;
  do {
    res |= code & 1;
    code >>>= 1;
    res <<= 1;
  } while (--len > 0);
  return res >>> 1;
}

/* ===========================================================================
 * Flush the bit buffer, keeping at most 7 bits in it.
 */
function bi_flush$1(s) {
  if (s.bi_valid === 16) {
    put_short$1(s, s.bi_buf);
    s.bi_buf = 0;
    s.bi_valid = 0;
  } else if (s.bi_valid >= 8) {
    s.pending_buf[s.pending++] = s.bi_buf & 0xff;
    s.bi_buf >>= 8;
    s.bi_valid -= 8;
  }
}

/* ===========================================================================
 * Compute the optimal bit lengths for a tree and update the total bit length
 * for the current block.
 * IN assertion: the fields freq and dad are set, heap[heap_max] and
 *    above are the tree nodes sorted by increasing frequency.
 * OUT assertions: the field len is set to the optimal bit length, the
 *     array bl_count contains the frequencies for each bit length.
 *     The length opt_len is updated; static_len is also updated if stree is
 *     not null.
 */
function gen_bitlen$1(s, desc)
//    deflate_state *s;
//    tree_desc *desc;    /* the tree descriptor */
{
  var tree = desc.dyn_tree;
  var max_code = desc.max_code;
  var stree = desc.stat_desc.static_tree;
  var has_stree = desc.stat_desc.has_stree;
  var extra = desc.stat_desc.extra_bits;
  var base = desc.stat_desc.extra_base;
  var max_length = desc.stat_desc.max_length;
  var h; /* heap index */
  var n, m; /* iterate over the tree elements */
  var bits; /* bit length */
  var xbits; /* extra bits */
  var f; /* frequency */
  var overflow = 0; /* number of elements with bit length too large */

  for (bits = 0; bits <= MAX_BITS$1$1; bits++) {
    s.bl_count[bits] = 0;
  }

  /* In a first pass, compute the optimal bit lengths (which may
   * overflow in the case of the bit length tree).
   */
  tree[s.heap[s.heap_max] * 2 + 1] /*.Len*/ = 0; /* root of the heap */

  for (h = s.heap_max + 1; h < HEAP_SIZE$1$1; h++) {
    n = s.heap[h];
    bits = tree[tree[n * 2 + 1] /*.Dad*/ * 2 + 1] /*.Len*/ + 1;
    if (bits > max_length) {
      bits = max_length;
      overflow++;
    }
    tree[n * 2 + 1] /*.Len*/ = bits;
    /* We overwrite tree[n].Dad which is no longer needed */

    if (n > max_code) {
      continue;
    } /* not a leaf node */

    s.bl_count[bits]++;
    xbits = 0;
    if (n >= base) {
      xbits = extra[n - base];
    }
    f = tree[n * 2] /*.Freq*/;
    s.opt_len += f * (bits + xbits);
    if (has_stree) {
      s.static_len += f * (stree[n * 2 + 1] /*.Len*/ + xbits);
    }
  }
  if (overflow === 0) {
    return;
  }

  // Trace((stderr,"\nbit length overflow\n"));
  /* This happens for example on obj2 and pic of the Calgary corpus */

  /* Find the first bit length which could increase: */
  do {
    bits = max_length - 1;
    while (s.bl_count[bits] === 0) {
      bits--;
    }
    s.bl_count[bits]--; /* move one leaf down the tree */
    s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */
    s.bl_count[max_length]--;
    /* The brother of the overflow item also moves one step up,
     * but this does not affect bl_count[max_length]
     */
    overflow -= 2;
  } while (overflow > 0);

  /* Now recompute all bit lengths, scanning in increasing frequency.
   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
   * lengths instead of fixing only the wrong ones. This idea is taken
   * from 'ar' written by Haruhiko Okumura.)
   */
  for (bits = max_length; bits !== 0; bits--) {
    n = s.bl_count[bits];
    while (n !== 0) {
      m = s.heap[--h];
      if (m > max_code) {
        continue;
      }
      if (tree[m * 2 + 1] /*.Len*/ !== bits) {
        // Trace((stderr,"code %d bits %d->%d\n", m, tree[m].Len, bits));
        s.opt_len += (bits - tree[m * 2 + 1] /*.Len*/) * tree[m * 2] /*.Freq*/;
        tree[m * 2 + 1] /*.Len*/ = bits;
      }
      n--;
    }
  }
}

/* ===========================================================================
 * Generate the codes for a given tree and bit counts (which need not be
 * optimal).
 * IN assertion: the array bl_count contains the bit length statistics for
 * the given tree and the field len is set for all tree elements.
 * OUT assertion: the field code is set for all tree elements of non
 *     zero code length.
 */
function gen_codes$1(tree, max_code, bl_count)
//    ct_data *tree;             /* the tree to decorate */
//    int max_code;              /* largest code with non zero frequency */
//    ushf *bl_count;            /* number of codes at each bit length */
{
  var next_code = new Array(MAX_BITS$1$1 + 1); /* next code value for each bit length */
  var code = 0; /* running code value */
  var bits; /* bit index */
  var n; /* code index */

  /* The distribution counts are first used to generate the code values
   * without bit reversal.
   */
  for (bits = 1; bits <= MAX_BITS$1$1; bits++) {
    next_code[bits] = code = code + bl_count[bits - 1] << 1;
  }
  /* Check that the bit counts in bl_count are consistent. The last code
   * must be all ones.
   */
  //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
  //        "inconsistent bit counts");
  //Tracev((stderr,"\ngen_codes: max_code %d ", max_code));

  for (n = 0; n <= max_code; n++) {
    var len = tree[n * 2 + 1];
    if (len === 0) {
      continue;
    }
    /* Now reverse the bits */
    tree[n * 2] /*.Code*/ = bi_reverse$1(next_code[len]++, len);

    //Tracecv(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %4x (%x) ",
    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));
  }
}

/* ===========================================================================
 * Initialize the various 'constant' tables.
 */
function tr_static_init$1() {
  var n; /* iterates over tree elements */
  var bits; /* bit counter */
  var length; /* length value */
  var code; /* code value */
  var dist; /* distance index */
  var bl_count = new Array(MAX_BITS$1$1 + 1);
  /* number of codes at each bit length for an optimal tree */

  // do check in _tr_init()
  //if (static_init_done) return;

  /* For some embedded targets, global variables are not initialized: */
  /*#ifdef NO_INIT_GLOBAL_POINTERS
    static_l_desc.static_tree = static_ltree;
    static_l_desc.extra_bits = extra_lbits;
    static_d_desc.static_tree = static_dtree;
    static_d_desc.extra_bits = extra_dbits;
    static_bl_desc.extra_bits = extra_blbits;
  #endif*/

  /* Initialize the mapping length (0..255) -> length code (0..28) */
  length = 0;
  for (code = 0; code < LENGTH_CODES$1$1 - 1; code++) {
    base_length$1[code] = length;
    for (n = 0; n < 1 << extra_lbits$1[code]; n++) {
      _length_code$1[length++] = code;
    }
  }
  //Assert (length == 256, "tr_static_init: length != 256");
  /* Note that the length 255 (match length 258) can be represented
   * in two different ways: code 284 + 5 bits or code 285, so we
   * overwrite length_code[255] to use the best encoding:
   */
  _length_code$1[length - 1] = code;

  /* Initialize the mapping dist (0..32K) -> dist code (0..29) */
  dist = 0;
  for (code = 0; code < 16; code++) {
    base_dist$1[code] = dist;
    for (n = 0; n < 1 << extra_dbits$1[code]; n++) {
      _dist_code$1[dist++] = code;
    }
  }
  //Assert (dist == 256, "tr_static_init: dist != 256");
  dist >>= 7; /* from now on, all distances are divided by 128 */
  for (; code < D_CODES$1$1; code++) {
    base_dist$1[code] = dist << 7;
    for (n = 0; n < 1 << extra_dbits$1[code] - 7; n++) {
      _dist_code$1[256 + dist++] = code;
    }
  }
  //Assert (dist == 256, "tr_static_init: 256+dist != 512");

  /* Construct the codes of the static literal tree */
  for (bits = 0; bits <= MAX_BITS$1$1; bits++) {
    bl_count[bits] = 0;
  }

  n = 0;
  while (n <= 143) {
    static_ltree$1[n * 2 + 1] /*.Len*/ = 8;
    n++;
    bl_count[8]++;
  }
  while (n <= 255) {
    static_ltree$1[n * 2 + 1] /*.Len*/ = 9;
    n++;
    bl_count[9]++;
  }
  while (n <= 279) {
    static_ltree$1[n * 2 + 1] /*.Len*/ = 7;
    n++;
    bl_count[7]++;
  }
  while (n <= 287) {
    static_ltree$1[n * 2 + 1] /*.Len*/ = 8;
    n++;
    bl_count[8]++;
  }
  /* Codes 286 and 287 do not exist, but we must include them in the
   * tree construction to get a canonical Huffman tree (longest code
   * all ones)
   */
  gen_codes$1(static_ltree$1, L_CODES$1$1 + 1, bl_count);

  /* The static distance tree is trivial: */
  for (n = 0; n < D_CODES$1$1; n++) {
    static_dtree$1[n * 2 + 1] /*.Len*/ = 5;
    static_dtree$1[n * 2] /*.Code*/ = bi_reverse$1(n, 5);
  }

  // Now data ready and we can init static trees
  static_l_desc$1 = new StaticTreeDesc$1(static_ltree$1, extra_lbits$1, LITERALS$1$1 + 1, L_CODES$1$1, MAX_BITS$1$1);
  static_d_desc$1 = new StaticTreeDesc$1(static_dtree$1, extra_dbits$1, 0, D_CODES$1$1, MAX_BITS$1$1);
  static_bl_desc$1 = new StaticTreeDesc$1(new Array(0), extra_blbits$1, 0, BL_CODES$1$1, MAX_BL_BITS$1);

  //static_init_done = true;
}

/* ===========================================================================
 * Initialize a new block.
 */
function init_block$1(s) {
  var n; /* iterates over tree elements */

  /* Initialize the trees. */
  for (n = 0; n < L_CODES$1$1; n++) {
    s.dyn_ltree[n * 2] /*.Freq*/ = 0;
  }
  for (n = 0; n < D_CODES$1$1; n++) {
    s.dyn_dtree[n * 2] /*.Freq*/ = 0;
  }
  for (n = 0; n < BL_CODES$1$1; n++) {
    s.bl_tree[n * 2] /*.Freq*/ = 0;
  }

  s.dyn_ltree[END_BLOCK$1 * 2] /*.Freq*/ = 1;
  s.opt_len = s.static_len = 0;
  s.last_lit = s.matches = 0;
}

/* ===========================================================================
 * Flush the bit buffer and align the output on a byte boundary
 */
function bi_windup$1(s) {
  if (s.bi_valid > 8) {
    put_short$1(s, s.bi_buf);
  } else if (s.bi_valid > 0) {
    //put_byte(s, (Byte)s->bi_buf);
    s.pending_buf[s.pending++] = s.bi_buf;
  }
  s.bi_buf = 0;
  s.bi_valid = 0;
}

/* ===========================================================================
 * Copy a stored block, storing first the length and its
 * one's complement if requested.
 */
function copy_block$1(s, buf, len, header)
//DeflateState *s;
//charf    *buf;    /* the input data */
//unsigned len;     /* its length */
//int      header;  /* true if block header must be written */
{
  bi_windup$1(s); /* align on byte boundary */

  if (header) {
    put_short$1(s, len);
    put_short$1(s, ~len);
  }
  //  while (len--) {
  //    put_byte(s, *buf++);
  //  }
  common$2.arraySet(s.pending_buf, s.window, buf, len, s.pending);
  s.pending += len;
}

/* ===========================================================================
 * Compares to subtrees, using the tree depth as tie breaker when
 * the subtrees have equal frequency. This minimizes the worst case length.
 */
function smaller$1(tree, n, m, depth) {
  var _n2 = n * 2;
  var _m2 = m * 2;
  return tree[_n2] /*.Freq*/ < tree[_m2] /*.Freq*/ || tree[_n2] /*.Freq*/ === tree[_m2] /*.Freq*/ && depth[n] <= depth[m];
}

/* ===========================================================================
 * Restore the heap property by moving down the tree starting at node k,
 * exchanging a node with the smallest of its two sons if necessary, stopping
 * when the heap property is re-established (each father smaller than its
 * two sons).
 */
function pqdownheap$1(s, tree, k)
//    deflate_state *s;
//    ct_data *tree;  /* the tree to restore */
//    int k;               /* node to move down */
{
  var v = s.heap[k];
  var j = k << 1; /* left son of k */
  while (j <= s.heap_len) {
    /* Set j to the smallest of the two sons: */
    if (j < s.heap_len && smaller$1(tree, s.heap[j + 1], s.heap[j], s.depth)) {
      j++;
    }
    /* Exit if v is smaller than both sons */
    if (smaller$1(tree, v, s.heap[j], s.depth)) {
      break;
    }

    /* Exchange v with the smallest son */
    s.heap[k] = s.heap[j];
    k = j;

    /* And continue down the tree, setting j to the left son of k */
    j <<= 1;
  }
  s.heap[k] = v;
}

// inlined manually
// var SMALLEST = 1;

/* ===========================================================================
 * Send the block data compressed using the given Huffman trees
 */
function compress_block$1(s, ltree, dtree)
//    deflate_state *s;
//    const ct_data *ltree; /* literal tree */
//    const ct_data *dtree; /* distance tree */
{
  var dist; /* distance of matched string */
  var lc; /* match length or unmatched char (if dist == 0) */
  var lx = 0; /* running index in l_buf */
  var code; /* the code to send */
  var extra; /* number of extra bits to send */

  if (s.last_lit !== 0) {
    do {
      dist = s.pending_buf[s.d_buf + lx * 2] << 8 | s.pending_buf[s.d_buf + lx * 2 + 1];
      lc = s.pending_buf[s.l_buf + lx];
      lx++;

      if (dist === 0) {
        send_code$1(s, lc, ltree); /* send a literal byte */
        //Tracecv(isgraph(lc), (stderr," '%c' ", lc));
      } else {
        /* Here, lc is the match length - MIN_MATCH */
        code = _length_code$1[lc];
        send_code$1(s, code + LITERALS$1$1 + 1, ltree); /* send the length code */
        extra = extra_lbits$1[code];
        if (extra !== 0) {
          lc -= base_length$1[code];
          send_bits$1(s, lc, extra); /* send the extra length bits */
        }
        dist--; /* dist is now the match distance - 1 */
        code = d_code$1(dist);
        //Assert (code < D_CODES, "bad d_code");

        send_code$1(s, code, dtree); /* send the distance code */
        extra = extra_dbits$1[code];
        if (extra !== 0) {
          dist -= base_dist$1[code];
          send_bits$1(s, dist, extra); /* send the extra distance bits */
        }
      } /* literal or match pair ? */

      /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */
      //Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,
      //       "pendingBuf overflow");
    } while (lx < s.last_lit);
  }

  send_code$1(s, END_BLOCK$1, ltree);
}

/* ===========================================================================
 * Construct one Huffman tree and assigns the code bit strings and lengths.
 * Update the total bit length for the current block.
 * IN assertion: the field freq is set for all tree elements.
 * OUT assertions: the fields len and code are set to the optimal bit length
 *     and corresponding code. The length opt_len is updated; static_len is
 *     also updated if stree is not null. The field max_code is set.
 */
function build_tree$1(s, desc)
//    deflate_state *s;
//    tree_desc *desc; /* the tree descriptor */
{
  var tree = desc.dyn_tree;
  var stree = desc.stat_desc.static_tree;
  var has_stree = desc.stat_desc.has_stree;
  var elems = desc.stat_desc.elems;
  var n, m; /* iterate over heap elements */
  var max_code = -1; /* largest code with non zero frequency */
  var node; /* new node being created */

  /* Construct the initial heap, with least frequent element in
   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
   * heap[0] is not used.
   */
  s.heap_len = 0;
  s.heap_max = HEAP_SIZE$1$1;

  for (n = 0; n < elems; n++) {
    if (tree[n * 2] /*.Freq*/ !== 0) {
      s.heap[++s.heap_len] = max_code = n;
      s.depth[n] = 0;
    } else {
      tree[n * 2 + 1] /*.Len*/ = 0;
    }
  }

  /* The pkzip format requires that at least one distance code exists,
   * and that at least one bit should be sent even if there is only one
   * possible code. So to avoid special checks later on we force at least
   * two codes of non zero frequency.
   */
  while (s.heap_len < 2) {
    node = s.heap[++s.heap_len] = max_code < 2 ? ++max_code : 0;
    tree[node * 2] /*.Freq*/ = 1;
    s.depth[node] = 0;
    s.opt_len--;

    if (has_stree) {
      s.static_len -= stree[node * 2 + 1] /*.Len*/;
    }
    /* node is 0 or 1 so it does not have extra bits */
  }
  desc.max_code = max_code;

  /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
   * establish sub-heaps of increasing lengths:
   */
  for (n = s.heap_len >> 1 /*int /2*/; n >= 1; n--) {
    pqdownheap$1(s, tree, n);
  }

  /* Construct the Huffman tree by repeatedly combining the least two
   * frequent nodes.
   */
  node = elems; /* next internal node of the tree */
  do {
    //pqremove(s, tree, n);  /* n = node of least frequency */
    /*** pqremove ***/
    n = s.heap[1 /*SMALLEST*/];
    s.heap[1 /*SMALLEST*/] = s.heap[s.heap_len--];
    pqdownheap$1(s, tree, 1 /*SMALLEST*/);
    /***/

    m = s.heap[1 /*SMALLEST*/]; /* m = node of next least frequency */

    s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */
    s.heap[--s.heap_max] = m;

    /* Create a new node father of n and m */
    tree[node * 2] /*.Freq*/ = tree[n * 2] /*.Freq*/ + tree[m * 2] /*.Freq*/;
    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;
    tree[n * 2 + 1] /*.Dad*/ = tree[m * 2 + 1] /*.Dad*/ = node;

    /* and insert the new node in the heap */
    s.heap[1 /*SMALLEST*/] = node++;
    pqdownheap$1(s, tree, 1 /*SMALLEST*/);
  } while (s.heap_len >= 2);

  s.heap[--s.heap_max] = s.heap[1 /*SMALLEST*/];

  /* At this point, the fields freq and dad are set. We can now
   * generate the bit lengths.
   */
  gen_bitlen$1(s, desc);

  /* The field len is now set, we can generate the bit codes */
  gen_codes$1(tree, max_code, s.bl_count);
}

/* ===========================================================================
 * Scan a literal or distance tree to determine the frequencies of the codes
 * in the bit length tree.
 */
function scan_tree$1(s, tree, max_code)
//    deflate_state *s;
//    ct_data *tree;   /* the tree to be scanned */
//    int max_code;    /* and its largest code of non zero frequency */
{
  var n; /* iterates over all tree elements */
  var prevlen = -1; /* last emitted length */
  var curlen; /* length of current code */

  var nextlen = tree[0 * 2 + 1]; /* length of next code */

  var count = 0; /* repeat count of the current code */
  var max_count = 7; /* max repeat count */
  var min_count = 4; /* min repeat count */

  if (nextlen === 0) {
    max_count = 138;
    min_count = 3;
  }
  tree[(max_code + 1) * 2 + 1] /*.Len*/ = 0xffff; /* guard */

  for (n = 0; n <= max_code; n++) {
    curlen = nextlen;
    nextlen = tree[(n + 1) * 2 + 1] /*.Len*/;

    if (++count < max_count && curlen === nextlen) {
      continue;
    } else if (count < min_count) {
      s.bl_tree[curlen * 2] /*.Freq*/ += count;
    } else if (curlen !== 0) {

      if (curlen !== prevlen) {
        s.bl_tree[curlen * 2] /*.Freq*/++;
      }
      s.bl_tree[REP_3_6$1 * 2] /*.Freq*/++;
    } else if (count <= 10) {
      s.bl_tree[REPZ_3_10$1 * 2] /*.Freq*/++;
    } else {
      s.bl_tree[REPZ_11_138$1 * 2] /*.Freq*/++;
    }

    count = 0;
    prevlen = curlen;

    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;
    } else if (curlen === nextlen) {
      max_count = 6;
      min_count = 3;
    } else {
      max_count = 7;
      min_count = 4;
    }
  }
}

/* ===========================================================================
 * Send a literal or distance tree in compressed form, using the codes in
 * bl_tree.
 */
function send_tree$1(s, tree, max_code)
//    deflate_state *s;
//    ct_data *tree; /* the tree to be scanned */
//    int max_code;       /* and its largest code of non zero frequency */
{
  var n; /* iterates over all tree elements */
  var prevlen = -1; /* last emitted length */
  var curlen; /* length of current code */

  var nextlen = tree[0 * 2 + 1]; /* length of next code */

  var count = 0; /* repeat count of the current code */
  var max_count = 7; /* max repeat count */
  var min_count = 4; /* min repeat count */

  /* tree[max_code+1].Len = -1; */ /* guard already set */
  if (nextlen === 0) {
    max_count = 138;
    min_count = 3;
  }

  for (n = 0; n <= max_code; n++) {
    curlen = nextlen;
    nextlen = tree[(n + 1) * 2 + 1] /*.Len*/;

    if (++count < max_count && curlen === nextlen) {
      continue;
    } else if (count < min_count) {
      do {
        send_code$1(s, curlen, s.bl_tree);
      } while (--count !== 0);
    } else if (curlen !== 0) {
      if (curlen !== prevlen) {
        send_code$1(s, curlen, s.bl_tree);
        count--;
      }
      //Assert(count >= 3 && count <= 6, " 3_6?");
      send_code$1(s, REP_3_6$1, s.bl_tree);
      send_bits$1(s, count - 3, 2);
    } else if (count <= 10) {
      send_code$1(s, REPZ_3_10$1, s.bl_tree);
      send_bits$1(s, count - 3, 3);
    } else {
      send_code$1(s, REPZ_11_138$1, s.bl_tree);
      send_bits$1(s, count - 11, 7);
    }

    count = 0;
    prevlen = curlen;
    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;
    } else if (curlen === nextlen) {
      max_count = 6;
      min_count = 3;
    } else {
      max_count = 7;
      min_count = 4;
    }
  }
}

/* ===========================================================================
 * Construct the Huffman tree for the bit lengths and return the index in
 * bl_order of the last bit length code to send.
 */
function build_bl_tree$1(s) {
  var max_blindex; /* index of last bit length code of non zero freq */

  /* Determine the bit length frequencies for literal and distance trees */
  scan_tree$1(s, s.dyn_ltree, s.l_desc.max_code);
  scan_tree$1(s, s.dyn_dtree, s.d_desc.max_code);

  /* Build the bit length tree: */
  build_tree$1(s, s.bl_desc);
  /* opt_len now includes the length of the tree representations, except
   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
   */

  /* Determine the number of bit length codes to send. The pkzip format
   * requires that at least 4 bit length codes be sent. (appnote.txt says
   * 3 but the actual value used is 4.)
   */
  for (max_blindex = BL_CODES$1$1 - 1; max_blindex >= 3; max_blindex--) {
    if (s.bl_tree[bl_order$1[max_blindex] * 2 + 1] /*.Len*/ !== 0) {
      break;
    }
  }
  /* Update opt_len to include the bit length tree and counts */
  s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;
  //Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
  //        s->opt_len, s->static_len));

  return max_blindex;
}

/* ===========================================================================
 * Send the header for a block using dynamic Huffman trees: the counts, the
 * lengths of the bit length codes, the literal tree and the distance tree.
 * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.
 */
function send_all_trees$1(s, lcodes, dcodes, blcodes)
//    deflate_state *s;
//    int lcodes, dcodes, blcodes; /* number of codes for each tree */
{
  var rank; /* index in bl_order */

  //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
  //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
  //        "too many codes");
  //Tracev((stderr, "\nbl counts: "));
  send_bits$1(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */
  send_bits$1(s, dcodes - 1, 5);
  send_bits$1(s, blcodes - 4, 4); /* not -3 as stated in appnote.txt */
  for (rank = 0; rank < blcodes; rank++) {
    //Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
    send_bits$1(s, s.bl_tree[bl_order$1[rank] * 2 + 1] /*.Len*/, 3);
  }
  //Tracev((stderr, "\nbl tree: sent %ld", s->bits_sent));

  send_tree$1(s, s.dyn_ltree, lcodes - 1); /* literal tree */
  //Tracev((stderr, "\nlit tree: sent %ld", s->bits_sent));

  send_tree$1(s, s.dyn_dtree, dcodes - 1); /* distance tree */
  //Tracev((stderr, "\ndist tree: sent %ld", s->bits_sent));
}

/* ===========================================================================
 * Check if the data type is TEXT or BINARY, using the following algorithm:
 * - TEXT if the two conditions below are satisfied:
 *    a) There are no non-portable control characters belonging to the
 *       "black list" (0..6, 14..25, 28..31).
 *    b) There is at least one printable character belonging to the
 *       "white list" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).
 * - BINARY otherwise.
 * - The following partially-portable control characters form a
 *   "gray list" that is ignored in this detection algorithm:
 *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).
 * IN assertion: the fields Freq of dyn_ltree are set.
 */
function detect_data_type$1(s) {
  /* black_mask is the bit mask of black-listed bytes
   * set bits 0..6, 14..25, and 28..31
   * 0xf3ffc07f = binary 11110011111111111100000001111111
   */
  var black_mask = 0xf3ffc07f;
  var n;

  /* Check for non-textual ("black-listed") bytes. */
  for (n = 0; n <= 31; n++, black_mask >>>= 1) {
    if (black_mask & 1 && s.dyn_ltree[n * 2] /*.Freq*/ !== 0) {
      return Z_BINARY$1;
    }
  }

  /* Check for textual ("white-listed") bytes. */
  if (s.dyn_ltree[9 * 2] /*.Freq*/ !== 0 || s.dyn_ltree[10 * 2] /*.Freq*/ !== 0 || s.dyn_ltree[13 * 2] /*.Freq*/ !== 0) {
    return Z_TEXT$1;
  }
  for (n = 32; n < LITERALS$1$1; n++) {
    if (s.dyn_ltree[n * 2] /*.Freq*/ !== 0) {
      return Z_TEXT$1;
    }
  }

  /* There are no "black-listed" or "white-listed" bytes:
   * this stream either is empty or has tolerated ("gray-listed") bytes only.
   */
  return Z_BINARY$1;
}

var static_init_done$1 = false;

/* ===========================================================================
 * Initialize the tree data structures for a new zlib stream.
 */
function _tr_init$1(s) {

  if (!static_init_done$1) {
    tr_static_init$1();
    static_init_done$1 = true;
  }

  s.l_desc = new TreeDesc$1(s.dyn_ltree, static_l_desc$1);
  s.d_desc = new TreeDesc$1(s.dyn_dtree, static_d_desc$1);
  s.bl_desc = new TreeDesc$1(s.bl_tree, static_bl_desc$1);

  s.bi_buf = 0;
  s.bi_valid = 0;

  /* Initialize the first block of the first file: */
  init_block$1(s);
}

/* ===========================================================================
 * Send a stored block
 */
function _tr_stored_block$1(s, buf, stored_len, last)
//DeflateState *s;
//charf *buf;       /* input block */
//ulg stored_len;   /* length of input block */
//int last;         /* one if this is the last block for a file */
{
  send_bits$1(s, (STORED_BLOCK$1 << 1) + (last ? 1 : 0), 3); /* send block type */
  copy_block$1(s, buf, stored_len, true); /* with header */
}

/* ===========================================================================
 * Send one empty static block to give enough lookahead for inflate.
 * This takes 10 bits, of which 7 may remain in the bit buffer.
 */
function _tr_align$1(s) {
  send_bits$1(s, STATIC_TREES$1 << 1, 3);
  send_code$1(s, END_BLOCK$1, static_ltree$1);
  bi_flush$1(s);
}

/* ===========================================================================
 * Determine the best encoding for the current block: dynamic trees, static
 * trees or store, and output the encoded block to the zip file.
 */
function _tr_flush_block$1(s, buf, stored_len, last)
//DeflateState *s;
//charf *buf;       /* input block, or NULL if too old */
//ulg stored_len;   /* length of input block */
//int last;         /* one if this is the last block for a file */
{
  var opt_lenb, static_lenb; /* opt_len and static_len in bytes */
  var max_blindex = 0; /* index of last bit length code of non zero freq */

  /* Build the Huffman trees unless a stored block is forced */
  if (s.level > 0) {

    /* Check if the file is binary or text */
    if (s.strm.data_type === Z_UNKNOWN$1$1) {
      s.strm.data_type = detect_data_type$1(s);
    }

    /* Construct the literal and distance trees */
    build_tree$1(s, s.l_desc);
    // Tracev((stderr, "\nlit data: dyn %ld, stat %ld", s->opt_len,
    //        s->static_len));

    build_tree$1(s, s.d_desc);
    // Tracev((stderr, "\ndist data: dyn %ld, stat %ld", s->opt_len,
    //        s->static_len));
    /* At this point, opt_len and static_len are the total bit lengths of
     * the compressed block data, excluding the tree representations.
     */

    /* Build the bit length tree for the above two trees, and get the index
     * in bl_order of the last bit length code to send.
     */
    max_blindex = build_bl_tree$1(s);

    /* Determine the best encoding. Compute the block lengths in bytes. */
    opt_lenb = s.opt_len + 3 + 7 >>> 3;
    static_lenb = s.static_len + 3 + 7 >>> 3;

    // Tracev((stderr, "\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u ",
    //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,
    //        s->last_lit));

    if (static_lenb <= opt_lenb) {
      opt_lenb = static_lenb;
    }
  } else {
    // Assert(buf != (char*)0, "lost buf");
    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */
  }

  if (stored_len + 4 <= opt_lenb && buf !== -1) {
    /* 4: two words for the lengths */

    /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
     * Otherwise we can't have processed more than WSIZE input bytes since
     * the last block flush, because compression would have been
     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
     * transform a block into a stored block.
     */
    _tr_stored_block$1(s, buf, stored_len, last);
  } else if (s.strategy === Z_FIXED$1$1 || static_lenb === opt_lenb) {

    send_bits$1(s, (STATIC_TREES$1 << 1) + (last ? 1 : 0), 3);
    compress_block$1(s, static_ltree$1, static_dtree$1);
  } else {
    send_bits$1(s, (DYN_TREES$1 << 1) + (last ? 1 : 0), 3);
    send_all_trees$1(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);
    compress_block$1(s, s.dyn_ltree, s.dyn_dtree);
  }
  // Assert (s->compressed_len == s->bits_sent, "bad compressed size");
  /* The above check is made mod 2^32, for files larger than 512 MB
   * and uLong implemented on 32 bits.
   */
  init_block$1(s);

  if (last) {
    bi_windup$1(s);
  }
  // Tracev((stderr,"\ncomprlen %lu(%lu) ", s->compressed_len>>3,
  //       s->compressed_len-7*last));
}

/* ===========================================================================
 * Save the match info and tally the frequency counts. Return true if
 * the current block must be flushed.
 */
function _tr_tally$1(s, dist, lc)
//    deflate_state *s;
//    unsigned dist;  /* distance of matched string */
//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */
{
  //var out_length, in_length, dcode;

  s.pending_buf[s.d_buf + s.last_lit * 2] = dist >>> 8 & 0xff;
  s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;

  s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;
  s.last_lit++;

  if (dist === 0) {
    /* lc is the unmatched char */
    s.dyn_ltree[lc * 2] /*.Freq*/++;
  } else {
    s.matches++;
    /* Here, lc is the match length - MIN_MATCH */
    dist--; /* dist = match distance - 1 */
    //Assert((ush)dist < (ush)MAX_DIST(s) &&
    //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&
    //       (ush)d_code(dist) < (ush)D_CODES,  "_tr_tally: bad match");

    s.dyn_ltree[(_length_code$1[lc] + LITERALS$1$1 + 1) * 2] /*.Freq*/++;
    s.dyn_dtree[d_code$1(dist) * 2] /*.Freq*/++;
  }

  // (!) This block is disabled in zlib defaults,
  // don't enable it for binary compatibility

  //#ifdef TRUNCATE_BLOCK
  //  /* Try to guess if it is profitable to stop the current block here */
  //  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {
  //    /* Compute an upper bound for the compressed length */
  //    out_length = s.last_lit*8;
  //    in_length = s.strstart - s.block_start;
  //
  //    for (dcode = 0; dcode < D_CODES; dcode++) {
  //      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);
  //    }
  //    out_length >>>= 3;
  //    //Tracev((stderr,"\nlast_lit %u, in %ld, out ~%ld(%ld%%) ",
  //    //       s->last_lit, in_length, out_length,
  //    //       100L - out_length*100L/in_length));
  //    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {
  //      return true;
  //    }
  //  }
  //#endif

  return s.last_lit === s.lit_bufsize - 1;
  /* We avoid equality with lit_bufsize because of wraparound at 64K
   * on 16 bit machines and because stored blocks are restricted to
   * 64K-1 bytes.
   */
}

var _tr_init_1$1 = _tr_init$1;
var _tr_stored_block_1$1 = _tr_stored_block$1;
var _tr_flush_block_1$1 = _tr_flush_block$1;
var _tr_tally_1$1 = _tr_tally$1;
var _tr_align_1$1 = _tr_align$1;

var trees$3 = {
  _tr_init: _tr_init_1$1,
  _tr_stored_block: _tr_stored_block_1$1,
  _tr_flush_block: _tr_flush_block_1$1,
  _tr_tally: _tr_tally_1$1,
  _tr_align: _tr_align_1$1
};

'use strict';

// Note: adler32 takes 12% for level 0 and 2% for level 6.
// It isn't worth it to make additional optimizations as in original.
// Small size is preferable.

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

function adler32$2(adler, buf, len, pos) {
  var s1 = adler & 0xffff | 0,
      s2 = adler >>> 16 & 0xffff | 0,
      n = 0;

  while (len !== 0) {
    // Set limit ~ twice less than 5552, to keep
    // s2 in 31-bits, because we force signed ints.
    // in other case %= will fail.
    n = len > 2000 ? 2000 : len;
    len -= n;

    do {
      s1 = s1 + buf[pos++] | 0;
      s2 = s2 + s1 | 0;
    } while (--n);

    s1 %= 65521;
    s2 %= 65521;
  }

  return s1 | s2 << 16 | 0;
}

var adler32_1$2 = adler32$2;

'use strict';

// Note: we can't get significant speed boost here.
// So write code to minimize size - no pregenerated tables
// and array tools dependencies.

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

// Use ordinary array, since untyped makes no boost here
function makeTable$1() {
  var c,
      table = [];

  for (var n = 0; n < 256; n++) {
    c = n;
    for (var k = 0; k < 8; k++) {
      c = c & 1 ? 0xEDB88320 ^ c >>> 1 : c >>> 1;
    }
    table[n] = c;
  }

  return table;
}

// Create table on load. Just 255 signed longs. Not a problem.
var crcTable$1 = makeTable$1();

function crc32$2(crc, buf, len, pos) {
  var t = crcTable$1,
      end = pos + len;

  crc ^= -1;

  for (var i = pos; i < end; i++) {
    crc = crc >>> 8 ^ t[(crc ^ buf[i]) & 0xFF];
  }

  return crc ^ -1; // >>> 0;
}

var crc32_1$2 = crc32$2;

'use strict';

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

var messages$2 = {
  2: 'need dictionary', /* Z_NEED_DICT       2  */
  1: 'stream end', /* Z_STREAM_END      1  */
  0: '', /* Z_OK              0  */
  '-1': 'file error', /* Z_ERRNO         (-1) */
  '-2': 'stream error', /* Z_STREAM_ERROR  (-2) */
  '-3': 'data error', /* Z_DATA_ERROR    (-3) */
  '-4': 'insufficient memory', /* Z_MEM_ERROR     (-4) */
  '-5': 'buffer error', /* Z_BUF_ERROR     (-5) */
  '-6': 'incompatible version' /* Z_VERSION_ERROR (-6) */
};

'use strict';

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.


/* Public constants ==========================================================*/
/* ===========================================================================*/

/* Allowed flush values; see deflate() and inflate() below for details */
var Z_NO_FLUSH$1$1 = 0;
var Z_PARTIAL_FLUSH$1 = 1;
//var Z_SYNC_FLUSH    = 2;
var Z_FULL_FLUSH$1 = 3;
var Z_FINISH$1$1 = 4;
var Z_BLOCK$2 = 5;
//var Z_TREES         = 6;


/* Return codes for the compression/decompression functions. Negative values
 * are errors, positive values are used for special but normal events.
 */
var Z_OK$1$1 = 0;
var Z_STREAM_END$1$1 = 1;
//var Z_NEED_DICT     = 2;
//var Z_ERRNO         = -1;
var Z_STREAM_ERROR$2 = -2;
var Z_DATA_ERROR$2 = -3;
//var Z_MEM_ERROR     = -4;
var Z_BUF_ERROR$2 = -5;
//var Z_VERSION_ERROR = -6;


/* compression levels */
//var Z_NO_COMPRESSION      = 0;
//var Z_BEST_SPEED          = 1;
//var Z_BEST_COMPRESSION    = 9;
var Z_DEFAULT_COMPRESSION$1$1 = -1;

var Z_FILTERED$1 = 1;
var Z_HUFFMAN_ONLY$1 = 2;
var Z_RLE$1 = 3;
var Z_FIXED$2 = 4;
var Z_DEFAULT_STRATEGY$1$1 = 0;

/* Possible values of the data_type field (though see inflate()) */
//var Z_BINARY              = 0;
//var Z_TEXT                = 1;
//var Z_ASCII               = 1; // = Z_TEXT
var Z_UNKNOWN$2 = 2;

/* The deflate compression method */
var Z_DEFLATED$1$1 = 8;

/*============================================================================*/

var MAX_MEM_LEVEL$1 = 9;
/* Maximum value for memLevel in deflateInit2 */
var MAX_WBITS$2 = 15;
/* 32K LZ77 window */
var DEF_MEM_LEVEL$1 = 8;

var LENGTH_CODES$2 = 29;
/* number of length codes, not counting the special END_BLOCK code */
var LITERALS$2 = 256;
/* number of literal bytes 0..255 */
var L_CODES$2 = LITERALS$2 + 1 + LENGTH_CODES$2;
/* number of Literal or Length codes, including the END_BLOCK code */
var D_CODES$2 = 30;
/* number of distance codes */
var BL_CODES$2 = 19;
/* number of codes used to transfer the bit lengths */
var HEAP_SIZE$2 = 2 * L_CODES$2 + 1;
/* maximum heap size */
var MAX_BITS$3 = 15;
/* All codes must not exceed MAX_BITS bits */

var MIN_MATCH$2 = 3;
var MAX_MATCH$2 = 258;
var MIN_LOOKAHEAD$1 = MAX_MATCH$2 + MIN_MATCH$2 + 1;

var PRESET_DICT$1 = 0x20;

var INIT_STATE$1 = 42;
var EXTRA_STATE$1 = 69;
var NAME_STATE$1 = 73;
var COMMENT_STATE$1 = 91;
var HCRC_STATE$1 = 103;
var BUSY_STATE$1 = 113;
var FINISH_STATE$1 = 666;

var BS_NEED_MORE$1 = 1; /* block not completed, need more input or more output */
var BS_BLOCK_DONE$1 = 2; /* block flush performed */
var BS_FINISH_STARTED$1 = 3; /* finish started, need only more output at next deflate */
var BS_FINISH_DONE$1 = 4; /* finish done, accept no more input or output */

var OS_CODE$1 = 0x03; // Unix :) . Don't detect, use this default.

function err$1(strm, errorCode) {
  strm.msg = messages$2[errorCode];
  return errorCode;
}

function rank$1(f) {
  return (f << 1) - (f > 4 ? 9 : 0);
}

function zero$2(buf) {
  var len = buf.length;while (--len >= 0) {
    buf[len] = 0;
  }
}

/* =========================================================================
 * Flush as much pending output as possible. All deflate() output goes
 * through this function so some applications may wish to modify it
 * to avoid allocating a large strm->output buffer and copying into it.
 * (See also read_buf()).
 */
function flush_pending$1(strm) {
  var s = strm.state;

  //_tr_flush_bits(s);
  var len = s.pending;
  if (len > strm.avail_out) {
    len = strm.avail_out;
  }
  if (len === 0) {
    return;
  }

  common$2.arraySet(strm.output, s.pending_buf, s.pending_out, len, strm.next_out);
  strm.next_out += len;
  s.pending_out += len;
  strm.total_out += len;
  strm.avail_out -= len;
  s.pending -= len;
  if (s.pending === 0) {
    s.pending_out = 0;
  }
}

function flush_block_only$1(s, last) {
  trees$3._tr_flush_block(s, s.block_start >= 0 ? s.block_start : -1, s.strstart - s.block_start, last);
  s.block_start = s.strstart;
  flush_pending$1(s.strm);
}

function put_byte$1(s, b) {
  s.pending_buf[s.pending++] = b;
}

/* =========================================================================
 * Put a short in the pending buffer. The 16-bit value is put in MSB order.
 * IN assertion: the stream state is correct and there is enough room in
 * pending_buf.
 */
function putShortMSB$1(s, b) {
  //  put_byte(s, (Byte)(b >> 8));
  //  put_byte(s, (Byte)(b & 0xff));
  s.pending_buf[s.pending++] = b >>> 8 & 0xff;
  s.pending_buf[s.pending++] = b & 0xff;
}

/* ===========================================================================
 * Read a new buffer from the current input stream, update the adler32
 * and total number of bytes read.  All deflate() input goes through
 * this function so some applications may wish to modify it to avoid
 * allocating a large strm->input buffer and copying from it.
 * (See also flush_pending()).
 */
function read_buf$1(strm, buf, start, size) {
  var len = strm.avail_in;

  if (len > size) {
    len = size;
  }
  if (len === 0) {
    return 0;
  }

  strm.avail_in -= len;

  // zmemcpy(buf, strm->next_in, len);
  common$2.arraySet(buf, strm.input, strm.next_in, len, start);
  if (strm.state.wrap === 1) {
    strm.adler = adler32_1$2(strm.adler, buf, len, start);
  } else if (strm.state.wrap === 2) {
    strm.adler = crc32_1$2(strm.adler, buf, len, start);
  }

  strm.next_in += len;
  strm.total_in += len;

  return len;
}

/* ===========================================================================
 * Set match_start to the longest match starting at the given string and
 * return its length. Matches shorter or equal to prev_length are discarded,
 * in which case the result is equal to prev_length and match_start is
 * garbage.
 * IN assertions: cur_match is the head of the hash chain for the current
 *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1
 * OUT assertion: the match length is not greater than s->lookahead.
 */
function longest_match$1(s, cur_match) {
  var chain_length = s.max_chain_length; /* max hash chain length */
  var scan = s.strstart; /* current string */
  var match; /* matched string */
  var len; /* length of current match */
  var best_len = s.prev_length; /* best match length so far */
  var nice_match = s.nice_match; /* stop if match long enough */
  var limit = s.strstart > s.w_size - MIN_LOOKAHEAD$1 ? s.strstart - (s.w_size - MIN_LOOKAHEAD$1) : 0;

  var _win = s.window; // shortcut

  var wmask = s.w_mask;
  var prev = s.prev;

  /* Stop when cur_match becomes <= limit. To simplify the code,
   * we prevent matches with the string of window index 0.
   */

  var strend = s.strstart + MAX_MATCH$2;
  var scan_end1 = _win[scan + best_len - 1];
  var scan_end = _win[scan + best_len];

  /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.
   * It is easy to get rid of this optimization if necessary.
   */
  // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");

  /* Do not waste too much time if we already have a good match: */
  if (s.prev_length >= s.good_match) {
    chain_length >>= 2;
  }
  /* Do not look for matches beyond the end of the input. This is necessary
   * to make deflate deterministic.
   */
  if (nice_match > s.lookahead) {
    nice_match = s.lookahead;
  }

  // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");

  do {
    // Assert(cur_match < s->strstart, "no future");
    match = cur_match;

    /* Skip to next match if the match length cannot increase
     * or if the match length is less than 2.  Note that the checks below
     * for insufficient lookahead only occur occasionally for performance
     * reasons.  Therefore uninitialized memory will be accessed, and
     * conditional jumps will be made that depend on those values.
     * However the length of the match is limited to the lookahead, so
     * the output of deflate is not affected by the uninitialized values.
     */

    if (_win[match + best_len] !== scan_end || _win[match + best_len - 1] !== scan_end1 || _win[match] !== _win[scan] || _win[++match] !== _win[scan + 1]) {
      continue;
    }

    /* The check at best_len-1 can be removed because it will be made
     * again later. (This heuristic is not always a win.)
     * It is not necessary to compare scan[2] and match[2] since they
     * are always equal when the other bytes match, given that
     * the hash keys are equal and that HASH_BITS >= 8.
     */
    scan += 2;
    match++;
    // Assert(*scan == *match, "match[2]?");

    /* We check for insufficient lookahead only every 8th comparison;
     * the 256th check will be made at strstart+258.
     */
    do {
      /*jshint noempty:false*/
    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && scan < strend);

    // Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");

    len = MAX_MATCH$2 - (strend - scan);
    scan = strend - MAX_MATCH$2;

    if (len > best_len) {
      s.match_start = cur_match;
      best_len = len;
      if (len >= nice_match) {
        break;
      }
      scan_end1 = _win[scan + best_len - 1];
      scan_end = _win[scan + best_len];
    }
  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);

  if (best_len <= s.lookahead) {
    return best_len;
  }
  return s.lookahead;
}

/* ===========================================================================
 * Fill the window when the lookahead becomes insufficient.
 * Updates strstart and lookahead.
 *
 * IN assertion: lookahead < MIN_LOOKAHEAD
 * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD
 *    At least one byte has been read, or avail_in == 0; reads are
 *    performed for at least two bytes (required for the zip translate_eol
 *    option -- not supported here).
 */
function fill_window$1(s) {
  var _w_size = s.w_size;
  var p, n, m, more, str;

  //Assert(s->lookahead < MIN_LOOKAHEAD, "already enough lookahead");

  do {
    more = s.window_size - s.lookahead - s.strstart;

    // JS ints have 32 bit, block below not needed
    /* Deal with !@#$% 64K limit: */
    //if (sizeof(int) <= 2) {
    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {
    //        more = wsize;
    //
    //  } else if (more == (unsigned)(-1)) {
    //        /* Very unlikely, but possible on 16 bit machine if
    //         * strstart == 0 && lookahead == 1 (input done a byte at time)
    //         */
    //        more--;
    //    }
    //}


    /* If the window is almost full and there is insufficient lookahead,
     * move the upper half to the lower one to make room in the upper half.
     */
    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD$1)) {

      common$2.arraySet(s.window, s.window, _w_size, _w_size, 0);
      s.match_start -= _w_size;
      s.strstart -= _w_size;
      /* we now have strstart >= MAX_DIST */
      s.block_start -= _w_size;

      /* Slide the hash table (could be avoided with 32 bit values
       at the expense of memory usage). We slide even when level == 0
       to keep the hash table consistent if we switch back to level > 0
       later. (Using level 0 permanently is not an optimal usage of
       zlib, so we don't care about this pathological case.)
       */

      n = s.hash_size;
      p = n;
      do {
        m = s.head[--p];
        s.head[p] = m >= _w_size ? m - _w_size : 0;
      } while (--n);

      n = _w_size;
      p = n;
      do {
        m = s.prev[--p];
        s.prev[p] = m >= _w_size ? m - _w_size : 0;
        /* If n is not on any hash chain, prev[n] is garbage but
         * its value will never be used.
         */
      } while (--n);

      more += _w_size;
    }
    if (s.strm.avail_in === 0) {
      break;
    }

    /* If there was no sliding:
     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&
     *    more == window_size - lookahead - strstart
     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)
     * => more >= window_size - 2*WSIZE + 2
     * In the BIG_MEM or MMAP case (not yet supported),
     *   window_size == input_size + MIN_LOOKAHEAD  &&
     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.
     * Otherwise, window_size == 2*WSIZE so more >= 2.
     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.
     */
    //Assert(more >= 2, "more < 2");
    n = read_buf$1(s.strm, s.window, s.strstart + s.lookahead, more);
    s.lookahead += n;

    /* Initialize the hash value now that we have some input: */
    if (s.lookahead + s.insert >= MIN_MATCH$2) {
      str = s.strstart - s.insert;
      s.ins_h = s.window[str];

      /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */
      s.ins_h = (s.ins_h << s.hash_shift ^ s.window[str + 1]) & s.hash_mask;
      //#if MIN_MATCH != 3
      //        Call update_hash() MIN_MATCH-3 more times
      //#endif
      while (s.insert) {
        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
        s.ins_h = (s.ins_h << s.hash_shift ^ s.window[str + MIN_MATCH$2 - 1]) & s.hash_mask;

        s.prev[str & s.w_mask] = s.head[s.ins_h];
        s.head[s.ins_h] = str;
        str++;
        s.insert--;
        if (s.lookahead + s.insert < MIN_MATCH$2) {
          break;
        }
      }
    }
    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,
     * but this is not important since only literal bytes will be emitted.
     */
  } while (s.lookahead < MIN_LOOKAHEAD$1 && s.strm.avail_in !== 0);

  /* If the WIN_INIT bytes after the end of the current data have never been
   * written, then zero those bytes in order to avoid memory check reports of
   * the use of uninitialized (or uninitialised as Julian writes) bytes by
   * the longest match routines.  Update the high water mark for the next
   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match
   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.
   */
  //  if (s.high_water < s.window_size) {
  //    var curr = s.strstart + s.lookahead;
  //    var init = 0;
  //
  //    if (s.high_water < curr) {
  //      /* Previous high water mark below current data -- zero WIN_INIT
  //       * bytes or up to end of window, whichever is less.
  //       */
  //      init = s.window_size - curr;
  //      if (init > WIN_INIT)
  //        init = WIN_INIT;
  //      zmemzero(s->window + curr, (unsigned)init);
  //      s->high_water = curr + init;
  //    }
  //    else if (s->high_water < (ulg)curr + WIN_INIT) {
  //      /* High water mark at or above current data, but below current data
  //       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up
  //       * to end of window, whichever is less.
  //       */
  //      init = (ulg)curr + WIN_INIT - s->high_water;
  //      if (init > s->window_size - s->high_water)
  //        init = s->window_size - s->high_water;
  //      zmemzero(s->window + s->high_water, (unsigned)init);
  //      s->high_water += init;
  //    }
  //  }
  //
  //  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
  //    "not enough room for search");
}

/* ===========================================================================
 * Copy without compression as much as possible from the input stream, return
 * the current block state.
 * This function does not insert new strings in the dictionary since
 * uncompressible data is probably not useful. This function is used
 * only for the level=0 compression option.
 * NOTE: this function should be optimized to avoid extra copying from
 * window to pending_buf.
 */
function deflate_stored$1(s, flush) {
  /* Stored blocks are limited to 0xffff bytes, pending_buf is limited
   * to pending_buf_size, and each stored block has a 5 byte header:
   */
  var max_block_size = 0xffff;

  if (max_block_size > s.pending_buf_size - 5) {
    max_block_size = s.pending_buf_size - 5;
  }

  /* Copy as much as possible from input to output: */
  for (;;) {
    /* Fill the window as much as possible: */
    if (s.lookahead <= 1) {

      //Assert(s->strstart < s->w_size+MAX_DIST(s) ||
      //  s->block_start >= (long)s->w_size, "slide too late");
      //      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||
      //        s.block_start >= s.w_size)) {
      //        throw  new Error("slide too late");
      //      }

      fill_window$1(s);
      if (s.lookahead === 0 && flush === Z_NO_FLUSH$1$1) {
        return BS_NEED_MORE$1;
      }

      if (s.lookahead === 0) {
        break;
      }
      /* flush the current block */
    }
    //Assert(s->block_start >= 0L, "block gone");
    //    if (s.block_start < 0) throw new Error("block gone");

    s.strstart += s.lookahead;
    s.lookahead = 0;

    /* Emit a stored block if pending_buf will be full: */
    var max_start = s.block_start + max_block_size;

    if (s.strstart === 0 || s.strstart >= max_start) {
      /* strstart == 0 is possible when wraparound on 16-bit machine */
      s.lookahead = s.strstart - max_start;
      s.strstart = max_start;
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only$1(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE$1;
      }
      /***/
    }
    /* Flush if we may have to slide, otherwise block_start may become
     * negative and the data will be gone:
     */
    if (s.strstart - s.block_start >= s.w_size - MIN_LOOKAHEAD$1) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only$1(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE$1;
      }
      /***/
    }
  }

  s.insert = 0;

  if (flush === Z_FINISH$1$1) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only$1(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED$1;
    }
    /***/
    return BS_FINISH_DONE$1;
  }

  if (s.strstart > s.block_start) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only$1(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE$1;
    }
    /***/
  }

  return BS_NEED_MORE$1;
}

/* ===========================================================================
 * Compress as much as possible from the input stream, return the current
 * block state.
 * This function does not perform lazy evaluation of matches and inserts
 * new strings in the dictionary only for unmatched strings or for short
 * matches. It is used only for the fast compression options.
 */
function deflate_fast$1(s, flush) {
  var hash_head; /* head of the hash chain */
  var bflush; /* set if current block must be flushed */

  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the next match, plus MIN_MATCH bytes to insert the
     * string following the next match.
     */
    if (s.lookahead < MIN_LOOKAHEAD$1) {
      fill_window$1(s);
      if (s.lookahead < MIN_LOOKAHEAD$1 && flush === Z_NO_FLUSH$1$1) {
        return BS_NEED_MORE$1;
      }
      if (s.lookahead === 0) {
        break; /* flush the current block */
      }
    }

    /* Insert the string window[strstart .. strstart+2] in the
     * dictionary, and set hash_head to the head of the hash chain:
     */
    hash_head = 0 /*NIL*/;
    if (s.lookahead >= MIN_MATCH$2) {
      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
      s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + MIN_MATCH$2 - 1]) & s.hash_mask;
      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
      s.head[s.ins_h] = s.strstart;
      /***/
    }

    /* Find the longest match, discarding those <= prev_length.
     * At this point we have always match_length < MIN_MATCH
     */
    if (hash_head !== 0 /*NIL*/ && s.strstart - hash_head <= s.w_size - MIN_LOOKAHEAD$1) {
      /* To simplify the code, we prevent matches with the string
       * of window index 0 (in particular we have to avoid a match
       * of the string with itself at the start of the input file).
       */
      s.match_length = longest_match$1(s, hash_head);
      /* longest_match() sets match_start */
    }
    if (s.match_length >= MIN_MATCH$2) {
      // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only

      /*** _tr_tally_dist(s, s.strstart - s.match_start,
                     s.match_length - MIN_MATCH, bflush); ***/
      bflush = trees$3._tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH$2);

      s.lookahead -= s.match_length;

      /* Insert new strings in the hash table only if the match length
       * is not too large. This saves time but degrades compression.
       */
      if (s.match_length <= s.max_lazy_match /*max_insert_length*/ && s.lookahead >= MIN_MATCH$2) {
        s.match_length--; /* string at strstart already in table */
        do {
          s.strstart++;
          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
          s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + MIN_MATCH$2 - 1]) & s.hash_mask;
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
          /***/
          /* strstart never exceeds WSIZE-MAX_MATCH, so there are
           * always MIN_MATCH bytes ahead.
           */
        } while (--s.match_length !== 0);
        s.strstart++;
      } else {
        s.strstart += s.match_length;
        s.match_length = 0;
        s.ins_h = s.window[s.strstart];
        /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */
        s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + 1]) & s.hash_mask;

        //#if MIN_MATCH != 3
        //                Call UPDATE_HASH() MIN_MATCH-3 more times
        //#endif
        /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not
         * matter since it will be recomputed at next deflate call.
         */
      }
    } else {
      /* No match, output a literal byte */
      //Tracevv((stderr,"%c", s.window[s.strstart]));
      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
      bflush = trees$3._tr_tally(s, 0, s.window[s.strstart]);

      s.lookahead--;
      s.strstart++;
    }
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only$1(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE$1;
      }
      /***/
    }
  }
  s.insert = s.strstart < MIN_MATCH$2 - 1 ? s.strstart : MIN_MATCH$2 - 1;
  if (flush === Z_FINISH$1$1) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only$1(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED$1;
    }
    /***/
    return BS_FINISH_DONE$1;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only$1(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE$1;
    }
    /***/
  }
  return BS_BLOCK_DONE$1;
}

/* ===========================================================================
 * Same as above, but achieves better compression. We use a lazy
 * evaluation for matches: a match is finally adopted only if there is
 * no better match at the next window position.
 */
function deflate_slow$1(s, flush) {
  var hash_head; /* head of hash chain */
  var bflush; /* set if current block must be flushed */

  var max_insert;

  /* Process the input block. */
  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the next match, plus MIN_MATCH bytes to insert the
     * string following the next match.
     */
    if (s.lookahead < MIN_LOOKAHEAD$1) {
      fill_window$1(s);
      if (s.lookahead < MIN_LOOKAHEAD$1 && flush === Z_NO_FLUSH$1$1) {
        return BS_NEED_MORE$1;
      }
      if (s.lookahead === 0) {
        break;
      } /* flush the current block */
    }

    /* Insert the string window[strstart .. strstart+2] in the
     * dictionary, and set hash_head to the head of the hash chain:
     */
    hash_head = 0 /*NIL*/;
    if (s.lookahead >= MIN_MATCH$2) {
      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
      s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + MIN_MATCH$2 - 1]) & s.hash_mask;
      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
      s.head[s.ins_h] = s.strstart;
      /***/
    }

    /* Find the longest match, discarding those <= prev_length.
     */
    s.prev_length = s.match_length;
    s.prev_match = s.match_start;
    s.match_length = MIN_MATCH$2 - 1;

    if (hash_head !== 0 /*NIL*/ && s.prev_length < s.max_lazy_match && s.strstart - hash_head <= s.w_size - MIN_LOOKAHEAD$1 /*MAX_DIST(s)*/) {
        /* To simplify the code, we prevent matches with the string
         * of window index 0 (in particular we have to avoid a match
         * of the string with itself at the start of the input file).
         */
        s.match_length = longest_match$1(s, hash_head);
        /* longest_match() sets match_start */

        if (s.match_length <= 5 && (s.strategy === Z_FILTERED$1 || s.match_length === MIN_MATCH$2 && s.strstart - s.match_start > 4096 /*TOO_FAR*/)) {

          /* If prev_match is also MIN_MATCH, match_start is garbage
           * but we will ignore the current match anyway.
           */
          s.match_length = MIN_MATCH$2 - 1;
        }
      }
    /* If there was a match at the previous step and the current
     * match is not better, output the previous match:
     */
    if (s.prev_length >= MIN_MATCH$2 && s.match_length <= s.prev_length) {
      max_insert = s.strstart + s.lookahead - MIN_MATCH$2;
      /* Do not insert strings in hash table beyond this. */

      //check_match(s, s.strstart-1, s.prev_match, s.prev_length);

      /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,
                     s.prev_length - MIN_MATCH, bflush);***/
      bflush = trees$3._tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH$2);
      /* Insert in hash table all strings up to the end of the match.
       * strstart-1 and strstart are already inserted. If there is not
       * enough lookahead, the last two strings are not inserted in
       * the hash table.
       */
      s.lookahead -= s.prev_length - 1;
      s.prev_length -= 2;
      do {
        if (++s.strstart <= max_insert) {
          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
          s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + MIN_MATCH$2 - 1]) & s.hash_mask;
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
          /***/
        }
      } while (--s.prev_length !== 0);
      s.match_available = 0;
      s.match_length = MIN_MATCH$2 - 1;
      s.strstart++;

      if (bflush) {
        /*** FLUSH_BLOCK(s, 0); ***/
        flush_block_only$1(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE$1;
        }
        /***/
      }
    } else if (s.match_available) {
      /* If there was no match at the previous position, output a
       * single literal. If there was a match but the current match
       * is longer, truncate the previous match to a single literal.
       */
      //Tracevv((stderr,"%c", s->window[s->strstart-1]));
      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
      bflush = trees$3._tr_tally(s, 0, s.window[s.strstart - 1]);

      if (bflush) {
        /*** FLUSH_BLOCK_ONLY(s, 0) ***/
        flush_block_only$1(s, false);
        /***/
      }
      s.strstart++;
      s.lookahead--;
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE$1;
      }
    } else {
      /* There is no previous match to compare with, wait for
       * the next step to decide.
       */
      s.match_available = 1;
      s.strstart++;
      s.lookahead--;
    }
  }
  //Assert (flush != Z_NO_FLUSH, "no flush?");
  if (s.match_available) {
    //Tracevv((stderr,"%c", s->window[s->strstart-1]));
    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
    bflush = trees$3._tr_tally(s, 0, s.window[s.strstart - 1]);

    s.match_available = 0;
  }
  s.insert = s.strstart < MIN_MATCH$2 - 1 ? s.strstart : MIN_MATCH$2 - 1;
  if (flush === Z_FINISH$1$1) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only$1(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED$1;
    }
    /***/
    return BS_FINISH_DONE$1;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only$1(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE$1;
    }
    /***/
  }

  return BS_BLOCK_DONE$1;
}

/* ===========================================================================
 * For Z_RLE, simply look for runs of bytes, generate matches only of distance
 * one.  Do not maintain a hash table.  (It will be regenerated if this run of
 * deflate switches away from Z_RLE.)
 */
function deflate_rle$1(s, flush) {
  var bflush; /* set if current block must be flushed */
  var prev; /* byte at distance one to match */
  var scan, strend; /* scan goes up to strend for length of run */

  var _win = s.window;

  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the longest run, plus one for the unrolled loop.
     */
    if (s.lookahead <= MAX_MATCH$2) {
      fill_window$1(s);
      if (s.lookahead <= MAX_MATCH$2 && flush === Z_NO_FLUSH$1$1) {
        return BS_NEED_MORE$1;
      }
      if (s.lookahead === 0) {
        break;
      } /* flush the current block */
    }

    /* See how many times the previous byte repeats */
    s.match_length = 0;
    if (s.lookahead >= MIN_MATCH$2 && s.strstart > 0) {
      scan = s.strstart - 1;
      prev = _win[scan];
      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {
        strend = s.strstart + MAX_MATCH$2;
        do {
          /*jshint noempty:false*/
        } while (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && scan < strend);
        s.match_length = MAX_MATCH$2 - (strend - scan);
        if (s.match_length > s.lookahead) {
          s.match_length = s.lookahead;
        }
      }
      //Assert(scan <= s->window+(uInt)(s->window_size-1), "wild scan");
    }

    /* Emit match if have run of MIN_MATCH or longer, else emit literal */
    if (s.match_length >= MIN_MATCH$2) {
      //check_match(s, s.strstart, s.strstart - 1, s.match_length);

      /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/
      bflush = trees$3._tr_tally(s, 1, s.match_length - MIN_MATCH$2);

      s.lookahead -= s.match_length;
      s.strstart += s.match_length;
      s.match_length = 0;
    } else {
      /* No match, output a literal byte */
      //Tracevv((stderr,"%c", s->window[s->strstart]));
      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
      bflush = trees$3._tr_tally(s, 0, s.window[s.strstart]);

      s.lookahead--;
      s.strstart++;
    }
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only$1(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE$1;
      }
      /***/
    }
  }
  s.insert = 0;
  if (flush === Z_FINISH$1$1) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only$1(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED$1;
    }
    /***/
    return BS_FINISH_DONE$1;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only$1(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE$1;
    }
    /***/
  }
  return BS_BLOCK_DONE$1;
}

/* ===========================================================================
 * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.
 * (It will be regenerated if this run of deflate switches away from Huffman.)
 */
function deflate_huff$1(s, flush) {
  var bflush; /* set if current block must be flushed */

  for (;;) {
    /* Make sure that we have a literal to write. */
    if (s.lookahead === 0) {
      fill_window$1(s);
      if (s.lookahead === 0) {
        if (flush === Z_NO_FLUSH$1$1) {
          return BS_NEED_MORE$1;
        }
        break; /* flush the current block */
      }
    }

    /* Output a literal byte */
    s.match_length = 0;
    //Tracevv((stderr,"%c", s->window[s->strstart]));
    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
    bflush = trees$3._tr_tally(s, 0, s.window[s.strstart]);
    s.lookahead--;
    s.strstart++;
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only$1(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE$1;
      }
      /***/
    }
  }
  s.insert = 0;
  if (flush === Z_FINISH$1$1) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only$1(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED$1;
    }
    /***/
    return BS_FINISH_DONE$1;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only$1(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE$1;
    }
    /***/
  }
  return BS_BLOCK_DONE$1;
}

/* Values for max_lazy_match, good_match and max_chain_length, depending on
 * the desired pack level (0..9). The values given below have been tuned to
 * exclude worst case performance for pathological files. Better values may be
 * found for specific files.
 */
function Config$1(good_length, max_lazy, nice_length, max_chain, func) {
  this.good_length = good_length;
  this.max_lazy = max_lazy;
  this.nice_length = nice_length;
  this.max_chain = max_chain;
  this.func = func;
}

var configuration_table$1;

configuration_table$1 = [
/*      good lazy nice chain */
new Config$1(0, 0, 0, 0, deflate_stored$1), /* 0 store only */
new Config$1(4, 4, 8, 4, deflate_fast$1), /* 1 max speed, no lazy matches */
new Config$1(4, 5, 16, 8, deflate_fast$1), /* 2 */
new Config$1(4, 6, 32, 32, deflate_fast$1), /* 3 */

new Config$1(4, 4, 16, 16, deflate_slow$1), /* 4 lazy matches */
new Config$1(8, 16, 32, 32, deflate_slow$1), /* 5 */
new Config$1(8, 16, 128, 128, deflate_slow$1), /* 6 */
new Config$1(8, 32, 128, 256, deflate_slow$1), /* 7 */
new Config$1(32, 128, 258, 1024, deflate_slow$1), /* 8 */
new Config$1(32, 258, 258, 4096, deflate_slow$1) /* 9 max compression */
];

/* ===========================================================================
 * Initialize the "longest match" routines for a new zlib stream
 */
function lm_init$1(s) {
  s.window_size = 2 * s.w_size;

  /*** CLEAR_HASH(s); ***/
  zero$2(s.head); // Fill with NIL (= 0);

  /* Set the default configuration parameters:
   */
  s.max_lazy_match = configuration_table$1[s.level].max_lazy;
  s.good_match = configuration_table$1[s.level].good_length;
  s.nice_match = configuration_table$1[s.level].nice_length;
  s.max_chain_length = configuration_table$1[s.level].max_chain;

  s.strstart = 0;
  s.block_start = 0;
  s.lookahead = 0;
  s.insert = 0;
  s.match_length = s.prev_length = MIN_MATCH$2 - 1;
  s.match_available = 0;
  s.ins_h = 0;
}

function DeflateState$1() {
  this.strm = null; /* pointer back to this zlib stream */
  this.status = 0; /* as the name implies */
  this.pending_buf = null; /* output still pending */
  this.pending_buf_size = 0; /* size of pending_buf */
  this.pending_out = 0; /* next pending byte to output to the stream */
  this.pending = 0; /* nb of bytes in the pending buffer */
  this.wrap = 0; /* bit 0 true for zlib, bit 1 true for gzip */
  this.gzhead = null; /* gzip header information to write */
  this.gzindex = 0; /* where in extra, name, or comment */
  this.method = Z_DEFLATED$1$1; /* can only be DEFLATED */
  this.last_flush = -1; /* value of flush param for previous deflate call */

  this.w_size = 0; /* LZ77 window size (32K by default) */
  this.w_bits = 0; /* log2(w_size)  (8..16) */
  this.w_mask = 0; /* w_size - 1 */

  this.window = null;
  /* Sliding window. Input bytes are read into the second half of the window,
   * and move to the first half later to keep a dictionary of at least wSize
   * bytes. With this organization, matches are limited to a distance of
   * wSize-MAX_MATCH bytes, but this ensures that IO is always
   * performed with a length multiple of the block size.
   */

  this.window_size = 0;
  /* Actual size of window: 2*wSize, except when the user input buffer
   * is directly used as sliding window.
   */

  this.prev = null;
  /* Link to older string with same hash index. To limit the size of this
   * array to 64K, this link is maintained only for the last 32K strings.
   * An index in this array is thus a window index modulo 32K.
   */

  this.head = null; /* Heads of the hash chains or NIL. */

  this.ins_h = 0; /* hash index of string to be inserted */
  this.hash_size = 0; /* number of elements in hash table */
  this.hash_bits = 0; /* log2(hash_size) */
  this.hash_mask = 0; /* hash_size-1 */

  this.hash_shift = 0;
  /* Number of bits by which ins_h must be shifted at each input
   * step. It must be such that after MIN_MATCH steps, the oldest
   * byte no longer takes part in the hash key, that is:
   *   hash_shift * MIN_MATCH >= hash_bits
   */

  this.block_start = 0;
  /* Window position at the beginning of the current output block. Gets
   * negative when the window is moved backwards.
   */

  this.match_length = 0; /* length of best match */
  this.prev_match = 0; /* previous match */
  this.match_available = 0; /* set if previous match exists */
  this.strstart = 0; /* start of string to insert */
  this.match_start = 0; /* start of matching string */
  this.lookahead = 0; /* number of valid bytes ahead in window */

  this.prev_length = 0;
  /* Length of the best match at previous step. Matches not greater than this
   * are discarded. This is used in the lazy match evaluation.
   */

  this.max_chain_length = 0;
  /* To speed up deflation, hash chains are never searched beyond this
   * length.  A higher limit improves compression ratio but degrades the
   * speed.
   */

  this.max_lazy_match = 0;
  /* Attempt to find a better match only when the current match is strictly
   * smaller than this value. This mechanism is used only for compression
   * levels >= 4.
   */
  // That's alias to max_lazy_match, don't use directly
  //this.max_insert_length = 0;
  /* Insert new strings in the hash table only if the match length is not
   * greater than this length. This saves time but degrades compression.
   * max_insert_length is used only for compression levels <= 3.
   */

  this.level = 0; /* compression level (1..9) */
  this.strategy = 0; /* favor or force Huffman coding*/

  this.good_match = 0;
  /* Use a faster search when the previous match is longer than this */

  this.nice_match = 0; /* Stop searching when current match exceeds this */

  /* used by trees.c: */

  /* Didn't use ct_data typedef below to suppress compiler warning */

  // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */
  // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */
  // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */

  // Use flat array of DOUBLE size, with interleaved fata,
  // because JS does not support effective
  this.dyn_ltree = new common$2.Buf16(HEAP_SIZE$2 * 2);
  this.dyn_dtree = new common$2.Buf16((2 * D_CODES$2 + 1) * 2);
  this.bl_tree = new common$2.Buf16((2 * BL_CODES$2 + 1) * 2);
  zero$2(this.dyn_ltree);
  zero$2(this.dyn_dtree);
  zero$2(this.bl_tree);

  this.l_desc = null; /* desc. for literal tree */
  this.d_desc = null; /* desc. for distance tree */
  this.bl_desc = null; /* desc. for bit length tree */

  //ush bl_count[MAX_BITS+1];
  this.bl_count = new common$2.Buf16(MAX_BITS$3 + 1);
  /* number of codes at each bit length for an optimal tree */

  //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */
  this.heap = new common$2.Buf16(2 * L_CODES$2 + 1); /* heap used to build the Huffman trees */
  zero$2(this.heap);

  this.heap_len = 0; /* number of elements in the heap */
  this.heap_max = 0; /* element of largest frequency */
  /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.
   * The same heap array is used to build all trees.
   */

  this.depth = new common$2.Buf16(2 * L_CODES$2 + 1); //uch depth[2*L_CODES+1];
  zero$2(this.depth);
  /* Depth of each subtree used as tie breaker for trees of equal frequency
   */

  this.l_buf = 0; /* buffer index for literals or lengths */

  this.lit_bufsize = 0;
  /* Size of match buffer for literals/lengths.  There are 4 reasons for
   * limiting lit_bufsize to 64K:
   *   - frequencies can be kept in 16 bit counters
   *   - if compression is not successful for the first block, all input
   *     data is still in the window so we can still emit a stored block even
   *     when input comes from standard input.  (This can also be done for
   *     all blocks if lit_bufsize is not greater than 32K.)
   *   - if compression is not successful for a file smaller than 64K, we can
   *     even emit a stored file instead of a stored block (saving 5 bytes).
   *     This is applicable only for zip (not gzip or zlib).
   *   - creating new Huffman trees less frequently may not provide fast
   *     adaptation to changes in the input data statistics. (Take for
   *     example a binary file with poorly compressible code followed by
   *     a highly compressible string table.) Smaller buffer sizes give
   *     fast adaptation but have of course the overhead of transmitting
   *     trees more frequently.
   *   - I can't count above 4
   */

  this.last_lit = 0; /* running index in l_buf */

  this.d_buf = 0;
  /* Buffer index for distances. To simplify the code, d_buf and l_buf have
   * the same number of elements. To use different lengths, an extra flag
   * array would be necessary.
   */

  this.opt_len = 0; /* bit length of current block with optimal trees */
  this.static_len = 0; /* bit length of current block with static trees */
  this.matches = 0; /* number of string matches in current block */
  this.insert = 0; /* bytes at end of window left to insert */

  this.bi_buf = 0;
  /* Output buffer. bits are inserted starting at the bottom (least
   * significant bits).
   */
  this.bi_valid = 0;
  /* Number of valid bits in bi_buf.  All bits above the last valid bit
   * are always zero.
   */

  // Used for window memory init. We safely ignore it for JS. That makes
  // sense only for pointers and memory check tools.
  //this.high_water = 0;
  /* High water mark offset in window for initialized bytes -- bytes above
   * this are set to zero in order to avoid memory check warnings when
   * longest match routines access bytes past the input.  This is then
   * updated to the new high water mark.
   */
}

function deflateResetKeep$1(strm) {
  var s;

  if (!strm || !strm.state) {
    return err$1(strm, Z_STREAM_ERROR$2);
  }

  strm.total_in = strm.total_out = 0;
  strm.data_type = Z_UNKNOWN$2;

  s = strm.state;
  s.pending = 0;
  s.pending_out = 0;

  if (s.wrap < 0) {
    s.wrap = -s.wrap;
    /* was made negative by deflate(..., Z_FINISH); */
  }
  s.status = s.wrap ? INIT_STATE$1 : BUSY_STATE$1;
  strm.adler = s.wrap === 2 ? 0 // crc32(0, Z_NULL, 0)
  : 1; // adler32(0, Z_NULL, 0)
  s.last_flush = Z_NO_FLUSH$1$1;
  trees$3._tr_init(s);
  return Z_OK$1$1;
}

function deflateReset$1(strm) {
  var ret = deflateResetKeep$1(strm);
  if (ret === Z_OK$1$1) {
    lm_init$1(strm.state);
  }
  return ret;
}

function deflateSetHeader$1(strm, head) {
  if (!strm || !strm.state) {
    return Z_STREAM_ERROR$2;
  }
  if (strm.state.wrap !== 2) {
    return Z_STREAM_ERROR$2;
  }
  strm.state.gzhead = head;
  return Z_OK$1$1;
}

function deflateInit2$1(strm, level, method, windowBits, memLevel, strategy) {
  if (!strm) {
    // === Z_NULL
    return Z_STREAM_ERROR$2;
  }
  var wrap = 1;

  if (level === Z_DEFAULT_COMPRESSION$1$1) {
    level = 6;
  }

  if (windowBits < 0) {
    /* suppress zlib wrapper */
    wrap = 0;
    windowBits = -windowBits;
  } else if (windowBits > 15) {
    wrap = 2; /* write gzip wrapper instead */
    windowBits -= 16;
  }

  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL$1 || method !== Z_DEFLATED$1$1 || windowBits < 8 || windowBits > 15 || level < 0 || level > 9 || strategy < 0 || strategy > Z_FIXED$2) {
    return err$1(strm, Z_STREAM_ERROR$2);
  }

  if (windowBits === 8) {
    windowBits = 9;
  }
  /* until 256-byte window bug fixed */

  var s = new DeflateState$1();

  strm.state = s;
  s.strm = strm;

  s.wrap = wrap;
  s.gzhead = null;
  s.w_bits = windowBits;
  s.w_size = 1 << s.w_bits;
  s.w_mask = s.w_size - 1;

  s.hash_bits = memLevel + 7;
  s.hash_size = 1 << s.hash_bits;
  s.hash_mask = s.hash_size - 1;
  s.hash_shift = ~~((s.hash_bits + MIN_MATCH$2 - 1) / MIN_MATCH$2);

  s.window = new common$2.Buf8(s.w_size * 2);
  s.head = new common$2.Buf16(s.hash_size);
  s.prev = new common$2.Buf16(s.w_size);

  // Don't need mem init magic for JS.
  //s.high_water = 0;  /* nothing written to s->window yet */

  s.lit_bufsize = 1 << memLevel + 6; /* 16K elements by default */

  s.pending_buf_size = s.lit_bufsize * 4;

  //overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);
  //s->pending_buf = (uchf *) overlay;
  s.pending_buf = new common$2.Buf8(s.pending_buf_size);

  // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)
  //s->d_buf = overlay + s->lit_bufsize/sizeof(ush);
  s.d_buf = 1 * s.lit_bufsize;

  //s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;
  s.l_buf = (1 + 2) * s.lit_bufsize;

  s.level = level;
  s.strategy = strategy;
  s.method = method;

  return deflateReset$1(strm);
}

function deflateInit$1(strm, level) {
  return deflateInit2$1(strm, level, Z_DEFLATED$1$1, MAX_WBITS$2, DEF_MEM_LEVEL$1, Z_DEFAULT_STRATEGY$1$1);
}

function deflate$1$1(strm, flush) {
  var old_flush, s;
  var beg, val; // for gzip header write only

  if (!strm || !strm.state || flush > Z_BLOCK$2 || flush < 0) {
    return strm ? err$1(strm, Z_STREAM_ERROR$2) : Z_STREAM_ERROR$2;
  }

  s = strm.state;

  if (!strm.output || !strm.input && strm.avail_in !== 0 || s.status === FINISH_STATE$1 && flush !== Z_FINISH$1$1) {
    return err$1(strm, strm.avail_out === 0 ? Z_BUF_ERROR$2 : Z_STREAM_ERROR$2);
  }

  s.strm = strm; /* just in case */
  old_flush = s.last_flush;
  s.last_flush = flush;

  /* Write the header */
  if (s.status === INIT_STATE$1) {

    if (s.wrap === 2) {
      // GZIP header
      strm.adler = 0; //crc32(0L, Z_NULL, 0);
      put_byte$1(s, 31);
      put_byte$1(s, 139);
      put_byte$1(s, 8);
      if (!s.gzhead) {
        // s->gzhead == Z_NULL
        put_byte$1(s, 0);
        put_byte$1(s, 0);
        put_byte$1(s, 0);
        put_byte$1(s, 0);
        put_byte$1(s, 0);
        put_byte$1(s, s.level === 9 ? 2 : s.strategy >= Z_HUFFMAN_ONLY$1 || s.level < 2 ? 4 : 0);
        put_byte$1(s, OS_CODE$1);
        s.status = BUSY_STATE$1;
      } else {
        put_byte$1(s, (s.gzhead.text ? 1 : 0) + (s.gzhead.hcrc ? 2 : 0) + (!s.gzhead.extra ? 0 : 4) + (!s.gzhead.name ? 0 : 8) + (!s.gzhead.comment ? 0 : 16));
        put_byte$1(s, s.gzhead.time & 0xff);
        put_byte$1(s, s.gzhead.time >> 8 & 0xff);
        put_byte$1(s, s.gzhead.time >> 16 & 0xff);
        put_byte$1(s, s.gzhead.time >> 24 & 0xff);
        put_byte$1(s, s.level === 9 ? 2 : s.strategy >= Z_HUFFMAN_ONLY$1 || s.level < 2 ? 4 : 0);
        put_byte$1(s, s.gzhead.os & 0xff);
        if (s.gzhead.extra && s.gzhead.extra.length) {
          put_byte$1(s, s.gzhead.extra.length & 0xff);
          put_byte$1(s, s.gzhead.extra.length >> 8 & 0xff);
        }
        if (s.gzhead.hcrc) {
          strm.adler = crc32_1$2(strm.adler, s.pending_buf, s.pending, 0);
        }
        s.gzindex = 0;
        s.status = EXTRA_STATE$1;
      }
    } else // DEFLATE header
      {
        var header = Z_DEFLATED$1$1 + (s.w_bits - 8 << 4) << 8;
        var level_flags = -1;

        if (s.strategy >= Z_HUFFMAN_ONLY$1 || s.level < 2) {
          level_flags = 0;
        } else if (s.level < 6) {
          level_flags = 1;
        } else if (s.level === 6) {
          level_flags = 2;
        } else {
          level_flags = 3;
        }
        header |= level_flags << 6;
        if (s.strstart !== 0) {
          header |= PRESET_DICT$1;
        }
        header += 31 - header % 31;

        s.status = BUSY_STATE$1;
        putShortMSB$1(s, header);

        /* Save the adler32 of the preset dictionary: */
        if (s.strstart !== 0) {
          putShortMSB$1(s, strm.adler >>> 16);
          putShortMSB$1(s, strm.adler & 0xffff);
        }
        strm.adler = 1; // adler32(0L, Z_NULL, 0);
      }
  }

  //#ifdef GZIP
  if (s.status === EXTRA_STATE$1) {
    if (s.gzhead.extra /* != Z_NULL*/) {
        beg = s.pending; /* start of bytes to update crc */

        while (s.gzindex < (s.gzhead.extra.length & 0xffff)) {
          if (s.pending === s.pending_buf_size) {
            if (s.gzhead.hcrc && s.pending > beg) {
              strm.adler = crc32_1$2(strm.adler, s.pending_buf, s.pending - beg, beg);
            }
            flush_pending$1(strm);
            beg = s.pending;
            if (s.pending === s.pending_buf_size) {
              break;
            }
          }
          put_byte$1(s, s.gzhead.extra[s.gzindex] & 0xff);
          s.gzindex++;
        }
        if (s.gzhead.hcrc && s.pending > beg) {
          strm.adler = crc32_1$2(strm.adler, s.pending_buf, s.pending - beg, beg);
        }
        if (s.gzindex === s.gzhead.extra.length) {
          s.gzindex = 0;
          s.status = NAME_STATE$1;
        }
      } else {
      s.status = NAME_STATE$1;
    }
  }
  if (s.status === NAME_STATE$1) {
    if (s.gzhead.name /* != Z_NULL*/) {
        beg = s.pending; /* start of bytes to update crc */
        //int val;

        do {
          if (s.pending === s.pending_buf_size) {
            if (s.gzhead.hcrc && s.pending > beg) {
              strm.adler = crc32_1$2(strm.adler, s.pending_buf, s.pending - beg, beg);
            }
            flush_pending$1(strm);
            beg = s.pending;
            if (s.pending === s.pending_buf_size) {
              val = 1;
              break;
            }
          }
          // JS specific: little magic to add zero terminator to end of string
          if (s.gzindex < s.gzhead.name.length) {
            val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;
          } else {
            val = 0;
          }
          put_byte$1(s, val);
        } while (val !== 0);

        if (s.gzhead.hcrc && s.pending > beg) {
          strm.adler = crc32_1$2(strm.adler, s.pending_buf, s.pending - beg, beg);
        }
        if (val === 0) {
          s.gzindex = 0;
          s.status = COMMENT_STATE$1;
        }
      } else {
      s.status = COMMENT_STATE$1;
    }
  }
  if (s.status === COMMENT_STATE$1) {
    if (s.gzhead.comment /* != Z_NULL*/) {
        beg = s.pending; /* start of bytes to update crc */
        //int val;

        do {
          if (s.pending === s.pending_buf_size) {
            if (s.gzhead.hcrc && s.pending > beg) {
              strm.adler = crc32_1$2(strm.adler, s.pending_buf, s.pending - beg, beg);
            }
            flush_pending$1(strm);
            beg = s.pending;
            if (s.pending === s.pending_buf_size) {
              val = 1;
              break;
            }
          }
          // JS specific: little magic to add zero terminator to end of string
          if (s.gzindex < s.gzhead.comment.length) {
            val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;
          } else {
            val = 0;
          }
          put_byte$1(s, val);
        } while (val !== 0);

        if (s.gzhead.hcrc && s.pending > beg) {
          strm.adler = crc32_1$2(strm.adler, s.pending_buf, s.pending - beg, beg);
        }
        if (val === 0) {
          s.status = HCRC_STATE$1;
        }
      } else {
      s.status = HCRC_STATE$1;
    }
  }
  if (s.status === HCRC_STATE$1) {
    if (s.gzhead.hcrc) {
      if (s.pending + 2 > s.pending_buf_size) {
        flush_pending$1(strm);
      }
      if (s.pending + 2 <= s.pending_buf_size) {
        put_byte$1(s, strm.adler & 0xff);
        put_byte$1(s, strm.adler >> 8 & 0xff);
        strm.adler = 0; //crc32(0L, Z_NULL, 0);
        s.status = BUSY_STATE$1;
      }
    } else {
      s.status = BUSY_STATE$1;
    }
  }
  //#endif

  /* Flush as much pending output as possible */
  if (s.pending !== 0) {
    flush_pending$1(strm);
    if (strm.avail_out === 0) {
      /* Since avail_out is 0, deflate will be called again with
       * more output space, but possibly with both pending and
       * avail_in equal to zero. There won't be anything to do,
       * but this is not an error situation so make sure we
       * return OK instead of BUF_ERROR at next call of deflate:
       */
      s.last_flush = -1;
      return Z_OK$1$1;
    }

    /* Make sure there is something to do and avoid duplicate consecutive
     * flushes. For repeated and useless calls with Z_FINISH, we keep
     * returning Z_STREAM_END instead of Z_BUF_ERROR.
     */
  } else if (strm.avail_in === 0 && rank$1(flush) <= rank$1(old_flush) && flush !== Z_FINISH$1$1) {
    return err$1(strm, Z_BUF_ERROR$2);
  }

  /* User must not provide more input after the first FINISH: */
  if (s.status === FINISH_STATE$1 && strm.avail_in !== 0) {
    return err$1(strm, Z_BUF_ERROR$2);
  }

  /* Start a new block or continue the current one.
   */
  if (strm.avail_in !== 0 || s.lookahead !== 0 || flush !== Z_NO_FLUSH$1$1 && s.status !== FINISH_STATE$1) {
    var bstate = s.strategy === Z_HUFFMAN_ONLY$1 ? deflate_huff$1(s, flush) : s.strategy === Z_RLE$1 ? deflate_rle$1(s, flush) : configuration_table$1[s.level].func(s, flush);

    if (bstate === BS_FINISH_STARTED$1 || bstate === BS_FINISH_DONE$1) {
      s.status = FINISH_STATE$1;
    }
    if (bstate === BS_NEED_MORE$1 || bstate === BS_FINISH_STARTED$1) {
      if (strm.avail_out === 0) {
        s.last_flush = -1;
        /* avoid BUF_ERROR next call, see above */
      }
      return Z_OK$1$1;
      /* If flush != Z_NO_FLUSH && avail_out == 0, the next call
       * of deflate should use the same flush parameter to make sure
       * that the flush is complete. So we don't have to output an
       * empty block here, this will be done at next call. This also
       * ensures that for a very small output buffer, we emit at most
       * one empty block.
       */
    }
    if (bstate === BS_BLOCK_DONE$1) {
      if (flush === Z_PARTIAL_FLUSH$1) {
        trees$3._tr_align(s);
      } else if (flush !== Z_BLOCK$2) {
        /* FULL_FLUSH or SYNC_FLUSH */

        trees$3._tr_stored_block(s, 0, 0, false);
        /* For a full flush, this empty block will be recognized
         * as a special marker by inflate_sync().
         */
        if (flush === Z_FULL_FLUSH$1) {
          /*** CLEAR_HASH(s); ***/ /* forget history */
          zero$2(s.head); // Fill with NIL (= 0);

          if (s.lookahead === 0) {
            s.strstart = 0;
            s.block_start = 0;
            s.insert = 0;
          }
        }
      }
      flush_pending$1(strm);
      if (strm.avail_out === 0) {
        s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */
        return Z_OK$1$1;
      }
    }
  }
  //Assert(strm->avail_out > 0, "bug2");
  //if (strm.avail_out <= 0) { throw new Error("bug2");}

  if (flush !== Z_FINISH$1$1) {
    return Z_OK$1$1;
  }
  if (s.wrap <= 0) {
    return Z_STREAM_END$1$1;
  }

  /* Write the trailer */
  if (s.wrap === 2) {
    put_byte$1(s, strm.adler & 0xff);
    put_byte$1(s, strm.adler >> 8 & 0xff);
    put_byte$1(s, strm.adler >> 16 & 0xff);
    put_byte$1(s, strm.adler >> 24 & 0xff);
    put_byte$1(s, strm.total_in & 0xff);
    put_byte$1(s, strm.total_in >> 8 & 0xff);
    put_byte$1(s, strm.total_in >> 16 & 0xff);
    put_byte$1(s, strm.total_in >> 24 & 0xff);
  } else {
    putShortMSB$1(s, strm.adler >>> 16);
    putShortMSB$1(s, strm.adler & 0xffff);
  }

  flush_pending$1(strm);
  /* If avail_out is zero, the application will call deflate again
   * to flush the rest.
   */
  if (s.wrap > 0) {
    s.wrap = -s.wrap;
  }
  /* write the trailer only once! */
  return s.pending !== 0 ? Z_OK$1$1 : Z_STREAM_END$1$1;
}

function deflateEnd$1(strm) {
  var status;

  if (!strm /*== Z_NULL*/ || !strm.state /*== Z_NULL*/) {
      return Z_STREAM_ERROR$2;
    }

  status = strm.state.status;
  if (status !== INIT_STATE$1 && status !== EXTRA_STATE$1 && status !== NAME_STATE$1 && status !== COMMENT_STATE$1 && status !== HCRC_STATE$1 && status !== BUSY_STATE$1 && status !== FINISH_STATE$1) {
    return err$1(strm, Z_STREAM_ERROR$2);
  }

  strm.state = null;

  return status === BUSY_STATE$1 ? err$1(strm, Z_DATA_ERROR$2) : Z_OK$1$1;
}

/* =========================================================================
 * Initializes the compression dictionary from the given byte
 * sequence without producing any compressed output.
 */
function deflateSetDictionary$1(strm, dictionary) {
  var dictLength = dictionary.length;

  var s;
  var str, n;
  var wrap;
  var avail;
  var next;
  var input;
  var tmpDict;

  if (!strm /*== Z_NULL*/ || !strm.state /*== Z_NULL*/) {
      return Z_STREAM_ERROR$2;
    }

  s = strm.state;
  wrap = s.wrap;

  if (wrap === 2 || wrap === 1 && s.status !== INIT_STATE$1 || s.lookahead) {
    return Z_STREAM_ERROR$2;
  }

  /* when using zlib wrappers, compute Adler-32 for provided dictionary */
  if (wrap === 1) {
    /* adler32(strm->adler, dictionary, dictLength); */
    strm.adler = adler32_1$2(strm.adler, dictionary, dictLength, 0);
  }

  s.wrap = 0; /* avoid computing Adler-32 in read_buf */

  /* if dictionary would fill window, just replace the history */
  if (dictLength >= s.w_size) {
    if (wrap === 0) {
      /* already empty otherwise */
      /*** CLEAR_HASH(s); ***/
      zero$2(s.head); // Fill with NIL (= 0);
      s.strstart = 0;
      s.block_start = 0;
      s.insert = 0;
    }
    /* use the tail */
    // dictionary = dictionary.slice(dictLength - s.w_size);
    tmpDict = new common$2.Buf8(s.w_size);
    common$2.arraySet(tmpDict, dictionary, dictLength - s.w_size, s.w_size, 0);
    dictionary = tmpDict;
    dictLength = s.w_size;
  }
  /* insert dictionary into window and hash */
  avail = strm.avail_in;
  next = strm.next_in;
  input = strm.input;
  strm.avail_in = dictLength;
  strm.next_in = 0;
  strm.input = dictionary;
  fill_window$1(s);
  while (s.lookahead >= MIN_MATCH$2) {
    str = s.strstart;
    n = s.lookahead - (MIN_MATCH$2 - 1);
    do {
      /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
      s.ins_h = (s.ins_h << s.hash_shift ^ s.window[str + MIN_MATCH$2 - 1]) & s.hash_mask;

      s.prev[str & s.w_mask] = s.head[s.ins_h];

      s.head[s.ins_h] = str;
      str++;
    } while (--n);
    s.strstart = str;
    s.lookahead = MIN_MATCH$2 - 1;
    fill_window$1(s);
  }
  s.strstart += s.lookahead;
  s.block_start = s.strstart;
  s.insert = s.lookahead;
  s.lookahead = 0;
  s.match_length = s.prev_length = MIN_MATCH$2 - 1;
  s.match_available = 0;
  strm.next_in = next;
  strm.input = input;
  strm.avail_in = avail;
  s.wrap = wrap;
  return Z_OK$1$1;
}

var deflateInit_1$1 = deflateInit$1;
var deflateInit2_1$1 = deflateInit2$1;
var deflateReset_1$1 = deflateReset$1;
var deflateResetKeep_1$1 = deflateResetKeep$1;
var deflateSetHeader_1$1 = deflateSetHeader$1;
var deflate_2$1$1 = deflate$1$1;
var deflateEnd_1$1 = deflateEnd$1;
var deflateSetDictionary_1$1 = deflateSetDictionary$1;
var deflateInfo$1 = 'pako deflate (from Nodeca project)';

/* Not implemented
exports.deflateBound = deflateBound;
exports.deflateCopy = deflateCopy;
exports.deflateParams = deflateParams;
exports.deflatePending = deflatePending;
exports.deflatePrime = deflatePrime;
exports.deflateTune = deflateTune;
*/

var deflate_1$2$1 = {
  deflateInit: deflateInit_1$1,
  deflateInit2: deflateInit2_1$1,
  deflateReset: deflateReset_1$1,
  deflateResetKeep: deflateResetKeep_1$1,
  deflateSetHeader: deflateSetHeader_1$1,
  deflate: deflate_2$1$1,
  deflateEnd: deflateEnd_1$1,
  deflateSetDictionary: deflateSetDictionary_1$1,
  deflateInfo: deflateInfo$1
};

// String encode/decode helpers
'use strict';

// Quick check if we can use fast array to bin string conversion
//
// - apply(Array) can fail on Android 2.2
// - apply(Uint8Array) can fail on iOS 5.1 Safari
//
var STR_APPLY_OK$1 = true;
var STR_APPLY_UIA_OK$1 = true;

try {
  String.fromCharCode.apply(null, [0]);
} catch (__) {
  STR_APPLY_OK$1 = false;
}
try {
  String.fromCharCode.apply(null, new Uint8Array(1));
} catch (__) {
  STR_APPLY_UIA_OK$1 = false;
}

// Table with utf8 lengths (calculated by first byte of sequence)
// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,
// because max possible codepoint is 0x10ffff
var _utf8len$1 = new common$2.Buf8(256);
for (var q$1 = 0; q$1 < 256; q$1++) {
  _utf8len$1[q$1] = q$1 >= 252 ? 6 : q$1 >= 248 ? 5 : q$1 >= 240 ? 4 : q$1 >= 224 ? 3 : q$1 >= 192 ? 2 : 1;
}
_utf8len$1[254] = _utf8len$1[254] = 1; // Invalid sequence start


// convert string to array (typed, when possible)
var string2buf$1 = function string2buf(str) {
  var buf,
      c,
      c2,
      m_pos,
      i,
      str_len = str.length,
      buf_len = 0;

  // count binary size
  for (m_pos = 0; m_pos < str_len; m_pos++) {
    c = str.charCodeAt(m_pos);
    if ((c & 0xfc00) === 0xd800 && m_pos + 1 < str_len) {
      c2 = str.charCodeAt(m_pos + 1);
      if ((c2 & 0xfc00) === 0xdc00) {
        c = 0x10000 + (c - 0xd800 << 10) + (c2 - 0xdc00);
        m_pos++;
      }
    }
    buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;
  }

  // allocate buffer
  buf = new common$2.Buf8(buf_len);

  // convert
  for (i = 0, m_pos = 0; i < buf_len; m_pos++) {
    c = str.charCodeAt(m_pos);
    if ((c & 0xfc00) === 0xd800 && m_pos + 1 < str_len) {
      c2 = str.charCodeAt(m_pos + 1);
      if ((c2 & 0xfc00) === 0xdc00) {
        c = 0x10000 + (c - 0xd800 << 10) + (c2 - 0xdc00);
        m_pos++;
      }
    }
    if (c < 0x80) {
      /* one byte */
      buf[i++] = c;
    } else if (c < 0x800) {
      /* two bytes */
      buf[i++] = 0xC0 | c >>> 6;
      buf[i++] = 0x80 | c & 0x3f;
    } else if (c < 0x10000) {
      /* three bytes */
      buf[i++] = 0xE0 | c >>> 12;
      buf[i++] = 0x80 | c >>> 6 & 0x3f;
      buf[i++] = 0x80 | c & 0x3f;
    } else {
      /* four bytes */
      buf[i++] = 0xf0 | c >>> 18;
      buf[i++] = 0x80 | c >>> 12 & 0x3f;
      buf[i++] = 0x80 | c >>> 6 & 0x3f;
      buf[i++] = 0x80 | c & 0x3f;
    }
  }

  return buf;
};

// Helper (used in 2 places)
function buf2binstring$1(buf, len) {
  // use fallback for big arrays to avoid stack overflow
  if (len < 65537) {
    if (buf.subarray && STR_APPLY_UIA_OK$1 || !buf.subarray && STR_APPLY_OK$1) {
      return String.fromCharCode.apply(null, common$2.shrinkBuf(buf, len));
    }
  }

  var result = '';
  for (var i = 0; i < len; i++) {
    result += String.fromCharCode(buf[i]);
  }
  return result;
}

// Convert byte array to binary string
var buf2binstring_1$1 = function buf2binstring_1(buf) {
  return buf2binstring$1(buf, buf.length);
};

// Convert binary string (typed, when possible)
var binstring2buf$1 = function binstring2buf(str) {
  var buf = new common$2.Buf8(str.length);
  for (var i = 0, len = buf.length; i < len; i++) {
    buf[i] = str.charCodeAt(i);
  }
  return buf;
};

// convert array to string
var buf2string$1 = function buf2string(buf, max) {
  var i, out, c, c_len;
  var len = max || buf.length;

  // Reserve max possible length (2 words per char)
  // NB: by unknown reasons, Array is significantly faster for
  //     String.fromCharCode.apply than Uint16Array.
  var utf16buf = new Array(len * 2);

  for (out = 0, i = 0; i < len;) {
    c = buf[i++];
    // quick process ascii
    if (c < 0x80) {
      utf16buf[out++] = c;continue;
    }

    c_len = _utf8len$1[c];
    // skip 5 & 6 byte codes
    if (c_len > 4) {
      utf16buf[out++] = 0xfffd;i += c_len - 1;continue;
    }

    // apply mask on first byte
    c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;
    // join the rest
    while (c_len > 1 && i < len) {
      c = c << 6 | buf[i++] & 0x3f;
      c_len--;
    }

    // terminated by end of string?
    if (c_len > 1) {
      utf16buf[out++] = 0xfffd;continue;
    }

    if (c < 0x10000) {
      utf16buf[out++] = c;
    } else {
      c -= 0x10000;
      utf16buf[out++] = 0xd800 | c >> 10 & 0x3ff;
      utf16buf[out++] = 0xdc00 | c & 0x3ff;
    }
  }

  return buf2binstring$1(utf16buf, out);
};

// Calculate max possible position in utf8 buffer,
// that will not break sequence. If that's not possible
// - (very small limits) return max size as is.
//
// buf[] - utf8 bytes array
// max   - length limit (mandatory);
var utf8border$1 = function utf8border(buf, max) {
  var pos;

  max = max || buf.length;
  if (max > buf.length) {
    max = buf.length;
  }

  // go back from last position, until start of sequence found
  pos = max - 1;
  while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) {
    pos--;
  }

  // Very small and broken sequence,
  // return max, because we should return something anyway.
  if (pos < 0) {
    return max;
  }

  // If we came to start of buffer - that means buffer is too small,
  // return max too.
  if (pos === 0) {
    return max;
  }

  return pos + _utf8len$1[buf[pos]] > max ? pos : max;
};

var strings$3 = {
  string2buf: string2buf$1,
  buf2binstring: buf2binstring_1$1,
  binstring2buf: binstring2buf$1,
  buf2string: buf2string$1,
  utf8border: utf8border$1
};

'use strict';

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

function ZStream$2() {
  /* next input byte */
  this.input = null; // JS specific, because we have no pointers
  this.next_in = 0;
  /* number of bytes available at input */
  this.avail_in = 0;
  /* total number of input bytes read so far */
  this.total_in = 0;
  /* next output byte should be put there */
  this.output = null; // JS specific, because we have no pointers
  this.next_out = 0;
  /* remaining free space at output */
  this.avail_out = 0;
  /* total number of bytes output so far */
  this.total_out = 0;
  /* last error message, NULL if no error */
  this.msg = '' /*Z_NULL*/;
  /* not visible by applications */
  this.state = null;
  /* best guess about the data type: binary or text */
  this.data_type = 2 /*Z_UNKNOWN*/;
  /* adler32 value of the uncompressed data */
  this.adler = 0;
}

var zstream$2 = ZStream$2;

'use strict';

var toString$3 = Object.prototype.toString;

/* Public constants ==========================================================*/
/* ===========================================================================*/

var Z_NO_FLUSH$2 = 0;
var Z_FINISH$3 = 4;

var Z_OK$3 = 0;
var Z_STREAM_END$3 = 1;
var Z_SYNC_FLUSH$1 = 2;

var Z_DEFAULT_COMPRESSION$2 = -1;

var Z_DEFAULT_STRATEGY$2 = 0;

var Z_DEFLATED$3 = 8;

/* ===========================================================================*/

/**
 * class Deflate
 *
 * Generic JS-style wrapper for zlib calls. If you don't need
 * streaming behaviour - use more simple functions: [[deflate]],
 * [[deflateRaw]] and [[gzip]].
 **/

/* internal
 * Deflate.chunks -> Array
 *
 * Chunks of output data, if [[Deflate#onData]] not overridden.
 **/

/**
 * Deflate.result -> Uint8Array|Array
 *
 * Compressed result, generated by default [[Deflate#onData]]
 * and [[Deflate#onEnd]] handlers. Filled after you push last chunk
 * (call [[Deflate#push]] with `Z_FINISH` / `true` param)  or if you
 * push a chunk with explicit flush (call [[Deflate#push]] with
 * `Z_SYNC_FLUSH` param).
 **/

/**
 * Deflate.err -> Number
 *
 * Error code after deflate finished. 0 (Z_OK) on success.
 * You will not need it in real life, because deflate errors
 * are possible only on wrong options or bad `onData` / `onEnd`
 * custom handlers.
 **/

/**
 * Deflate.msg -> String
 *
 * Error message, if [[Deflate.err]] != 0
 **/

/**
 * new Deflate(options)
 * - options (Object): zlib deflate options.
 *
 * Creates new deflator instance with specified params. Throws exception
 * on bad params. Supported options:
 *
 * - `level`
 * - `windowBits`
 * - `memLevel`
 * - `strategy`
 * - `dictionary`
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information on these.
 *
 * Additional options, for internal needs:
 *
 * - `chunkSize` - size of generated data chunks (16K by default)
 * - `raw` (Boolean) - do raw deflate
 * - `gzip` (Boolean) - create gzip wrapper
 * - `to` (String) - if equal to 'string', then result will be "binary string"
 *    (each char code [0..255])
 * - `header` (Object) - custom header for gzip
 *   - `text` (Boolean) - true if compressed data believed to be text
 *   - `time` (Number) - modification time, unix timestamp
 *   - `os` (Number) - operation system code
 *   - `extra` (Array) - array of bytes with extra data (max 65536)
 *   - `name` (String) - file name (binary string)
 *   - `comment` (String) - comment (binary string)
 *   - `hcrc` (Boolean) - true if header crc should be added
 *
 * ##### Example:
 *
 * ```javascript
 * var pako = require('pako')
 *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])
 *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);
 *
 * var deflate = new pako.Deflate({ level: 3});
 *
 * deflate.push(chunk1, false);
 * deflate.push(chunk2, true);  // true -> last chunk
 *
 * if (deflate.err) { throw new Error(deflate.err); }
 *
 * console.log(deflate.result);
 * ```
 **/
function Deflate$1(options) {
  if (!(this instanceof Deflate$1)) return new Deflate$1(options);

  this.options = common$2.assign({
    level: Z_DEFAULT_COMPRESSION$2,
    method: Z_DEFLATED$3,
    chunkSize: 16384,
    windowBits: 15,
    memLevel: 8,
    strategy: Z_DEFAULT_STRATEGY$2,
    to: ''
  }, options || {});

  var opt = this.options;

  if (opt.raw && opt.windowBits > 0) {
    opt.windowBits = -opt.windowBits;
  } else if (opt.gzip && opt.windowBits > 0 && opt.windowBits < 16) {
    opt.windowBits += 16;
  }

  this.err = 0; // error code, if happens (0 = Z_OK)
  this.msg = ''; // error message
  this.ended = false; // used to avoid multiple onEnd() calls
  this.chunks = []; // chunks of compressed data

  this.strm = new zstream$2();
  this.strm.avail_out = 0;

  var status = deflate_1$2$1.deflateInit2(this.strm, opt.level, opt.method, opt.windowBits, opt.memLevel, opt.strategy);

  if (status !== Z_OK$3) {
    throw new Error(messages$2[status]);
  }

  if (opt.header) {
    deflate_1$2$1.deflateSetHeader(this.strm, opt.header);
  }

  if (opt.dictionary) {
    var dict;
    // Convert data if needed
    if (typeof opt.dictionary === 'string') {
      // If we need to compress text, change encoding to utf8.
      dict = strings$3.string2buf(opt.dictionary);
    } else if (toString$3.call(opt.dictionary) === '[object ArrayBuffer]') {
      dict = new Uint8Array(opt.dictionary);
    } else {
      dict = opt.dictionary;
    }

    status = deflate_1$2$1.deflateSetDictionary(this.strm, dict);

    if (status !== Z_OK$3) {
      throw new Error(messages$2[status]);
    }

    this._dict_set = true;
  }
}

/**
 * Deflate#push(data[, mode]) -> Boolean
 * - data (Uint8Array|Array|ArrayBuffer|String): input data. Strings will be
 *   converted to utf8 byte sequence.
 * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.
 *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.
 *
 * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with
 * new compressed chunks. Returns `true` on success. The last data block must have
 * mode Z_FINISH (or `true`). That will flush internal pending buffers and call
 * [[Deflate#onEnd]]. For interim explicit flushes (without ending the stream) you
 * can use mode Z_SYNC_FLUSH, keeping the compression context.
 *
 * On fail call [[Deflate#onEnd]] with error code and return false.
 *
 * We strongly recommend to use `Uint8Array` on input for best speed (output
 * array format is detected automatically). Also, don't skip last param and always
 * use the same type in your code (boolean or number). That will improve JS speed.
 *
 * For regular `Array`-s make sure all elements are [0..255].
 *
 * ##### Example
 *
 * ```javascript
 * push(chunk, false); // push one of data chunks
 * ...
 * push(chunk, true);  // push last chunk
 * ```
 **/
Deflate$1.prototype.push = function (data, mode) {
  var strm = this.strm;
  var chunkSize = this.options.chunkSize;
  var status, _mode;

  if (this.ended) {
    return false;
  }

  _mode = mode === ~~mode ? mode : mode === true ? Z_FINISH$3 : Z_NO_FLUSH$2;

  // Convert data if needed
  if (typeof data === 'string') {
    // If we need to compress text, change encoding to utf8.
    strm.input = strings$3.string2buf(data);
  } else if (toString$3.call(data) === '[object ArrayBuffer]') {
    strm.input = new Uint8Array(data);
  } else {
    strm.input = data;
  }

  strm.next_in = 0;
  strm.avail_in = strm.input.length;

  do {
    if (strm.avail_out === 0) {
      strm.output = new common$2.Buf8(chunkSize);
      strm.next_out = 0;
      strm.avail_out = chunkSize;
    }
    status = deflate_1$2$1.deflate(strm, _mode); /* no bad return value */

    if (status !== Z_STREAM_END$3 && status !== Z_OK$3) {
      this.onEnd(status);
      this.ended = true;
      return false;
    }
    if (strm.avail_out === 0 || strm.avail_in === 0 && (_mode === Z_FINISH$3 || _mode === Z_SYNC_FLUSH$1)) {
      if (this.options.to === 'string') {
        this.onData(strings$3.buf2binstring(common$2.shrinkBuf(strm.output, strm.next_out)));
      } else {
        this.onData(common$2.shrinkBuf(strm.output, strm.next_out));
      }
    }
  } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== Z_STREAM_END$3);

  // Finalize on the last chunk.
  if (_mode === Z_FINISH$3) {
    status = deflate_1$2$1.deflateEnd(this.strm);
    this.onEnd(status);
    this.ended = true;
    return status === Z_OK$3;
  }

  // callback interim results if Z_SYNC_FLUSH.
  if (_mode === Z_SYNC_FLUSH$1) {
    this.onEnd(Z_OK$3);
    strm.avail_out = 0;
    return true;
  }

  return true;
};

/**
 * Deflate#onData(chunk) -> Void
 * - chunk (Uint8Array|Array|String): output data. Type of array depends
 *   on js engine support. When string output requested, each chunk
 *   will be string.
 *
 * By default, stores data blocks in `chunks[]` property and glue
 * those in `onEnd`. Override this handler, if you need another behaviour.
 **/
Deflate$1.prototype.onData = function (chunk) {
  this.chunks.push(chunk);
};

/**
 * Deflate#onEnd(status) -> Void
 * - status (Number): deflate status. 0 (Z_OK) on success,
 *   other if not.
 *
 * Called once after you tell deflate that the input stream is
 * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)
 * or if an error happened. By default - join collected chunks,
 * free memory and fill `results` / `err` properties.
 **/
Deflate$1.prototype.onEnd = function (status) {
  // On success - join
  if (status === Z_OK$3) {
    if (this.options.to === 'string') {
      this.result = this.chunks.join('');
    } else {
      this.result = common$2.flattenChunks(this.chunks);
    }
  }
  this.chunks = [];
  this.err = status;
  this.msg = this.strm.msg;
};

/**
 * deflate(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to compress.
 * - options (Object): zlib deflate options.
 *
 * Compress `data` with deflate algorithm and `options`.
 *
 * Supported options are:
 *
 * - level
 * - windowBits
 * - memLevel
 * - strategy
 * - dictionary
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information on these.
 *
 * Sugar (options):
 *
 * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify
 *   negative windowBits implicitly.
 * - `to` (String) - if equal to 'string', then result will be "binary string"
 *    (each char code [0..255])
 *
 * ##### Example:
 *
 * ```javascript
 * var pako = require('pako')
 *   , data = Uint8Array([1,2,3,4,5,6,7,8,9]);
 *
 * console.log(pako.deflate(data));
 * ```
 **/
function deflate$5(input, options) {
  var deflator = new Deflate$1(options);

  deflator.push(input, true);

  // That will never happens, if you don't cheat with options :)
  if (deflator.err) {
    throw deflator.msg || messages$2[deflator.err];
  }

  return deflator.result;
}

/**
 * deflateRaw(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to compress.
 * - options (Object): zlib deflate options.
 *
 * The same as [[deflate]], but creates raw data, without wrapper
 * (header and adler32 crc).
 **/
function deflateRaw$1(input, options) {
  options = options || {};
  options.raw = true;
  return deflate$5(input, options);
}

/**
 * gzip(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to compress.
 * - options (Object): zlib deflate options.
 *
 * The same as [[deflate]], but create gzip wrapper instead of
 * deflate one.
 **/
function gzip$1(input, options) {
  options = options || {};
  options.gzip = true;
  return deflate$5(input, options);
}

var Deflate_1$1 = Deflate$1;
var deflate_2$2 = deflate$5;
var deflateRaw_1$1 = deflateRaw$1;
var gzip_1$1 = gzip$1;

var deflate_1$4 = {
  Deflate: Deflate_1$1,
  deflate: deflate_2$2,
  deflateRaw: deflateRaw_1$1,
  gzip: gzip_1$1
};

'use strict';

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

// See state defs from inflate.js
var BAD$1$1 = 30; /* got a data error -- remain here until reset */
var TYPE$1$1 = 12; /* i: waiting for type bits, including last-flag bit */

/*
   Decode literal, length, and distance codes and write out the resulting
   literal and match bytes until either not enough input or output is
   available, an end-of-block is encountered, or a data error is encountered.
   When large enough input and output buffers are supplied to inflate(), for
   example, a 16K input buffer and a 64K output buffer, more than 95% of the
   inflate execution time is spent in this routine.

   Entry assumptions:

        state.mode === LEN
        strm.avail_in >= 6
        strm.avail_out >= 258
        start >= strm.avail_out
        state.bits < 8

   On return, state.mode is one of:

        LEN -- ran out of enough output space or enough available input
        TYPE -- reached end of block code, inflate() to interpret next block
        BAD -- error in block data

   Notes:

    - The maximum input bits used by a length/distance pair is 15 bits for the
      length code, 5 bits for the length extra, 15 bits for the distance code,
      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.
      Therefore if strm.avail_in >= 6, then there is enough input to avoid
      checking for available input while decoding.

    - The maximum bytes that a single length/distance pair can output is 258
      bytes, which is the maximum length that can be coded.  inflate_fast()
      requires strm.avail_out >= 258 for each loop to avoid checking for
      output space.
 */
var inffast$2 = function inflate_fast(strm, start) {
  var state;
  var _in; /* local strm.input */
  var last; /* have enough input while in < last */
  var _out; /* local strm.output */
  var beg; /* inflate()'s initial strm.output */
  var end; /* while out < end, enough space available */
  //#ifdef INFLATE_STRICT
  var dmax; /* maximum distance from zlib header */
  //#endif
  var wsize; /* window size or zero if not using window */
  var whave; /* valid bytes in the window */
  var wnext; /* window write index */
  // Use `s_window` instead `window`, avoid conflict with instrumentation tools
  var s_window; /* allocated sliding window, if wsize != 0 */
  var hold; /* local strm.hold */
  var bits; /* local strm.bits */
  var lcode; /* local strm.lencode */
  var dcode; /* local strm.distcode */
  var lmask; /* mask for first level of length codes */
  var dmask; /* mask for first level of distance codes */
  var here; /* retrieved table entry */
  var op; /* code bits, operation, extra bits, or */
  /*  window position, window bytes to copy */
  var len; /* match length, unused bytes */
  var dist; /* match distance */
  var from; /* where to copy match from */
  var from_source;

  var input, output; // JS specific, because we have no pointers

  /* copy state to local variables */
  state = strm.state;
  //here = state.here;
  _in = strm.next_in;
  input = strm.input;
  last = _in + (strm.avail_in - 5);
  _out = strm.next_out;
  output = strm.output;
  beg = _out - (start - strm.avail_out);
  end = _out + (strm.avail_out - 257);
  //#ifdef INFLATE_STRICT
  dmax = state.dmax;
  //#endif
  wsize = state.wsize;
  whave = state.whave;
  wnext = state.wnext;
  s_window = state.window;
  hold = state.hold;
  bits = state.bits;
  lcode = state.lencode;
  dcode = state.distcode;
  lmask = (1 << state.lenbits) - 1;
  dmask = (1 << state.distbits) - 1;

  /* decode literals and length/distances until end-of-block or not enough
     input data or output space */

  top: do {
    if (bits < 15) {
      hold += input[_in++] << bits;
      bits += 8;
      hold += input[_in++] << bits;
      bits += 8;
    }

    here = lcode[hold & lmask];

    dolen: for (;;) {
      // Goto emulation
      op = here >>> 24 /*here.bits*/;
      hold >>>= op;
      bits -= op;
      op = here >>> 16 & 0xff /*here.op*/;
      if (op === 0) {
        /* literal */
        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
        //        "inflate:         literal '%c'\n" :
        //        "inflate:         literal 0x%02x\n", here.val));
        output[_out++] = here & 0xffff /*here.val*/;
      } else if (op & 16) {
        /* length base */
        len = here & 0xffff /*here.val*/;
        op &= 15; /* number of extra bits */
        if (op) {
          if (bits < op) {
            hold += input[_in++] << bits;
            bits += 8;
          }
          len += hold & (1 << op) - 1;
          hold >>>= op;
          bits -= op;
        }
        //Tracevv((stderr, "inflate:         length %u\n", len));
        if (bits < 15) {
          hold += input[_in++] << bits;
          bits += 8;
          hold += input[_in++] << bits;
          bits += 8;
        }
        here = dcode[hold & dmask];

        dodist: for (;;) {
          // goto emulation
          op = here >>> 24 /*here.bits*/;
          hold >>>= op;
          bits -= op;
          op = here >>> 16 & 0xff /*here.op*/;

          if (op & 16) {
            /* distance base */
            dist = here & 0xffff /*here.val*/;
            op &= 15; /* number of extra bits */
            if (bits < op) {
              hold += input[_in++] << bits;
              bits += 8;
              if (bits < op) {
                hold += input[_in++] << bits;
                bits += 8;
              }
            }
            dist += hold & (1 << op) - 1;
            //#ifdef INFLATE_STRICT
            if (dist > dmax) {
              strm.msg = 'invalid distance too far back';
              state.mode = BAD$1$1;
              break top;
            }
            //#endif
            hold >>>= op;
            bits -= op;
            //Tracevv((stderr, "inflate:         distance %u\n", dist));
            op = _out - beg; /* max distance in output */
            if (dist > op) {
              /* see if copy from window */
              op = dist - op; /* distance back in window */
              if (op > whave) {
                if (state.sane) {
                  strm.msg = 'invalid distance too far back';
                  state.mode = BAD$1$1;
                  break top;
                }

                // (!) This block is disabled in zlib defaults,
                // don't enable it for binary compatibility
                //#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
                //                if (len <= op - whave) {
                //                  do {
                //                    output[_out++] = 0;
                //                  } while (--len);
                //                  continue top;
                //                }
                //                len -= op - whave;
                //                do {
                //                  output[_out++] = 0;
                //                } while (--op > whave);
                //                if (op === 0) {
                //                  from = _out - dist;
                //                  do {
                //                    output[_out++] = output[from++];
                //                  } while (--len);
                //                  continue top;
                //                }
                //#endif
              }
              from = 0; // window index
              from_source = s_window;
              if (wnext === 0) {
                /* very common case */
                from += wsize - op;
                if (op < len) {
                  /* some from window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = _out - dist; /* rest from output */
                  from_source = output;
                }
              } else if (wnext < op) {
                /* wrap around window */
                from += wsize + wnext - op;
                op -= wnext;
                if (op < len) {
                  /* some from end of window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = 0;
                  if (wnext < len) {
                    /* some from start of window */
                    op = wnext;
                    len -= op;
                    do {
                      output[_out++] = s_window[from++];
                    } while (--op);
                    from = _out - dist; /* rest from output */
                    from_source = output;
                  }
                }
              } else {
                /* contiguous in window */
                from += wnext - op;
                if (op < len) {
                  /* some from window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = _out - dist; /* rest from output */
                  from_source = output;
                }
              }
              while (len > 2) {
                output[_out++] = from_source[from++];
                output[_out++] = from_source[from++];
                output[_out++] = from_source[from++];
                len -= 3;
              }
              if (len) {
                output[_out++] = from_source[from++];
                if (len > 1) {
                  output[_out++] = from_source[from++];
                }
              }
            } else {
              from = _out - dist; /* copy direct from output */
              do {
                /* minimum length is three */
                output[_out++] = output[from++];
                output[_out++] = output[from++];
                output[_out++] = output[from++];
                len -= 3;
              } while (len > 2);
              if (len) {
                output[_out++] = output[from++];
                if (len > 1) {
                  output[_out++] = output[from++];
                }
              }
            }
          } else if ((op & 64) === 0) {
            /* 2nd level distance code */
            here = dcode[(here & 0xffff) + ( /*here.val*/hold & (1 << op) - 1)];
            continue dodist;
          } else {
            strm.msg = 'invalid distance code';
            state.mode = BAD$1$1;
            break top;
          }

          break; // need to emulate goto via "continue"
        }
      } else if ((op & 64) === 0) {
        /* 2nd level length code */
        here = lcode[(here & 0xffff) + ( /*here.val*/hold & (1 << op) - 1)];
        continue dolen;
      } else if (op & 32) {
        /* end-of-block */
        //Tracevv((stderr, "inflate:         end of block\n"));
        state.mode = TYPE$1$1;
        break top;
      } else {
        strm.msg = 'invalid literal/length code';
        state.mode = BAD$1$1;
        break top;
      }

      break; // need to emulate goto via "continue"
    }
  } while (_in < last && _out < end);

  /* return unused bytes (on entry, bits < 8, so in won't go too far back) */
  len = bits >> 3;
  _in -= len;
  bits -= len << 3;
  hold &= (1 << bits) - 1;

  /* update state and return */
  strm.next_in = _in;
  strm.next_out = _out;
  strm.avail_in = _in < last ? 5 + (last - _in) : 5 - (_in - last);
  strm.avail_out = _out < end ? 257 + (end - _out) : 257 - (_out - end);
  state.hold = hold;
  state.bits = bits;
  return;
};

'use strict';

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.


var MAXBITS$1 = 15;
var ENOUGH_LENS$1$1 = 852;
var ENOUGH_DISTS$1$1 = 592;
//var ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);

var CODES$1$1 = 0;
var LENS$1$1 = 1;
var DISTS$1$1 = 2;

var lbase$1 = [/* Length codes 257..285 base */
3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0];

var lext$1 = [/* Length codes 257..285 extra */
16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78];

var dbase$1 = [/* Distance codes 0..29 base */
1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577, 0, 0];

var dext$1 = [/* Distance codes 0..29 extra */
16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 64, 64];

var inftrees$2 = function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts) {
  var bits = opts.bits;
  //here = opts.here; /* table entry for duplication */

  var len = 0; /* a code's length in bits */
  var sym = 0; /* index of code symbols */
  var min = 0,
      max = 0; /* minimum and maximum code lengths */
  var root = 0; /* number of index bits for root table */
  var curr = 0; /* number of index bits for current table */
  var drop = 0; /* code bits to drop for sub-table */
  var left = 0; /* number of prefix codes available */
  var used = 0; /* code entries in table used */
  var huff = 0; /* Huffman code */
  var incr; /* for incrementing code, index */
  var fill; /* index for replicating entries */
  var low; /* low bits for current root entry */
  var mask; /* mask for low root bits */
  var next; /* next available space in table */
  var base = null; /* base value table to use */
  var base_index = 0;
  //  var shoextra;    /* extra bits table to use */
  var end; /* use base and extra for symbol > end */
  var count = new common$2.Buf16(MAXBITS$1 + 1); //[MAXBITS+1];    /* number of codes of each length */
  var offs = new common$2.Buf16(MAXBITS$1 + 1); //[MAXBITS+1];     /* offsets in table for each length */
  var extra = null;
  var extra_index = 0;

  var here_bits, here_op, here_val;

  /*
   Process a set of code lengths to create a canonical Huffman code.  The
   code lengths are lens[0..codes-1].  Each length corresponds to the
   symbols 0..codes-1.  The Huffman code is generated by first sorting the
   symbols by length from short to long, and retaining the symbol order
   for codes with equal lengths.  Then the code starts with all zero bits
   for the first code of the shortest length, and the codes are integer
   increments for the same length, and zeros are appended as the length
   increases.  For the deflate format, these bits are stored backwards
   from their more natural integer increment ordering, and so when the
   decoding tables are built in the large loop below, the integer codes
   are incremented backwards.
    This routine assumes, but does not check, that all of the entries in
   lens[] are in the range 0..MAXBITS.  The caller must assure this.
   1..MAXBITS is interpreted as that code length.  zero means that that
   symbol does not occur in this code.
    The codes are sorted by computing a count of codes for each length,
   creating from that a table of starting indices for each length in the
   sorted table, and then entering the symbols in order in the sorted
   table.  The sorted table is work[], with that space being provided by
   the caller.
    The length counts are used for other purposes as well, i.e. finding
   the minimum and maximum length codes, determining if there are any
   codes at all, checking for a valid set of lengths, and looking ahead
   at length counts to determine sub-table sizes when building the
   decoding tables.
   */

  /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */
  for (len = 0; len <= MAXBITS$1; len++) {
    count[len] = 0;
  }
  for (sym = 0; sym < codes; sym++) {
    count[lens[lens_index + sym]]++;
  }

  /* bound code lengths, force root to be within code lengths */
  root = bits;
  for (max = MAXBITS$1; max >= 1; max--) {
    if (count[max] !== 0) {
      break;
    }
  }
  if (root > max) {
    root = max;
  }
  if (max === 0) {
    /* no symbols to code at all */
    //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */
    //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;
    //table.val[opts.table_index++] = 0;   //here.val = (var short)0;
    table[table_index++] = 1 << 24 | 64 << 16 | 0;

    //table.op[opts.table_index] = 64;
    //table.bits[opts.table_index] = 1;
    //table.val[opts.table_index++] = 0;
    table[table_index++] = 1 << 24 | 64 << 16 | 0;

    opts.bits = 1;
    return 0; /* no symbols, but wait for decoding to report error */
  }
  for (min = 1; min < max; min++) {
    if (count[min] !== 0) {
      break;
    }
  }
  if (root < min) {
    root = min;
  }

  /* check for an over-subscribed or incomplete set of lengths */
  left = 1;
  for (len = 1; len <= MAXBITS$1; len++) {
    left <<= 1;
    left -= count[len];
    if (left < 0) {
      return -1;
    } /* over-subscribed */
  }
  if (left > 0 && (type === CODES$1$1 || max !== 1)) {
    return -1; /* incomplete set */
  }

  /* generate offsets into symbol table for each length for sorting */
  offs[1] = 0;
  for (len = 1; len < MAXBITS$1; len++) {
    offs[len + 1] = offs[len] + count[len];
  }

  /* sort symbols by length, by symbol order within each length */
  for (sym = 0; sym < codes; sym++) {
    if (lens[lens_index + sym] !== 0) {
      work[offs[lens[lens_index + sym]]++] = sym;
    }
  }

  /*
   Create and fill in decoding tables.  In this loop, the table being
   filled is at next and has curr index bits.  The code being used is huff
   with length len.  That code is converted to an index by dropping drop
   bits off of the bottom.  For codes where len is less than drop + curr,
   those top drop + curr - len bits are incremented through all values to
   fill the table with replicated entries.
    root is the number of index bits for the root table.  When len exceeds
   root, sub-tables are created pointed to by the root entry with an index
   of the low root bits of huff.  This is saved in low to check for when a
   new sub-table should be started.  drop is zero when the root table is
   being filled, and drop is root when sub-tables are being filled.
    When a new sub-table is needed, it is necessary to look ahead in the
   code lengths to determine what size sub-table is needed.  The length
   counts are used for this, and so count[] is decremented as codes are
   entered in the tables.
    used keeps track of how many table entries have been allocated from the
   provided *table space.  It is checked for LENS and DIST tables against
   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in
   the initial root table size constants.  See the comments in inftrees.h
   for more information.
    sym increments through all symbols, and the loop terminates when
   all codes of length max, i.e. all codes, have been processed.  This
   routine permits incomplete codes, so another loop after this one fills
   in the rest of the decoding tables with invalid code markers.
   */

  /* set up for code type */
  // poor man optimization - use if-else instead of switch,
  // to avoid deopts in old v8
  if (type === CODES$1$1) {
    base = extra = work; /* dummy value--not used */
    end = 19;
  } else if (type === LENS$1$1) {
    base = lbase$1;
    base_index -= 257;
    extra = lext$1;
    extra_index -= 257;
    end = 256;
  } else {
    /* DISTS */
    base = dbase$1;
    extra = dext$1;
    end = -1;
  }

  /* initialize opts for loop */
  huff = 0; /* starting code */
  sym = 0; /* starting code symbol */
  len = min; /* starting code length */
  next = table_index; /* current table to fill in */
  curr = root; /* current table index bits */
  drop = 0; /* current bits to drop from code for index */
  low = -1; /* trigger new sub-table when len > root */
  used = 1 << root; /* use root table entries */
  mask = used - 1; /* mask for comparing low */

  /* check available table space */
  if (type === LENS$1$1 && used > ENOUGH_LENS$1$1 || type === DISTS$1$1 && used > ENOUGH_DISTS$1$1) {
    return 1;
  }

  /* process all codes and make table entries */
  for (;;) {
    /* create table entry */
    here_bits = len - drop;
    if (work[sym] < end) {
      here_op = 0;
      here_val = work[sym];
    } else if (work[sym] > end) {
      here_op = extra[extra_index + work[sym]];
      here_val = base[base_index + work[sym]];
    } else {
      here_op = 32 + 64; /* end of block */
      here_val = 0;
    }

    /* replicate for those indices with low len bits equal to huff */
    incr = 1 << len - drop;
    fill = 1 << curr;
    min = fill; /* save offset to next table */
    do {
      fill -= incr;
      table[next + (huff >> drop) + fill] = here_bits << 24 | here_op << 16 | here_val | 0;
    } while (fill !== 0);

    /* backwards increment the len-bit code huff */
    incr = 1 << len - 1;
    while (huff & incr) {
      incr >>= 1;
    }
    if (incr !== 0) {
      huff &= incr - 1;
      huff += incr;
    } else {
      huff = 0;
    }

    /* go to next symbol, update count, len */
    sym++;
    if (--count[len] === 0) {
      if (len === max) {
        break;
      }
      len = lens[lens_index + work[sym]];
    }

    /* create new sub-table if needed */
    if (len > root && (huff & mask) !== low) {
      /* if first time, transition to sub-tables */
      if (drop === 0) {
        drop = root;
      }

      /* increment past last table */
      next += min; /* here min is 1 << curr */

      /* determine length of next table */
      curr = len - drop;
      left = 1 << curr;
      while (curr + drop < max) {
        left -= count[curr + drop];
        if (left <= 0) {
          break;
        }
        curr++;
        left <<= 1;
      }

      /* check for enough space */
      used += 1 << curr;
      if (type === LENS$1$1 && used > ENOUGH_LENS$1$1 || type === DISTS$1$1 && used > ENOUGH_DISTS$1$1) {
        return 1;
      }

      /* point entry in root table to sub-table */
      low = huff & mask;
      /*table.op[low] = curr;
      table.bits[low] = root;
      table.val[low] = next - opts.table_index;*/
      table[low] = root << 24 | curr << 16 | next - table_index | 0;
    }
  }

  /* fill in remaining table entry if code is incomplete (guaranteed to have
   at most one remaining entry, since if the code is incomplete, the
   maximum code length that was allowed to get this far is one bit) */
  if (huff !== 0) {
    //table.op[next + huff] = 64;            /* invalid code marker */
    //table.bits[next + huff] = len - drop;
    //table.val[next + huff] = 0;
    table[next + huff] = len - drop << 24 | 64 << 16 | 0;
  }

  /* set return parameters */
  //opts.table_index += used;
  opts.bits = root;
  return 0;
};

'use strict';

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.


var CODES$2 = 0;
var LENS$2 = 1;
var DISTS$2 = 2;

/* Public constants ==========================================================*/
/* ===========================================================================*/

/* Allowed flush values; see deflate() and inflate() below for details */
//var Z_NO_FLUSH      = 0;
//var Z_PARTIAL_FLUSH = 1;
//var Z_SYNC_FLUSH    = 2;
//var Z_FULL_FLUSH    = 3;
var Z_FINISH$2$1 = 4;
var Z_BLOCK$1$1 = 5;
var Z_TREES$1 = 6;

/* Return codes for the compression/decompression functions. Negative values
 * are errors, positive values are used for special but normal events.
 */
var Z_OK$2$1 = 0;
var Z_STREAM_END$2$1 = 1;
var Z_NEED_DICT$1 = 2;
//var Z_ERRNO         = -1;
var Z_STREAM_ERROR$1$1 = -2;
var Z_DATA_ERROR$1$1 = -3;
var Z_MEM_ERROR$1 = -4;
var Z_BUF_ERROR$1$1 = -5;
//var Z_VERSION_ERROR = -6;

/* The deflate compression method */
var Z_DEFLATED$2$1 = 8;

/* STATES ====================================================================*/
/* ===========================================================================*/

var HEAD$1 = 1; /* i: waiting for magic header */
var FLAGS$1 = 2; /* i: waiting for method and flags (gzip) */
var TIME$1 = 3; /* i: waiting for modification time (gzip) */
var OS$1 = 4; /* i: waiting for extra flags and operating system (gzip) */
var EXLEN$1 = 5; /* i: waiting for extra length (gzip) */
var EXTRA$1 = 6; /* i: waiting for extra bytes (gzip) */
var NAME$1 = 7; /* i: waiting for end of file name (gzip) */
var COMMENT$1 = 8; /* i: waiting for end of comment (gzip) */
var HCRC$1 = 9; /* i: waiting for header crc (gzip) */
var DICTID$1 = 10; /* i: waiting for dictionary check value */
var DICT$1 = 11; /* waiting for inflateSetDictionary() call */
var TYPE$2 = 12; /* i: waiting for type bits, including last-flag bit */
var TYPEDO$1 = 13; /* i: same, but skip check to exit inflate on new block */
var STORED$1 = 14; /* i: waiting for stored size (length and complement) */
var COPY_$1 = 15; /* i/o: same as COPY below, but only first time in */
var COPY$1 = 16; /* i/o: waiting for input or output to copy stored block */
var TABLE$1 = 17; /* i: waiting for dynamic block table lengths */
var LENLENS$1 = 18; /* i: waiting for code length code lengths */
var CODELENS$1 = 19; /* i: waiting for length/lit and distance code lengths */
var LEN_$1 = 20; /* i: same as LEN below, but only first time in */
var LEN$1 = 21; /* i: waiting for length/lit/eob code */
var LENEXT$1 = 22; /* i: waiting for length extra bits */
var DIST$1 = 23; /* i: waiting for distance code */
var DISTEXT$1 = 24; /* i: waiting for distance extra bits */
var MATCH$1 = 25; /* o: waiting for output space to copy string */
var LIT$1 = 26; /* o: waiting for output space to write literal */
var CHECK$1 = 27; /* i: waiting for 32-bit check value */
var LENGTH$1 = 28; /* i: waiting for 32-bit length (gzip) */
var DONE$1 = 29; /* finished check, done -- remain here until reset */
var BAD$2 = 30; /* got a data error -- remain here until reset */
var MEM$1 = 31; /* got an inflate() memory error -- remain here until reset */
var SYNC$1 = 32; /* looking for synchronization bytes to restart inflate() */

/* ===========================================================================*/

var ENOUGH_LENS$2 = 852;
var ENOUGH_DISTS$2 = 592;
//var ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);

var MAX_WBITS$1$1 = 15;
/* 32K LZ77 window */
var DEF_WBITS$1 = MAX_WBITS$1$1;

function zswap32$1(q) {
  return (q >>> 24 & 0xff) + (q >>> 8 & 0xff00) + ((q & 0xff00) << 8) + ((q & 0xff) << 24);
}

function InflateState$1() {
  this.mode = 0; /* current inflate mode */
  this.last = false; /* true if processing last block */
  this.wrap = 0; /* bit 0 true for zlib, bit 1 true for gzip */
  this.havedict = false; /* true if dictionary provided */
  this.flags = 0; /* gzip header method and flags (0 if zlib) */
  this.dmax = 0; /* zlib header max distance (INFLATE_STRICT) */
  this.check = 0; /* protected copy of check value */
  this.total = 0; /* protected copy of output count */
  // TODO: may be {}
  this.head = null; /* where to save gzip header information */

  /* sliding window */
  this.wbits = 0; /* log base 2 of requested window size */
  this.wsize = 0; /* window size or zero if not using window */
  this.whave = 0; /* valid bytes in the window */
  this.wnext = 0; /* window write index */
  this.window = null; /* allocated sliding window, if needed */

  /* bit accumulator */
  this.hold = 0; /* input bit accumulator */
  this.bits = 0; /* number of bits in "in" */

  /* for string and stored block copying */
  this.length = 0; /* literal or length of data to copy */
  this.offset = 0; /* distance back to copy string from */

  /* for table and code decoding */
  this.extra = 0; /* extra bits needed */

  /* fixed and dynamic code tables */
  this.lencode = null; /* starting table for length/literal codes */
  this.distcode = null; /* starting table for distance codes */
  this.lenbits = 0; /* index bits for lencode */
  this.distbits = 0; /* index bits for distcode */

  /* dynamic table building */
  this.ncode = 0; /* number of code length code lengths */
  this.nlen = 0; /* number of length code lengths */
  this.ndist = 0; /* number of distance code lengths */
  this.have = 0; /* number of code lengths in lens[] */
  this.next = null; /* next available space in codes[] */

  this.lens = new common$2.Buf16(320); /* temporary storage for code lengths */
  this.work = new common$2.Buf16(288); /* work area for code table building */

  /*
   because we don't have pointers in js, we use lencode and distcode directly
   as buffers so we don't need codes
  */
  //this.codes = new utils.Buf32(ENOUGH);       /* space for code tables */
  this.lendyn = null; /* dynamic table for length/literal codes (JS specific) */
  this.distdyn = null; /* dynamic table for distance codes (JS specific) */
  this.sane = 0; /* if false, allow invalid distance too far */
  this.back = 0; /* bits back of last unprocessed length/lit */
  this.was = 0; /* initial length of match */
}

function inflateResetKeep$1(strm) {
  var state;

  if (!strm || !strm.state) {
    return Z_STREAM_ERROR$1$1;
  }
  state = strm.state;
  strm.total_in = strm.total_out = state.total = 0;
  strm.msg = ''; /*Z_NULL*/
  if (state.wrap) {
    /* to support ill-conceived Java test suite */
    strm.adler = state.wrap & 1;
  }
  state.mode = HEAD$1;
  state.last = 0;
  state.havedict = 0;
  state.dmax = 32768;
  state.head = null /*Z_NULL*/;
  state.hold = 0;
  state.bits = 0;
  //state.lencode = state.distcode = state.next = state.codes;
  state.lencode = state.lendyn = new common$2.Buf32(ENOUGH_LENS$2);
  state.distcode = state.distdyn = new common$2.Buf32(ENOUGH_DISTS$2);

  state.sane = 1;
  state.back = -1;
  //Tracev((stderr, "inflate: reset\n"));
  return Z_OK$2$1;
}

function inflateReset$1(strm) {
  var state;

  if (!strm || !strm.state) {
    return Z_STREAM_ERROR$1$1;
  }
  state = strm.state;
  state.wsize = 0;
  state.whave = 0;
  state.wnext = 0;
  return inflateResetKeep$1(strm);
}

function inflateReset2$1(strm, windowBits) {
  var wrap;
  var state;

  /* get the state */
  if (!strm || !strm.state) {
    return Z_STREAM_ERROR$1$1;
  }
  state = strm.state;

  /* extract wrap request from windowBits parameter */
  if (windowBits < 0) {
    wrap = 0;
    windowBits = -windowBits;
  } else {
    wrap = (windowBits >> 4) + 1;
    if (windowBits < 48) {
      windowBits &= 15;
    }
  }

  /* set number of window bits, free window if different */
  if (windowBits && (windowBits < 8 || windowBits > 15)) {
    return Z_STREAM_ERROR$1$1;
  }
  if (state.window !== null && state.wbits !== windowBits) {
    state.window = null;
  }

  /* update state and reset the rest of it */
  state.wrap = wrap;
  state.wbits = windowBits;
  return inflateReset$1(strm);
}

function inflateInit2$1(strm, windowBits) {
  var ret;
  var state;

  if (!strm) {
    return Z_STREAM_ERROR$1$1;
  }
  //strm.msg = Z_NULL;                 /* in case we return an error */

  state = new InflateState$1();

  //if (state === Z_NULL) return Z_MEM_ERROR;
  //Tracev((stderr, "inflate: allocated\n"));
  strm.state = state;
  state.window = null /*Z_NULL*/;
  ret = inflateReset2$1(strm, windowBits);
  if (ret !== Z_OK$2$1) {
    strm.state = null /*Z_NULL*/;
  }
  return ret;
}

function inflateInit$1(strm) {
  return inflateInit2$1(strm, DEF_WBITS$1);
}

/*
 Return state with length and distance decoding tables and index sizes set to
 fixed code decoding.  Normally this returns fixed tables from inffixed.h.
 If BUILDFIXED is defined, then instead this routine builds the tables the
 first time it's called, and returns those tables the first time and
 thereafter.  This reduces the size of the code by about 2K bytes, in
 exchange for a little execution time.  However, BUILDFIXED should not be
 used for threaded applications, since the rewriting of the tables and virgin
 may not be thread-safe.
 */
var virgin$1 = true;

var lenfix$1;
var distfix$1; // We have no pointers in JS, so keep tables separate

function fixedtables$1(state) {
  /* build fixed huffman tables if first call (may not be thread safe) */
  if (virgin$1) {
    var sym;

    lenfix$1 = new common$2.Buf32(512);
    distfix$1 = new common$2.Buf32(32);

    /* literal/length table */
    sym = 0;
    while (sym < 144) {
      state.lens[sym++] = 8;
    }
    while (sym < 256) {
      state.lens[sym++] = 9;
    }
    while (sym < 280) {
      state.lens[sym++] = 7;
    }
    while (sym < 288) {
      state.lens[sym++] = 8;
    }

    inftrees$2(LENS$2, state.lens, 0, 288, lenfix$1, 0, state.work, { bits: 9 });

    /* distance table */
    sym = 0;
    while (sym < 32) {
      state.lens[sym++] = 5;
    }

    inftrees$2(DISTS$2, state.lens, 0, 32, distfix$1, 0, state.work, { bits: 5 });

    /* do this just once */
    virgin$1 = false;
  }

  state.lencode = lenfix$1;
  state.lenbits = 9;
  state.distcode = distfix$1;
  state.distbits = 5;
}

/*
 Update the window with the last wsize (normally 32K) bytes written before
 returning.  If window does not exist yet, create it.  This is only called
 when a window is already in use, or when output has been written during this
 inflate call, but the end of the deflate stream has not been reached yet.
 It is also called to create a window for dictionary data when a dictionary
 is loaded.

 Providing output buffers larger than 32K to inflate() should provide a speed
 advantage, since only the last 32K of output is copied to the sliding window
 upon return from inflate(), and since all distances after the first 32K of
 output will fall in the output data, making match copies simpler and faster.
 The advantage may be dependent on the size of the processor's data caches.
 */
function updatewindow$1(strm, src, end, copy) {
  var dist;
  var state = strm.state;

  /* if it hasn't been done already, allocate space for the window */
  if (state.window === null) {
    state.wsize = 1 << state.wbits;
    state.wnext = 0;
    state.whave = 0;

    state.window = new common$2.Buf8(state.wsize);
  }

  /* copy state->wsize or less output bytes into the circular window */
  if (copy >= state.wsize) {
    common$2.arraySet(state.window, src, end - state.wsize, state.wsize, 0);
    state.wnext = 0;
    state.whave = state.wsize;
  } else {
    dist = state.wsize - state.wnext;
    if (dist > copy) {
      dist = copy;
    }
    //zmemcpy(state->window + state->wnext, end - copy, dist);
    common$2.arraySet(state.window, src, end - copy, dist, state.wnext);
    copy -= dist;
    if (copy) {
      //zmemcpy(state->window, end - copy, copy);
      common$2.arraySet(state.window, src, end - copy, copy, 0);
      state.wnext = copy;
      state.whave = state.wsize;
    } else {
      state.wnext += dist;
      if (state.wnext === state.wsize) {
        state.wnext = 0;
      }
      if (state.whave < state.wsize) {
        state.whave += dist;
      }
    }
  }
  return 0;
}

function inflate$1$1(strm, flush) {
  var state;
  var input, output; // input/output buffers
  var next; /* next input INDEX */
  var put; /* next output INDEX */
  var have, left; /* available input and output */
  var hold; /* bit buffer */
  var bits; /* bits in bit buffer */
  var _in, _out; /* save starting available input and output */
  var copy; /* number of stored or match bytes to copy */
  var from; /* where to copy match bytes from */
  var from_source;
  var here = 0; /* current decoding table entry */
  var here_bits, here_op, here_val; // paked "here" denormalized (JS specific)
  //var last;                   /* parent table entry */
  var last_bits, last_op, last_val; // paked "last" denormalized (JS specific)
  var len; /* length to copy for repeats, bits to drop */
  var ret; /* return code */
  var hbuf = new common$2.Buf8(4); /* buffer for gzip header crc calculation */
  var opts;

  var n; // temporary var for NEED_BITS

  var order = /* permutation of code lengths */
  [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];

  if (!strm || !strm.state || !strm.output || !strm.input && strm.avail_in !== 0) {
    return Z_STREAM_ERROR$1$1;
  }

  state = strm.state;
  if (state.mode === TYPE$2) {
    state.mode = TYPEDO$1;
  } /* skip check */

  //--- LOAD() ---
  put = strm.next_out;
  output = strm.output;
  left = strm.avail_out;
  next = strm.next_in;
  input = strm.input;
  have = strm.avail_in;
  hold = state.hold;
  bits = state.bits;
  //---

  _in = have;
  _out = left;
  ret = Z_OK$2$1;

  inf_leave: // goto emulation
  for (;;) {
    switch (state.mode) {
      case HEAD$1:
        if (state.wrap === 0) {
          state.mode = TYPEDO$1;
          break;
        }
        //=== NEEDBITS(16);
        while (bits < 16) {
          if (have === 0) {
            break inf_leave;
          }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if (state.wrap & 2 && hold === 0x8b1f) {
          /* gzip header */
          state.check = 0 /*crc32(0L, Z_NULL, 0)*/;
          //=== CRC2(state.check, hold);
          hbuf[0] = hold & 0xff;
          hbuf[1] = hold >>> 8 & 0xff;
          state.check = crc32_1$2(state.check, hbuf, 2, 0);
          //===//

          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
          state.mode = FLAGS$1;
          break;
        }
        state.flags = 0; /* expect zlib header */
        if (state.head) {
          state.head.done = false;
        }
        if (!(state.wrap & 1) || /* check if zlib header allowed */
        (((hold & 0xff) << /*BITS(8)*/8) + (hold >> 8)) % 31) {
          strm.msg = 'incorrect header check';
          state.mode = BAD$2;
          break;
        }
        if ((hold & 0x0f) !== /*BITS(4)*/Z_DEFLATED$2$1) {
          strm.msg = 'unknown compression method';
          state.mode = BAD$2;
          break;
        }
        //--- DROPBITS(4) ---//
        hold >>>= 4;
        bits -= 4;
        //---//
        len = (hold & 0x0f) + /*BITS(4)*/8;
        if (state.wbits === 0) {
          state.wbits = len;
        } else if (len > state.wbits) {
          strm.msg = 'invalid window size';
          state.mode = BAD$2;
          break;
        }
        state.dmax = 1 << len;
        //Tracev((stderr, "inflate:   zlib header ok\n"));
        strm.adler = state.check = 1 /*adler32(0L, Z_NULL, 0)*/;
        state.mode = hold & 0x200 ? DICTID$1 : TYPE$2;
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        break;
      case FLAGS$1:
        //=== NEEDBITS(16); */
        while (bits < 16) {
          if (have === 0) {
            break inf_leave;
          }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.flags = hold;
        if ((state.flags & 0xff) !== Z_DEFLATED$2$1) {
          strm.msg = 'unknown compression method';
          state.mode = BAD$2;
          break;
        }
        if (state.flags & 0xe000) {
          strm.msg = 'unknown header flags set';
          state.mode = BAD$2;
          break;
        }
        if (state.head) {
          state.head.text = hold >> 8 & 1;
        }
        if (state.flags & 0x0200) {
          //=== CRC2(state.check, hold);
          hbuf[0] = hold & 0xff;
          hbuf[1] = hold >>> 8 & 0xff;
          state.check = crc32_1$2(state.check, hbuf, 2, 0);
          //===//
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = TIME$1;
      /* falls through */
      case TIME$1:
        //=== NEEDBITS(32); */
        while (bits < 32) {
          if (have === 0) {
            break inf_leave;
          }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if (state.head) {
          state.head.time = hold;
        }
        if (state.flags & 0x0200) {
          //=== CRC4(state.check, hold)
          hbuf[0] = hold & 0xff;
          hbuf[1] = hold >>> 8 & 0xff;
          hbuf[2] = hold >>> 16 & 0xff;
          hbuf[3] = hold >>> 24 & 0xff;
          state.check = crc32_1$2(state.check, hbuf, 4, 0);
          //===
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = OS$1;
      /* falls through */
      case OS$1:
        //=== NEEDBITS(16); */
        while (bits < 16) {
          if (have === 0) {
            break inf_leave;
          }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if (state.head) {
          state.head.xflags = hold & 0xff;
          state.head.os = hold >> 8;
        }
        if (state.flags & 0x0200) {
          //=== CRC2(state.check, hold);
          hbuf[0] = hold & 0xff;
          hbuf[1] = hold >>> 8 & 0xff;
          state.check = crc32_1$2(state.check, hbuf, 2, 0);
          //===//
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = EXLEN$1;
      /* falls through */
      case EXLEN$1:
        if (state.flags & 0x0400) {
          //=== NEEDBITS(16); */
          while (bits < 16) {
            if (have === 0) {
              break inf_leave;
            }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.length = hold;
          if (state.head) {
            state.head.extra_len = hold;
          }
          if (state.flags & 0x0200) {
            //=== CRC2(state.check, hold);
            hbuf[0] = hold & 0xff;
            hbuf[1] = hold >>> 8 & 0xff;
            state.check = crc32_1$2(state.check, hbuf, 2, 0);
            //===//
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
        } else if (state.head) {
          state.head.extra = null /*Z_NULL*/;
        }
        state.mode = EXTRA$1;
      /* falls through */
      case EXTRA$1:
        if (state.flags & 0x0400) {
          copy = state.length;
          if (copy > have) {
            copy = have;
          }
          if (copy) {
            if (state.head) {
              len = state.head.extra_len - state.length;
              if (!state.head.extra) {
                // Use untyped array for more convenient processing later
                state.head.extra = new Array(state.head.extra_len);
              }
              common$2.arraySet(state.head.extra, input, next,
              // extra field is limited to 65536 bytes
              // - no need for additional size check
              copy,
              /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/
              len);
              //zmemcpy(state.head.extra + len, next,
              //        len + copy > state.head.extra_max ?
              //        state.head.extra_max - len : copy);
            }
            if (state.flags & 0x0200) {
              state.check = crc32_1$2(state.check, input, copy, next);
            }
            have -= copy;
            next += copy;
            state.length -= copy;
          }
          if (state.length) {
            break inf_leave;
          }
        }
        state.length = 0;
        state.mode = NAME$1;
      /* falls through */
      case NAME$1:
        if (state.flags & 0x0800) {
          if (have === 0) {
            break inf_leave;
          }
          copy = 0;
          do {
            // TODO: 2 or 1 bytes?
            len = input[next + copy++];
            /* use constant limit because in js we should not preallocate memory */
            if (state.head && len && state.length < 65536 /*state.head.name_max*/) {
              state.head.name += String.fromCharCode(len);
            }
          } while (len && copy < have);

          if (state.flags & 0x0200) {
            state.check = crc32_1$2(state.check, input, copy, next);
          }
          have -= copy;
          next += copy;
          if (len) {
            break inf_leave;
          }
        } else if (state.head) {
          state.head.name = null;
        }
        state.length = 0;
        state.mode = COMMENT$1;
      /* falls through */
      case COMMENT$1:
        if (state.flags & 0x1000) {
          if (have === 0) {
            break inf_leave;
          }
          copy = 0;
          do {
            len = input[next + copy++];
            /* use constant limit because in js we should not preallocate memory */
            if (state.head && len && state.length < 65536 /*state.head.comm_max*/) {
              state.head.comment += String.fromCharCode(len);
            }
          } while (len && copy < have);
          if (state.flags & 0x0200) {
            state.check = crc32_1$2(state.check, input, copy, next);
          }
          have -= copy;
          next += copy;
          if (len) {
            break inf_leave;
          }
        } else if (state.head) {
          state.head.comment = null;
        }
        state.mode = HCRC$1;
      /* falls through */
      case HCRC$1:
        if (state.flags & 0x0200) {
          //=== NEEDBITS(16); */
          while (bits < 16) {
            if (have === 0) {
              break inf_leave;
            }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          if (hold !== (state.check & 0xffff)) {
            strm.msg = 'header crc mismatch';
            state.mode = BAD$2;
            break;
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
        }
        if (state.head) {
          state.head.hcrc = state.flags >> 9 & 1;
          state.head.done = true;
        }
        strm.adler = state.check = 0;
        state.mode = TYPE$2;
        break;
      case DICTID$1:
        //=== NEEDBITS(32); */
        while (bits < 32) {
          if (have === 0) {
            break inf_leave;
          }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        strm.adler = state.check = zswap32$1(hold);
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = DICT$1;
      /* falls through */
      case DICT$1:
        if (state.havedict === 0) {
          //--- RESTORE() ---
          strm.next_out = put;
          strm.avail_out = left;
          strm.next_in = next;
          strm.avail_in = have;
          state.hold = hold;
          state.bits = bits;
          //---
          return Z_NEED_DICT$1;
        }
        strm.adler = state.check = 1 /*adler32(0L, Z_NULL, 0)*/;
        state.mode = TYPE$2;
      /* falls through */
      case TYPE$2:
        if (flush === Z_BLOCK$1$1 || flush === Z_TREES$1) {
          break inf_leave;
        }
      /* falls through */
      case TYPEDO$1:
        if (state.last) {
          //--- BYTEBITS() ---//
          hold >>>= bits & 7;
          bits -= bits & 7;
          //---//
          state.mode = CHECK$1;
          break;
        }
        //=== NEEDBITS(3); */
        while (bits < 3) {
          if (have === 0) {
            break inf_leave;
          }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.last = hold & 0x01 /*BITS(1)*/;
        //--- DROPBITS(1) ---//
        hold >>>= 1;
        bits -= 1;
        //---//

        switch (hold & 0x03) {/*BITS(2)*/case 0:
            /* stored block */
            //Tracev((stderr, "inflate:     stored block%s\n",
            //        state.last ? " (last)" : ""));
            state.mode = STORED$1;
            break;
          case 1:
            /* fixed block */
            fixedtables$1(state);
            //Tracev((stderr, "inflate:     fixed codes block%s\n",
            //        state.last ? " (last)" : ""));
            state.mode = LEN_$1; /* decode codes */
            if (flush === Z_TREES$1) {
              //--- DROPBITS(2) ---//
              hold >>>= 2;
              bits -= 2;
              //---//
              break inf_leave;
            }
            break;
          case 2:
            /* dynamic block */
            //Tracev((stderr, "inflate:     dynamic codes block%s\n",
            //        state.last ? " (last)" : ""));
            state.mode = TABLE$1;
            break;
          case 3:
            strm.msg = 'invalid block type';
            state.mode = BAD$2;
        }
        //--- DROPBITS(2) ---//
        hold >>>= 2;
        bits -= 2;
        //---//
        break;
      case STORED$1:
        //--- BYTEBITS() ---// /* go to byte boundary */
        hold >>>= bits & 7;
        bits -= bits & 7;
        //---//
        //=== NEEDBITS(32); */
        while (bits < 32) {
          if (have === 0) {
            break inf_leave;
          }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if ((hold & 0xffff) !== (hold >>> 16 ^ 0xffff)) {
          strm.msg = 'invalid stored block lengths';
          state.mode = BAD$2;
          break;
        }
        state.length = hold & 0xffff;
        //Tracev((stderr, "inflate:       stored length %u\n",
        //        state.length));
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = COPY_$1;
        if (flush === Z_TREES$1) {
          break inf_leave;
        }
      /* falls through */
      case COPY_$1:
        state.mode = COPY$1;
      /* falls through */
      case COPY$1:
        copy = state.length;
        if (copy) {
          if (copy > have) {
            copy = have;
          }
          if (copy > left) {
            copy = left;
          }
          if (copy === 0) {
            break inf_leave;
          }
          //--- zmemcpy(put, next, copy); ---
          common$2.arraySet(output, input, next, copy, put);
          //---//
          have -= copy;
          next += copy;
          left -= copy;
          put += copy;
          state.length -= copy;
          break;
        }
        //Tracev((stderr, "inflate:       stored end\n"));
        state.mode = TYPE$2;
        break;
      case TABLE$1:
        //=== NEEDBITS(14); */
        while (bits < 14) {
          if (have === 0) {
            break inf_leave;
          }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.nlen = (hold & 0x1f) + /*BITS(5)*/257;
        //--- DROPBITS(5) ---//
        hold >>>= 5;
        bits -= 5;
        //---//
        state.ndist = (hold & 0x1f) + /*BITS(5)*/1;
        //--- DROPBITS(5) ---//
        hold >>>= 5;
        bits -= 5;
        //---//
        state.ncode = (hold & 0x0f) + /*BITS(4)*/4;
        //--- DROPBITS(4) ---//
        hold >>>= 4;
        bits -= 4;
        //---//
        //#ifndef PKZIP_BUG_WORKAROUND
        if (state.nlen > 286 || state.ndist > 30) {
          strm.msg = 'too many length or distance symbols';
          state.mode = BAD$2;
          break;
        }
        //#endif
        //Tracev((stderr, "inflate:       table sizes ok\n"));
        state.have = 0;
        state.mode = LENLENS$1;
      /* falls through */
      case LENLENS$1:
        while (state.have < state.ncode) {
          //=== NEEDBITS(3);
          while (bits < 3) {
            if (have === 0) {
              break inf_leave;
            }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.lens[order[state.have++]] = hold & 0x07; //BITS(3);
          //--- DROPBITS(3) ---//
          hold >>>= 3;
          bits -= 3;
          //---//
        }
        while (state.have < 19) {
          state.lens[order[state.have++]] = 0;
        }
        // We have separate tables & no pointers. 2 commented lines below not needed.
        //state.next = state.codes;
        //state.lencode = state.next;
        // Switch to use dynamic table
        state.lencode = state.lendyn;
        state.lenbits = 7;

        opts = { bits: state.lenbits };
        ret = inftrees$2(CODES$2, state.lens, 0, 19, state.lencode, 0, state.work, opts);
        state.lenbits = opts.bits;

        if (ret) {
          strm.msg = 'invalid code lengths set';
          state.mode = BAD$2;
          break;
        }
        //Tracev((stderr, "inflate:       code lengths ok\n"));
        state.have = 0;
        state.mode = CODELENS$1;
      /* falls through */
      case CODELENS$1:
        while (state.have < state.nlen + state.ndist) {
          for (;;) {
            here = state.lencode[hold & (1 << state.lenbits) - 1]; /*BITS(state.lenbits)*/
            here_bits = here >>> 24;
            here_op = here >>> 16 & 0xff;
            here_val = here & 0xffff;

            if (here_bits <= bits) {
              break;
            }
            //--- PULLBYTE() ---//
            if (have === 0) {
              break inf_leave;
            }
            have--;
            hold += input[next++] << bits;
            bits += 8;
            //---//
          }
          if (here_val < 16) {
            //--- DROPBITS(here.bits) ---//
            hold >>>= here_bits;
            bits -= here_bits;
            //---//
            state.lens[state.have++] = here_val;
          } else {
            if (here_val === 16) {
              //=== NEEDBITS(here.bits + 2);
              n = here_bits + 2;
              while (bits < n) {
                if (have === 0) {
                  break inf_leave;
                }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              //===//
              //--- DROPBITS(here.bits) ---//
              hold >>>= here_bits;
              bits -= here_bits;
              //---//
              if (state.have === 0) {
                strm.msg = 'invalid bit length repeat';
                state.mode = BAD$2;
                break;
              }
              len = state.lens[state.have - 1];
              copy = 3 + (hold & 0x03); //BITS(2);
              //--- DROPBITS(2) ---//
              hold >>>= 2;
              bits -= 2;
              //---//
            } else if (here_val === 17) {
              //=== NEEDBITS(here.bits + 3);
              n = here_bits + 3;
              while (bits < n) {
                if (have === 0) {
                  break inf_leave;
                }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              //===//
              //--- DROPBITS(here.bits) ---//
              hold >>>= here_bits;
              bits -= here_bits;
              //---//
              len = 0;
              copy = 3 + (hold & 0x07); //BITS(3);
              //--- DROPBITS(3) ---//
              hold >>>= 3;
              bits -= 3;
              //---//
            } else {
              //=== NEEDBITS(here.bits + 7);
              n = here_bits + 7;
              while (bits < n) {
                if (have === 0) {
                  break inf_leave;
                }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              //===//
              //--- DROPBITS(here.bits) ---//
              hold >>>= here_bits;
              bits -= here_bits;
              //---//
              len = 0;
              copy = 11 + (hold & 0x7f); //BITS(7);
              //--- DROPBITS(7) ---//
              hold >>>= 7;
              bits -= 7;
              //---//
            }
            if (state.have + copy > state.nlen + state.ndist) {
              strm.msg = 'invalid bit length repeat';
              state.mode = BAD$2;
              break;
            }
            while (copy--) {
              state.lens[state.have++] = len;
            }
          }
        }

        /* handle error breaks in while */
        if (state.mode === BAD$2) {
          break;
        }

        /* check for end-of-block code (better have one) */
        if (state.lens[256] === 0) {
          strm.msg = 'invalid code -- missing end-of-block';
          state.mode = BAD$2;
          break;
        }

        /* build code tables -- note: do not change the lenbits or distbits
           values here (9 and 6) without reading the comments in inftrees.h
           concerning the ENOUGH constants, which depend on those values */
        state.lenbits = 9;

        opts = { bits: state.lenbits };
        ret = inftrees$2(LENS$2, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);
        // We have separate tables & no pointers. 2 commented lines below not needed.
        // state.next_index = opts.table_index;
        state.lenbits = opts.bits;
        // state.lencode = state.next;

        if (ret) {
          strm.msg = 'invalid literal/lengths set';
          state.mode = BAD$2;
          break;
        }

        state.distbits = 6;
        //state.distcode.copy(state.codes);
        // Switch to use dynamic table
        state.distcode = state.distdyn;
        opts = { bits: state.distbits };
        ret = inftrees$2(DISTS$2, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);
        // We have separate tables & no pointers. 2 commented lines below not needed.
        // state.next_index = opts.table_index;
        state.distbits = opts.bits;
        // state.distcode = state.next;

        if (ret) {
          strm.msg = 'invalid distances set';
          state.mode = BAD$2;
          break;
        }
        //Tracev((stderr, 'inflate:       codes ok\n'));
        state.mode = LEN_$1;
        if (flush === Z_TREES$1) {
          break inf_leave;
        }
      /* falls through */
      case LEN_$1:
        state.mode = LEN$1;
      /* falls through */
      case LEN$1:
        if (have >= 6 && left >= 258) {
          //--- RESTORE() ---
          strm.next_out = put;
          strm.avail_out = left;
          strm.next_in = next;
          strm.avail_in = have;
          state.hold = hold;
          state.bits = bits;
          //---
          inffast$2(strm, _out);
          //--- LOAD() ---
          put = strm.next_out;
          output = strm.output;
          left = strm.avail_out;
          next = strm.next_in;
          input = strm.input;
          have = strm.avail_in;
          hold = state.hold;
          bits = state.bits;
          //---

          if (state.mode === TYPE$2) {
            state.back = -1;
          }
          break;
        }
        state.back = 0;
        for (;;) {
          here = state.lencode[hold & (1 << state.lenbits) - 1]; /*BITS(state.lenbits)*/
          here_bits = here >>> 24;
          here_op = here >>> 16 & 0xff;
          here_val = here & 0xffff;

          if (here_bits <= bits) {
            break;
          }
          //--- PULLBYTE() ---//
          if (have === 0) {
            break inf_leave;
          }
          have--;
          hold += input[next++] << bits;
          bits += 8;
          //---//
        }
        if (here_op && (here_op & 0xf0) === 0) {
          last_bits = here_bits;
          last_op = here_op;
          last_val = here_val;
          for (;;) {
            here = state.lencode[last_val + ((hold & (1 << last_bits + last_op) - 1) >> /*BITS(last.bits + last.op)*/last_bits)];
            here_bits = here >>> 24;
            here_op = here >>> 16 & 0xff;
            here_val = here & 0xffff;

            if (last_bits + here_bits <= bits) {
              break;
            }
            //--- PULLBYTE() ---//
            if (have === 0) {
              break inf_leave;
            }
            have--;
            hold += input[next++] << bits;
            bits += 8;
            //---//
          }
          //--- DROPBITS(last.bits) ---//
          hold >>>= last_bits;
          bits -= last_bits;
          //---//
          state.back += last_bits;
        }
        //--- DROPBITS(here.bits) ---//
        hold >>>= here_bits;
        bits -= here_bits;
        //---//
        state.back += here_bits;
        state.length = here_val;
        if (here_op === 0) {
          //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
          //        "inflate:         literal '%c'\n" :
          //        "inflate:         literal 0x%02x\n", here.val));
          state.mode = LIT$1;
          break;
        }
        if (here_op & 32) {
          //Tracevv((stderr, "inflate:         end of block\n"));
          state.back = -1;
          state.mode = TYPE$2;
          break;
        }
        if (here_op & 64) {
          strm.msg = 'invalid literal/length code';
          state.mode = BAD$2;
          break;
        }
        state.extra = here_op & 15;
        state.mode = LENEXT$1;
      /* falls through */
      case LENEXT$1:
        if (state.extra) {
          //=== NEEDBITS(state.extra);
          n = state.extra;
          while (bits < n) {
            if (have === 0) {
              break inf_leave;
            }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.length += hold & (1 << state.extra) - 1 /*BITS(state.extra)*/;
          //--- DROPBITS(state.extra) ---//
          hold >>>= state.extra;
          bits -= state.extra;
          //---//
          state.back += state.extra;
        }
        //Tracevv((stderr, "inflate:         length %u\n", state.length));
        state.was = state.length;
        state.mode = DIST$1;
      /* falls through */
      case DIST$1:
        for (;;) {
          here = state.distcode[hold & (1 << state.distbits) - 1]; /*BITS(state.distbits)*/
          here_bits = here >>> 24;
          here_op = here >>> 16 & 0xff;
          here_val = here & 0xffff;

          if (here_bits <= bits) {
            break;
          }
          //--- PULLBYTE() ---//
          if (have === 0) {
            break inf_leave;
          }
          have--;
          hold += input[next++] << bits;
          bits += 8;
          //---//
        }
        if ((here_op & 0xf0) === 0) {
          last_bits = here_bits;
          last_op = here_op;
          last_val = here_val;
          for (;;) {
            here = state.distcode[last_val + ((hold & (1 << last_bits + last_op) - 1) >> /*BITS(last.bits + last.op)*/last_bits)];
            here_bits = here >>> 24;
            here_op = here >>> 16 & 0xff;
            here_val = here & 0xffff;

            if (last_bits + here_bits <= bits) {
              break;
            }
            //--- PULLBYTE() ---//
            if (have === 0) {
              break inf_leave;
            }
            have--;
            hold += input[next++] << bits;
            bits += 8;
            //---//
          }
          //--- DROPBITS(last.bits) ---//
          hold >>>= last_bits;
          bits -= last_bits;
          //---//
          state.back += last_bits;
        }
        //--- DROPBITS(here.bits) ---//
        hold >>>= here_bits;
        bits -= here_bits;
        //---//
        state.back += here_bits;
        if (here_op & 64) {
          strm.msg = 'invalid distance code';
          state.mode = BAD$2;
          break;
        }
        state.offset = here_val;
        state.extra = here_op & 15;
        state.mode = DISTEXT$1;
      /* falls through */
      case DISTEXT$1:
        if (state.extra) {
          //=== NEEDBITS(state.extra);
          n = state.extra;
          while (bits < n) {
            if (have === 0) {
              break inf_leave;
            }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          state.offset += hold & (1 << state.extra) - 1 /*BITS(state.extra)*/;
          //--- DROPBITS(state.extra) ---//
          hold >>>= state.extra;
          bits -= state.extra;
          //---//
          state.back += state.extra;
        }
        //#ifdef INFLATE_STRICT
        if (state.offset > state.dmax) {
          strm.msg = 'invalid distance too far back';
          state.mode = BAD$2;
          break;
        }
        //#endif
        //Tracevv((stderr, "inflate:         distance %u\n", state.offset));
        state.mode = MATCH$1;
      /* falls through */
      case MATCH$1:
        if (left === 0) {
          break inf_leave;
        }
        copy = _out - left;
        if (state.offset > copy) {
          /* copy from window */
          copy = state.offset - copy;
          if (copy > state.whave) {
            if (state.sane) {
              strm.msg = 'invalid distance too far back';
              state.mode = BAD$2;
              break;
            }
            // (!) This block is disabled in zlib defaults,
            // don't enable it for binary compatibility
            //#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
            //          Trace((stderr, "inflate.c too far\n"));
            //          copy -= state.whave;
            //          if (copy > state.length) { copy = state.length; }
            //          if (copy > left) { copy = left; }
            //          left -= copy;
            //          state.length -= copy;
            //          do {
            //            output[put++] = 0;
            //          } while (--copy);
            //          if (state.length === 0) { state.mode = LEN; }
            //          break;
            //#endif
          }
          if (copy > state.wnext) {
            copy -= state.wnext;
            from = state.wsize - copy;
          } else {
            from = state.wnext - copy;
          }
          if (copy > state.length) {
            copy = state.length;
          }
          from_source = state.window;
        } else {
          /* copy from output */
          from_source = output;
          from = put - state.offset;
          copy = state.length;
        }
        if (copy > left) {
          copy = left;
        }
        left -= copy;
        state.length -= copy;
        do {
          output[put++] = from_source[from++];
        } while (--copy);
        if (state.length === 0) {
          state.mode = LEN$1;
        }
        break;
      case LIT$1:
        if (left === 0) {
          break inf_leave;
        }
        output[put++] = state.length;
        left--;
        state.mode = LEN$1;
        break;
      case CHECK$1:
        if (state.wrap) {
          //=== NEEDBITS(32);
          while (bits < 32) {
            if (have === 0) {
              break inf_leave;
            }
            have--;
            // Use '|' instead of '+' to make sure that result is signed
            hold |= input[next++] << bits;
            bits += 8;
          }
          //===//
          _out -= left;
          strm.total_out += _out;
          state.total += _out;
          if (_out) {
            strm.adler = state.check =
            /*UPDATE(state.check, put - _out, _out);*/
            state.flags ? crc32_1$2(state.check, output, _out, put - _out) : adler32_1$2(state.check, output, _out, put - _out);
          }
          _out = left;
          // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too
          if ((state.flags ? hold : zswap32$1(hold)) !== state.check) {
            strm.msg = 'incorrect data check';
            state.mode = BAD$2;
            break;
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
          //Tracev((stderr, "inflate:   check matches trailer\n"));
        }
        state.mode = LENGTH$1;
      /* falls through */
      case LENGTH$1:
        if (state.wrap && state.flags) {
          //=== NEEDBITS(32);
          while (bits < 32) {
            if (have === 0) {
              break inf_leave;
            }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          //===//
          if (hold !== (state.total & 0xffffffff)) {
            strm.msg = 'incorrect length check';
            state.mode = BAD$2;
            break;
          }
          //=== INITBITS();
          hold = 0;
          bits = 0;
          //===//
          //Tracev((stderr, "inflate:   length matches trailer\n"));
        }
        state.mode = DONE$1;
      /* falls through */
      case DONE$1:
        ret = Z_STREAM_END$2$1;
        break inf_leave;
      case BAD$2:
        ret = Z_DATA_ERROR$1$1;
        break inf_leave;
      case MEM$1:
        return Z_MEM_ERROR$1;
      case SYNC$1:
      /* falls through */
      default:
        return Z_STREAM_ERROR$1$1;
    }
  }

  // inf_leave <- here is real place for "goto inf_leave", emulated via "break inf_leave"

  /*
     Return from inflate(), updating the total counts and the check value.
     If there was no progress during the inflate() call, return a buffer
     error.  Call updatewindow() to create and/or update the window state.
     Note: a memory error from inflate() is non-recoverable.
   */

  //--- RESTORE() ---
  strm.next_out = put;
  strm.avail_out = left;
  strm.next_in = next;
  strm.avail_in = have;
  state.hold = hold;
  state.bits = bits;
  //---

  if (state.wsize || _out !== strm.avail_out && state.mode < BAD$2 && (state.mode < CHECK$1 || flush !== Z_FINISH$2$1)) {
    if (updatewindow$1(strm, strm.output, strm.next_out, _out - strm.avail_out)) {
      state.mode = MEM$1;
      return Z_MEM_ERROR$1;
    }
  }
  _in -= strm.avail_in;
  _out -= strm.avail_out;
  strm.total_in += _in;
  strm.total_out += _out;
  state.total += _out;
  if (state.wrap && _out) {
    strm.adler = state.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/
    state.flags ? crc32_1$2(state.check, output, _out, strm.next_out - _out) : adler32_1$2(state.check, output, _out, strm.next_out - _out);
  }
  strm.data_type = state.bits + (state.last ? 64 : 0) + (state.mode === TYPE$2 ? 128 : 0) + (state.mode === LEN_$1 || state.mode === COPY_$1 ? 256 : 0);
  if ((_in === 0 && _out === 0 || flush === Z_FINISH$2$1) && ret === Z_OK$2$1) {
    ret = Z_BUF_ERROR$1$1;
  }
  return ret;
}

function inflateEnd$1(strm) {

  if (!strm || !strm.state /*|| strm->zfree == (free_func)0*/) {
      return Z_STREAM_ERROR$1$1;
    }

  var state = strm.state;
  if (state.window) {
    state.window = null;
  }
  strm.state = null;
  return Z_OK$2$1;
}

function inflateGetHeader$1(strm, head) {
  var state;

  /* check state */
  if (!strm || !strm.state) {
    return Z_STREAM_ERROR$1$1;
  }
  state = strm.state;
  if ((state.wrap & 2) === 0) {
    return Z_STREAM_ERROR$1$1;
  }

  /* save header structure */
  state.head = head;
  head.done = false;
  return Z_OK$2$1;
}

function inflateSetDictionary$1(strm, dictionary) {
  var dictLength = dictionary.length;

  var state;
  var dictid;
  var ret;

  /* check state */
  if (!strm /* == Z_NULL */ || !strm.state /* == Z_NULL */) {
      return Z_STREAM_ERROR$1$1;
    }
  state = strm.state;

  if (state.wrap !== 0 && state.mode !== DICT$1) {
    return Z_STREAM_ERROR$1$1;
  }

  /* check for correct dictionary identifier */
  if (state.mode === DICT$1) {
    dictid = 1; /* adler32(0, null, 0)*/
    /* dictid = adler32(dictid, dictionary, dictLength); */
    dictid = adler32_1$2(dictid, dictionary, dictLength, 0);
    if (dictid !== state.check) {
      return Z_DATA_ERROR$1$1;
    }
  }
  /* copy dictionary to window using updatewindow(), which will amend the
   existing dictionary if appropriate */
  ret = updatewindow$1(strm, dictionary, dictLength, dictLength);
  if (ret) {
    state.mode = MEM$1;
    return Z_MEM_ERROR$1;
  }
  state.havedict = 1;
  // Tracev((stderr, "inflate:   dictionary set\n"));
  return Z_OK$2$1;
}

var inflateReset_1$1 = inflateReset$1;
var inflateReset2_1$1 = inflateReset2$1;
var inflateResetKeep_1$1 = inflateResetKeep$1;
var inflateInit_1$1 = inflateInit$1;
var inflateInit2_1$1 = inflateInit2$1;
var inflate_2$1$1 = inflate$1$1;
var inflateEnd_1$1 = inflateEnd$1;
var inflateGetHeader_1$1 = inflateGetHeader$1;
var inflateSetDictionary_1$1 = inflateSetDictionary$1;
var inflateInfo$1 = 'pako inflate (from Nodeca project)';

/* Not implemented
exports.inflateCopy = inflateCopy;
exports.inflateGetDictionary = inflateGetDictionary;
exports.inflateMark = inflateMark;
exports.inflatePrime = inflatePrime;
exports.inflateSync = inflateSync;
exports.inflateSyncPoint = inflateSyncPoint;
exports.inflateUndermine = inflateUndermine;
*/

var inflate_1$2$1 = {
  inflateReset: inflateReset_1$1,
  inflateReset2: inflateReset2_1$1,
  inflateResetKeep: inflateResetKeep_1$1,
  inflateInit: inflateInit_1$1,
  inflateInit2: inflateInit2_1$1,
  inflate: inflate_2$1$1,
  inflateEnd: inflateEnd_1$1,
  inflateGetHeader: inflateGetHeader_1$1,
  inflateSetDictionary: inflateSetDictionary_1$1,
  inflateInfo: inflateInfo$1
};

'use strict';

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

var constants$2 = {

  /* Allowed flush values; see deflate() and inflate() below for details */
  Z_NO_FLUSH: 0,
  Z_PARTIAL_FLUSH: 1,
  Z_SYNC_FLUSH: 2,
  Z_FULL_FLUSH: 3,
  Z_FINISH: 4,
  Z_BLOCK: 5,
  Z_TREES: 6,

  /* Return codes for the compression/decompression functions. Negative values
  * are errors, positive values are used for special but normal events.
  */
  Z_OK: 0,
  Z_STREAM_END: 1,
  Z_NEED_DICT: 2,
  Z_ERRNO: -1,
  Z_STREAM_ERROR: -2,
  Z_DATA_ERROR: -3,
  //Z_MEM_ERROR:     -4,
  Z_BUF_ERROR: -5,
  //Z_VERSION_ERROR: -6,

  /* compression levels */
  Z_NO_COMPRESSION: 0,
  Z_BEST_SPEED: 1,
  Z_BEST_COMPRESSION: 9,
  Z_DEFAULT_COMPRESSION: -1,

  Z_FILTERED: 1,
  Z_HUFFMAN_ONLY: 2,
  Z_RLE: 3,
  Z_FIXED: 4,
  Z_DEFAULT_STRATEGY: 0,

  /* Possible values of the data_type field (though see inflate()) */
  Z_BINARY: 0,
  Z_TEXT: 1,
  //Z_ASCII:                1, // = Z_TEXT (deprecated)
  Z_UNKNOWN: 2,

  /* The deflate compression method */
  Z_DEFLATED: 8
  //Z_NULL:                 null // Use -1 or null inline, depending on var type
};

'use strict';

// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.

function GZheader$2() {
  /* true if compressed data believed to be text */
  this.text = 0;
  /* modification time */
  this.time = 0;
  /* extra flags (not used when writing a gzip file) */
  this.xflags = 0;
  /* operating system */
  this.os = 0;
  /* pointer to extra field or Z_NULL if none */
  this.extra = null;
  /* extra field length (valid if extra != Z_NULL) */
  this.extra_len = 0; // Actually, we don't need it in JS,
  // but leave for few code modifications

  //
  // Setup limits is not necessary because in js we should not preallocate memory
  // for inflate use constant limit in 65536 bytes
  //

  /* space at extra (only when reading header) */
  // this.extra_max  = 0;
  /* pointer to zero-terminated file name or Z_NULL */
  this.name = '';
  /* space at name (only when reading header) */
  // this.name_max   = 0;
  /* pointer to zero-terminated comment or Z_NULL */
  this.comment = '';
  /* space at comment (only when reading header) */
  // this.comm_max   = 0;
  /* true if there was or will be a header crc */
  this.hcrc = 0;
  /* true when done reading gzip header (not used when writing a gzip file) */
  this.done = false;
}

var gzheader$2 = GZheader$2;

'use strict';

var toString$1$1 = Object.prototype.toString;

/**
 * class Inflate
 *
 * Generic JS-style wrapper for zlib calls. If you don't need
 * streaming behaviour - use more simple functions: [[inflate]]
 * and [[inflateRaw]].
 **/

/* internal
 * inflate.chunks -> Array
 *
 * Chunks of output data, if [[Inflate#onData]] not overridden.
 **/

/**
 * Inflate.result -> Uint8Array|Array|String
 *
 * Uncompressed result, generated by default [[Inflate#onData]]
 * and [[Inflate#onEnd]] handlers. Filled after you push last chunk
 * (call [[Inflate#push]] with `Z_FINISH` / `true` param) or if you
 * push a chunk with explicit flush (call [[Inflate#push]] with
 * `Z_SYNC_FLUSH` param).
 **/

/**
 * Inflate.err -> Number
 *
 * Error code after inflate finished. 0 (Z_OK) on success.
 * Should be checked if broken data possible.
 **/

/**
 * Inflate.msg -> String
 *
 * Error message, if [[Inflate.err]] != 0
 **/

/**
 * new Inflate(options)
 * - options (Object): zlib inflate options.
 *
 * Creates new inflator instance with specified params. Throws exception
 * on bad params. Supported options:
 *
 * - `windowBits`
 * - `dictionary`
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information on these.
 *
 * Additional options, for internal needs:
 *
 * - `chunkSize` - size of generated data chunks (16K by default)
 * - `raw` (Boolean) - do raw inflate
 * - `to` (String) - if equal to 'string', then result will be converted
 *   from utf8 to utf16 (javascript) string. When string output requested,
 *   chunk length can differ from `chunkSize`, depending on content.
 *
 * By default, when no options set, autodetect deflate/gzip data format via
 * wrapper header.
 *
 * ##### Example:
 *
 * ```javascript
 * var pako = require('pako')
 *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])
 *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);
 *
 * var inflate = new pako.Inflate({ level: 3});
 *
 * inflate.push(chunk1, false);
 * inflate.push(chunk2, true);  // true -> last chunk
 *
 * if (inflate.err) { throw new Error(inflate.err); }
 *
 * console.log(inflate.result);
 * ```
 **/
function Inflate$1(options) {
  if (!(this instanceof Inflate$1)) return new Inflate$1(options);

  this.options = common$2.assign({
    chunkSize: 16384,
    windowBits: 0,
    to: ''
  }, options || {});

  var opt = this.options;

  // Force window size for `raw` data, if not set directly,
  // because we have no header for autodetect.
  if (opt.raw && opt.windowBits >= 0 && opt.windowBits < 16) {
    opt.windowBits = -opt.windowBits;
    if (opt.windowBits === 0) {
      opt.windowBits = -15;
    }
  }

  // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate
  if (opt.windowBits >= 0 && opt.windowBits < 16 && !(options && options.windowBits)) {
    opt.windowBits += 32;
  }

  // Gzip header has no info about windows size, we can do autodetect only
  // for deflate. So, if window size not set, force it to max when gzip possible
  if (opt.windowBits > 15 && opt.windowBits < 48) {
    // bit 3 (16) -> gzipped data
    // bit 4 (32) -> autodetect gzip/deflate
    if ((opt.windowBits & 15) === 0) {
      opt.windowBits |= 15;
    }
  }

  this.err = 0; // error code, if happens (0 = Z_OK)
  this.msg = ''; // error message
  this.ended = false; // used to avoid multiple onEnd() calls
  this.chunks = []; // chunks of compressed data

  this.strm = new zstream$2();
  this.strm.avail_out = 0;

  var status = inflate_1$2$1.inflateInit2(this.strm, opt.windowBits);

  if (status !== constants$2.Z_OK) {
    throw new Error(messages$2[status]);
  }

  this.header = new gzheader$2();

  inflate_1$2$1.inflateGetHeader(this.strm, this.header);
}

/**
 * Inflate#push(data[, mode]) -> Boolean
 * - data (Uint8Array|Array|ArrayBuffer|String): input data
 * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.
 *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.
 *
 * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with
 * new output chunks. Returns `true` on success. The last data block must have
 * mode Z_FINISH (or `true`). That will flush internal pending buffers and call
 * [[Inflate#onEnd]]. For interim explicit flushes (without ending the stream) you
 * can use mode Z_SYNC_FLUSH, keeping the decompression context.
 *
 * On fail call [[Inflate#onEnd]] with error code and return false.
 *
 * We strongly recommend to use `Uint8Array` on input for best speed (output
 * format is detected automatically). Also, don't skip last param and always
 * use the same type in your code (boolean or number). That will improve JS speed.
 *
 * For regular `Array`-s make sure all elements are [0..255].
 *
 * ##### Example
 *
 * ```javascript
 * push(chunk, false); // push one of data chunks
 * ...
 * push(chunk, true);  // push last chunk
 * ```
 **/
Inflate$1.prototype.push = function (data, mode) {
  var strm = this.strm;
  var chunkSize = this.options.chunkSize;
  var dictionary = this.options.dictionary;
  var status, _mode;
  var next_out_utf8, tail, utf8str;
  var dict;

  // Flag to properly process Z_BUF_ERROR on testing inflate call
  // when we check that all output data was flushed.
  var allowBufError = false;

  if (this.ended) {
    return false;
  }
  _mode = mode === ~~mode ? mode : mode === true ? constants$2.Z_FINISH : constants$2.Z_NO_FLUSH;

  // Convert data if needed
  if (typeof data === 'string') {
    // Only binary strings can be decompressed on practice
    strm.input = strings$3.binstring2buf(data);
  } else if (toString$1$1.call(data) === '[object ArrayBuffer]') {
    strm.input = new Uint8Array(data);
  } else {
    strm.input = data;
  }

  strm.next_in = 0;
  strm.avail_in = strm.input.length;

  do {
    if (strm.avail_out === 0) {
      strm.output = new common$2.Buf8(chunkSize);
      strm.next_out = 0;
      strm.avail_out = chunkSize;
    }

    status = inflate_1$2$1.inflate(strm, constants$2.Z_NO_FLUSH); /* no bad return value */

    if (status === constants$2.Z_NEED_DICT && dictionary) {
      // Convert data if needed
      if (typeof dictionary === 'string') {
        dict = strings$3.string2buf(dictionary);
      } else if (toString$1$1.call(dictionary) === '[object ArrayBuffer]') {
        dict = new Uint8Array(dictionary);
      } else {
        dict = dictionary;
      }

      status = inflate_1$2$1.inflateSetDictionary(this.strm, dict);
    }

    if (status === constants$2.Z_BUF_ERROR && allowBufError === true) {
      status = constants$2.Z_OK;
      allowBufError = false;
    }

    if (status !== constants$2.Z_STREAM_END && status !== constants$2.Z_OK) {
      this.onEnd(status);
      this.ended = true;
      return false;
    }

    if (strm.next_out) {
      if (strm.avail_out === 0 || status === constants$2.Z_STREAM_END || strm.avail_in === 0 && (_mode === constants$2.Z_FINISH || _mode === constants$2.Z_SYNC_FLUSH)) {

        if (this.options.to === 'string') {

          next_out_utf8 = strings$3.utf8border(strm.output, strm.next_out);

          tail = strm.next_out - next_out_utf8;
          utf8str = strings$3.buf2string(strm.output, next_out_utf8);

          // move tail
          strm.next_out = tail;
          strm.avail_out = chunkSize - tail;
          if (tail) {
            common$2.arraySet(strm.output, strm.output, next_out_utf8, tail, 0);
          }

          this.onData(utf8str);
        } else {
          this.onData(common$2.shrinkBuf(strm.output, strm.next_out));
        }
      }
    }

    // When no more input data, we should check that internal inflate buffers
    // are flushed. The only way to do it when avail_out = 0 - run one more
    // inflate pass. But if output data not exists, inflate return Z_BUF_ERROR.
    // Here we set flag to process this error properly.
    //
    // NOTE. Deflate does not return error in this case and does not needs such
    // logic.
    if (strm.avail_in === 0 && strm.avail_out === 0) {
      allowBufError = true;
    }
  } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== constants$2.Z_STREAM_END);

  if (status === constants$2.Z_STREAM_END) {
    _mode = constants$2.Z_FINISH;
  }

  // Finalize on the last chunk.
  if (_mode === constants$2.Z_FINISH) {
    status = inflate_1$2$1.inflateEnd(this.strm);
    this.onEnd(status);
    this.ended = true;
    return status === constants$2.Z_OK;
  }

  // callback interim results if Z_SYNC_FLUSH.
  if (_mode === constants$2.Z_SYNC_FLUSH) {
    this.onEnd(constants$2.Z_OK);
    strm.avail_out = 0;
    return true;
  }

  return true;
};

/**
 * Inflate#onData(chunk) -> Void
 * - chunk (Uint8Array|Array|String): output data. Type of array depends
 *   on js engine support. When string output requested, each chunk
 *   will be string.
 *
 * By default, stores data blocks in `chunks[]` property and glue
 * those in `onEnd`. Override this handler, if you need another behaviour.
 **/
Inflate$1.prototype.onData = function (chunk) {
  this.chunks.push(chunk);
};

/**
 * Inflate#onEnd(status) -> Void
 * - status (Number): inflate status. 0 (Z_OK) on success,
 *   other if not.
 *
 * Called either after you tell inflate that the input stream is
 * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)
 * or if an error happened. By default - join collected chunks,
 * free memory and fill `results` / `err` properties.
 **/
Inflate$1.prototype.onEnd = function (status) {
  // On success - join
  if (status === constants$2.Z_OK) {
    if (this.options.to === 'string') {
      // Glue & convert here, until we teach pako to send
      // utf8 aligned strings to onData
      this.result = this.chunks.join('');
    } else {
      this.result = common$2.flattenChunks(this.chunks);
    }
  }
  this.chunks = [];
  this.err = status;
  this.msg = this.strm.msg;
};

/**
 * inflate(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to decompress.
 * - options (Object): zlib inflate options.
 *
 * Decompress `data` with inflate/ungzip and `options`. Autodetect
 * format via wrapper header by default. That's why we don't provide
 * separate `ungzip` method.
 *
 * Supported options are:
 *
 * - windowBits
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information.
 *
 * Sugar (options):
 *
 * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify
 *   negative windowBits implicitly.
 * - `to` (String) - if equal to 'string', then result will be converted
 *   from utf8 to utf16 (javascript) string. When string output requested,
 *   chunk length can differ from `chunkSize`, depending on content.
 *
 *
 * ##### Example:
 *
 * ```javascript
 * var pako = require('pako')
 *   , input = pako.deflate([1,2,3,4,5,6,7,8,9])
 *   , output;
 *
 * try {
 *   output = pako.inflate(input);
 * } catch (err)
 *   console.log(err);
 * }
 * ```
 **/
function inflate$2(input, options) {
  var inflator = new Inflate$1(options);

  inflator.push(input, true);

  // That will never happens, if you don't cheat with options :)
  if (inflator.err) {
    throw inflator.msg || messages$2[inflator.err];
  }

  return inflator.result;
}

/**
 * inflateRaw(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to decompress.
 * - options (Object): zlib inflate options.
 *
 * The same as [[inflate]], but creates raw data, without wrapper
 * (header and adler32 crc).
 **/
function inflateRaw$1(input, options) {
  options = options || {};
  options.raw = true;
  return inflate$2(input, options);
}

/**
 * ungzip(data[, options]) -> Uint8Array|Array|String
 * - data (Uint8Array|Array|String): input data to decompress.
 * - options (Object): zlib inflate options.
 *
 * Just shortcut to [[inflate]], because it autodetects format
 * by header.content. Done for convenience.
 **/

var Inflate_1$1 = Inflate$1;
var inflate_2$2 = inflate$2;
var inflateRaw_1$1 = inflateRaw$1;
var ungzip$1 = inflate$2;

var inflate_1$4 = {
  Inflate: Inflate_1$1,
  inflate: inflate_2$2,
  inflateRaw: inflateRaw_1$1,
  ungzip: ungzip$1
};

// Top level file is just a mixin of submodules & constants
'use strict';

var assign$1 = common$2.assign;

var pako$2 = {};

assign$1(pako$2, deflate_1$4, inflate_1$4, constants$2);

var pako_1 = pako$2;

function createCommonjsModule$1$1(fn, module) {
  return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var traverse_1$1 = createCommonjsModule$1$1(function (module) {
  var traverse = module.exports = function (obj) {
    return new Traverse(obj);
  };

  function Traverse(obj) {
    this.value = obj;
  }

  Traverse.prototype.get = function (ps) {
    var node = this.value;
    for (var i = 0; i < ps.length; i++) {
      var key = ps[i];
      if (!node || !hasOwnProperty.call(node, key)) {
        node = undefined;
        break;
      }
      node = node[key];
    }
    return node;
  };

  Traverse.prototype.has = function (ps) {
    var node = this.value;
    for (var i = 0; i < ps.length; i++) {
      var key = ps[i];
      if (!node || !hasOwnProperty.call(node, key)) {
        return false;
      }
      node = node[key];
    }
    return true;
  };

  Traverse.prototype.set = function (ps, value) {
    var node = this.value;
    for (var i = 0; i < ps.length - 1; i++) {
      var key = ps[i];
      if (!hasOwnProperty.call(node, key)) node[key] = {};
      node = node[key];
    }
    node[ps[i]] = value;
    return value;
  };

  Traverse.prototype.map = function (cb) {
    return walk(this.value, cb, true);
  };

  Traverse.prototype.forEach = function (cb) {
    this.value = walk(this.value, cb, false);
    return this.value;
  };

  Traverse.prototype.reduce = function (cb, init) {
    var skip = arguments.length === 1;
    var acc = skip ? this.value : init;
    this.forEach(function (x) {
      if (!this.isRoot || !skip) {
        acc = cb.call(this, acc, x);
      }
    });
    return acc;
  };

  Traverse.prototype.paths = function () {
    var acc = [];
    this.forEach(function (x) {
      acc.push(this.path);
    });
    return acc;
  };

  Traverse.prototype.nodes = function () {
    var acc = [];
    this.forEach(function (x) {
      acc.push(this.node);
    });
    return acc;
  };

  Traverse.prototype.clone = function () {
    var parents = [],
        nodes = [];

    return function clone(src) {
      for (var i = 0; i < parents.length; i++) {
        if (parents[i] === src) {
          return nodes[i];
        }
      }

      if ((typeof src === 'undefined' ? 'undefined' : _typeof(src)) === 'object' && src !== null) {
        var dst = copy(src);

        parents.push(src);
        nodes.push(dst);

        forEach(objectKeys(src), function (key) {
          dst[key] = clone(src[key]);
        });

        parents.pop();
        nodes.pop();
        return dst;
      } else {
        return src;
      }
    }(this.value);
  };

  function walk(root, cb, immutable) {
    var path = [];
    var parents = [];
    var alive = true;

    return function walker(node_) {
      var node = immutable ? copy(node_) : node_;
      var modifiers = {};

      var keepGoing = true;

      var state = {
        node: node,
        node_: node_,
        path: [].concat(path),
        parent: parents[parents.length - 1],
        parents: parents,
        key: path.slice(-1)[0],
        isRoot: path.length === 0,
        level: path.length,
        circular: null,
        update: function update(x, stopHere) {
          if (!state.isRoot) {
            state.parent.node[state.key] = x;
          }
          state.node = x;
          if (stopHere) keepGoing = false;
        },
        'delete': function _delete(stopHere) {
          delete state.parent.node[state.key];
          if (stopHere) keepGoing = false;
        },
        remove: function remove(stopHere) {
          if (isArray(state.parent.node)) {
            state.parent.node.splice(state.key, 1);
          } else {
            delete state.parent.node[state.key];
          }
          if (stopHere) keepGoing = false;
        },
        keys: null,
        before: function before(f) {
          modifiers.before = f;
        },
        after: function after(f) {
          modifiers.after = f;
        },
        pre: function pre(f) {
          modifiers.pre = f;
        },
        post: function post(f) {
          modifiers.post = f;
        },
        stop: function stop() {
          alive = false;
        },
        block: function block() {
          keepGoing = false;
        }
      };

      if (!alive) return state;

      function updateState() {
        if (_typeof(state.node) === 'object' && state.node !== null) {
          if (!state.keys || state.node_ !== state.node) {
            state.keys = objectKeys(state.node);
          }

          state.isLeaf = state.keys.length == 0;

          for (var i = 0; i < parents.length; i++) {
            if (parents[i].node_ === node_) {
              state.circular = parents[i];
              break;
            }
          }
        } else {
          state.isLeaf = true;
          state.keys = null;
        }

        state.notLeaf = !state.isLeaf;
        state.notRoot = !state.isRoot;
      }

      updateState();

      // use return values to update if defined
      var ret = cb.call(state, state.node);
      if (ret !== undefined && state.update) state.update(ret);

      if (modifiers.before) modifiers.before.call(state, state.node);

      if (!keepGoing) return state;

      if (_typeof(state.node) == 'object' && state.node !== null && !state.circular) {
        parents.push(state);

        updateState();

        forEach(state.keys, function (key, i) {
          path.push(key);

          if (modifiers.pre) modifiers.pre.call(state, state.node[key], key);

          var child = walker(state.node[key]);
          if (immutable && hasOwnProperty.call(state.node, key)) {
            state.node[key] = child.node;
          }

          child.isLast = i == state.keys.length - 1;
          child.isFirst = i == 0;

          if (modifiers.post) modifiers.post.call(state, child);

          path.pop();
        });
        parents.pop();
      }

      if (modifiers.after) modifiers.after.call(state, state.node);

      return state;
    }(root).node;
  }

  function copy(src) {
    if ((typeof src === 'undefined' ? 'undefined' : _typeof(src)) === 'object' && src !== null) {
      var dst;

      if (isArray(src)) {
        dst = [];
      } else if (isDate(src)) {
        dst = new Date(src.getTime ? src.getTime() : src);
      } else if (isRegExp(src)) {
        dst = new RegExp(src);
      } else if (isError(src)) {
        dst = { message: src.message };
      } else if (isBoolean(src)) {
        dst = new Boolean(src);
      } else if (isNumber(src)) {
        dst = new Number(src);
      } else if (isString(src)) {
        dst = new String(src);
      } else if (Object.create && Object.getPrototypeOf) {
        dst = Object.create(Object.getPrototypeOf(src));
      } else if (src.constructor === Object) {
        dst = {};
      } else {
        var proto = src.constructor && src.constructor.prototype || src.__proto__ || {};
        var T = function T() {};
        T.prototype = proto;
        dst = new T();
      }

      forEach(objectKeys(src), function (key) {
        dst[key] = src[key];
      });
      return dst;
    } else return src;
  }

  var objectKeys = Object.keys || function keys(obj) {
    var res = [];
    for (var key in obj) {
      res.push(key);
    }return res;
  };

  function toS(obj) {
    return Object.prototype.toString.call(obj);
  }
  function isDate(obj) {
    return toS(obj) === '[object Date]';
  }
  function isRegExp(obj) {
    return toS(obj) === '[object RegExp]';
  }
  function isError(obj) {
    return toS(obj) === '[object Error]';
  }
  function isBoolean(obj) {
    return toS(obj) === '[object Boolean]';
  }
  function isNumber(obj) {
    return toS(obj) === '[object Number]';
  }
  function isString(obj) {
    return toS(obj) === '[object String]';
  }

  var isArray = Array.isArray || function isArray(xs) {
    return Object.prototype.toString.call(xs) === '[object Array]';
  };

  var forEach = function forEach(xs, fn) {
    if (xs.forEach) return xs.forEach(fn);else for (var i = 0; i < xs.length; i++) {
      fn(xs[i], i, xs);
    }
  };

  forEach(objectKeys(Traverse.prototype), function (key) {
    traverse[key] = function (obj) {
      var args = [].slice.call(arguments, 1);
      var t = new Traverse(obj);
      return t[key].apply(t, args);
    };
  });

  var hasOwnProperty = Object.hasOwnProperty || function (obj, key) {
    return key in obj;
  };
});

var asyncGenerator$2 = function () {
  function AwaitValue(value) {
    this.value = value;
  }

  function AsyncGenerator(gen) {
    var front, back;

    function send(key, arg) {
      return new Promise(function (resolve, reject) {
        var request = {
          key: key,
          arg: arg,
          resolve: resolve,
          reject: reject,
          next: null
        };

        if (back) {
          back = back.next = request;
        } else {
          front = back = request;
          resume(key, arg);
        }
      });
    }

    function resume(key, arg) {
      try {
        var result = gen[key](arg);
        var value = result.value;

        if (value instanceof AwaitValue) {
          Promise.resolve(value.value).then(function (arg) {
            resume("next", arg);
          }, function (arg) {
            resume("throw", arg);
          });
        } else {
          settle(result.done ? "return" : "normal", result.value);
        }
      } catch (err) {
        settle("throw", err);
      }
    }

    function settle(type, value) {
      switch (type) {
        case "return":
          front.resolve({
            value: value,
            done: true
          });
          break;

        case "throw":
          front.reject(value);
          break;

        default:
          front.resolve({
            value: value,
            done: false
          });
          break;
      }

      front = front.next;

      if (front) {
        resume(front.key, front.arg);
      } else {
        back = null;
      }
    }

    this._invoke = send;

    if (typeof gen.return !== "function") {
      this.return = undefined;
    }
  }

  if (typeof Symbol === "function" && Symbol.asyncIterator) {
    AsyncGenerator.prototype[Symbol.asyncIterator] = function () {
      return this;
    };
  }

  AsyncGenerator.prototype.next = function (arg) {
    return this._invoke("next", arg);
  };

  AsyncGenerator.prototype.throw = function (arg) {
    return this._invoke("throw", arg);
  };

  AsyncGenerator.prototype.return = function (arg) {
    return this._invoke("return", arg);
  };

  return {
    wrap: function wrap(fn) {
      return function () {
        return new AsyncGenerator(fn.apply(this, arguments));
      };
    },
    await: function _await(value) {
      return new AwaitValue(value);
    }
  };
}();

var classCallCheck$2 = function classCallCheck$$1(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass$2 = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

/**
* The CodecUtils class gather some static methods that can be useful while
* encodeing/decoding data.
* CodecUtils does not have a constructor, don't try to instanciate it.
*/

var CodecUtils$1 = function () {
  function CodecUtils() {
    classCallCheck$2(this, CodecUtils);
  }

  createClass$2(CodecUtils, null, [{
    key: "isPlatformLittleEndian",

    /**
    * Get whether or not the platform is using little endian.
    * @return {Boolen } true if the platform is little endian, false if big endian
    */
    value: function isPlatformLittleEndian() {
      var a = new Uint32Array([0x12345678]);
      var b = new Uint8Array(a.buffer, a.byteOffset, a.byteLength);
      return b[0] != 0x12;
    }

    /**
    * convert an ArrayBuffer into a unicode string (2 bytes for each char)
    * Note: this method was kindly borrowed from Google Closure Compiler:
    * https://github.com/google/closure-library/blob/master/closure/goog/crypt/crypt.js
    * @param {ArrayBuffer} buf - input ArrayBuffer
    * @return {String} a string compatible with Unicode characters
    */

  }, {
    key: "arrayBufferToUnicode",
    value: function arrayBufferToUnicode(buff) {
      var buffUint8 = new Uint8Array(buff);
      var out = [],
          pos = 0,
          c = 0;

      while (pos < buffUint8.length) {
        var c1 = buffUint8[pos++];
        if (c1 < 128) {
          out[c++] = String.fromCharCode(c1);
        } else if (c1 > 191 && c1 < 224) {
          var c2 = buffUint8[pos++];
          out[c++] = String.fromCharCode((c1 & 31) << 6 | c2 & 63);
        } else if (c1 > 239 && c1 < 365) {
          // Surrogate Pair
          var c2 = buffUint8[pos++];
          var c3 = buffUint8[pos++];
          var c4 = buffUint8[pos++];
          var u = ((c1 & 7) << 18 | (c2 & 63) << 12 | (c3 & 63) << 6 | c4 & 63) - 0x10000;
          out[c++] = String.fromCharCode(0xD800 + (u >> 10));
          out[c++] = String.fromCharCode(0xDC00 + (u & 1023));
        } else {
          var c2 = buffUint8[pos++];
          var c3 = buffUint8[pos++];
          out[c++] = String.fromCharCode((c1 & 15) << 12 | (c2 & 63) << 6 | c3 & 63);
        }
      }
      return out.join('');
    }
  }, {
    key: "unicodeToArrayBuffer",

    /**
    * convert a unicode string into an ArrayBuffer
    * Note that the str is a regular string but it will be encoded with
    * 2 bytes per char instead of 1 ( ASCII uses 1 byte/char ).
    * Note: this method was kindly borrowed from Google Closure Compiler:
    * https://github.com/google/closure-library/blob/master/closure/goog/crypt/crypt.js
    * @param {String} str - string to encode
    * @return {ArrayBuffer} the output ArrayBuffer
    */
    value: function unicodeToArrayBuffer(str) {
      var out = [],
          p = 0;
      for (var i = 0; i < str.length; i++) {
        var c = str.charCodeAt(i);
        if (c < 128) {
          out[p++] = c;
        } else if (c < 2048) {
          out[p++] = c >> 6 | 192;
          out[p++] = c & 63 | 128;
        } else if ((c & 0xFC00) == 0xD800 && i + 1 < str.length && (str.charCodeAt(i + 1) & 0xFC00) == 0xDC00) {
          // Surrogate Pair
          c = 0x10000 + ((c & 0x03FF) << 10) + (str.charCodeAt(++i) & 0x03FF);
          out[p++] = c >> 18 | 240;
          out[p++] = c >> 12 & 63 | 128;
          out[p++] = c >> 6 & 63 | 128;
          out[p++] = c & 63 | 128;
        } else {
          out[p++] = c >> 12 | 224;
          out[p++] = c >> 6 & 63 | 128;
          out[p++] = c & 63 | 128;
        }
      }

      // make a buffer out of the array
      return new Uint8Array(out).buffer;
    }
  }, {
    key: "arrayBufferToString8",

    /**
    * Convert an ArrayBuffer into a ASCII string (1 byte for each char)
    * @param {ArrayBuffer} buf - buffer to convert into ASCII string
    * @return {String} the output string
    */
    value: function arrayBufferToString8(buf) {
      return String.fromCharCode.apply(null, new Uint8Array(buf));
    }

    /**
    * Convert a ASCII string into an ArrayBuffer.
    * Note that the str is a regular string, it will be encoded with 1 byte per char
    * @param {String} str - string to encode
    * @return {ArrayBuffer}
    */

  }, {
    key: "string8ToArrayBuffer",
    value: function string8ToArrayBuffer(str) {
      var buf = new ArrayBuffer(str.length);
      var bufView = new Uint8Array(buf);
      for (var i = 0; i < str.length; i++) {
        bufView[i] = str.charCodeAt(i);
      }
      return buf;
    }

    /**
    * Write a ASCII string into a buffer
    * @param {String} str - a string that contains only ASCII characters
    * @param {ArrayBuffer} buffer - the buffer where to write the string
    * @param {Number} byteOffset - the offset to apply, in number of bytes
    */

  }, {
    key: "setString8InBuffer",
    value: function setString8InBuffer(str, buffer) {
      var byteOffset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

      if (byteOffset < 0) {
        console.warn("The byte offset cannot be negative.");
        return;
      }

      if (!buffer || !(buffer instanceof ArrayBuffer)) {
        console.warn("The buffer must be a valid ArrayBuffer.");
        return;
      }

      if (str.length + byteOffset > buffer.byteLength) {
        console.warn("The string is too long to be writen in this buffer.");
        return;
      }

      var bufView = new Uint8Array(buffer);

      for (var i = 0; i < str.length; i++) {
        bufView[i + byteOffset] = str.charCodeAt(i);
      }
    }

    /**
    * Extract an ASCII string from an ArrayBuffer
    * @param {ArrayBuffer} buffer - the buffer
    * @param {Number} strLength - number of chars in the string we want
    * @param {Number} byteOffset - the offset in number of bytes
    * @return {String} the string, or null in case of error
    */

  }, {
    key: "getString8FromBuffer",
    value: function getString8FromBuffer(buffer, strLength) {
      var byteOffset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

      if (byteOffset < 0) {
        console.warn("The byte offset cannot be negative.");
        return null;
      }

      if (!buffer || !(buffer instanceof ArrayBuffer)) {
        console.warn("The buffer must be a valid ArrayBuffer.");
        return null;
      }

      if (strLength + byteOffset > buffer.byteLength) {
        console.warn("The string is too long to be writen in this buffer.");
        return null;
      }

      return String.fromCharCode.apply(null, new Uint8Array(buffer, byteOffset, strLength));
    }

    /**
    * Serializes a JS object into an ArrayBuffer.
    * This is using a unicode JSON intermediate step.
    * @param {Object} obj - an object that does not have cyclic structure
    * @return {ArrayBuffer} the serialized output
    */

  }, {
    key: "objectToArrayBuffer",
    value: function objectToArrayBuffer(obj) {
      var buff = null;
      var objCleanClone = CodecUtils.makeSerializeFriendly(obj);

      try {
        var strObj = JSON.stringify(objCleanClone);
        buff = CodecUtils.unicodeToArrayBuffer(strObj);
      } catch (e) {
        console.warn(e);
      }

      return buff;
    }

    /**
    * Convert an ArrayBuffer into a JS Object. This uses an intermediate unicode JSON string.
    * Of course, this buffer has to come from a serialized object.
    * @param {ArrayBuffer} buff - the ArrayBuffer that hides some object
    * @return {Object} the deserialized object
    */

  }, {
    key: "ArrayBufferToObject",
    value: function ArrayBufferToObject(buff) {
      var obj = null;

      try {
        var strObj = CodecUtils.arrayBufferToUnicode(buff);
        obj = JSON.parse(strObj);
      } catch (e) {
        console.warn(e);
      }

      return obj;
    }

    /**
    * Get if wether of not the arg is a typed array
    * @param {Object} obj - possibly a typed array, or maybe not
    * @return {Boolean} true if obj is a typed array
    */

  }, {
    key: "isTypedArray",
    value: function isTypedArray(obj) {
      return obj instanceof Int8Array || obj instanceof Uint8Array || obj instanceof Uint8ClampedArray || obj instanceof Int16Array || obj instanceof Uint16Array || obj instanceof Int32Array || obj instanceof Uint32Array || obj instanceof Float32Array || obj instanceof Float64Array;
    }

    /**
    * Merge some ArrayBuffes in a single one
    * @param {Array} arrayOfBuffers - some ArrayBuffers
    * @return {ArrayBuffer} the larger merged buffer
    */

  }, {
    key: "mergeBuffers",
    value: function mergeBuffers(arrayOfBuffers) {
      var totalByteSize = 0;

      for (var i = 0; i < arrayOfBuffers.length; i++) {
        totalByteSize += arrayOfBuffers[i].byteLength;
      }

      var concatArray = new Uint8Array(totalByteSize);

      var offset = 0;
      for (var i = 0; i < arrayOfBuffers.length; i++) {
        concatArray.set(new Uint8Array(arrayOfBuffers[i]), offset);
        offset += arrayOfBuffers[i].byteLength;
      }

      return concatArray.buffer;
    }

    /**
    * In a browser, the global object is `window` while in Node, it's `GLOBAL`.
    * This method return the one that is relevant to the execution context.
    * @return {Object} the global object
    */

  }, {
    key: "getGlobalObject",
    value: function getGlobalObject() {
      var constructorHost = null;

      try {
        constructorHost = window; // in a web browser
      } catch (e) {
        try {
          constructorHost = GLOBAL; // in node
        } catch (e) {
          console.warn("You are not in a Javascript environment?? Weird.");
          return null;
        }
      }
      return constructorHost;
    }

    /**
    * Extract a typed array from an arbitrary buffer, with an arbitrary offset
    * @param {ArrayBuffer} buffer - the buffer from which we extract data
    * @param {Number} byteOffset - offset from the begining of buffer
    * @param {Function} arrayType - function object, actually the constructor of the output array
    * @param {Number} numberOfElements - nb of elem we want to fetch from the buffer
    * @return {TypedArray} output of type given by arg arrayType - this is a copy, not a view
    */

  }, {
    key: "extractTypedArray",
    value: function extractTypedArray(buffer, byteOffset, arrayType, numberOfElements) {
      if (!buffer) {
        console.warn("Input Buffer is null.");
        return null;
      }

      if (!(buffer instanceof ArrayBuffer)) {
        console.warn("Buffer must be of type ArrayBuffer");
        return null;
      }

      if (numberOfElements <= 0) {
        console.warn("The number of elements to fetch must be greater than 0");
        return null;
      }

      if (byteOffset < 0) {
        console.warn("The byte offset must be possitive or 0");
        return null;
      }

      if (byteOffset >= buffer.byteLength) {
        console.warn("The offset cannot be larger than the size of the buffer.");
        return null;
      }

      if (arrayType instanceof Function && !("BYTES_PER_ELEMENT" in arrayType)) {
        console.warn("ArrayType must be a typed array constructor function.");
        return null;
      }

      if (arrayType.BYTES_PER_ELEMENT * numberOfElements + byteOffset > buffer.byteLength) {
        console.warn("The requested number of elements is too large for this buffer");
        return;
      }

      var slicedBuff = buffer.slice(byteOffset, byteOffset + numberOfElements * arrayType.BYTES_PER_ELEMENT);
      return new arrayType(slicedBuff);
    }

    /**
    * Get some info about the given TypedArray
    * @param {TypedArray} typedArray - one of the typed array
    * @return {Object} in form of {type: String, signed: Boolean, bytesPerElements: Number, byteLength: Number, length: Number}
    */

  }, {
    key: "getTypedArrayInfo",
    value: function getTypedArrayInfo(typedArray) {
      var type = null;
      var signed = false;

      if (typedArray instanceof Int8Array) {
        type = "int";
        signed = false;
      } else if (typedArray instanceof Uint8Array) {
        type = "int";
        signed = true;
      } else if (typedArray instanceof Uint8ClampedArray) {
        type = "int";
        signed = true;
      } else if (typedArray instanceof Int16Array) {
        type = "int";
        signed = false;
      } else if (typedArray instanceof Uint16Array) {
        type = "int";
        signed = true;
      } else if (typedArray instanceof Int32Array) {
        type = "int";
        signed = false;
      } else if (typedArray instanceof Uint32Array) {
        type = "int";
        signed = true;
      } else if (typedArray instanceof Float32Array) {
        type = "float";
        signed = false;
      } else if (typedArray instanceof Float64Array) {
        type = "float";
        signed = false;
      }

      return {
        type: type,
        signed: signed,
        bytesPerElements: typedArray.BYTES_PER_ELEMENT,
        byteLength: typedArray.byteLength,
        length: typedArray.length
      };
    }

    /**
    * Counts the number of typed array obj has as attributes
    * @param {Object} obj - an Object
    * @return {Number} the number of typed array
    */

  }, {
    key: "howManyTypedArrayAttributes",
    value: function howManyTypedArrayAttributes(obj) {
      var typArrCounter = 0;
      traverse_1$1(obj).forEach(function (x) {
        typArrCounter += CodecUtils.isTypedArray(x);
      });
      return typArrCounter;
    }

    /**
    * Check if the given object contains any circular reference.
    * (Circular ref are non serilizable easily, we want to spot them)
    * @param {Object} obj - An object to check
    * @return {Boolean} true if obj contains circular refm false if not
    */

  }, {
    key: "hasCircularReference",
    value: function hasCircularReference(obj) {
      var hasCircular = false;
      traverse_1$1(obj).forEach(function (x) {
        if (this.circular) {
          hasCircular = true;
        }
      });
      return hasCircular;
    }

    /**
    * Remove circular dependencies from an object and return a circularRef-free version
    * of the object (does not change the original obj), of null if no circular ref was found
    * @param {Object} obj - An object to check
    * @return {Object} a circular-ref free object copy if any was found, or null if no circ was found
    */

  }, {
    key: "removeCircularReference",
    value: function removeCircularReference(obj) {
      var hasCircular = false;
      var noCircRefObj = traverse_1$1(obj).map(function (x) {
        if (this.circular) {
          this.remove();
          hasCircular = true;
        }
      });
      return hasCircular ? noCircRefObj : null;
    }

    /**
    * Clone the object and replace the typed array attributes by regular Arrays.
    * @param {Object} obj - an object to alter
    * @return {Object} the clone if ant typed array were changed, or null if was obj didnt contain any typed array.
    */

  }, {
    key: "replaceTypedArrayAttributesByArrays",
    value: function replaceTypedArrayAttributesByArrays(obj) {
      var hasTypedArray = false;

      var noTypedArrClone = traverse_1$1(obj).map(function (x) {
        if (CodecUtils.isTypedArray(x)) {
          // here, we cannot call .length directly because traverse.map already serialized
          // typed arrays into regular objects
          var origSize = Object.keys(x).length;
          var untypedArray = new Array(origSize);

          for (var i = 0; i < origSize; i++) {
            untypedArray[i] = x[i];
          }
          this.update(untypedArray);
          hasTypedArray = true;
        }
      });
      return hasTypedArray ? noTypedArrClone : null;
    }

    /**
    * Creates a clone, does not alter the original object.
    * Remove circular dependencies and replace typed arrays by regular arrays.
    * Both will make the serialization possible and more reliable.
    * @param {Object} obj - the object to make serialization friendly
    * @return {Object} a clean clone, or null if nothing was done
    */

  }, {
    key: "makeSerializeFriendly",
    value: function makeSerializeFriendly(obj) {
      var newObj = obj;
      var noCircular = CodecUtils.removeCircularReference(newObj);

      if (noCircular) newObj = noCircular;

      var noTypedArr = CodecUtils.replaceTypedArrayAttributesByArrays(newObj);

      if (noTypedArr) newObj = noTypedArr;

      return newObj;
    }
  }]);
  return CodecUtils;
}(); /* END of class CodecUtils */

var asyncGenerator$1$1 = function () {
  function AwaitValue(value) {
    this.value = value;
  }

  function AsyncGenerator(gen) {
    var front, back;

    function send(key, arg) {
      return new Promise(function (resolve, reject) {
        var request = {
          key: key,
          arg: arg,
          resolve: resolve,
          reject: reject,
          next: null
        };

        if (back) {
          back = back.next = request;
        } else {
          front = back = request;
          resume(key, arg);
        }
      });
    }

    function resume(key, arg) {
      try {
        var result = gen[key](arg);
        var value = result.value;

        if (value instanceof AwaitValue) {
          Promise.resolve(value.value).then(function (arg) {
            resume("next", arg);
          }, function (arg) {
            resume("throw", arg);
          });
        } else {
          settle(result.done ? "return" : "normal", result.value);
        }
      } catch (err) {
        settle("throw", err);
      }
    }

    function settle(type, value) {
      switch (type) {
        case "return":
          front.resolve({
            value: value,
            done: true
          });
          break;

        case "throw":
          front.reject(value);
          break;

        default:
          front.resolve({
            value: value,
            done: false
          });
          break;
      }

      front = front.next;

      if (front) {
        resume(front.key, front.arg);
      } else {
        back = null;
      }
    }

    this._invoke = send;

    if (typeof gen.return !== "function") {
      this.return = undefined;
    }
  }

  if (typeof Symbol === "function" && Symbol.asyncIterator) {
    AsyncGenerator.prototype[Symbol.asyncIterator] = function () {
      return this;
    };
  }

  AsyncGenerator.prototype.next = function (arg) {
    return this._invoke("next", arg);
  };

  AsyncGenerator.prototype.throw = function (arg) {
    return this._invoke("throw", arg);
  };

  AsyncGenerator.prototype.return = function (arg) {
    return this._invoke("return", arg);
  };

  return {
    wrap: function wrap(fn) {
      return function () {
        return new AsyncGenerator(fn.apply(this, arguments));
      };
    },
    await: function _await(value) {
      return new AwaitValue(value);
    }
  };
}();

var classCallCheck$1$1 = function classCallCheck$1(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass$1$1 = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

/*
* Author    Jonathan Lurie - http://me.jonahanlurie.fr
*
* License   MIT
* Link      https://github.com/jonathanlurie/pixpipejs
* Lab       MCIN - Montreal Neurological Institute
*/

// list of different kinds of data we accept as input
var dataCases = {
  invalid: null, // the data is not compatible (Number, String)
  typedArray: 1, // the data is compatible, as a typed array
  mixedArrays: 2, // the data is compatible, as an array of typed array
  complexObject: 3 // a complex object is also compatible (can be a untyped array)
};

var PixBlockEncoder = function () {
  function PixBlockEncoder() {
    classCallCheck$1$1(this, PixBlockEncoder);

    this._compress = false;
    this.reset();
  }

  /**
  * reset inputs and inputs
  */

  createClass$1$1(PixBlockEncoder, [{
    key: 'reset',
    value: function reset() {
      this._input = null;
      this._inputCase = null;
      this._output = null;
    }

    /**
    * Set a boolean to secify if data should be compressed or not
    * @param {Boolean} b - true to compress, false to not compress
    */

  }, {
    key: 'enableDataCompression',
    value: function enableDataCompression(b) {
      this._compress = b;
    }

    /**
    * Specify an input to the encoder
    * @param {Object} obj - an object candidate, containing a _data and _metadata attributes
    */

  }, {
    key: 'setInput',
    value: function setInput(obj) {
      this._inputCase = PixBlockEncoder.isGoodCandidate(obj);
      if (this._inputCase) {
        this._input = obj;
      }
    }

    /**
    * Get the output
    * @return {Object} the output, or null
    */

  }, {
    key: 'getOutput',
    value: function getOutput() {
      return this._output;
    }

    /**
    * Check if the given object is a good intput candidate
    * @param {Object} obj - an object candidate, containing a _data and _metadata attributes
    * @return {Boolean} true if good candidate, false if not
    */

  }, {
    key: 'run',

    /**
    * Launch the encoding of the block
    */
    value: function run() {
      var input = this._input;

      if (!input || !this._inputCase) {
        console.warn("An input must be given to the PixBlockEncoder.");
        return;
      }

      var data = input._data;
      var encodedData = null;
      var compressedData = null;

      var byteStreamInfo = [];
      var useMultipleDataStreams = false;

      switch (this._inputCase) {

        // The input is a typed array ********************************
        case dataCases.typedArray:
          {
            // no real need to compress the data here
            encodedData = data;
            var byteStreamInfoSubset = this._getDataSubsetInfo(data);

            // additional compression flag
            byteStreamInfoSubset.compressedByteLength = null;

            if (this._compress) {
              encodedData = pako_1.deflate(encodedData.buffer);
              byteStreamInfoSubset.compressedByteLength = encodedData.byteLength;
            }

            byteStreamInfo.push(byteStreamInfoSubset);
          }
          break;

        // The input is an Array of typed arrays *********************
        case dataCases.mixedArrays:
          {
            useMultipleDataStreams = true;
            compressedData = [];

            encodedData = new Array(data.length);

            // collect bytestream info for each subset of data
            for (var i = 0; i < data.length; i++) {
              var currentDataStream = data[i];
              var byteStreamInfoSubset = this._getDataSubsetInfo(currentDataStream);

              // if not a typed array, this subset needs further modifications
              if (!byteStreamInfoSubset.isTypedArray) {
                currentDataStream = new Uint8Array(CodecUtils$1.objectToArrayBuffer(currentDataStream));
                byteStreamInfoSubset.byteLength = currentDataStream.byteLength;
              }

              if (this._compress) {
                var compressedDataSubset = pako_1.deflate(currentDataStream.buffer);
                byteStreamInfoSubset.compressedByteLength = compressedDataSubset.byteLength;
                compressedData.push(compressedDataSubset);
              }

              byteStreamInfo.push(byteStreamInfoSubset);

              encodedData[i] = currentDataStream;
            }

            if (this._compress) {
              encodedData = compressedData;
            }
          }
          break;

        // The input is an Array of typed arrays *********************
        case dataCases.complexObject:
          {
            var byteStreamInfoSubset = this._getDataSubsetInfo(data);

            // replace the original data object with this uncompressed serialized version.
            // We wrap it into a Uint8Array so that we can call .buffer on it, just like all the others
            encodedData = new Uint8Array(CodecUtils$1.objectToArrayBuffer(data));
            byteStreamInfoSubset.byteLength = encodedData.byteLength;

            if (this._compress) {
              encodedData = pako_1.deflate(encodedData);
              byteStreamInfoSubset.compressedByteLength = encodedData.byteLength;
            }

            byteStreamInfo.push(byteStreamInfoSubset);
          }
          break;

        default:
          console.warn("A problem occured.");
          return;
      }

      // the metadata are converted into a buffer
      var metadataBuffer = CodecUtils$1.objectToArrayBuffer(input._metadata);

      var pixBlockHeader = {
        byteStreamInfo: byteStreamInfo,
        useMultipleDataStreams: useMultipleDataStreams,
        originalBlockType: input.constructor.name,
        metadataByteLength: metadataBuffer.byteLength

        // converting the pixBlockHeader obj into a buffer
      };var pixBlockHeaderBuff = CodecUtils$1.objectToArrayBuffer(pixBlockHeader);

      // this list will then be transformed into a single buffer
      var allBuffers = [
      // primer, part 1: endianess
      new Uint8Array([+CodecUtils$1.isPlatformLittleEndian()]).buffer,
      // primer, part 2: size of the header buff
      new Uint32Array([pixBlockHeaderBuff.byteLength]).buffer,

      // the header buff
      pixBlockHeaderBuff,

      // the metadata buffer
      metadataBuffer];

      // adding the actual encodedData buffer to the list
      if (useMultipleDataStreams) {
        for (var i = 0; i < encodedData.length; i++) {
          allBuffers.push(encodedData[i].buffer);
        }
      } else {
        allBuffers.push(encodedData.buffer);
      }

      this._output = CodecUtils$1.mergeBuffers(allBuffers);
    }

    /**
    * [STATIC]
    * Give in what case we fall when we want to use this data.
    * Cases are described at the top
    * @param {Whatever} data - a piec of data, object, array, typed array...
    * @return {Number} the case
    */

  }, {
    key: '_getDataSubsetInfo',

    /**
    * [PRIVATE]
    * Return some infomation about the data subset so that it's easier to parse later
    * @param {Object} subset - can be a typedArray or a complex object
    * @return {Object} reconstruction info about this subset
    */
    value: function _getDataSubsetInfo(subset) {
      var infoObj = null;

      if (CodecUtils$1.isTypedArray(subset)) {
        infoObj = CodecUtils$1.getTypedArrayInfo(subset);
        infoObj.isTypedArray = true;
        infoObj.compressedByteLength = null;
      } else {
        infoObj = {
          type: subset.constructor.name,
          compressedByteLength: null,
          byteLength: null,
          length: null,
          isTypedArray: false
        };
      }

      return infoObj;
    }
  }], [{
    key: 'isGoodCandidate',
    value: function isGoodCandidate(obj) {
      if (!obj) {
        console.warn("Input object cannot be null.");
        return false;
      }

      if (!("_metadata" in obj)) {
        console.warn("Input object must contain a _metadata object.");
        return false;
      }

      if (!("_data" in obj)) {
        console.warn("Input object must contain a _data object.");
        return false;
      }

      var data = obj._data;

      // check: metadata should not contain cyclic structures
      try {} catch (e) {
        console.warn("The metadata object contains cyclic structures. Cannot be used.");
        return false;
      }

      var inputCase = PixBlockEncoder.determineDataCase(data);

      // testing the case based on the kinf of data we want to input
      if (inputCase === dataCases.invalid) {
        console.warn("The input is invalid.");
      }

      return inputCase;
    }
  }, {
    key: 'determineDataCase',
    value: function determineDataCase(data) {
      if (data instanceof Object) {
        if (CodecUtils$1.isTypedArray(data)) return dataCases.typedArray;

        /*
        if( data instanceof Array )
          if(data.every( function(element){ return CodecUtils.isTypedArray(element) }))
            return dataCases.mixedArrays;
        */

        // TODO: change the name of this case, since we want to accept Arrays of whatever
        if (data instanceof Array) return dataCases.mixedArrays;

        return dataCases.complexObject;
      } else {
        return dataCases.invalid;
      }
    }
  }]);
  return PixBlockEncoder;
}(); /* END of class PixBlockEncoder */

/*
* Author    Jonathan Lurie - http://me.jonahanlurie.fr
*
* License   MIT
* Link      https://github.com/jonathanlurie/pixpipejs
* Lab       MCIN - Montreal Neurological Institute
*/

var PixBlockDecoder = function () {
  function PixBlockDecoder() {
    classCallCheck$1$1(this, PixBlockDecoder);

    this.reset();
  }

  /**
  * reset inputs and inputs
  */

  createClass$1$1(PixBlockDecoder, [{
    key: 'reset',
    value: function reset() {
      this._input = null;
      this._output = null;
    }

    /**
    * Specify an input
    * @param {ArrayBuffer} buff - the arraybuffer that contains some data to be deserialized
    */

  }, {
    key: 'setInput',
    value: function setInput(buff) {
      // check input
      if (!(buff instanceof ArrayBuffer)) {
        console.warn("Input should be a valid ArrayBuffer");
        return;
      }
      this._input = buff;
    }

    /**
    * Get the output
    * @return {Object} the output, or null
    */

  }, {
    key: 'getOutput',
    value: function getOutput() {
      return this._output;
    }

    /*
    * Launch the decoding
    */

  }, {
    key: 'run',
    value: function run() {

      var input = this._input;
      var view = new DataView(input);
      var isLtlt = view.getUint8(0);
      var readingByteOffset = 0;

      // primer, part 1
      // get the endianess used to encode the file
      var isLittleEndian = view.getUint8(0);
      readingByteOffset += 1;

      // primer, part 2
      // get the length of the string buffer (unicode json) that follows
      var pixBlockHeaderBufferByteLength = view.getUint32(1, readingByteOffset);
      readingByteOffset += 4;

      // get the string buffer
      var pixBlockHeaderBuffer = input.slice(readingByteOffset, readingByteOffset + pixBlockHeaderBufferByteLength);
      var pixBlockHeader = CodecUtils$1.ArrayBufferToObject(pixBlockHeaderBuffer);
      readingByteOffset += pixBlockHeaderBufferByteLength;

      // fetching the metadata
      var metadataBuffer = input.slice(readingByteOffset, readingByteOffset + pixBlockHeader.metadataByteLength);
      var metadataObject = CodecUtils$1.ArrayBufferToObject(metadataBuffer);
      readingByteOffset += pixBlockHeader.metadataByteLength;

      // the data streams are the byte streams when they are converted back to actual typedArrays/Objects
      var dataStreams = [];

      for (var i = 0; i < pixBlockHeader.byteStreamInfo.length; i++) {
        // act as a flag: if not null, it means data were compressed
        var compressedByteLength = pixBlockHeader.byteStreamInfo[i].compressedByteLength;

        // create a typed array out of the inflated buffer
        var dataStreamConstructor = this._getDataTypeFromByteStreamInfo(pixBlockHeader.byteStreamInfo[i]);

        // know if it's a typed array or a complex object
        var isTypedArray = pixBlockHeader.byteStreamInfo[i].isTypedArray;

        // meaning, the stream is compresed
        if (compressedByteLength) {
          // fetch the compresed dataStream
          var compressedByteStream = new Uint8Array(input, readingByteOffset, compressedByteLength);

          // inflate the dataStream
          var inflatedByteStream = pako_1.inflate(compressedByteStream);

          var dataStream = null;
          /*
          if( dataStreamConstructor === Object){
            dataStream = CodecUtils.ArrayBufferToObject( inflatedByteStream.buffer  );
          }else{
            dataStream = new dataStreamConstructor( inflatedByteStream.buffer );
          }
          */

          if (isTypedArray) {
            dataStream = new dataStreamConstructor(inflatedByteStream.buffer);
          } else {
            dataStream = CodecUtils$1.ArrayBufferToObject(inflatedByteStream.buffer);
          }

          dataStreams.push(dataStream);
          readingByteOffset += compressedByteLength;
        }
        // the stream were NOT compressed
        else {
            var dataStream = null;
            if (isTypedArray) {
              dataStream = CodecUtils$1.extractTypedArray(input, readingByteOffset, this._getDataTypeFromByteStreamInfo(pixBlockHeader.byteStreamInfo[i]), pixBlockHeader.byteStreamInfo[i].length);
            } else {
              var objectBuffer = CodecUtils$1.extractTypedArray(input, readingByteOffset, Uint8Array, pixBlockHeader.byteStreamInfo[i].byteLength);
              dataStream = CodecUtils$1.ArrayBufferToObject(objectBuffer.buffer);
            }

            dataStreams.push(dataStream);
            readingByteOffset += pixBlockHeader.byteStreamInfo[i].byteLength;
          }
      }

      // If data is a single typed array (= not composed of a subset)
      // we get rid of the useless wrapping array
      if (!pixBlockHeader.useMultipleDataStreams) {
        dataStreams = dataStreams[0];
      }

      this._output = {
        originalBlockType: pixBlockHeader.originalBlockType,
        _data: dataStreams,
        _metadata: metadataObject
      };
    }

    /**
    * Get the array type based on byte stream info.
    * The returned object can be used as a constructor
    * @return {Function} constructor of a typed array
    */

  }, {
    key: '_getDataTypeFromByteStreamInfo',
    value: function _getDataTypeFromByteStreamInfo(bsi) {
      var dataType = "Object";
      var globalObject = CodecUtils$1.getGlobalObject();

      if (bsi.type === "int") {
        dataType = bsi.signed ? "Uint" : "Int";
        dataType += bsi.bytesPerElements * 8 + "Array";
      } else if (bsi.type === "float") {
        dataType = "Float";
        dataType += bsi.bytesPerElements * 8 + "Array";
        var globalObject = CodecUtils$1.getGlobalObject();
      }

      return globalObject[dataType];
    }
  }]);
  return PixBlockDecoder;
}(); /* END of class PixBlockDecoder */

var global$1$1 = typeof global$1 !== "undefined" ? global$1 : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {};

// shim for using process in browser
// based off https://github.com/defunctzombie/node-process/blob/master/browser.js

function defaultSetTimout$1() {
  throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout$1() {
  throw new Error('clearTimeout has not been defined');
}
var cachedSetTimeout$1 = defaultSetTimout$1;
var cachedClearTimeout$1 = defaultClearTimeout$1;
if (typeof global$1$1.setTimeout === 'function') {
  cachedSetTimeout$1 = setTimeout;
}
if (typeof global$1$1.clearTimeout === 'function') {
  cachedClearTimeout$1 = clearTimeout;
}

function runTimeout$1(fun) {
  if (cachedSetTimeout$1 === setTimeout) {
    //normal enviroments in sane situations
    return setTimeout(fun, 0);
  }
  // if setTimeout wasn't available but was latter defined
  if ((cachedSetTimeout$1 === defaultSetTimout$1 || !cachedSetTimeout$1) && setTimeout) {
    cachedSetTimeout$1 = setTimeout;
    return setTimeout(fun, 0);
  }
  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedSetTimeout$1(fun, 0);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
      return cachedSetTimeout$1.call(null, fun, 0);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
      return cachedSetTimeout$1.call(this, fun, 0);
    }
  }
}
function runClearTimeout$1(marker) {
  if (cachedClearTimeout$1 === clearTimeout) {
    //normal enviroments in sane situations
    return clearTimeout(marker);
  }
  // if clearTimeout wasn't available but was latter defined
  if ((cachedClearTimeout$1 === defaultClearTimeout$1 || !cachedClearTimeout$1) && clearTimeout) {
    cachedClearTimeout$1 = clearTimeout;
    return clearTimeout(marker);
  }
  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedClearTimeout$1(marker);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
      return cachedClearTimeout$1.call(null, marker);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
      // Some versions of I.E. have different rules for clearTimeout vs setTimeout
      return cachedClearTimeout$1.call(this, marker);
    }
  }
}
var queue$1 = [];
var draining$1 = false;
var currentQueue$1;
var queueIndex$1 = -1;

function cleanUpNextTick$1() {
  if (!draining$1 || !currentQueue$1) {
    return;
  }
  draining$1 = false;
  if (currentQueue$1.length) {
    queue$1 = currentQueue$1.concat(queue$1);
  } else {
    queueIndex$1 = -1;
  }
  if (queue$1.length) {
    drainQueue$1();
  }
}

function drainQueue$1() {
  if (draining$1) {
    return;
  }
  var timeout = runTimeout$1(cleanUpNextTick$1);
  draining$1 = true;

  var len = queue$1.length;
  while (len) {
    currentQueue$1 = queue$1;
    queue$1 = [];
    while (++queueIndex$1 < len) {
      if (currentQueue$1) {
        currentQueue$1[queueIndex$1].run();
      }
    }
    queueIndex$1 = -1;
    len = queue$1.length;
  }
  currentQueue$1 = null;
  draining$1 = false;
  runClearTimeout$1(timeout);
}
function nextTick$1(fun) {
  var args = new Array(arguments.length - 1);
  if (arguments.length > 1) {
    for (var i = 1; i < arguments.length; i++) {
      args[i - 1] = arguments[i];
    }
  }
  queue$1.push(new Item$1(fun, args));
  if (queue$1.length === 1 && !draining$1) {
    runTimeout$1(drainQueue$1);
  }
}
// v8 likes predictible objects
function Item$1(fun, array) {
  this.fun = fun;
  this.array = array;
}
Item$1.prototype.run = function () {
  this.fun.apply(null, this.array);
};
var title$1 = 'browser';
var platform$1 = 'browser';
var browser$1 = true;
var env$1 = {};
var argv$1 = [];
var version$1 = ''; // empty string to avoid regexp issues
var versions$1 = {};
var release$1 = {};
var config$1 = {};

function noop$1() {}

var on$1 = noop$1;
var addListener$1 = noop$1;
var once$1 = noop$1;
var off$1 = noop$1;
var removeListener$1 = noop$1;
var removeAllListeners$1 = noop$1;
var emit$1 = noop$1;

function binding$1(name) {
  throw new Error('process.binding is not supported');
}

function cwd$1() {
  return '/';
}
function chdir$1(dir) {
  throw new Error('process.chdir is not supported');
}
function umask$1() {
  return 0;
}

// from https://github.com/kumavis/browser-process-hrtime/blob/master/index.js
var performance$2 = global$1$1.performance || {};
var performanceNow$1 = performance$2.now || performance$2.mozNow || performance$2.msNow || performance$2.oNow || performance$2.webkitNow || function () {
  return new Date().getTime();
};

// generate timestamp or delta
// see http://nodejs.org/api/process.html#process_process_hrtime
function hrtime$1(previousTimestamp) {
  var clocktime = performanceNow$1.call(performance$2) * 1e-3;
  var seconds = Math.floor(clocktime);
  var nanoseconds = Math.floor(clocktime % 1 * 1e9);
  if (previousTimestamp) {
    seconds = seconds - previousTimestamp[0];
    nanoseconds = nanoseconds - previousTimestamp[1];
    if (nanoseconds < 0) {
      seconds--;
      nanoseconds += 1e9;
    }
  }
  return [seconds, nanoseconds];
}

var startTime$1 = new Date();
function uptime$1() {
  var currentTime = new Date();
  var dif = currentTime - startTime$1;
  return dif / 1000;
}

var process$1 = {
  nextTick: nextTick$1,
  title: title$1,
  browser: browser$1,
  env: env$1,
  argv: argv$1,
  version: version$1,
  versions: versions$1,
  on: on$1,
  addListener: addListener$1,
  once: once$1,
  off: off$1,
  removeListener: removeListener$1,
  removeAllListeners: removeAllListeners$1,
  emit: emit$1,
  binding: binding$1,
  cwd: cwd$1,
  chdir: chdir$1,
  umask: umask$1,
  hrtime: hrtime$1,
  platform: platform$1,
  release: release$1,
  config: config$1,
  uptime: uptime$1
};

var md5$2 = createCommonjsModule$2(function (module) {
  /**
   * [js-md5]{@link https://github.com/emn178/js-md5}
   *
   * @namespace md5
   * @version 0.6.1
   * @author Chen, Yi-Cyuan [emn178@gmail.com]
   * @copyright Chen, Yi-Cyuan 2014-2017
   * @license MIT
   */
  (function () {
    'use strict';

    var ERROR = 'input is invalid type';
    var WINDOW = (typeof window === 'undefined' ? 'undefined' : _typeof(window)) === 'object';
    var root = WINDOW ? window : {};
    if (root.JS_MD5_NO_WINDOW) {
      WINDOW = false;
    }
    var WEB_WORKER = !WINDOW && (typeof self === 'undefined' ? 'undefined' : _typeof(self)) === 'object';
    var NODE_JS = !root.JS_MD5_NO_NODE_JS && (typeof process$1 === 'undefined' ? 'undefined' : _typeof(process$1)) === 'object' && process$1.versions && process$1.versions.node;
    if (NODE_JS) {
      root = commonjsGlobal$1;
    } else if (WEB_WORKER) {
      root = self;
    }
    var COMMON_JS = !root.JS_MD5_NO_COMMON_JS && 'object' === 'object' && module.exports;
    var AMD = typeof undefined === 'function' && undefined.amd;
    var ARRAY_BUFFER = !root.JS_MD5_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';
    var HEX_CHARS = '0123456789abcdef'.split('');
    var EXTRA = [128, 32768, 8388608, -2147483648];
    var SHIFT = [0, 8, 16, 24];
    var OUTPUT_TYPES = ['hex', 'array', 'digest', 'buffer', 'arrayBuffer', 'base64'];
    var BASE64_ENCODE_CHAR = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');

    var blocks = [],
        buffer8;
    if (ARRAY_BUFFER) {
      var buffer = new ArrayBuffer(68);
      buffer8 = new Uint8Array(buffer);
      blocks = new Uint32Array(buffer);
    }

    if (root.JS_MD5_NO_NODE_JS || !Array.isArray) {
      Array.isArray = function (obj) {
        return Object.prototype.toString.call(obj) === '[object Array]';
      };
    }

    if (ARRAY_BUFFER && (root.JS_MD5_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {
      ArrayBuffer.isView = function (obj) {
        return (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;
      };
    }

    /**
     * @method hex
     * @memberof md5
     * @description Output hash as hex string
     * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash
     * @returns {String} Hex string
     * @example
     * md5.hex('The quick brown fox jumps over the lazy dog');
     * // equal to
     * md5('The quick brown fox jumps over the lazy dog');
     */
    /**
     * @method digest
     * @memberof md5
     * @description Output hash as bytes array
     * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash
     * @returns {Array} Bytes array
     * @example
     * md5.digest('The quick brown fox jumps over the lazy dog');
     */
    /**
     * @method array
     * @memberof md5
     * @description Output hash as bytes array
     * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash
     * @returns {Array} Bytes array
     * @example
     * md5.array('The quick brown fox jumps over the lazy dog');
     */
    /**
     * @method arrayBuffer
     * @memberof md5
     * @description Output hash as ArrayBuffer
     * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash
     * @returns {ArrayBuffer} ArrayBuffer
     * @example
     * md5.arrayBuffer('The quick brown fox jumps over the lazy dog');
     */
    /**
     * @method buffer
     * @deprecated This maybe confuse with Buffer in node.js. Please use arrayBuffer instead.
     * @memberof md5
     * @description Output hash as ArrayBuffer
     * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash
     * @returns {ArrayBuffer} ArrayBuffer
     * @example
     * md5.buffer('The quick brown fox jumps over the lazy dog');
     */
    /**
     * @method base64
     * @memberof md5
     * @description Output hash as base64 string
     * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash
     * @returns {String} base64 string
     * @example
     * md5.base64('The quick brown fox jumps over the lazy dog');
     */
    var createOutputMethod = function createOutputMethod(outputType) {
      return function (message) {
        return new Md5(true).update(message)[outputType]();
      };
    };

    /**
     * @method create
     * @memberof md5
     * @description Create Md5 object
     * @returns {Md5} Md5 object.
     * @example
     * var hash = md5.create();
     */
    /**
     * @method update
     * @memberof md5
     * @description Create and update Md5 object
     * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash
     * @returns {Md5} Md5 object.
     * @example
     * var hash = md5.update('The quick brown fox jumps over the lazy dog');
     * // equal to
     * var hash = md5.create();
     * hash.update('The quick brown fox jumps over the lazy dog');
     */
    var createMethod = function createMethod() {
      var method = createOutputMethod('hex');
      if (NODE_JS) {
        method = nodeWrap(method);
      }
      method.create = function () {
        return new Md5();
      };
      method.update = function (message) {
        return method.create().update(message);
      };
      for (var i = 0; i < OUTPUT_TYPES.length; ++i) {
        var type = OUTPUT_TYPES[i];
        method[type] = createOutputMethod(type);
      }
      return method;
    };

    var nodeWrap = function nodeWrap(method) {
      var crypto = eval("require('crypto')");
      var Buffer = eval("require('buffer').Buffer");
      var nodeMethod = function nodeMethod(message) {
        if (typeof message === 'string') {
          return crypto.createHash('md5').update(message, 'utf8').digest('hex');
        } else {
          if (message === null || message === undefined) {
            throw ERROR;
          } else if (message.constructor === ArrayBuffer) {
            message = new Uint8Array(message);
          }
        }
        if (Array.isArray(message) || ArrayBuffer.isView(message) || message.constructor === Buffer) {
          return crypto.createHash('md5').update(new Buffer(message)).digest('hex');
        } else {
          return method(message);
        }
      };
      return nodeMethod;
    };

    /**
     * Md5 class
     * @class Md5
     * @description This is internal class.
     * @see {@link md5.create}
     */
    function Md5(sharedMemory) {
      if (sharedMemory) {
        blocks[0] = blocks[16] = blocks[1] = blocks[2] = blocks[3] = blocks[4] = blocks[5] = blocks[6] = blocks[7] = blocks[8] = blocks[9] = blocks[10] = blocks[11] = blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;
        this.blocks = blocks;
        this.buffer8 = buffer8;
      } else {
        if (ARRAY_BUFFER) {
          var buffer = new ArrayBuffer(68);
          this.buffer8 = new Uint8Array(buffer);
          this.blocks = new Uint32Array(buffer);
        } else {
          this.blocks = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
        }
      }
      this.h0 = this.h1 = this.h2 = this.h3 = this.start = this.bytes = 0;
      this.finalized = this.hashed = false;
      this.first = true;
    }

    /**
     * @method update
     * @memberof Md5
     * @instance
     * @description Update hash
     * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash
     * @returns {Md5} Md5 object.
     * @see {@link md5.update}
     */
    Md5.prototype.update = function (message) {
      if (this.finalized) {
        return;
      }

      var notString,
          type = typeof message === 'undefined' ? 'undefined' : _typeof(message);
      if (type !== 'string') {
        if (type === 'object') {
          if (message === null) {
            throw ERROR;
          } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {
            message = new Uint8Array(message);
          } else if (!Array.isArray(message)) {
            if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {
              throw ERROR;
            }
          }
        } else {
          throw ERROR;
        }
        notString = true;
      }
      var code,
          index = 0,
          i,
          length = message.length,
          blocks = this.blocks;
      var buffer8 = this.buffer8;

      while (index < length) {
        if (this.hashed) {
          this.hashed = false;
          blocks[0] = blocks[16];
          blocks[16] = blocks[1] = blocks[2] = blocks[3] = blocks[4] = blocks[5] = blocks[6] = blocks[7] = blocks[8] = blocks[9] = blocks[10] = blocks[11] = blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;
        }

        if (notString) {
          if (ARRAY_BUFFER) {
            for (i = this.start; index < length && i < 64; ++index) {
              buffer8[i++] = message[index];
            }
          } else {
            for (i = this.start; index < length && i < 64; ++index) {
              blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];
            }
          }
        } else {
          if (ARRAY_BUFFER) {
            for (i = this.start; index < length && i < 64; ++index) {
              code = message.charCodeAt(index);
              if (code < 0x80) {
                buffer8[i++] = code;
              } else if (code < 0x800) {
                buffer8[i++] = 0xc0 | code >> 6;
                buffer8[i++] = 0x80 | code & 0x3f;
              } else if (code < 0xd800 || code >= 0xe000) {
                buffer8[i++] = 0xe0 | code >> 12;
                buffer8[i++] = 0x80 | code >> 6 & 0x3f;
                buffer8[i++] = 0x80 | code & 0x3f;
              } else {
                code = 0x10000 + ((code & 0x3ff) << 10 | message.charCodeAt(++index) & 0x3ff);
                buffer8[i++] = 0xf0 | code >> 18;
                buffer8[i++] = 0x80 | code >> 12 & 0x3f;
                buffer8[i++] = 0x80 | code >> 6 & 0x3f;
                buffer8[i++] = 0x80 | code & 0x3f;
              }
            }
          } else {
            for (i = this.start; index < length && i < 64; ++index) {
              code = message.charCodeAt(index);
              if (code < 0x80) {
                blocks[i >> 2] |= code << SHIFT[i++ & 3];
              } else if (code < 0x800) {
                blocks[i >> 2] |= (0xc0 | code >> 6) << SHIFT[i++ & 3];
                blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];
              } else if (code < 0xd800 || code >= 0xe000) {
                blocks[i >> 2] |= (0xe0 | code >> 12) << SHIFT[i++ & 3];
                blocks[i >> 2] |= (0x80 | code >> 6 & 0x3f) << SHIFT[i++ & 3];
                blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];
              } else {
                code = 0x10000 + ((code & 0x3ff) << 10 | message.charCodeAt(++index) & 0x3ff);
                blocks[i >> 2] |= (0xf0 | code >> 18) << SHIFT[i++ & 3];
                blocks[i >> 2] |= (0x80 | code >> 12 & 0x3f) << SHIFT[i++ & 3];
                blocks[i >> 2] |= (0x80 | code >> 6 & 0x3f) << SHIFT[i++ & 3];
                blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];
              }
            }
          }
        }
        this.lastByteIndex = i;
        this.bytes += i - this.start;
        if (i >= 64) {
          this.start = i - 64;
          this.hash();
          this.hashed = true;
        } else {
          this.start = i;
        }
      }
      return this;
    };

    Md5.prototype.finalize = function () {
      if (this.finalized) {
        return;
      }
      this.finalized = true;
      var blocks = this.blocks,
          i = this.lastByteIndex;
      blocks[i >> 2] |= EXTRA[i & 3];
      if (i >= 56) {
        if (!this.hashed) {
          this.hash();
        }
        blocks[0] = blocks[16];
        blocks[16] = blocks[1] = blocks[2] = blocks[3] = blocks[4] = blocks[5] = blocks[6] = blocks[7] = blocks[8] = blocks[9] = blocks[10] = blocks[11] = blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;
      }
      blocks[14] = this.bytes << 3;
      this.hash();
    };

    Md5.prototype.hash = function () {
      var a,
          b,
          c,
          d,
          bc,
          da,
          blocks = this.blocks;

      if (this.first) {
        a = blocks[0] - 680876937;
        a = (a << 7 | a >>> 25) - 271733879 << 0;
        d = (-1732584194 ^ a & 2004318071) + blocks[1] - 117830708;
        d = (d << 12 | d >>> 20) + a << 0;
        c = (-271733879 ^ d & (a ^ -271733879)) + blocks[2] - 1126478375;
        c = (c << 17 | c >>> 15) + d << 0;
        b = (a ^ c & (d ^ a)) + blocks[3] - 1316259209;
        b = (b << 22 | b >>> 10) + c << 0;
      } else {
        a = this.h0;
        b = this.h1;
        c = this.h2;
        d = this.h3;
        a += (d ^ b & (c ^ d)) + blocks[0] - 680876936;
        a = (a << 7 | a >>> 25) + b << 0;
        d += (c ^ a & (b ^ c)) + blocks[1] - 389564586;
        d = (d << 12 | d >>> 20) + a << 0;
        c += (b ^ d & (a ^ b)) + blocks[2] + 606105819;
        c = (c << 17 | c >>> 15) + d << 0;
        b += (a ^ c & (d ^ a)) + blocks[3] - 1044525330;
        b = (b << 22 | b >>> 10) + c << 0;
      }

      a += (d ^ b & (c ^ d)) + blocks[4] - 176418897;
      a = (a << 7 | a >>> 25) + b << 0;
      d += (c ^ a & (b ^ c)) + blocks[5] + 1200080426;
      d = (d << 12 | d >>> 20) + a << 0;
      c += (b ^ d & (a ^ b)) + blocks[6] - 1473231341;
      c = (c << 17 | c >>> 15) + d << 0;
      b += (a ^ c & (d ^ a)) + blocks[7] - 45705983;
      b = (b << 22 | b >>> 10) + c << 0;
      a += (d ^ b & (c ^ d)) + blocks[8] + 1770035416;
      a = (a << 7 | a >>> 25) + b << 0;
      d += (c ^ a & (b ^ c)) + blocks[9] - 1958414417;
      d = (d << 12 | d >>> 20) + a << 0;
      c += (b ^ d & (a ^ b)) + blocks[10] - 42063;
      c = (c << 17 | c >>> 15) + d << 0;
      b += (a ^ c & (d ^ a)) + blocks[11] - 1990404162;
      b = (b << 22 | b >>> 10) + c << 0;
      a += (d ^ b & (c ^ d)) + blocks[12] + 1804603682;
      a = (a << 7 | a >>> 25) + b << 0;
      d += (c ^ a & (b ^ c)) + blocks[13] - 40341101;
      d = (d << 12 | d >>> 20) + a << 0;
      c += (b ^ d & (a ^ b)) + blocks[14] - 1502002290;
      c = (c << 17 | c >>> 15) + d << 0;
      b += (a ^ c & (d ^ a)) + blocks[15] + 1236535329;
      b = (b << 22 | b >>> 10) + c << 0;
      a += (c ^ d & (b ^ c)) + blocks[1] - 165796510;
      a = (a << 5 | a >>> 27) + b << 0;
      d += (b ^ c & (a ^ b)) + blocks[6] - 1069501632;
      d = (d << 9 | d >>> 23) + a << 0;
      c += (a ^ b & (d ^ a)) + blocks[11] + 643717713;
      c = (c << 14 | c >>> 18) + d << 0;
      b += (d ^ a & (c ^ d)) + blocks[0] - 373897302;
      b = (b << 20 | b >>> 12) + c << 0;
      a += (c ^ d & (b ^ c)) + blocks[5] - 701558691;
      a = (a << 5 | a >>> 27) + b << 0;
      d += (b ^ c & (a ^ b)) + blocks[10] + 38016083;
      d = (d << 9 | d >>> 23) + a << 0;
      c += (a ^ b & (d ^ a)) + blocks[15] - 660478335;
      c = (c << 14 | c >>> 18) + d << 0;
      b += (d ^ a & (c ^ d)) + blocks[4] - 405537848;
      b = (b << 20 | b >>> 12) + c << 0;
      a += (c ^ d & (b ^ c)) + blocks[9] + 568446438;
      a = (a << 5 | a >>> 27) + b << 0;
      d += (b ^ c & (a ^ b)) + blocks[14] - 1019803690;
      d = (d << 9 | d >>> 23) + a << 0;
      c += (a ^ b & (d ^ a)) + blocks[3] - 187363961;
      c = (c << 14 | c >>> 18) + d << 0;
      b += (d ^ a & (c ^ d)) + blocks[8] + 1163531501;
      b = (b << 20 | b >>> 12) + c << 0;
      a += (c ^ d & (b ^ c)) + blocks[13] - 1444681467;
      a = (a << 5 | a >>> 27) + b << 0;
      d += (b ^ c & (a ^ b)) + blocks[2] - 51403784;
      d = (d << 9 | d >>> 23) + a << 0;
      c += (a ^ b & (d ^ a)) + blocks[7] + 1735328473;
      c = (c << 14 | c >>> 18) + d << 0;
      b += (d ^ a & (c ^ d)) + blocks[12] - 1926607734;
      b = (b << 20 | b >>> 12) + c << 0;
      bc = b ^ c;
      a += (bc ^ d) + blocks[5] - 378558;
      a = (a << 4 | a >>> 28) + b << 0;
      d += (bc ^ a) + blocks[8] - 2022574463;
      d = (d << 11 | d >>> 21) + a << 0;
      da = d ^ a;
      c += (da ^ b) + blocks[11] + 1839030562;
      c = (c << 16 | c >>> 16) + d << 0;
      b += (da ^ c) + blocks[14] - 35309556;
      b = (b << 23 | b >>> 9) + c << 0;
      bc = b ^ c;
      a += (bc ^ d) + blocks[1] - 1530992060;
      a = (a << 4 | a >>> 28) + b << 0;
      d += (bc ^ a) + blocks[4] + 1272893353;
      d = (d << 11 | d >>> 21) + a << 0;
      da = d ^ a;
      c += (da ^ b) + blocks[7] - 155497632;
      c = (c << 16 | c >>> 16) + d << 0;
      b += (da ^ c) + blocks[10] - 1094730640;
      b = (b << 23 | b >>> 9) + c << 0;
      bc = b ^ c;
      a += (bc ^ d) + blocks[13] + 681279174;
      a = (a << 4 | a >>> 28) + b << 0;
      d += (bc ^ a) + blocks[0] - 358537222;
      d = (d << 11 | d >>> 21) + a << 0;
      da = d ^ a;
      c += (da ^ b) + blocks[3] - 722521979;
      c = (c << 16 | c >>> 16) + d << 0;
      b += (da ^ c) + blocks[6] + 76029189;
      b = (b << 23 | b >>> 9) + c << 0;
      bc = b ^ c;
      a += (bc ^ d) + blocks[9] - 640364487;
      a = (a << 4 | a >>> 28) + b << 0;
      d += (bc ^ a) + blocks[12] - 421815835;
      d = (d << 11 | d >>> 21) + a << 0;
      da = d ^ a;
      c += (da ^ b) + blocks[15] + 530742520;
      c = (c << 16 | c >>> 16) + d << 0;
      b += (da ^ c) + blocks[2] - 995338651;
      b = (b << 23 | b >>> 9) + c << 0;
      a += (c ^ (b | ~d)) + blocks[0] - 198630844;
      a = (a << 6 | a >>> 26) + b << 0;
      d += (b ^ (a | ~c)) + blocks[7] + 1126891415;
      d = (d << 10 | d >>> 22) + a << 0;
      c += (a ^ (d | ~b)) + blocks[14] - 1416354905;
      c = (c << 15 | c >>> 17) + d << 0;
      b += (d ^ (c | ~a)) + blocks[5] - 57434055;
      b = (b << 21 | b >>> 11) + c << 0;
      a += (c ^ (b | ~d)) + blocks[12] + 1700485571;
      a = (a << 6 | a >>> 26) + b << 0;
      d += (b ^ (a | ~c)) + blocks[3] - 1894986606;
      d = (d << 10 | d >>> 22) + a << 0;
      c += (a ^ (d | ~b)) + blocks[10] - 1051523;
      c = (c << 15 | c >>> 17) + d << 0;
      b += (d ^ (c | ~a)) + blocks[1] - 2054922799;
      b = (b << 21 | b >>> 11) + c << 0;
      a += (c ^ (b | ~d)) + blocks[8] + 1873313359;
      a = (a << 6 | a >>> 26) + b << 0;
      d += (b ^ (a | ~c)) + blocks[15] - 30611744;
      d = (d << 10 | d >>> 22) + a << 0;
      c += (a ^ (d | ~b)) + blocks[6] - 1560198380;
      c = (c << 15 | c >>> 17) + d << 0;
      b += (d ^ (c | ~a)) + blocks[13] + 1309151649;
      b = (b << 21 | b >>> 11) + c << 0;
      a += (c ^ (b | ~d)) + blocks[4] - 145523070;
      a = (a << 6 | a >>> 26) + b << 0;
      d += (b ^ (a | ~c)) + blocks[11] - 1120210379;
      d = (d << 10 | d >>> 22) + a << 0;
      c += (a ^ (d | ~b)) + blocks[2] + 718787259;
      c = (c << 15 | c >>> 17) + d << 0;
      b += (d ^ (c | ~a)) + blocks[9] - 343485551;
      b = (b << 21 | b >>> 11) + c << 0;

      if (this.first) {
        this.h0 = a + 1732584193 << 0;
        this.h1 = b - 271733879 << 0;
        this.h2 = c - 1732584194 << 0;
        this.h3 = d + 271733878 << 0;
        this.first = false;
      } else {
        this.h0 = this.h0 + a << 0;
        this.h1 = this.h1 + b << 0;
        this.h2 = this.h2 + c << 0;
        this.h3 = this.h3 + d << 0;
      }
    };

    /**
     * @method hex
     * @memberof Md5
     * @instance
     * @description Output hash as hex string
     * @returns {String} Hex string
     * @see {@link md5.hex}
     * @example
     * hash.hex();
     */
    Md5.prototype.hex = function () {
      this.finalize();

      var h0 = this.h0,
          h1 = this.h1,
          h2 = this.h2,
          h3 = this.h3;

      return HEX_CHARS[h0 >> 4 & 0x0F] + HEX_CHARS[h0 & 0x0F] + HEX_CHARS[h0 >> 12 & 0x0F] + HEX_CHARS[h0 >> 8 & 0x0F] + HEX_CHARS[h0 >> 20 & 0x0F] + HEX_CHARS[h0 >> 16 & 0x0F] + HEX_CHARS[h0 >> 28 & 0x0F] + HEX_CHARS[h0 >> 24 & 0x0F] + HEX_CHARS[h1 >> 4 & 0x0F] + HEX_CHARS[h1 & 0x0F] + HEX_CHARS[h1 >> 12 & 0x0F] + HEX_CHARS[h1 >> 8 & 0x0F] + HEX_CHARS[h1 >> 20 & 0x0F] + HEX_CHARS[h1 >> 16 & 0x0F] + HEX_CHARS[h1 >> 28 & 0x0F] + HEX_CHARS[h1 >> 24 & 0x0F] + HEX_CHARS[h2 >> 4 & 0x0F] + HEX_CHARS[h2 & 0x0F] + HEX_CHARS[h2 >> 12 & 0x0F] + HEX_CHARS[h2 >> 8 & 0x0F] + HEX_CHARS[h2 >> 20 & 0x0F] + HEX_CHARS[h2 >> 16 & 0x0F] + HEX_CHARS[h2 >> 28 & 0x0F] + HEX_CHARS[h2 >> 24 & 0x0F] + HEX_CHARS[h3 >> 4 & 0x0F] + HEX_CHARS[h3 & 0x0F] + HEX_CHARS[h3 >> 12 & 0x0F] + HEX_CHARS[h3 >> 8 & 0x0F] + HEX_CHARS[h3 >> 20 & 0x0F] + HEX_CHARS[h3 >> 16 & 0x0F] + HEX_CHARS[h3 >> 28 & 0x0F] + HEX_CHARS[h3 >> 24 & 0x0F];
    };

    /**
     * @method toString
     * @memberof Md5
     * @instance
     * @description Output hash as hex string
     * @returns {String} Hex string
     * @see {@link md5.hex}
     * @example
     * hash.toString();
     */
    Md5.prototype.toString = Md5.prototype.hex;

    /**
     * @method digest
     * @memberof Md5
     * @instance
     * @description Output hash as bytes array
     * @returns {Array} Bytes array
     * @see {@link md5.digest}
     * @example
     * hash.digest();
     */
    Md5.prototype.digest = function () {
      this.finalize();

      var h0 = this.h0,
          h1 = this.h1,
          h2 = this.h2,
          h3 = this.h3;
      return [h0 & 0xFF, h0 >> 8 & 0xFF, h0 >> 16 & 0xFF, h0 >> 24 & 0xFF, h1 & 0xFF, h1 >> 8 & 0xFF, h1 >> 16 & 0xFF, h1 >> 24 & 0xFF, h2 & 0xFF, h2 >> 8 & 0xFF, h2 >> 16 & 0xFF, h2 >> 24 & 0xFF, h3 & 0xFF, h3 >> 8 & 0xFF, h3 >> 16 & 0xFF, h3 >> 24 & 0xFF];
    };

    /**
     * @method array
     * @memberof Md5
     * @instance
     * @description Output hash as bytes array
     * @returns {Array} Bytes array
     * @see {@link md5.array}
     * @example
     * hash.array();
     */
    Md5.prototype.array = Md5.prototype.digest;

    /**
     * @method arrayBuffer
     * @memberof Md5
     * @instance
     * @description Output hash as ArrayBuffer
     * @returns {ArrayBuffer} ArrayBuffer
     * @see {@link md5.arrayBuffer}
     * @example
     * hash.arrayBuffer();
     */
    Md5.prototype.arrayBuffer = function () {
      this.finalize();

      var buffer = new ArrayBuffer(16);
      var blocks = new Uint32Array(buffer);
      blocks[0] = this.h0;
      blocks[1] = this.h1;
      blocks[2] = this.h2;
      blocks[3] = this.h3;
      return buffer;
    };

    /**
     * @method buffer
     * @deprecated This maybe confuse with Buffer in node.js. Please use arrayBuffer instead.
     * @memberof Md5
     * @instance
     * @description Output hash as ArrayBuffer
     * @returns {ArrayBuffer} ArrayBuffer
     * @see {@link md5.buffer}
     * @example
     * hash.buffer();
     */
    Md5.prototype.buffer = Md5.prototype.arrayBuffer;

    /**
     * @method base64
     * @memberof Md5
     * @instance
     * @description Output hash as base64 string
     * @returns {String} base64 string
     * @see {@link md5.base64}
     * @example
     * hash.base64();
     */
    Md5.prototype.base64 = function () {
      var v1,
          v2,
          v3,
          base64Str = '',
          bytes = this.array();
      for (var i = 0; i < 15;) {
        v1 = bytes[i++];
        v2 = bytes[i++];
        v3 = bytes[i++];
        base64Str += BASE64_ENCODE_CHAR[v1 >>> 2] + BASE64_ENCODE_CHAR[(v1 << 4 | v2 >>> 4) & 63] + BASE64_ENCODE_CHAR[(v2 << 2 | v3 >>> 6) & 63] + BASE64_ENCODE_CHAR[v3 & 63];
      }
      v1 = bytes[i];
      base64Str += BASE64_ENCODE_CHAR[v1 >>> 2] + BASE64_ENCODE_CHAR[v1 << 4 & 63] + '==';
      return base64Str;
    };

    var exports = createMethod();

    if (COMMON_JS) {
      module.exports = exports;
    } else {
      /**
       * @method md5
       * @description Md5 hash function, export to global in browsers.
       * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash
       * @returns {String} md5 hashes
       * @example
       * md5(''); // d41d8cd98f00b204e9800998ecf8427e
       * md5('The quick brown fox jumps over the lazy dog'); // 9e107d9d372bb6826bd81d3542a419d6
       * md5('The quick brown fox jumps over the lazy dog.'); // e4d909c290d0fb1ca068ffaddf22cbd0
       *
       * // It also supports UTF-8 encoding
       * md5('中文'); // a7bac2239fcdcb3a067903d8077c4a07
       *
       * // It also supports byte `Array`, `Uint8Array`, `ArrayBuffer`
       * md5([]); // d41d8cd98f00b204e9800998ecf8427e
       * md5(new Uint8Array([])); // d41d8cd98f00b204e9800998ecf8427e
       */
      root.md5 = exports;
      if (AMD) {
        undefined(function () {
          return exports;
        });
      }
    }
  })();
});

/*
* Author    Jonathan Lurie - http://me.jonahanlurie.fr
*
* License   MIT
* Link      https://github.com/jonathanlurie/pixpipejs
* Lab       MCIN - Montreal Neurological Institute
*/

/**
* A PixBinEncoder instance takes an Image2D or Image3D as input with `addInput(...)`
* and encode it so that it can be saved as a *.pixp file.
* An output filename can be specified using `.setMetadata("filename", "yourName.pixp");`,
* by default, the name is "untitled.pixp".
* When `update()` is called, a gzip blog is prepared as output[0] and can then be downloaded
* when calling the method `.download()`. The gzip blob could also be sent over AJAX
* using a third party library.
*
* **Usage**
* - [examples/savePixpFile.html](../examples/savePixpFile.html)
*/

var PixBinEncoder$1 = function () {
  function PixBinEncoder() {
    classCallCheck$1$1(this, PixBinEncoder);

    this._compress = true;
    this.reset();
  }

  /**
  * [static]
  * the first sequence of bytes for a pixbin file is this ASCII string
  */

  createClass$1$1(PixBinEncoder, [{
    key: 'reset',

    /**
    * [PRIVATE]
    * reset inputs and inputs
    */
    value: function reset() {
      this._inputs = [];
      this._output = null;
      this._options = {
        madeWith: "pixbincodec_js",
        userObject: null,
        description: null
      };
    }

    /**
    * Set a boolean to secify if data should be compressed or not
    * @param {Boolean} b - true to compress, false to not compress
    */

  }, {
    key: 'enableDataCompression',
    value: function enableDataCompression(b) {
      this._compress = b;
    }

    /**
    * Overwrite one of the default options.
    * @param {String} optionName - one of "madeWith" (default: "pixbincodec_js"), "userObject" (default: null), "description" (default: null)
    */

  }, {
    key: 'setOption',
    value: function setOption(optionName, value) {
      if (optionName in this._options) {
        this._options[optionName] = value;
      }
    }

    /**
    * Add an input. Multiple inputs can be added.
    * @param {Object} obj - an object that comtain _data and _metadata
    */

  }, {
    key: 'addInput',
    value: function addInput(obj) {
      if (PixBlockEncoder.isGoodCandidate(obj)) {
        this._inputs.push(obj);
      }
    }

    /**
    * Get the output
    * @return {ArrayBuffer} the encoded data as a buffer
    */

  }, {
    key: 'getOutput',
    value: function getOutput() {
      return this._output;
    }

    /**
    * Launch the encoding
    */

  }, {
    key: 'run',
    value: function run() {
      if (!this._inputs.length) {
        console.warn("The encoder must be specified at least one input.");
        return;
      }

      var that = this;
      var today = new Date();
      var isLittleEndian = CodecUtils$1.isPlatformLittleEndian();
      var blockEncoder = new PixBlockEncoder();

      // this object is the JSON description at the begining of a PixBin
      var pixBinIndex = {
        date: today.toISOString(),
        createdWith: this._options.madeWith,
        description: this._options.description,
        userObject: this._options.userObject,
        pixblocksInfo: []

        // array of binary blocks (each are Uint8Array or ArrayBuffer)
      };var pixBlocks = [];

      // just a convenient shortcut
      var pixblocksInfo = pixBinIndex.pixblocksInfo;

      this._inputs.forEach(function (input, index) {
        blockEncoder.setInput(input);
        blockEncoder.enableDataCompression(that._compress);
        blockEncoder.run();

        var encodedBlock = blockEncoder.getOutput();

        if (!encodedBlock) {
          console.warn("The input of index " + index + " could not be encoded as a PixBlock.");
          return;
        }

        // adding an entry to the PixBin index
        var pixBinIndexEntry = {
          type: input.constructor.name,
          description: "description" in input._metadata ? input._metadata.description : null,
          byteLength: encodedBlock.byteLength,
          checksum: md5$2(encodedBlock)
        };

        pixblocksInfo.push(pixBinIndexEntry);
        pixBlocks.push(encodedBlock);
      });

      if (!pixBlocks.length) {
        console.warn("No input was compatible for PixBlock encoding.");
      }

      // Building the header ArrayBuffer of the file. It contains:
      // - A ASCII string "pixpipe". 7 x Uint8 of charcodes (7 bytes)
      // - A flag for encoding endianess, 0: big, 1: little. 1 x Uint8 (1 byte)
      // - The byte length of the PixBin meta binary object. 1 x Uint32 (4 bytes)

      // encoding the meta object into an ArrayBuffer
      var pixBinIndexBinaryString = CodecUtils$1.objectToArrayBuffer(pixBinIndex);
      var magicNumber = PixBinEncoder.MAGIC_NUMBER();

      // the +5 stands for 1 endiannes byte (Uint8) + 4 bytes (1xUint32) of header length
      var binPrimer = new ArrayBuffer(magicNumber.length + 5);
      var binPrimerView = new DataView(binPrimer);

      CodecUtils$1.setString8InBuffer(magicNumber, binPrimer);
      binPrimerView.setUint8(magicNumber.length, +isLittleEndian);
      binPrimerView.setUint32(magicNumber.length + 1, pixBinIndexBinaryString.byteLength, isLittleEndian);

      var allBuffers = [binPrimer, pixBinIndexBinaryString].concat(pixBlocks);
      this._output = CodecUtils$1.mergeBuffers(allBuffers);
    }
  }], [{
    key: 'MAGIC_NUMBER',
    value: function MAGIC_NUMBER() {
      return "PIXPIPE_PIXBIN";
    }
  }]);
  return PixBinEncoder;
}(); /* END of class PixBinEncoder */

/*
* Author    Jonathan Lurie - http://me.jonahanlurie.fr
*
* License   MIT
* Link      https://github.com/jonathanlurie/pixpipejs
* Lab       MCIN - Montreal Neurological Institute
*/

/**
* A PixBinDecoder instance decodes a *.pixp file and output an Image2D or Image3D.
* The input, specified by `.addInput(...)` must be an ArrayBuffer
* (from an `UrlToArrayBufferFilter`, an `UrlToArrayBufferReader` or anothrer source ).
*
* **Usage**
* - [examples/pixpFileToImage2D.html](../examples/pixpFileToImage2D.html)
*/

var PixBinDecoder = function () {
  function PixBinDecoder() {
    classCallCheck$1$1(this, PixBinDecoder);

    this._verifyChecksum = false;
    this._input = null;
    this._output = null;
    this._binMeta = null;
    this._parsingInfo = {
      offsetToReachFirstBlock: -1,
      isLittleEndian: -1
    };

    this._decodedBlocks = {};
    this._isValid = false;
    this.reset();
  }

  /**
  * Specify an input
  * @param {ArrayBuffer} buff - the input
  */

  createClass$1$1(PixBinDecoder, [{
    key: 'setInput',
    value: function setInput(buff) {
      this.reset();

      if (buff instanceof ArrayBuffer) {
        this._input = buff;
        this._isValid = this._parseIndex();
      }
    }

    /**
    * To be called after setInput. Tells if the buffer loaded is valid or not.
    * @return {Boolean} true if valid, false if not.
    */

  }, {
    key: 'isValid',
    value: function isValid() {
      return this._isValid;
    }

    /**
    * Get the the decoded output
    * @return {Object} a decoded object
    */

  }, {
    key: 'getOutput',
    value: function getOutput() {
      return this._output;
    }

    /**
    * Get the number of blocks encoded in this PixBin file
    * @return {Number}
    */

  }, {
    key: 'getNumberOfBlocks',
    value: function getNumberOfBlocks() {
      return this._binMeta.pixblocksInfo.length;
    }

    /**
    * Get the creation date of the file in the ISO8601 format
    * @return {String} the data
    */

  }, {
    key: 'getBinCreationDate',
    value: function getBinCreationDate() {
      return this._binMeta.date;
    }

    /**
    * Get the description of the PixBin file
    * @return {String} the description
    */

  }, {
    key: 'getBinDescription',
    value: function getBinDescription() {
      return this._binMeta.description;
    }

    /**
    * The userObject is a generic container added to the PixBin. It can carry all sorts of data.
    * If not specified during encoding, it's null.
    * @return {Object} the userObject
    */

  }, {
    key: 'getBinUserObject',
    value: function getBinUserObject() {
      return this._binMeta.userObject;
    }

    /**
    * Get the description of the block at the given index
    * @param {Number} n - the index of the block
    * @return {String} the description of this block
    */

  }, {
    key: 'getBlockDescription',
    value: function getBlockDescription(n) {
      if (n < 0 || n >= this.getNumberOfBlocks()) {
        console.warn("The block index is out of range.");
        return null;
      }
      return this._binMeta.pixblocksInfo[n].description;
    }

    /**
    * Get the original type of the block. Convenient for knowing how to rebuild
    * the object in its original form.
    * @param {Number} n - the index of the block
    * @return {String} the type ( comes from constructor.name )
    */

  }, {
    key: 'getBlockType',
    value: function getBlockType(n) {
      if (n < 0 || n >= this.getNumberOfBlocks()) {
        console.warn("The block index is out of range.");
        return null;
      }
      return this._binMeta.pixblocksInfo[n].type;
    }

    /**
    * reset I/O and data to query 
    */

  }, {
    key: 'reset',
    value: function reset() {
      this._isValid = false;
      this._input = null;
      this._output = null;
      this._binMeta = null;
      this._parsingInfo = {
        offsetToReachFirstBlock: -1,
        isLittleEndian: -1
      };
      this._decodedBlocks = {};
    }

    /**
    * Specify wether or not  the bin decoder must perform a checksum verification
    * for each block to be decoded.
    * @param {Boolean} b - true to perfom verification, false to skip it (default: false)
    */

  }, {
    key: 'enableBlockVerification',
    value: function enableBlockVerification(b) {
      this._verifyChecksum = b;
    }

    /**
    * [PRIVATE]
    * 
    */

  }, {
    key: '_parseIndex',
    value: function _parseIndex() {
      var input = this._input;

      if (!input) {
        console.warn("Input cannot be null");
        return false;
      }

      var inputByteLength = input.byteLength;
      var magicNumberToExpect = PixBinEncoder$1.MAGIC_NUMBER();

      // control 1: the file must be large enough
      if (inputByteLength < magicNumberToExpect.length + 5) {
        console.warn("This buffer does not match a PixBin file.");
        return false;
      }

      var view = new DataView(input);
      var movingByteOffset = 0;
      var magicNumber = CodecUtils$1.getString8FromBuffer(input, magicNumberToExpect.length);

      // control 2: the magic number
      if (magicNumber !== magicNumberToExpect) {
        console.warn("This file is not of PixBin type. (wrong magic number)");
        return false;
      }

      movingByteOffset = magicNumberToExpect.length;
      var isLittleEndian = view.getUint8(movingByteOffset);

      // control 3: the endianess must be 0 or 1
      if (isLittleEndian != 0 && isLittleEndian != 1) {
        console.warn("This file is not of PixBin type. (wrong endianess code)");
        return false;
      }

      movingByteOffset += 1;
      var pixBinIndexBinaryStringByteLength = view.getUint32(movingByteOffset, isLittleEndian);
      movingByteOffset += 4;
      var pixBinIndexObj = CodecUtils$1.ArrayBufferToObject(input.slice(movingByteOffset, movingByteOffset + pixBinIndexBinaryStringByteLength));
      movingByteOffset += pixBinIndexBinaryStringByteLength;

      this._parsingInfo.offsetToReachFirstBlock = movingByteOffset;
      this._parsingInfo.isLittleEndian = isLittleEndian;
      this._binMeta = pixBinIndexObj;

      return true;
    }

    /**
    * Fetch a block at the given index. The first time it called on a block,
    * this block will be read from the stream and decoded.
    * If a block is already decoded, it will be retrieved as is without trying to
    * re-decode it, unless `forceDecoding` is `true`.
    * @param {Number} n - the index of the block to fetch
    * @param {Boolean} forceDecoding - force the decoding even though it was already decoded
    * @return {Object} the decoded block, containing `_data_`, `_metadata` and `originalBlockType`
    */

  }, {
    key: 'fetchBlock',
    value: function fetchBlock(n) {
      var forceDecoding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      var nbBlocks = this.getNumberOfBlocks();
      if (n < 0 || n >= nbBlocks) {
        console.warn("The block index is out of range.");
        return null;
      }

      if (n in this._decodedBlocks && !forceDecoding) {
        return this._decodedBlocks[n];
      }

      var offset = this._parsingInfo.offsetToReachFirstBlock;

      for (var i = 0; i < n; i++) {
        offset += this._binMeta.pixblocksInfo[i].byteLength;
      }

      var blockInfo = this._binMeta.pixblocksInfo[n];
      var pixBlockBuff = this._input.slice(offset, offset + blockInfo.byteLength);

      if (this._verifyChecksum && md5$2(pixBlockBuff) !== blockInfo.checksum) {
        console.warn("The block #" + n + " is corrupted.");
        return null;
      }

      var blockDecoder = new PixBlockDecoder();
      blockDecoder.setInput(pixBlockBuff);
      blockDecoder.run();
      var decodedBlock = blockDecoder.getOutput();

      if (!decodedBlock) {
        console.warn("The block #" + n + " could not be decoded.");
        return null;
      }

      this._decodedBlocks[n] = decodedBlock;
      return decodedBlock;
    }
  }]);
  return PixBinDecoder;
}(); /* END of class PixBinDecoder */

/*
* Author    Jonathan Lurie - http://me.jonathanlurie.fr
*
* License   MIT
* Link      https://github.com/Pixpipe/pixpipejs
* Lab       MCIN - Montreal Neurological Institute
*/

/**
* A PixBinEncoder instance takes an Image2D or Image3D as input with `addInput(...)`
* and encode it so that it can be saved as a *.pixp file.
* An output filename can be specified using `.setMetadata("filename", "yourName.pixp");`,
* by default, the name is "untitled.pixp".
* When `update()` is called, a gzip blog is prepared as output[0] and can then be downloaded
* when calling the method `.download()`. The gzip blob could also be sent over AJAX
* using a third party library.
*
* **Usage**
* - [examples/savePixpFile.html](../examples/savePixpFile.html)
*/

var PixBinEncoder$$1 = function (_Filter) {
  inherits(PixBinEncoder$$1, _Filter);

  function PixBinEncoder$$1() {
    classCallCheck(this, PixBinEncoder$$1);

    // define if the encoder should compress the data, default: yes
    var _this = possibleConstructorReturn(this, (PixBinEncoder$$1.__proto__ || Object.getPrototypeOf(PixBinEncoder$$1)).call(this));

    _this.setMetadata("compress", true);

    // to be transmitted to the encoder
    _this.setMetadata("description", "no description");
    _this.setMetadata("madeWith", "Pixpipejs");
    _this.setMetadata("userObject", null);
    return _this;
  }

  /**
  * [static]
  * the first sequence of bytes for a pixbin file is this ASCII string
  */


  createClass(PixBinEncoder$$1, [{
    key: "_run",
    value: function _run() {
      var encoder = new PixBinEncoder$1();

      // specifying some options
      encoder.enableDataCompression(this.getMetadata("compress"));
      encoder.setOption("userObject", this.getMetadata("userObject"));
      encoder.setOption("description", this.getMetadata("description"));
      encoder.setOption("madeWith", this.getMetadata("madeWith"));

      this._forEachInput(function (category, input) {
        encoder.addInput(input);
      });

      encoder.run();

      this._output[0] = encoder.getOutput();
    }

    /**
    * Download the generated file
    */
    /*
    download(){
      var output = this.getOutput();
       if(output){
        FileSaver.saveAs( this.getOutput(), this.getMetadata("filename"));
      }else{
        console.warn("No output computed yet.");
      }
    }
    */

  }], [{
    key: "MAGIC_NUMBER",
    value: function MAGIC_NUMBER() {
      return "PIXPIPE_PIXBIN";
    }
  }]);
  return PixBinEncoder$$1;
}(Filter); /* END of class PixBinEncoder */

/*
* Author    Jonathan Lurie - http://me.jonathanlurie.fr
*
* License   MIT
* Link      https://github.com/Pixpipe/pixpipejs
* Lab       MCIN - Montreal Neurological Institute
*/

/**
* A PixBinDecoder instance decodes a *.pixp file and output an Image2D or Image3D.
* The input, specified by `.addInput(...)` must be an ArrayBuffer
* (from an `UrlToArrayBufferFilter`, an `UrlToArrayBufferReader` or anothrer source ).
*
* **Usage**
* - [examples/pixpFileToImage2D.html](../examples/pixpFileToImage2D.html)
*/

var PixBinDecoder$1 = function (_Filter) {
  inherits(PixBinDecoder$$1, _Filter);

  function PixBinDecoder$$1() {
    classCallCheck(this, PixBinDecoder$$1);

    var _this = possibleConstructorReturn(this, (PixBinDecoder$$1.__proto__ || Object.getPrototypeOf(PixBinDecoder$$1)).call(this));

    _this.addInputValidator(0, ArrayBuffer);
    _this.setMetadata("blockVerification", false);
    return _this;
  }

  createClass(PixBinDecoder$$1, [{
    key: '_run',
    value: function _run() {
      if (!this.hasValidInput()) {
        console.warn("PixBinDecoder can only decode ArrayBuffer.");
        return;
      }

      var input = this._getInput();
      var decoder = new PixBinDecoder();
      decoder.enableBlockVerification(this.getMetadata("blockVerification"));
      decoder.setInput(input);

      // dont go further is buffer is not valid
      if (!decoder.isValid()) {
        console.warn("The input buffer is invalid.");
        return;
      }

      var pixBinMetaObj = {
        creationDate: decoder.getBinCreationDate(),
        description: decoder.getBinDescription(),
        userObject: decoder.getBinUserObject(),
        numberOfBlocks: decoder.getNumberOfBlocks()

        // perform the decoding
      };var numberOfBlocks = decoder.getNumberOfBlocks();

      for (var i = 0; i < numberOfBlocks; i++) {
        var blockType = decoder.getBlockType(i);
        var block = decoder.fetchBlock(i);
        var output = null;
        var objectConstructor = CoreTypes.getCoreType(blockType);

        // the encoded object matches to a pixpipe type
        if (objectConstructor) {
          output = new objectConstructor();
          output.setRawData(block._data);
          output.setRawMetadata(block._metadata);
        }
        // Fallback on a not-pixpipe type
        else {
            var globalObject = CodecUtils.getGlobalObject();
            if (blockType in globalObject) {
              output = new globalObject[blockType]();
              output._metadata = block._metadata;
              output._data = block._data;
            }
          }

        this._output[i] = output;
      }

      // adding the metadata only if there are blocks
      if (numberOfBlocks) {
        this._output["PixBinMeta"] = pixBinMetaObj;
      }
    }
  }]);
  return PixBinDecoder$$1;
}(Filter); /* END of class PixBinDecoder */

/*
  Copyright (c) 2008, Adobe Systems Incorporated
  All rights reserved.

  Redistribution and use in source and binary forms, with or without 
  modification, are permitted provided that the following conditions are
  met:

  * Redistributions of source code must retain the above copyright notice, 
    this list of conditions and the following disclaimer.
  
  * Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimer in the 
    documentation and/or other materials provided with the distribution.
  
  * Neither the name of Adobe Systems Incorporated nor the names of its 
    contributors may be used to endorse or promote products derived from 
    this software without specific prior written permission.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
/*
JPEG encoder ported to JavaScript and optimized by Andreas Ritter, www.bytestrom.eu, 11/2009

Basic GUI blocking jpeg encoder
*/

var btoa = btoa || function (buf) {
	return new Buffer(buf).toString('base64');
};

function JPEGEncoder(quality) {
	var ffloor = Math.floor;
	var YTable = new Array(64);
	var UVTable = new Array(64);
	var fdtbl_Y = new Array(64);
	var fdtbl_UV = new Array(64);
	var YDC_HT;
	var UVDC_HT;
	var YAC_HT;
	var UVAC_HT;

	var bitcode = new Array(65535);
	var category = new Array(65535);
	var outputfDCTQuant = new Array(64);
	var DU = new Array(64);
	var byteout = [];
	var bytenew = 0;
	var bytepos = 7;

	var YDU = new Array(64);
	var UDU = new Array(64);
	var VDU = new Array(64);
	var clt = new Array(256);
	var RGB_YUV_TABLE = new Array(2048);
	var currentQuality;

	var ZigZag = [0, 1, 5, 6, 14, 15, 27, 28, 2, 4, 7, 13, 16, 26, 29, 42, 3, 8, 12, 17, 25, 30, 41, 43, 9, 11, 18, 24, 31, 40, 44, 53, 10, 19, 23, 32, 39, 45, 52, 54, 20, 22, 33, 38, 46, 51, 55, 60, 21, 34, 37, 47, 50, 56, 59, 61, 35, 36, 48, 49, 57, 58, 62, 63];

	var std_dc_luminance_nrcodes = [0, 0, 1, 5, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0];
	var std_dc_luminance_values = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];
	var std_ac_luminance_nrcodes = [0, 0, 2, 1, 3, 3, 2, 4, 3, 5, 5, 4, 4, 0, 0, 1, 0x7d];
	var std_ac_luminance_values = [0x01, 0x02, 0x03, 0x00, 0x04, 0x11, 0x05, 0x12, 0x21, 0x31, 0x41, 0x06, 0x13, 0x51, 0x61, 0x07, 0x22, 0x71, 0x14, 0x32, 0x81, 0x91, 0xa1, 0x08, 0x23, 0x42, 0xb1, 0xc1, 0x15, 0x52, 0xd1, 0xf0, 0x24, 0x33, 0x62, 0x72, 0x82, 0x09, 0x0a, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa];

	var std_dc_chrominance_nrcodes = [0, 0, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0];
	var std_dc_chrominance_values = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];
	var std_ac_chrominance_nrcodes = [0, 0, 2, 1, 2, 4, 4, 3, 4, 7, 5, 4, 4, 0, 1, 2, 0x77];
	var std_ac_chrominance_values = [0x00, 0x01, 0x02, 0x03, 0x11, 0x04, 0x05, 0x21, 0x31, 0x06, 0x12, 0x41, 0x51, 0x07, 0x61, 0x71, 0x13, 0x22, 0x32, 0x81, 0x08, 0x14, 0x42, 0x91, 0xa1, 0xb1, 0xc1, 0x09, 0x23, 0x33, 0x52, 0xf0, 0x15, 0x62, 0x72, 0xd1, 0x0a, 0x16, 0x24, 0x34, 0xe1, 0x25, 0xf1, 0x17, 0x18, 0x19, 0x1a, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa];

	function initQuantTables(sf) {
		var YQT = [16, 11, 10, 16, 24, 40, 51, 61, 12, 12, 14, 19, 26, 58, 60, 55, 14, 13, 16, 24, 40, 57, 69, 56, 14, 17, 22, 29, 51, 87, 80, 62, 18, 22, 37, 56, 68, 109, 103, 77, 24, 35, 55, 64, 81, 104, 113, 92, 49, 64, 78, 87, 103, 121, 120, 101, 72, 92, 95, 98, 112, 100, 103, 99];

		for (var i = 0; i < 64; i++) {
			var t = ffloor((YQT[i] * sf + 50) / 100);
			if (t < 1) {
				t = 1;
			} else if (t > 255) {
				t = 255;
			}
			YTable[ZigZag[i]] = t;
		}
		var UVQT = [17, 18, 24, 47, 99, 99, 99, 99, 18, 21, 26, 66, 99, 99, 99, 99, 24, 26, 56, 99, 99, 99, 99, 99, 47, 66, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99];
		for (var j = 0; j < 64; j++) {
			var u = ffloor((UVQT[j] * sf + 50) / 100);
			if (u < 1) {
				u = 1;
			} else if (u > 255) {
				u = 255;
			}
			UVTable[ZigZag[j]] = u;
		}
		var aasf = [1.0, 1.387039845, 1.306562965, 1.175875602, 1.0, 0.785694958, 0.541196100, 0.275899379];
		var k = 0;
		for (var row = 0; row < 8; row++) {
			for (var col = 0; col < 8; col++) {
				fdtbl_Y[k] = 1.0 / (YTable[ZigZag[k]] * aasf[row] * aasf[col] * 8.0);
				fdtbl_UV[k] = 1.0 / (UVTable[ZigZag[k]] * aasf[row] * aasf[col] * 8.0);
				k++;
			}
		}
	}

	function computeHuffmanTbl(nrcodes, std_table) {
		var codevalue = 0;
		var pos_in_table = 0;
		var HT = new Array();
		for (var k = 1; k <= 16; k++) {
			for (var j = 1; j <= nrcodes[k]; j++) {
				HT[std_table[pos_in_table]] = [];
				HT[std_table[pos_in_table]][0] = codevalue;
				HT[std_table[pos_in_table]][1] = k;
				pos_in_table++;
				codevalue++;
			}
			codevalue *= 2;
		}
		return HT;
	}

	function initHuffmanTbl() {
		YDC_HT = computeHuffmanTbl(std_dc_luminance_nrcodes, std_dc_luminance_values);
		UVDC_HT = computeHuffmanTbl(std_dc_chrominance_nrcodes, std_dc_chrominance_values);
		YAC_HT = computeHuffmanTbl(std_ac_luminance_nrcodes, std_ac_luminance_values);
		UVAC_HT = computeHuffmanTbl(std_ac_chrominance_nrcodes, std_ac_chrominance_values);
	}

	function initCategoryNumber() {
		var nrlower = 1;
		var nrupper = 2;
		for (var cat = 1; cat <= 15; cat++) {
			//Positive numbers
			for (var nr = nrlower; nr < nrupper; nr++) {
				category[32767 + nr] = cat;
				bitcode[32767 + nr] = [];
				bitcode[32767 + nr][1] = cat;
				bitcode[32767 + nr][0] = nr;
			}
			//Negative numbers
			for (var nrneg = -(nrupper - 1); nrneg <= -nrlower; nrneg++) {
				category[32767 + nrneg] = cat;
				bitcode[32767 + nrneg] = [];
				bitcode[32767 + nrneg][1] = cat;
				bitcode[32767 + nrneg][0] = nrupper - 1 + nrneg;
			}
			nrlower <<= 1;
			nrupper <<= 1;
		}
	}

	function initRGBYUVTable() {
		for (var i = 0; i < 256; i++) {
			RGB_YUV_TABLE[i] = 19595 * i;
			RGB_YUV_TABLE[i + 256 >> 0] = 38470 * i;
			RGB_YUV_TABLE[i + 512 >> 0] = 7471 * i + 0x8000;
			RGB_YUV_TABLE[i + 768 >> 0] = -11059 * i;
			RGB_YUV_TABLE[i + 1024 >> 0] = -21709 * i;
			RGB_YUV_TABLE[i + 1280 >> 0] = 32768 * i + 0x807FFF;
			RGB_YUV_TABLE[i + 1536 >> 0] = -27439 * i;
			RGB_YUV_TABLE[i + 1792 >> 0] = -5329 * i;
		}
	}

	// IO functions
	function writeBits(bs) {
		var value = bs[0];
		var posval = bs[1] - 1;
		while (posval >= 0) {
			if (value & 1 << posval) {
				bytenew |= 1 << bytepos;
			}
			posval--;
			bytepos--;
			if (bytepos < 0) {
				if (bytenew == 0xFF) {
					writeByte(0xFF);
					writeByte(0);
				} else {
					writeByte(bytenew);
				}
				bytepos = 7;
				bytenew = 0;
			}
		}
	}

	function writeByte(value) {
		//byteout.push(clt[value]); // write char directly instead of converting later
		byteout.push(value);
	}

	function writeWord(value) {
		writeByte(value >> 8 & 0xFF);
		writeByte(value & 0xFF);
	}

	// DCT & quantization core
	function fDCTQuant(data, fdtbl) {
		var d0, d1, d2, d3, d4, d5, d6, d7;
		/* Pass 1: process rows. */
		var dataOff = 0;
		var i;
		var I8 = 8;
		var I64 = 64;
		for (i = 0; i < I8; ++i) {
			d0 = data[dataOff];
			d1 = data[dataOff + 1];
			d2 = data[dataOff + 2];
			d3 = data[dataOff + 3];
			d4 = data[dataOff + 4];
			d5 = data[dataOff + 5];
			d6 = data[dataOff + 6];
			d7 = data[dataOff + 7];

			var tmp0 = d0 + d7;
			var tmp7 = d0 - d7;
			var tmp1 = d1 + d6;
			var tmp6 = d1 - d6;
			var tmp2 = d2 + d5;
			var tmp5 = d2 - d5;
			var tmp3 = d3 + d4;
			var tmp4 = d3 - d4;

			/* Even part */
			var tmp10 = tmp0 + tmp3; /* phase 2 */
			var tmp13 = tmp0 - tmp3;
			var tmp11 = tmp1 + tmp2;
			var tmp12 = tmp1 - tmp2;

			data[dataOff] = tmp10 + tmp11; /* phase 3 */
			data[dataOff + 4] = tmp10 - tmp11;

			var z1 = (tmp12 + tmp13) * 0.707106781; /* c4 */
			data[dataOff + 2] = tmp13 + z1; /* phase 5 */
			data[dataOff + 6] = tmp13 - z1;

			/* Odd part */
			tmp10 = tmp4 + tmp5; /* phase 2 */
			tmp11 = tmp5 + tmp6;
			tmp12 = tmp6 + tmp7;

			/* The rotator is modified from fig 4-8 to avoid extra negations. */
			var z5 = (tmp10 - tmp12) * 0.382683433; /* c6 */
			var z2 = 0.541196100 * tmp10 + z5; /* c2-c6 */
			var z4 = 1.306562965 * tmp12 + z5; /* c2+c6 */
			var z3 = tmp11 * 0.707106781; /* c4 */

			var z11 = tmp7 + z3; /* phase 5 */
			var z13 = tmp7 - z3;

			data[dataOff + 5] = z13 + z2; /* phase 6 */
			data[dataOff + 3] = z13 - z2;
			data[dataOff + 1] = z11 + z4;
			data[dataOff + 7] = z11 - z4;

			dataOff += 8; /* advance pointer to next row */
		}

		/* Pass 2: process columns. */
		dataOff = 0;
		for (i = 0; i < I8; ++i) {
			d0 = data[dataOff];
			d1 = data[dataOff + 8];
			d2 = data[dataOff + 16];
			d3 = data[dataOff + 24];
			d4 = data[dataOff + 32];
			d5 = data[dataOff + 40];
			d6 = data[dataOff + 48];
			d7 = data[dataOff + 56];

			var tmp0p2 = d0 + d7;
			var tmp7p2 = d0 - d7;
			var tmp1p2 = d1 + d6;
			var tmp6p2 = d1 - d6;
			var tmp2p2 = d2 + d5;
			var tmp5p2 = d2 - d5;
			var tmp3p2 = d3 + d4;
			var tmp4p2 = d3 - d4;

			/* Even part */
			var tmp10p2 = tmp0p2 + tmp3p2; /* phase 2 */
			var tmp13p2 = tmp0p2 - tmp3p2;
			var tmp11p2 = tmp1p2 + tmp2p2;
			var tmp12p2 = tmp1p2 - tmp2p2;

			data[dataOff] = tmp10p2 + tmp11p2; /* phase 3 */
			data[dataOff + 32] = tmp10p2 - tmp11p2;

			var z1p2 = (tmp12p2 + tmp13p2) * 0.707106781; /* c4 */
			data[dataOff + 16] = tmp13p2 + z1p2; /* phase 5 */
			data[dataOff + 48] = tmp13p2 - z1p2;

			/* Odd part */
			tmp10p2 = tmp4p2 + tmp5p2; /* phase 2 */
			tmp11p2 = tmp5p2 + tmp6p2;
			tmp12p2 = tmp6p2 + tmp7p2;

			/* The rotator is modified from fig 4-8 to avoid extra negations. */
			var z5p2 = (tmp10p2 - tmp12p2) * 0.382683433; /* c6 */
			var z2p2 = 0.541196100 * tmp10p2 + z5p2; /* c2-c6 */
			var z4p2 = 1.306562965 * tmp12p2 + z5p2; /* c2+c6 */
			var z3p2 = tmp11p2 * 0.707106781; /* c4 */

			var z11p2 = tmp7p2 + z3p2; /* phase 5 */
			var z13p2 = tmp7p2 - z3p2;

			data[dataOff + 40] = z13p2 + z2p2; /* phase 6 */
			data[dataOff + 24] = z13p2 - z2p2;
			data[dataOff + 8] = z11p2 + z4p2;
			data[dataOff + 56] = z11p2 - z4p2;

			dataOff++; /* advance pointer to next column */
		}

		// Quantize/descale the coefficients
		var fDCTQuant;
		for (i = 0; i < I64; ++i) {
			// Apply the quantization and scaling factor & Round to nearest integer
			fDCTQuant = data[i] * fdtbl[i];
			outputfDCTQuant[i] = fDCTQuant > 0.0 ? fDCTQuant + 0.5 | 0 : fDCTQuant - 0.5 | 0;
			//outputfDCTQuant[i] = fround(fDCTQuant);
		}
		return outputfDCTQuant;
	}

	function writeAPP0() {
		writeWord(0xFFE0); // marker
		writeWord(16); // length
		writeByte(0x4A); // J
		writeByte(0x46); // F
		writeByte(0x49); // I
		writeByte(0x46); // F
		writeByte(0); // = "JFIF",'\0'
		writeByte(1); // versionhi
		writeByte(1); // versionlo
		writeByte(0); // xyunits
		writeWord(1); // xdensity
		writeWord(1); // ydensity
		writeByte(0); // thumbnwidth
		writeByte(0); // thumbnheight
	}

	function writeSOF0(width, height) {
		writeWord(0xFFC0); // marker
		writeWord(17); // length, truecolor YUV JPG
		writeByte(8); // precision
		writeWord(height);
		writeWord(width);
		writeByte(3); // nrofcomponents
		writeByte(1); // IdY
		writeByte(0x11); // HVY
		writeByte(0); // QTY
		writeByte(2); // IdU
		writeByte(0x11); // HVU
		writeByte(1); // QTU
		writeByte(3); // IdV
		writeByte(0x11); // HVV
		writeByte(1); // QTV
	}

	function writeDQT() {
		writeWord(0xFFDB); // marker
		writeWord(132); // length
		writeByte(0);
		for (var i = 0; i < 64; i++) {
			writeByte(YTable[i]);
		}
		writeByte(1);
		for (var j = 0; j < 64; j++) {
			writeByte(UVTable[j]);
		}
	}

	function writeDHT() {
		writeWord(0xFFC4); // marker
		writeWord(0x01A2); // length

		writeByte(0); // HTYDCinfo
		for (var i = 0; i < 16; i++) {
			writeByte(std_dc_luminance_nrcodes[i + 1]);
		}
		for (var j = 0; j <= 11; j++) {
			writeByte(std_dc_luminance_values[j]);
		}

		writeByte(0x10); // HTYACinfo
		for (var k = 0; k < 16; k++) {
			writeByte(std_ac_luminance_nrcodes[k + 1]);
		}
		for (var l = 0; l <= 161; l++) {
			writeByte(std_ac_luminance_values[l]);
		}

		writeByte(1); // HTUDCinfo
		for (var m = 0; m < 16; m++) {
			writeByte(std_dc_chrominance_nrcodes[m + 1]);
		}
		for (var n = 0; n <= 11; n++) {
			writeByte(std_dc_chrominance_values[n]);
		}

		writeByte(0x11); // HTUACinfo
		for (var o = 0; o < 16; o++) {
			writeByte(std_ac_chrominance_nrcodes[o + 1]);
		}
		for (var p = 0; p <= 161; p++) {
			writeByte(std_ac_chrominance_values[p]);
		}
	}

	function writeSOS() {
		writeWord(0xFFDA); // marker
		writeWord(12); // length
		writeByte(3); // nrofcomponents
		writeByte(1); // IdY
		writeByte(0); // HTY
		writeByte(2); // IdU
		writeByte(0x11); // HTU
		writeByte(3); // IdV
		writeByte(0x11); // HTV
		writeByte(0); // Ss
		writeByte(0x3f); // Se
		writeByte(0); // Bf
	}

	function processDU(CDU, fdtbl, DC, HTDC, HTAC) {
		var EOB = HTAC[0x00];
		var M16zeroes = HTAC[0xF0];
		var pos;
		var I16 = 16;
		var I63 = 63;
		var I64 = 64;
		var DU_DCT = fDCTQuant(CDU, fdtbl);
		//ZigZag reorder
		for (var j = 0; j < I64; ++j) {
			DU[ZigZag[j]] = DU_DCT[j];
		}
		var Diff = DU[0] - DC;DC = DU[0];
		//Encode DC
		if (Diff == 0) {
			writeBits(HTDC[0]); // Diff might be 0
		} else {
			pos = 32767 + Diff;
			writeBits(HTDC[category[pos]]);
			writeBits(bitcode[pos]);
		}
		//Encode ACs
		var end0pos = 63; // was const... which is crazy
		for (; end0pos > 0 && DU[end0pos] == 0; end0pos--) {}
		//end0pos = first element in reverse order !=0
		if (end0pos == 0) {
			writeBits(EOB);
			return DC;
		}
		var i = 1;
		var lng;
		while (i <= end0pos) {
			var startpos = i;
			for (; DU[i] == 0 && i <= end0pos; ++i) {}
			var nrzeroes = i - startpos;
			if (nrzeroes >= I16) {
				lng = nrzeroes >> 4;
				for (var nrmarker = 1; nrmarker <= lng; ++nrmarker) {
					writeBits(M16zeroes);
				}nrzeroes = nrzeroes & 0xF;
			}
			pos = 32767 + DU[i];
			writeBits(HTAC[(nrzeroes << 4) + category[pos]]);
			writeBits(bitcode[pos]);
			i++;
		}
		if (end0pos != I63) {
			writeBits(EOB);
		}
		return DC;
	}

	function initCharLookupTable() {
		var sfcc = String.fromCharCode;
		for (var i = 0; i < 256; i++) {
			///// ACHTUNG // 255
			clt[i] = sfcc(i);
		}
	}

	this.encode = function (image, quality) // image data object
	{
		var time_start = new Date().getTime();

		if (quality) setQuality(quality);

		// Initialize bit writer
		byteout = new Array();
		bytenew = 0;
		bytepos = 7;

		// Add JPEG headers
		writeWord(0xFFD8); // SOI
		writeAPP0();
		writeDQT();
		writeSOF0(image.width, image.height);
		writeDHT();
		writeSOS();

		// Encode 8x8 macroblocks
		var DCY = 0;
		var DCU = 0;
		var DCV = 0;

		bytenew = 0;
		bytepos = 7;

		this.encode.displayName = "_encode_";

		var imageData = image.data;
		var width = image.width;
		var height = image.height;

		var quadWidth = width * 4;
		var x,
		    y = 0;
		var r, g, b;
		var start, p, col, row, pos;
		while (y < height) {
			x = 0;
			while (x < quadWidth) {
				start = quadWidth * y + x;
				p = start;
				col = -1;
				row = 0;

				for (pos = 0; pos < 64; pos++) {
					row = pos >> 3; // /8
					col = (pos & 7) * 4; // %8
					p = start + row * quadWidth + col;

					if (y + row >= height) {
						// padding bottom
						p -= quadWidth * (y + 1 + row - height);
					}

					if (x + col >= quadWidth) {
						// padding right	
						p -= x + col - quadWidth + 4;
					}

					r = imageData[p++];
					g = imageData[p++];
					b = imageData[p++];

					/* // calculate YUV values dynamically
     YDU[pos]=((( 0.29900)*r+( 0.58700)*g+( 0.11400)*b))-128; //-0x80
     UDU[pos]=(((-0.16874)*r+(-0.33126)*g+( 0.50000)*b));
     VDU[pos]=((( 0.50000)*r+(-0.41869)*g+(-0.08131)*b));
     */

					// use lookup table (slightly faster)
					YDU[pos] = (RGB_YUV_TABLE[r] + RGB_YUV_TABLE[g + 256 >> 0] + RGB_YUV_TABLE[b + 512 >> 0] >> 16) - 128;
					UDU[pos] = (RGB_YUV_TABLE[r + 768 >> 0] + RGB_YUV_TABLE[g + 1024 >> 0] + RGB_YUV_TABLE[b + 1280 >> 0] >> 16) - 128;
					VDU[pos] = (RGB_YUV_TABLE[r + 1280 >> 0] + RGB_YUV_TABLE[g + 1536 >> 0] + RGB_YUV_TABLE[b + 1792 >> 0] >> 16) - 128;
				}

				DCY = processDU(YDU, fdtbl_Y, DCY, YDC_HT, YAC_HT);
				DCU = processDU(UDU, fdtbl_UV, DCU, UVDC_HT, UVAC_HT);
				DCV = processDU(VDU, fdtbl_UV, DCV, UVDC_HT, UVAC_HT);
				x += 32;
			}
			y += 8;
		}

		////////////////////////////////////////////////////////////////

		// Do the bit alignment of the EOI marker
		if (bytepos >= 0) {
			var fillbits = [];
			fillbits[1] = bytepos + 1;
			fillbits[0] = (1 << bytepos + 1) - 1;
			writeBits(fillbits);
		}

		writeWord(0xFFD9); //EOI

		//return new Uint8Array(byteout);
		return new Buffer(byteout);

		var jpegDataUri = 'data:image/jpeg;base64,' + btoa(byteout.join(''));

		byteout = [];

		// benchmarking
		var duration = new Date().getTime() - time_start;
		//console.log('Encoding time: '+ duration + 'ms');
		//

		return jpegDataUri;
	};

	function setQuality(quality) {
		if (quality <= 0) {
			quality = 1;
		}
		if (quality > 100) {
			quality = 100;
		}

		if (currentQuality == quality) return; // don't recalc if unchanged

		var sf = 0;
		if (quality < 50) {
			sf = Math.floor(5000 / quality);
		} else {
			sf = Math.floor(200 - quality * 2);
		}

		initQuantTables(sf);
		currentQuality = quality;
		//console.log('Quality set to: '+quality +'%');
	}

	function init() {
		var time_start = new Date().getTime();
		if (!quality) quality = 50;
		// Create tables
		initCharLookupTable();
		initHuffmanTbl();
		initCategoryNumber();
		initRGBYUVTable();

		setQuality(quality);
		var duration = new Date().getTime() - time_start;
		//console.log('Initialization '+ duration + 'ms');
	}

	init();
}
var encoder = encode;

function encode(imgData, qu) {
	if (typeof qu === 'undefined') qu = 50;
	var encoder = new JPEGEncoder(qu);
	var data = encoder.encode(imgData, qu);
	return {
		data: data,
		width: imgData.width,
		height: imgData.height
	};
}

/* -*- tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- /
/* vim: set shiftwidth=2 tabstop=2 autoindent cindent expandtab: */
/*
   Copyright 2011 notmasteryet

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/

// - The JPEG specification can be found in the ITU CCITT Recommendation T.81
//   (www.w3.org/Graphics/JPEG/itu-t81.pdf)
// - The JFIF specification can be found in the JPEG File Interchange Format
//   (www.w3.org/Graphics/JPEG/jfif3.pdf)
// - The Adobe Application-Specific JPEG markers in the Supporting the DCT Filters
//   in PostScript Level 2, Technical Note #5116
//   (partners.adobe.com/public/developer/en/ps/sdk/5116.DCT_Filter.pdf)

var JpegImage = function jpegImage() {
  "use strict";

  var dctZigZag = new Int32Array([0, 1, 8, 16, 9, 2, 3, 10, 17, 24, 32, 25, 18, 11, 4, 5, 12, 19, 26, 33, 40, 48, 41, 34, 27, 20, 13, 6, 7, 14, 21, 28, 35, 42, 49, 56, 57, 50, 43, 36, 29, 22, 15, 23, 30, 37, 44, 51, 58, 59, 52, 45, 38, 31, 39, 46, 53, 60, 61, 54, 47, 55, 62, 63]);

  var dctCos1 = 4017; // cos(pi/16)
  var dctSin1 = 799; // sin(pi/16)
  var dctCos3 = 3406; // cos(3*pi/16)
  var dctSin3 = 2276; // sin(3*pi/16)
  var dctCos6 = 1567; // cos(6*pi/16)
  var dctSin6 = 3784; // sin(6*pi/16)
  var dctSqrt2 = 5793; // sqrt(2)
  var dctSqrt1d2 = 2896; // sqrt(2) / 2

  function constructor() {}

  function buildHuffmanTable(codeLengths, values) {
    var k = 0,
        code = [],
        i,
        j,
        length = 16;
    while (length > 0 && !codeLengths[length - 1]) {
      length--;
    }code.push({ children: [], index: 0 });
    var p = code[0],
        q;
    for (i = 0; i < length; i++) {
      for (j = 0; j < codeLengths[i]; j++) {
        p = code.pop();
        p.children[p.index] = values[k];
        while (p.index > 0) {
          p = code.pop();
        }
        p.index++;
        code.push(p);
        while (code.length <= i) {
          code.push(q = { children: [], index: 0 });
          p.children[p.index] = q.children;
          p = q;
        }
        k++;
      }
      if (i + 1 < length) {
        // p here points to last code
        code.push(q = { children: [], index: 0 });
        p.children[p.index] = q.children;
        p = q;
      }
    }
    return code[0].children;
  }

  function decodeScan(data, offset, frame, components, resetInterval, spectralStart, spectralEnd, successivePrev, successive) {
    var mcusPerLine = frame.mcusPerLine;
    var progressive = frame.progressive;
    var startOffset = offset,
        bitsData = 0,
        bitsCount = 0;
    function readBit() {
      if (bitsCount > 0) {
        bitsCount--;
        return bitsData >> bitsCount & 1;
      }
      bitsData = data[offset++];
      if (bitsData == 0xFF) {
        var nextByte = data[offset++];
        if (nextByte) {
          throw new Error("unexpected marker: " + (bitsData << 8 | nextByte).toString(16));
        }
        // unstuff 0
      }
      bitsCount = 7;
      return bitsData >>> 7;
    }
    function decodeHuffman(tree) {
      var node = tree,
          bit;
      while ((bit = readBit()) !== null) {
        node = node[bit];
        if (typeof node === 'number') return node;
        if ((typeof node === "undefined" ? "undefined" : _typeof(node)) !== 'object') throw new Error("invalid huffman sequence");
      }
      return null;
    }
    function receive(length) {
      var n = 0;
      while (length > 0) {
        var bit = readBit();
        if (bit === null) return;
        n = n << 1 | bit;
        length--;
      }
      return n;
    }
    function receiveAndExtend(length) {
      var n = receive(length);
      if (n >= 1 << length - 1) return n;
      return n + (-1 << length) + 1;
    }
    function decodeBaseline(component, zz) {
      var t = decodeHuffman(component.huffmanTableDC);
      var diff = t === 0 ? 0 : receiveAndExtend(t);
      zz[0] = component.pred += diff;
      var k = 1;
      while (k < 64) {
        var rs = decodeHuffman(component.huffmanTableAC);
        var s = rs & 15,
            r = rs >> 4;
        if (s === 0) {
          if (r < 15) break;
          k += 16;
          continue;
        }
        k += r;
        var z = dctZigZag[k];
        zz[z] = receiveAndExtend(s);
        k++;
      }
    }
    function decodeDCFirst(component, zz) {
      var t = decodeHuffman(component.huffmanTableDC);
      var diff = t === 0 ? 0 : receiveAndExtend(t) << successive;
      zz[0] = component.pred += diff;
    }
    function decodeDCSuccessive(component, zz) {
      zz[0] |= readBit() << successive;
    }
    var eobrun = 0;
    function decodeACFirst(component, zz) {
      if (eobrun > 0) {
        eobrun--;
        return;
      }
      var k = spectralStart,
          e = spectralEnd;
      while (k <= e) {
        var rs = decodeHuffman(component.huffmanTableAC);
        var s = rs & 15,
            r = rs >> 4;
        if (s === 0) {
          if (r < 15) {
            eobrun = receive(r) + (1 << r) - 1;
            break;
          }
          k += 16;
          continue;
        }
        k += r;
        var z = dctZigZag[k];
        zz[z] = receiveAndExtend(s) * (1 << successive);
        k++;
      }
    }
    var successiveACState = 0,
        successiveACNextValue;
    function decodeACSuccessive(component, zz) {
      var k = spectralStart,
          e = spectralEnd,
          r = 0;
      while (k <= e) {
        var z = dctZigZag[k];
        var direction = zz[z] < 0 ? -1 : 1;
        switch (successiveACState) {
          case 0:
            // initial state
            var rs = decodeHuffman(component.huffmanTableAC);
            var s = rs & 15,
                r = rs >> 4;
            if (s === 0) {
              if (r < 15) {
                eobrun = receive(r) + (1 << r);
                successiveACState = 4;
              } else {
                r = 16;
                successiveACState = 1;
              }
            } else {
              if (s !== 1) throw new Error("invalid ACn encoding");
              successiveACNextValue = receiveAndExtend(s);
              successiveACState = r ? 2 : 3;
            }
            continue;
          case 1: // skipping r zero items
          case 2:
            if (zz[z]) zz[z] += (readBit() << successive) * direction;else {
              r--;
              if (r === 0) successiveACState = successiveACState == 2 ? 3 : 0;
            }
            break;
          case 3:
            // set value for a zero item
            if (zz[z]) zz[z] += (readBit() << successive) * direction;else {
              zz[z] = successiveACNextValue << successive;
              successiveACState = 0;
            }
            break;
          case 4:
            // eob
            if (zz[z]) zz[z] += (readBit() << successive) * direction;
            break;
        }
        k++;
      }
      if (successiveACState === 4) {
        eobrun--;
        if (eobrun === 0) successiveACState = 0;
      }
    }
    function decodeMcu(component, decode, mcu, row, col) {
      var mcuRow = mcu / mcusPerLine | 0;
      var mcuCol = mcu % mcusPerLine;
      var blockRow = mcuRow * component.v + row;
      var blockCol = mcuCol * component.h + col;
      decode(component, component.blocks[blockRow][blockCol]);
    }
    function decodeBlock(component, decode, mcu) {
      var blockRow = mcu / component.blocksPerLine | 0;
      var blockCol = mcu % component.blocksPerLine;
      decode(component, component.blocks[blockRow][blockCol]);
    }

    var componentsLength = components.length;
    var component, i, j, k, n;
    var decodeFn;
    if (progressive) {
      if (spectralStart === 0) decodeFn = successivePrev === 0 ? decodeDCFirst : decodeDCSuccessive;else decodeFn = successivePrev === 0 ? decodeACFirst : decodeACSuccessive;
    } else {
      decodeFn = decodeBaseline;
    }

    var mcu = 0,
        marker;
    var mcuExpected;
    if (componentsLength == 1) {
      mcuExpected = components[0].blocksPerLine * components[0].blocksPerColumn;
    } else {
      mcuExpected = mcusPerLine * frame.mcusPerColumn;
    }
    if (!resetInterval) resetInterval = mcuExpected;

    var h, v;
    while (mcu < mcuExpected) {
      // reset interval stuff
      for (i = 0; i < componentsLength; i++) {
        components[i].pred = 0;
      }eobrun = 0;

      if (componentsLength == 1) {
        component = components[0];
        for (n = 0; n < resetInterval; n++) {
          decodeBlock(component, decodeFn, mcu);
          mcu++;
        }
      } else {
        for (n = 0; n < resetInterval; n++) {
          for (i = 0; i < componentsLength; i++) {
            component = components[i];
            h = component.h;
            v = component.v;
            for (j = 0; j < v; j++) {
              for (k = 0; k < h; k++) {
                decodeMcu(component, decodeFn, mcu, j, k);
              }
            }
          }
          mcu++;

          // If we've reached our expected MCU's, stop decoding
          if (mcu === mcuExpected) break;
        }
      }

      // find marker
      bitsCount = 0;
      marker = data[offset] << 8 | data[offset + 1];
      if (marker < 0xFF00) {
        throw new Error("marker was not found");
      }

      if (marker >= 0xFFD0 && marker <= 0xFFD7) {
        // RSTx
        offset += 2;
      } else break;
    }

    return offset - startOffset;
  }

  function buildComponentData(frame, component) {
    var lines = [];
    var blocksPerLine = component.blocksPerLine;
    var blocksPerColumn = component.blocksPerColumn;
    var samplesPerLine = blocksPerLine << 3;
    var R = new Int32Array(64),
        r = new Uint8Array(64);

    // A port of poppler's IDCT method which in turn is taken from:
    //   Christoph Loeffler, Adriaan Ligtenberg, George S. Moschytz,
    //   "Practical Fast 1-D DCT Algorithms with 11 Multiplications",
    //   IEEE Intl. Conf. on Acoustics, Speech & Signal Processing, 1989,
    //   988-991.
    function quantizeAndInverse(zz, dataOut, dataIn) {
      var qt = component.quantizationTable;
      var v0, v1, v2, v3, v4, v5, v6, v7, t;
      var p = dataIn;
      var i;

      // dequant
      for (i = 0; i < 64; i++) {
        p[i] = zz[i] * qt[i];
      } // inverse DCT on rows
      for (i = 0; i < 8; ++i) {
        var row = 8 * i;

        // check for all-zero AC coefficients
        if (p[1 + row] == 0 && p[2 + row] == 0 && p[3 + row] == 0 && p[4 + row] == 0 && p[5 + row] == 0 && p[6 + row] == 0 && p[7 + row] == 0) {
          t = dctSqrt2 * p[0 + row] + 512 >> 10;
          p[0 + row] = t;
          p[1 + row] = t;
          p[2 + row] = t;
          p[3 + row] = t;
          p[4 + row] = t;
          p[5 + row] = t;
          p[6 + row] = t;
          p[7 + row] = t;
          continue;
        }

        // stage 4
        v0 = dctSqrt2 * p[0 + row] + 128 >> 8;
        v1 = dctSqrt2 * p[4 + row] + 128 >> 8;
        v2 = p[2 + row];
        v3 = p[6 + row];
        v4 = dctSqrt1d2 * (p[1 + row] - p[7 + row]) + 128 >> 8;
        v7 = dctSqrt1d2 * (p[1 + row] + p[7 + row]) + 128 >> 8;
        v5 = p[3 + row] << 4;
        v6 = p[5 + row] << 4;

        // stage 3
        t = v0 - v1 + 1 >> 1;
        v0 = v0 + v1 + 1 >> 1;
        v1 = t;
        t = v2 * dctSin6 + v3 * dctCos6 + 128 >> 8;
        v2 = v2 * dctCos6 - v3 * dctSin6 + 128 >> 8;
        v3 = t;
        t = v4 - v6 + 1 >> 1;
        v4 = v4 + v6 + 1 >> 1;
        v6 = t;
        t = v7 + v5 + 1 >> 1;
        v5 = v7 - v5 + 1 >> 1;
        v7 = t;

        // stage 2
        t = v0 - v3 + 1 >> 1;
        v0 = v0 + v3 + 1 >> 1;
        v3 = t;
        t = v1 - v2 + 1 >> 1;
        v1 = v1 + v2 + 1 >> 1;
        v2 = t;
        t = v4 * dctSin3 + v7 * dctCos3 + 2048 >> 12;
        v4 = v4 * dctCos3 - v7 * dctSin3 + 2048 >> 12;
        v7 = t;
        t = v5 * dctSin1 + v6 * dctCos1 + 2048 >> 12;
        v5 = v5 * dctCos1 - v6 * dctSin1 + 2048 >> 12;
        v6 = t;

        // stage 1
        p[0 + row] = v0 + v7;
        p[7 + row] = v0 - v7;
        p[1 + row] = v1 + v6;
        p[6 + row] = v1 - v6;
        p[2 + row] = v2 + v5;
        p[5 + row] = v2 - v5;
        p[3 + row] = v3 + v4;
        p[4 + row] = v3 - v4;
      }

      // inverse DCT on columns
      for (i = 0; i < 8; ++i) {
        var col = i;

        // check for all-zero AC coefficients
        if (p[1 * 8 + col] == 0 && p[2 * 8 + col] == 0 && p[3 * 8 + col] == 0 && p[4 * 8 + col] == 0 && p[5 * 8 + col] == 0 && p[6 * 8 + col] == 0 && p[7 * 8 + col] == 0) {
          t = dctSqrt2 * dataIn[i + 0] + 8192 >> 14;
          p[0 * 8 + col] = t;
          p[1 * 8 + col] = t;
          p[2 * 8 + col] = t;
          p[3 * 8 + col] = t;
          p[4 * 8 + col] = t;
          p[5 * 8 + col] = t;
          p[6 * 8 + col] = t;
          p[7 * 8 + col] = t;
          continue;
        }

        // stage 4
        v0 = dctSqrt2 * p[0 * 8 + col] + 2048 >> 12;
        v1 = dctSqrt2 * p[4 * 8 + col] + 2048 >> 12;
        v2 = p[2 * 8 + col];
        v3 = p[6 * 8 + col];
        v4 = dctSqrt1d2 * (p[1 * 8 + col] - p[7 * 8 + col]) + 2048 >> 12;
        v7 = dctSqrt1d2 * (p[1 * 8 + col] + p[7 * 8 + col]) + 2048 >> 12;
        v5 = p[3 * 8 + col];
        v6 = p[5 * 8 + col];

        // stage 3
        t = v0 - v1 + 1 >> 1;
        v0 = v0 + v1 + 1 >> 1;
        v1 = t;
        t = v2 * dctSin6 + v3 * dctCos6 + 2048 >> 12;
        v2 = v2 * dctCos6 - v3 * dctSin6 + 2048 >> 12;
        v3 = t;
        t = v4 - v6 + 1 >> 1;
        v4 = v4 + v6 + 1 >> 1;
        v6 = t;
        t = v7 + v5 + 1 >> 1;
        v5 = v7 - v5 + 1 >> 1;
        v7 = t;

        // stage 2
        t = v0 - v3 + 1 >> 1;
        v0 = v0 + v3 + 1 >> 1;
        v3 = t;
        t = v1 - v2 + 1 >> 1;
        v1 = v1 + v2 + 1 >> 1;
        v2 = t;
        t = v4 * dctSin3 + v7 * dctCos3 + 2048 >> 12;
        v4 = v4 * dctCos3 - v7 * dctSin3 + 2048 >> 12;
        v7 = t;
        t = v5 * dctSin1 + v6 * dctCos1 + 2048 >> 12;
        v5 = v5 * dctCos1 - v6 * dctSin1 + 2048 >> 12;
        v6 = t;

        // stage 1
        p[0 * 8 + col] = v0 + v7;
        p[7 * 8 + col] = v0 - v7;
        p[1 * 8 + col] = v1 + v6;
        p[6 * 8 + col] = v1 - v6;
        p[2 * 8 + col] = v2 + v5;
        p[5 * 8 + col] = v2 - v5;
        p[3 * 8 + col] = v3 + v4;
        p[4 * 8 + col] = v3 - v4;
      }

      // convert to 8-bit integers
      for (i = 0; i < 64; ++i) {
        var sample = 128 + (p[i] + 8 >> 4);
        dataOut[i] = sample < 0 ? 0 : sample > 0xFF ? 0xFF : sample;
      }
    }

    var i, j;
    for (var blockRow = 0; blockRow < blocksPerColumn; blockRow++) {
      var scanLine = blockRow << 3;
      for (i = 0; i < 8; i++) {
        lines.push(new Uint8Array(samplesPerLine));
      }for (var blockCol = 0; blockCol < blocksPerLine; blockCol++) {
        quantizeAndInverse(component.blocks[blockRow][blockCol], r, R);

        var offset = 0,
            sample = blockCol << 3;
        for (j = 0; j < 8; j++) {
          var line = lines[scanLine + j];
          for (i = 0; i < 8; i++) {
            line[sample + i] = r[offset++];
          }
        }
      }
    }
    return lines;
  }

  function clampTo8bit(a) {
    return a < 0 ? 0 : a > 255 ? 255 : a;
  }

  constructor.prototype = {
    load: function load(path) {
      var xhr = new XMLHttpRequest();
      xhr.open("GET", path, true);
      xhr.responseType = "arraybuffer";
      xhr.onload = function () {
        // TODO catch parse error
        var data = new Uint8Array(xhr.response || xhr.mozResponseArrayBuffer);
        this.parse(data);
        if (this.onload) this.onload();
      }.bind(this);
      xhr.send(null);
    },
    parse: function parse(data) {
      var offset = 0;
      function readUint16() {
        var value = data[offset] << 8 | data[offset + 1];
        offset += 2;
        return value;
      }
      function readDataBlock() {
        var length = readUint16();
        var array = data.subarray(offset, offset + length - 2);
        offset += array.length;
        return array;
      }
      function prepareComponents(frame) {
        var maxH = 0,
            maxV = 0;
        var component, componentId;
        for (componentId in frame.components) {
          if (frame.components.hasOwnProperty(componentId)) {
            component = frame.components[componentId];
            if (maxH < component.h) maxH = component.h;
            if (maxV < component.v) maxV = component.v;
          }
        }
        var mcusPerLine = Math.ceil(frame.samplesPerLine / 8 / maxH);
        var mcusPerColumn = Math.ceil(frame.scanLines / 8 / maxV);
        for (componentId in frame.components) {
          if (frame.components.hasOwnProperty(componentId)) {
            component = frame.components[componentId];
            var blocksPerLine = Math.ceil(Math.ceil(frame.samplesPerLine / 8) * component.h / maxH);
            var blocksPerColumn = Math.ceil(Math.ceil(frame.scanLines / 8) * component.v / maxV);
            var blocksPerLineForMcu = mcusPerLine * component.h;
            var blocksPerColumnForMcu = mcusPerColumn * component.v;
            var blocks = [];
            for (var i = 0; i < blocksPerColumnForMcu; i++) {
              var row = [];
              for (var j = 0; j < blocksPerLineForMcu; j++) {
                row.push(new Int32Array(64));
              }blocks.push(row);
            }
            component.blocksPerLine = blocksPerLine;
            component.blocksPerColumn = blocksPerColumn;
            component.blocks = blocks;
          }
        }
        frame.maxH = maxH;
        frame.maxV = maxV;
        frame.mcusPerLine = mcusPerLine;
        frame.mcusPerColumn = mcusPerColumn;
      }
      var jfif = null;
      var adobe = null;
      var frame, resetInterval;
      var quantizationTables = [],
          frames = [];
      var huffmanTablesAC = [],
          huffmanTablesDC = [];
      var fileMarker = readUint16();
      if (fileMarker != 0xFFD8) {
        // SOI (Start of Image)
        throw new Error("SOI not found");
      }

      fileMarker = readUint16();
      while (fileMarker != 0xFFD9) {
        // EOI (End of image)
        var i, j;
        switch (fileMarker) {
          case 0xFF00:
            break;
          case 0xFFE0: // APP0 (Application Specific)
          case 0xFFE1: // APP1
          case 0xFFE2: // APP2
          case 0xFFE3: // APP3
          case 0xFFE4: // APP4
          case 0xFFE5: // APP5
          case 0xFFE6: // APP6
          case 0xFFE7: // APP7
          case 0xFFE8: // APP8
          case 0xFFE9: // APP9
          case 0xFFEA: // APP10
          case 0xFFEB: // APP11
          case 0xFFEC: // APP12
          case 0xFFED: // APP13
          case 0xFFEE: // APP14
          case 0xFFEF: // APP15
          case 0xFFFE:
            // COM (Comment)
            var appData = readDataBlock();

            if (fileMarker === 0xFFE0) {
              if (appData[0] === 0x4A && appData[1] === 0x46 && appData[2] === 0x49 && appData[3] === 0x46 && appData[4] === 0) {
                // 'JFIF\x00'
                jfif = {
                  version: { major: appData[5], minor: appData[6] },
                  densityUnits: appData[7],
                  xDensity: appData[8] << 8 | appData[9],
                  yDensity: appData[10] << 8 | appData[11],
                  thumbWidth: appData[12],
                  thumbHeight: appData[13],
                  thumbData: appData.subarray(14, 14 + 3 * appData[12] * appData[13])
                };
              }
            }
            // TODO APP1 - Exif
            if (fileMarker === 0xFFEE) {
              if (appData[0] === 0x41 && appData[1] === 0x64 && appData[2] === 0x6F && appData[3] === 0x62 && appData[4] === 0x65 && appData[5] === 0) {
                // 'Adobe\x00'
                adobe = {
                  version: appData[6],
                  flags0: appData[7] << 8 | appData[8],
                  flags1: appData[9] << 8 | appData[10],
                  transformCode: appData[11]
                };
              }
            }
            break;

          case 0xFFDB:
            // DQT (Define Quantization Tables)
            var quantizationTablesLength = readUint16();
            var quantizationTablesEnd = quantizationTablesLength + offset - 2;
            while (offset < quantizationTablesEnd) {
              var quantizationTableSpec = data[offset++];
              var tableData = new Int32Array(64);
              if (quantizationTableSpec >> 4 === 0) {
                // 8 bit values
                for (j = 0; j < 64; j++) {
                  var z = dctZigZag[j];
                  tableData[z] = data[offset++];
                }
              } else if (quantizationTableSpec >> 4 === 1) {
                //16 bit
                for (j = 0; j < 64; j++) {
                  var z = dctZigZag[j];
                  tableData[z] = readUint16();
                }
              } else throw new Error("DQT: invalid table spec");
              quantizationTables[quantizationTableSpec & 15] = tableData;
            }
            break;

          case 0xFFC0: // SOF0 (Start of Frame, Baseline DCT)
          case 0xFFC1: // SOF1 (Start of Frame, Extended DCT)
          case 0xFFC2:
            // SOF2 (Start of Frame, Progressive DCT)
            readUint16(); // skip data length
            frame = {};
            frame.extended = fileMarker === 0xFFC1;
            frame.progressive = fileMarker === 0xFFC2;
            frame.precision = data[offset++];
            frame.scanLines = readUint16();
            frame.samplesPerLine = readUint16();
            frame.components = {};
            frame.componentsOrder = [];
            var componentsCount = data[offset++],
                componentId;
            
            for (i = 0; i < componentsCount; i++) {
              componentId = data[offset];
              var h = data[offset + 1] >> 4;
              var v = data[offset + 1] & 15;
              var qId = data[offset + 2];
              frame.componentsOrder.push(componentId);
              frame.components[componentId] = {
                h: h,
                v: v,
                quantizationIdx: qId
              };
              offset += 3;
            }
            prepareComponents(frame);
            frames.push(frame);
            break;

          case 0xFFC4:
            // DHT (Define Huffman Tables)
            var huffmanLength = readUint16();
            for (i = 2; i < huffmanLength;) {
              var huffmanTableSpec = data[offset++];
              var codeLengths = new Uint8Array(16);
              var codeLengthSum = 0;
              for (j = 0; j < 16; j++, offset++) {
                codeLengthSum += codeLengths[j] = data[offset];
              }var huffmanValues = new Uint8Array(codeLengthSum);
              for (j = 0; j < codeLengthSum; j++, offset++) {
                huffmanValues[j] = data[offset];
              }i += 17 + codeLengthSum;

              (huffmanTableSpec >> 4 === 0 ? huffmanTablesDC : huffmanTablesAC)[huffmanTableSpec & 15] = buildHuffmanTable(codeLengths, huffmanValues);
            }
            break;

          case 0xFFDD:
            // DRI (Define Restart Interval)
            readUint16(); // skip data length
            resetInterval = readUint16();
            break;

          case 0xFFDA:
            // SOS (Start of Scan)
            var scanLength = readUint16();
            var selectorsCount = data[offset++];
            var components = [],
                component;
            for (i = 0; i < selectorsCount; i++) {
              component = frame.components[data[offset++]];
              var tableSpec = data[offset++];
              component.huffmanTableDC = huffmanTablesDC[tableSpec >> 4];
              component.huffmanTableAC = huffmanTablesAC[tableSpec & 15];
              components.push(component);
            }
            var spectralStart = data[offset++];
            var spectralEnd = data[offset++];
            var successiveApproximation = data[offset++];
            var processed = decodeScan(data, offset, frame, components, resetInterval, spectralStart, spectralEnd, successiveApproximation >> 4, successiveApproximation & 15);
            offset += processed;
            break;
          default:
            if (data[offset - 3] == 0xFF && data[offset - 2] >= 0xC0 && data[offset - 2] <= 0xFE) {
              // could be incorrect encoding -- last 0xFF byte of the previous
              // block was eaten by the encoder
              offset -= 3;
              break;
            }
            throw new Error("unknown JPEG marker " + fileMarker.toString(16));
        }
        fileMarker = readUint16();
      }
      if (frames.length != 1) throw new Error("only single frame JPEGs supported");

      // set each frame's components quantization table
      for (var i = 0; i < frames.length; i++) {
        var cp = frames[i].components;
        for (var j in cp) {
          cp[j].quantizationTable = quantizationTables[cp[j].quantizationIdx];
          delete cp[j].quantizationIdx;
        }
      }

      this.width = frame.samplesPerLine;
      this.height = frame.scanLines;
      this.jfif = jfif;
      this.adobe = adobe;
      this.components = [];
      for (var i = 0; i < frame.componentsOrder.length; i++) {
        var component = frame.components[frame.componentsOrder[i]];
        this.components.push({
          lines: buildComponentData(frame, component),
          scaleX: component.h / frame.maxH,
          scaleY: component.v / frame.maxV
        });
      }
    },
    getData: function getData(width, height) {
      var scaleX = this.width / width,
          scaleY = this.height / height;

      var component1, component2, component3, component4;
      var component1Line, component2Line, component3Line, component4Line;
      var x, y;
      var offset = 0;
      var Y, Cb, Cr, K, C, M, Ye, R, G, B;
      var colorTransform;
      var dataLength = width * height * this.components.length;
      var data = new Uint8Array(dataLength);
      switch (this.components.length) {
        case 1:
          component1 = this.components[0];
          for (y = 0; y < height; y++) {
            component1Line = component1.lines[0 | y * component1.scaleY * scaleY];
            for (x = 0; x < width; x++) {
              Y = component1Line[0 | x * component1.scaleX * scaleX];

              data[offset++] = Y;
            }
          }
          break;
        case 2:
          // PDF might compress two component data in custom colorspace
          component1 = this.components[0];
          component2 = this.components[1];
          for (y = 0; y < height; y++) {
            component1Line = component1.lines[0 | y * component1.scaleY * scaleY];
            component2Line = component2.lines[0 | y * component2.scaleY * scaleY];
            for (x = 0; x < width; x++) {
              Y = component1Line[0 | x * component1.scaleX * scaleX];
              data[offset++] = Y;
              Y = component2Line[0 | x * component2.scaleX * scaleX];
              data[offset++] = Y;
            }
          }
          break;
        case 3:
          // The default transform for three components is true
          colorTransform = true;
          // The adobe transform marker overrides any previous setting
          if (this.adobe && this.adobe.transformCode) colorTransform = true;else if (typeof this.colorTransform !== 'undefined') colorTransform = !!this.colorTransform;

          component1 = this.components[0];
          component2 = this.components[1];
          component3 = this.components[2];
          for (y = 0; y < height; y++) {
            component1Line = component1.lines[0 | y * component1.scaleY * scaleY];
            component2Line = component2.lines[0 | y * component2.scaleY * scaleY];
            component3Line = component3.lines[0 | y * component3.scaleY * scaleY];
            for (x = 0; x < width; x++) {
              if (!colorTransform) {
                R = component1Line[0 | x * component1.scaleX * scaleX];
                G = component2Line[0 | x * component2.scaleX * scaleX];
                B = component3Line[0 | x * component3.scaleX * scaleX];
              } else {
                Y = component1Line[0 | x * component1.scaleX * scaleX];
                Cb = component2Line[0 | x * component2.scaleX * scaleX];
                Cr = component3Line[0 | x * component3.scaleX * scaleX];

                R = clampTo8bit(Y + 1.402 * (Cr - 128));
                G = clampTo8bit(Y - 0.3441363 * (Cb - 128) - 0.71413636 * (Cr - 128));
                B = clampTo8bit(Y + 1.772 * (Cb - 128));
              }

              data[offset++] = R;
              data[offset++] = G;
              data[offset++] = B;
            }
          }
          break;
        case 4:
          if (!this.adobe) throw 'Unsupported color mode (4 components)';
          // The default transform for four components is false
          colorTransform = false;
          // The adobe transform marker overrides any previous setting
          if (this.adobe && this.adobe.transformCode) colorTransform = true;else if (typeof this.colorTransform !== 'undefined') colorTransform = !!this.colorTransform;

          component1 = this.components[0];
          component2 = this.components[1];
          component3 = this.components[2];
          component4 = this.components[3];
          for (y = 0; y < height; y++) {
            component1Line = component1.lines[0 | y * component1.scaleY * scaleY];
            component2Line = component2.lines[0 | y * component2.scaleY * scaleY];
            component3Line = component3.lines[0 | y * component3.scaleY * scaleY];
            component4Line = component4.lines[0 | y * component4.scaleY * scaleY];
            for (x = 0; x < width; x++) {
              if (!colorTransform) {
                C = component1Line[0 | x * component1.scaleX * scaleX];
                M = component2Line[0 | x * component2.scaleX * scaleX];
                Ye = component3Line[0 | x * component3.scaleX * scaleX];
                K = component4Line[0 | x * component4.scaleX * scaleX];
              } else {
                Y = component1Line[0 | x * component1.scaleX * scaleX];
                Cb = component2Line[0 | x * component2.scaleX * scaleX];
                Cr = component3Line[0 | x * component3.scaleX * scaleX];
                K = component4Line[0 | x * component4.scaleX * scaleX];

                C = 255 - clampTo8bit(Y + 1.402 * (Cr - 128));
                M = 255 - clampTo8bit(Y - 0.3441363 * (Cb - 128) - 0.71413636 * (Cr - 128));
                Ye = 255 - clampTo8bit(Y + 1.772 * (Cb - 128));
              }
              data[offset++] = 255 - C;
              data[offset++] = 255 - M;
              data[offset++] = 255 - Ye;
              data[offset++] = 255 - K;
            }
          }
          break;
        default:
          throw 'Unsupported color mode';
      }
      return data;
    },
    copyToImageData: function copyToImageData(imageData) {
      var width = imageData.width,
          height = imageData.height;
      var imageDataArray = imageData.data;
      var data = this.getData(width, height);
      var i = 0,
          j = 0,
          x,
          y;
      var Y, K, C, M, R, G, B;
      switch (this.components.length) {
        case 1:
          for (y = 0; y < height; y++) {
            for (x = 0; x < width; x++) {
              Y = data[i++];

              imageDataArray[j++] = Y;
              imageDataArray[j++] = Y;
              imageDataArray[j++] = Y;
              imageDataArray[j++] = 255;
            }
          }
          break;
        case 3:
          for (y = 0; y < height; y++) {
            for (x = 0; x < width; x++) {
              R = data[i++];
              G = data[i++];
              B = data[i++];

              imageDataArray[j++] = R;
              imageDataArray[j++] = G;
              imageDataArray[j++] = B;
              imageDataArray[j++] = 255;
            }
          }
          break;
        case 4:
          for (y = 0; y < height; y++) {
            for (x = 0; x < width; x++) {
              C = data[i++];
              M = data[i++];
              Y = data[i++];
              K = data[i++];

              R = 255 - clampTo8bit(C * (1 - K / 255) + K);
              G = 255 - clampTo8bit(M * (1 - K / 255) + K);
              B = 255 - clampTo8bit(Y * (1 - K / 255) + K);

              imageDataArray[j++] = R;
              imageDataArray[j++] = G;
              imageDataArray[j++] = B;
              imageDataArray[j++] = 255;
            }
          }
          break;
        default:
          throw 'Unsupported color mode';
      }
    }
  };

  return constructor;
}();
var decoder = decode;

function decode(jpegData, useTArray) {
  var arr = new Uint8Array(jpegData);
  var decoder = new JpegImage();
  decoder.parse(arr);

  var image = {
    width: decoder.width,
    height: decoder.height,
    data: useTArray ? new Uint8Array(decoder.width * decoder.height * 4) : new Buffer(decoder.width * decoder.height * 4)
  };

  decoder.copyToImageData(image);

  return image;
}

var index$2 = {
  encode: encoder,
  decode: decoder
};

/*
* Author   Jonathan Lurie - http://me.jonathanlurie.fr
* License  MIT
* Link     https://github.com/Pixpipe/pixpipejs
* Lab      MCIN - Montreal Neurological Institute
*/

/**
* An instance of JpegDecoder will decode a JPEG image in native Javascript and
* output an Image2D. This is of course slower than using `io/FileImageReader.js`
* but this is compatible with Node and not rely on HTML5 Canvas.
*
* **Usage**
* - [examples/fileToJpeg.html](../examples/fileToJpeg.html)
*/

var JpegDecoder = function (_Filter) {
  inherits(JpegDecoder, _Filter);

  function JpegDecoder() {
    classCallCheck(this, JpegDecoder);

    var _this = possibleConstructorReturn(this, (JpegDecoder.__proto__ || Object.getPrototypeOf(JpegDecoder)).call(this));

    _this.addInputValidator(0, ArrayBuffer);
    return _this;
  }

  createClass(JpegDecoder, [{
    key: '_run',
    value: function _run() {

      var inputBuffer = this._getInput(0);

      if (!inputBuffer) {
        console.warn("JpegDecoder requires an ArrayBuffer as input \"0\". Unable to continue.");
        return;
      }

      try {
        var jpegData = index$2.decode(inputBuffer);
        var ncpp = jpegData.data.length / (jpegData.width * jpegData.height);
        var outputImage = new Image2D();
        var pixelData = new Uint8Array(jpegData.data.buffer);

        outputImage.setData(pixelData, jpegData.width, jpegData.height, ncpp);
        this._output[0] = outputImage;
      } catch (e) {
        //console.warn(e);
        //console.warn("This is not a JPEG file, unable to decode this file.");
      }
    }
  }]);
  return JpegDecoder;
}(Filter); /* JpegDecoder */

var UPNG = createCommonjsModule$$1(function (module) {
	(function () {
		var UPNG = {};

		// Make available for import by `require()`
		{
			module.exports = UPNG;
		}

		var pako;
		if (typeof commonjsRequire$$1 == "function") {
			pako = index$1;
		} else {
			pako = window.pako;
		}

		function log() {
			if (typeof process == "undefined" || process.env.NODE_ENV == "development") console.log.apply(console, arguments);
		}

		(function (UPNG, pako) {

			UPNG.toRGBA8 = function (out) {
				//console.log(out.ctype, out.depth);
				var w = out.width,
				    h = out.height,
				    area = w * h,
				    bpp = UPNG.decode._getBPP(out);
				var bpl = Math.ceil(w * bpp / 8); // bytes per line

				var bf = new Uint8Array(area * 4),
				    bf32 = new Uint32Array(bf.buffer);
				var data = out.data,
				    ctype = out.ctype,
				    depth = out.depth;
				var rs = UPNG._bin.readUshort;

				if (ctype == 6) {
					// RGB + alpha
					var qarea = area << 2;
					if (depth == 8) for (var i = 0; i < qarea; i++) {
						bf[i] = data[i]; /*if((i&3)==3) bf[i]=255;*/
					}
					if (depth == 16) for (var i = 0; i < qarea; i++) {
						bf[i] = data[i << 1];
					}
				} else if (ctype == 2) {
					// RGB
					var ts = out.tabs["tRNS"],
					    tr = -1,
					    tg = -1,
					    tb = -1;
					if (ts) {
						tr = ts[0];tg = ts[1];tb = ts[2];
					}
					if (depth == 8) for (var i = 0; i < area; i++) {
						var qi = i << 2,
						    ti = i * 3;bf[qi] = data[ti];bf[qi + 1] = data[ti + 1];bf[qi + 2] = data[ti + 2];bf[qi + 3] = 255;
						if (tr != -1 && data[ti] == tr && data[ti + 1] == tg && data[ti + 2] == tb) bf[qi + 3] = 0;
					}
					if (depth == 16) for (var i = 0; i < area; i++) {
						var qi = i << 2,
						    ti = i * 6;bf[qi] = data[ti];bf[qi + 1] = data[ti + 2];bf[qi + 2] = data[ti + 4];bf[qi + 3] = 255;
						if (tr != -1 && rs(data, ti) == tr && rs(data, ti + 2) == tg && rs(data, ti + 4) == tb) bf[qi + 3] = 0;
					}
				} else if (ctype == 3) {
					// palette
					var p = out.tabs["PLTE"],
					    ap = out.tabs["tRNS"],
					    tl = ap ? ap.length : 0;
					if (depth == 1) for (var y = 0; y < h; y++) {
						var s0 = y * bpl,
						    t0 = y * w;
						for (var i = 0; i < w; i++) {
							var qi = t0 + i << 2,
							    j = data[s0 + (i >> 3)] >> 7 - ((i & 7) << 0) & 1,
							    cj = 3 * j;bf[qi] = p[cj];bf[qi + 1] = p[cj + 1];bf[qi + 2] = p[cj + 2];bf[qi + 3] = j < tl ? ap[j] : 255;
						}
					}
					if (depth == 2) for (var y = 0; y < h; y++) {
						var s0 = y * bpl,
						    t0 = y * w;
						for (var i = 0; i < w; i++) {
							var qi = t0 + i << 2,
							    j = data[s0 + (i >> 2)] >> 6 - ((i & 3) << 1) & 3,
							    cj = 3 * j;bf[qi] = p[cj];bf[qi + 1] = p[cj + 1];bf[qi + 2] = p[cj + 2];bf[qi + 3] = j < tl ? ap[j] : 255;
						}
					}
					if (depth == 4) for (var y = 0; y < h; y++) {
						var s0 = y * bpl,
						    t0 = y * w;
						for (var i = 0; i < w; i++) {
							var qi = t0 + i << 2,
							    j = data[s0 + (i >> 1)] >> 4 - ((i & 1) << 2) & 15,
							    cj = 3 * j;bf[qi] = p[cj];bf[qi + 1] = p[cj + 1];bf[qi + 2] = p[cj + 2];bf[qi + 3] = j < tl ? ap[j] : 255;
						}
					}
					if (depth == 8) for (var i = 0; i < area; i++) {
						var qi = i << 2,
						    j = data[i],
						    cj = 3 * j;bf[qi] = p[cj];bf[qi + 1] = p[cj + 1];bf[qi + 2] = p[cj + 2];bf[qi + 3] = j < tl ? ap[j] : 255;
					}
				} else if (ctype == 4) {
					// gray + alpha
					if (depth == 8) for (var i = 0; i < area; i++) {
						var qi = i << 2,
						    di = i << 1,
						    gr = data[di];bf[qi] = gr;bf[qi + 1] = gr;bf[qi + 2] = gr;bf[qi + 3] = data[di + 1];
					}
					if (depth == 16) for (var i = 0; i < area; i++) {
						var qi = i << 2,
						    di = i << 2,
						    gr = data[di];bf[qi] = gr;bf[qi + 1] = gr;bf[qi + 2] = gr;bf[qi + 3] = data[di + 2];
					}
				} else if (ctype == 0) {
					// gray
					var tr = out.tabs["tRNS"] ? out.tabs["tRNS"] : -1;
					if (depth == 1) for (var i = 0; i < area; i++) {
						var gr = 255 * (data[i >> 3] >> 7 - (i & 7) & 1),
						    al = gr == tr * 255 ? 0 : 255;bf32[i] = al << 24 | gr << 16 | gr << 8 | gr;
					}
					if (depth == 2) for (var i = 0; i < area; i++) {
						var gr = 85 * (data[i >> 2] >> 6 - ((i & 3) << 1) & 3),
						    al = gr == tr * 85 ? 0 : 255;bf32[i] = al << 24 | gr << 16 | gr << 8 | gr;
					}
					if (depth == 4) for (var i = 0; i < area; i++) {
						var gr = 17 * (data[i >> 1] >> 4 - ((i & 1) << 2) & 15),
						    al = gr == tr * 17 ? 0 : 255;bf32[i] = al << 24 | gr << 16 | gr << 8 | gr;
					}
					if (depth == 8) for (var i = 0; i < area; i++) {
						var gr = data[i],
						    al = gr == tr ? 0 : 255;bf32[i] = al << 24 | gr << 16 | gr << 8 | gr;
					}
					if (depth == 16) for (var i = 0; i < area; i++) {
						var gr = data[i << 1],
						    al = rs(data, i << 1) == tr ? 0 : 255;bf32[i] = al << 24 | gr << 16 | gr << 8 | gr;
					}
				} else log("unsupported color type", ctype);
				return bf;
			};

			UPNG.encode = function (buff, w, h, ps) {
				if (ps == null) ps = 0;
				var img = new Uint8Array(buff);
				var data = new Uint8Array(img.length + 100);
				var wr = [0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a];
				for (var i = 0; i < 8; i++) {
					data[i] = wr[i];
				}var offset = 8,
				    bin = UPNG._bin,
				    crc = UPNG.crc.crc;

				var nimg = UPNG.encode.compress(img, w, h, ps);

				bin.writeUint(data, offset, 13);offset += 4;
				bin.writeASCII(data, offset, "IHDR");offset += 4;
				bin.writeUint(data, offset, w);offset += 4;
				bin.writeUint(data, offset, h);offset += 4;
				data[offset] = nimg.depth;offset++; // depth
				data[offset] = nimg.ctype;offset++; // ctype
				data[offset] = 0;offset++; // compress
				data[offset] = 0;offset++; // filter
				data[offset] = 0;offset++; // interlace
				bin.writeUint(data, offset, crc(data, offset - 17, 17));offset += 4; // crc

				// 9 bytes to say, that it is sRGB
				bin.writeUint(data, offset, 1);offset += 4;
				bin.writeASCII(data, offset, "sRGB");offset += 4;
				data[offset] = 1;offset++;
				bin.writeUint(data, offset, crc(data, offset - 5, 5));offset += 4; // crc


				if (nimg.ctype == 3) {
					var dl = nimg.plte.length;
					bin.writeUint(data, offset, dl * 3);offset += 4;
					bin.writeASCII(data, offset, "PLTE");offset += 4;
					for (var i = 0; i < dl; i++) {
						var ti = i * 3,
						    c = nimg.plte[i],
						    r = c & 255,
						    g = c >> 8 & 255,
						    b = c >> 16 & 255;
						data[offset + ti + 0] = r;data[offset + ti + 1] = g;data[offset + ti + 2] = b;
					}
					offset += dl * 3;
					bin.writeUint(data, offset, crc(data, offset - dl * 3 - 4, dl * 3 + 4));offset += 4; // crc

					if (nimg.gotAlpha) {
						bin.writeUint(data, offset, dl);offset += 4;
						bin.writeASCII(data, offset, "tRNS");offset += 4;
						for (var i = 0; i < dl; i++) {
							data[offset + i] = nimg.plte[i] >> 24 & 255;
						}offset += dl;
						bin.writeUint(data, offset, crc(data, offset - dl - 4, dl + 4));offset += 4; // crc
					}
				}

				var dl = nimg.data.length;
				bin.writeUint(data, offset, dl);offset += 4;
				bin.writeASCII(data, offset, "IDAT");offset += 4;
				for (var i = 0; i < dl; i++) {
					data[offset + i] = nimg.data[i];
				}offset += dl;
				bin.writeUint(data, offset, crc(data, offset - dl - 4, dl + 4));offset += 4; // crc

				bin.writeUint(data, offset, 0);offset += 4;
				bin.writeASCII(data, offset, "IEND");offset += 4;
				bin.writeUint(data, offset, crc(data, offset - 4, 4));offset += 4; // crc

				return data.buffer.slice(0, offset);
			};

			UPNG.encode.compress = function (img, w, h, ps) {
				if (ps != 0) img = UPNG.quantize(img, w, h, ps);

				var ctype = 6,
				    depth = 8,
				    plte = [],
				    bpp = 4,
				    bpl = 4 * w;
				var img32 = new Uint32Array(img.buffer);
				var gotAlpha = false,
				    cmap = [];
				for (var i = 0; i < img.length; i += 4) {
					var c = img32[i >> 2];if (plte.length < 600 && cmap[c] == null) {
						cmap[c] = plte.length;plte.push(c);
					}
					if (img[i + 3] != 255) gotAlpha = true;
				}
				var cc = plte.length;
				if (cc <= 256) {
					if (cc <= 2) depth = 1;else if (cc <= 4) depth = 2;else if (cc <= 16) depth = 4;else depth = 8;
					bpl = Math.ceil(depth * w / 8), nimg = new Uint8Array(bpl * h);
					for (var y = 0; y < h; y++) {
						var i = y * bpl,
						    ii = y * w;
						if (depth == 1) for (var x = 0; x < w; x++) {
							nimg[i + (x >> 3)] |= cmap[img32[ii + x]] << 7 - (x & 7);
						}if (depth == 2) for (var x = 0; x < w; x++) {
							nimg[i + (x >> 2)] |= cmap[img32[ii + x]] << 6 - (x & 3) * 2;
						}if (depth == 4) for (var x = 0; x < w; x++) {
							nimg[i + (x >> 1)] |= cmap[img32[ii + x]] << 4 - (x & 1) * 4;
						}if (depth == 8) for (var x = 0; x < w; x++) {
							nimg[i + x] = cmap[img32[ii + x]];
						}
					}
					img = nimg;ctype = 3;bpp = 1;
				} else if (gotAlpha == false) {
					var nimg = new Uint8Array(w * h * 3),
					    area = w * h;
					for (var i = 0; i < area; i++) {
						var ti = i * 3,
						    qi = i * 4;nimg[ti] = img[qi];nimg[ti + 1] = img[qi + 1];nimg[ti + 2] = img[qi + 2];
					}
					img = nimg;ctype = 2;bpp = 3;bpl = 3 * w;
				}

				var data = new Uint8Array(w * h * bpp + h);
				return { ctype: ctype, depth: depth, plte: plte, gotAlpha: gotAlpha, data: UPNG.encode._filterZero(img, h, bpp, bpl, data) };
			};

			UPNG.encode._filterZero = function (img, h, bpp, bpl, data) {
				var fls = [];
				for (var t = 0; t < 5; t++) {
					if (h * bpl > 500000 && (t == 2 || t == 3 || t == 4)) continue;
					for (var y = 0; y < h; y++) {
						UPNG.encode._filterLine(data, img, y, bpl, bpp, t);
					}fls.push(pako["deflate"](data));if (bpp == 1) break;
				}
				var ti,
				    tsize = 1e9;
				for (var i = 0; i < fls.length; i++) {
					if (fls[i].length < tsize) {
						ti = i;tsize = fls[i].length;
					}
				} //log("top filter", ti);
				return fls[ti];
			};
			UPNG.encode._filterLine = function (data, img, y, bpl, bpp, type) {
				var i = y * bpl,
				    di = i + y,
				    paeth = UPNG.decode._paeth;
				data[di] = type;di++;

				if (type == 0) for (var x = 0; x < bpl; x++) {
					data[di + x] = img[i + x];
				} else if (type == 1) {
					for (var x = 0; x < bpp; x++) {
						data[di + x] = img[i + x];
					}for (var x = bpp; x < bpl; x++) {
						data[di + x] = img[i + x] - img[i + x - bpp] + 256 & 255;
					}
				} else if (y == 0) {
					for (var x = 0; x < bpp; x++) {
						data[di + x] = img[i + x];
					}if (type == 2) for (var x = bpp; x < bpl; x++) {
						data[di + x] = img[i + x];
					}if (type == 3) for (var x = bpp; x < bpl; x++) {
						data[di + x] = img[i + x] - (img[i + x - bpp] >> 1) + 256 & 255;
					}if (type == 4) for (var x = bpp; x < bpl; x++) {
						data[di + x] = img[i + x] - paeth(img[i + x - bpp], 0, 0) + 256 & 255;
					}
				} else {
					if (type == 2) {
						for (var x = 0; x < bpl; x++) {
							data[di + x] = img[i + x] + 256 - img[i + x - bpl] & 255;
						}
					}
					if (type == 3) {
						for (var x = 0; x < bpp; x++) {
							data[di + x] = img[i + x] + 256 - (img[i + x - bpl] >> 1) & 255;
						}for (var x = bpp; x < bpl; x++) {
							data[di + x] = img[i + x] + 256 - (img[i + x - bpl] + img[i + x - bpp] >> 1) & 255;
						}
					}
					if (type == 4) {
						for (var x = 0; x < bpp; x++) {
							data[di + x] = img[i + x] + 256 - paeth(0, img[i + x - bpl], 0) & 255;
						}for (var x = bpp; x < bpl; x++) {
							data[di + x] = img[i + x] + 256 - paeth(img[i + x - bpp], img[i + x - bpl], img[i + x - bpp - bpl]) & 255;
						}
					}
				}
			};

			UPNG.crc = {
				table: function () {
					var tab = new Uint32Array(256);
					for (var n = 0; n < 256; n++) {
						var c = n;
						for (var k = 0; k < 8; k++) {
							if (c & 1) c = 0xedb88320 ^ c >>> 1;else c = c >>> 1;
						}
						tab[n] = c;
					}
					return tab;
				}(),
				update: function update(c, buf, off$$1, len) {
					for (var i = 0; i < len; i++) {
						c = UPNG.crc.table[(c ^ buf[off$$1 + i]) & 0xff] ^ c >>> 8;
					}return c;
				},
				crc: function crc(b, o, l) {
					return UPNG.crc.update(0xffffffff, b, o, l) ^ 0xffffffff;
				}
			};

			UPNG.quantize = function (img, w, h, ps) {
				var nimg = new Uint8Array(img.length),
				    pind = new Uint16Array(w * h),
				    area = w * h,
				    edist = UPNG.quantize.dist;
				for (var i = 0; i < area; i++) {
					var qi = i << 2,
					    a = img[qi + 3] / 255;
					nimg[qi + 0] = img[qi + 0] * a;nimg[qi + 1] = img[qi + 1] * a;nimg[qi + 2] = img[qi + 2] * a;nimg[qi + 3] = img[qi + 3];
				}
				var plte = [],
				    used = [],
				    pr = 0,
				    plim = Math.max(100, 10 * ps);
				while (true) {
					used = [];plte = [];
					var msk = 0xff - ((1 << pr) - 1),
					    add = 1 << pr >> 1;
					for (var i = 0; i < area; i++) {
						var qi = i << 2;var r = nimg[qi],
						    g = nimg[qi + 1],
						    b = nimg[qi + 2],
						    a = nimg[qi + 3];
						var nr = (r & msk) + add,
						    ng = (g & msk) + add,
						    nb = (b & msk) + add,
						    na = (a & msk) + add,
						    key = na << 24 | nb << 16 | ng << 8 | nr;
						if (used[key]) {
							var pv = plte[used[key]];pv.occ++;
						} else {
							used[key] = plte.length;plte.push({ occ: 1, r: nr, g: ng, b: nb, a: na });
						}
						if (plte.length > plim) break;
					}
					if (plte.length > plim) {
						pr++;continue;
					}
					break;
				}
				if (pr == 0 && plte.length <= ps) return img;
				plte.sort(function (a, b) {
					return b.occ - a.occ;
				});

				ps = Math.min(ps, plte.length);
				var nplte = new Uint8Array(ps * 4);
				for (var i = 0; i < ps; i++) {
					var qi = i << 2,
					    c = plte[i];nplte[qi] = c.r;nplte[qi + 1] = c.g;nplte[qi + 2] = c.b;nplte[qi + 3] = c.a;
				}
				plte = nplte; //*/

				var icnt = Math.max(1, Math.min(10, Math.floor(1024 / ps)));
				for (var it = 0; it < icnt; it++) {
					var hist = new Uint32Array(ps),
					    nplt = new Uint32Array(ps * 4);
					var ndst = new Uint32Array(ps),
					    nind = new Uint32Array(ps);
					for (var i = 0; i < ps; i++) {
						var qi = i << 2;
						var r = plte[qi],
						    g = plte[qi + 1],
						    b = plte[qi + 2],
						    a = plte[qi + 3];
						var ci = 0;cd = 1e9;
						for (var j = 0; j < ps; j++) {
							if (j == i) continue;
							var dst = edist(r, g, b, a, plte, j << 2);
							if (dst < cd) {
								ci = j;cd = dst;
							}
						}
						ndst[i] = cd;nind[i] = ci;
					}
					for (var i = 0; i < area; i++) {
						var qi = i << 2;
						var r = nimg[qi],
						    g = nimg[qi + 1],
						    b = nimg[qi + 2],
						    a = nimg[qi + 3];
						var ci = 0,
						    cd = 1e9;
						ci = pind[i];cd = edist(r, g, b, a, plte, ci << 2);if (cd <= ndst[ci] >> 1) {} else for (var j = 0; j < ps; j++) {
							var dst = edist(r, g, b, a, plte, j << 2);
							if (dst < cd) {
								ci = j;cd = dst;
								if (dst <= ndst[ci] >> 1) break;
								var dst = edist(r, g, b, a, plte, nind[j] << 2);
								if (dst <= ndst[ci] >> 1) {
									ci = nind[j];break;
								}
							}
						}
						pind[i] = ci;hist[ci]++;var qci = ci << 2;
						nplt[qci] += r;nplt[qci + 1] += g;nplt[qci + 2] += b;nplt[qci + 3] += a;
					}
					for (var i = 0; i < ps; i++) {
						var qi = i << 2,
						    den = 1 / hist[i];
						plte[qi] = nplt[qi] * den;plte[qi + 1] = nplt[qi + 1] * den;plte[qi + 2] = nplt[qi + 2] * den;plte[qi + 3] = nplt[qi + 3] * den;
					}
				}
				//UPNG.quantize.dither(nimg, w,h, pind,plte, ps);  // I think that (current) dithering is not worth it
				for (var i = 0; i < area; i++) {
					var qi = i << 2,
					    ci = pind[i],
					    qci = ci << 2,
					    ia = plte[qci + 3] == 0 ? 0 : 255 / plte[qci + 3];
					nimg[qi + 0] = plte[qci + 0] * ia;nimg[qi + 1] = plte[qci + 1] * ia;nimg[qi + 2] = plte[qci + 2] * ia;nimg[qi + 3] = plte[qci + 3];
				}
				return nimg;
			};
			UPNG.quantize.dist = function (r, g, b, a, ba, bi) {
				var pr = ba[bi],
				    pg = ba[bi + 1],
				    pb = ba[bi + 2],
				    pa = ba[bi + 3];
				return (pr - r) * (pr - r) + (pg - g) * (pg - g) + (pb - b) * (pb - b) + (pa - a) * (pa - a);
			};
			UPNG.quantize.dither = function (nimg, w, h, pind, plte, ps) {
				var err = new Float32Array(w * h * 4),
				    i16 = 1 / 16;
				var edist = UPNG.quantize.dist,
				    round = Math.round,
				    qw = w << 2;
				for (var y = 0; y < h; y++) {
					for (var x = 0; x < w; x++) {
						var i = y * w + x,
						    qi = i << 2;
						for (var j = 0; j < 4; j++) {
							err[qi + j] = Math.max(-8, Math.min(8, err[qi + j]));
						}var r = round(nimg[qi] + err[qi]),
						    g = round(nimg[qi + 1] + err[qi + 1]),
						    b = round(nimg[qi + 2] + err[qi + 2]),
						    a = round(nimg[qi + 3] + err[qi + 3]);
						var ci = 0,
						    cd = 1e9;
						for (var j = 0; j < ps; j++) {
							var dst = edist(r, g, b, a, plte, j << 2);
							if (dst < cd) {
								ci = j;cd = dst;
							}
						}
						pind[i] = ci;
						var ciq = ci << 2;
						var dr = r - plte[ciq],
						    dg = g - plte[ciq + 1],
						    db = b - plte[ciq + 2],
						    da = a - plte[ciq + 3];

						err[qi + 4 + 0] += 7 * dr * i16;err[qi + 4 + 1] += 7 * dg * i16;err[qi + 4 + 2] += 7 * db * i16;err[qi + 4 + 3] += 7 * da * i16;
						err[qi + qw - 4 + 0] += 3 * dr * i16;err[qi + qw - 4 + 1] += 3 * dg * i16;err[qi + qw - 4 + 2] += 3 * db * i16;err[qi + qw - 4 + 3] += 3 * da * i16;
						err[qi + qw + 0] += 5 * dr * i16;err[qi + qw + 1] += 5 * dg * i16;err[qi + qw + 2] += 5 * db * i16;err[qi + qw + 3] += 5 * da * i16;
						err[qi + qw + 4 + 0] += 1 * dr * i16;err[qi + qw + 4 + 1] += 1 * dg * i16;err[qi + qw + 4 + 2] += 1 * db * i16;err[qi + qw + 4 + 3] += 1 * da * i16;
					}
				}
			};

			UPNG.decode = function (buff) {
				var data = new Uint8Array(buff),
				    offset = 8,
				    bin = UPNG._bin,
				    rUs = bin.readUshort;
				var out = { tabs: {} };
				var dd = new Uint8Array(data.length),
				    doff = 0; // put all IDAT data into it

				while (true) {
					var len = bin.readUint(data, offset);offset += 4;
					var type = bin.readASCII(data, offset, 4);offset += 4;
					//log(offset, len, type);

					if (type == "IHDR") {
						UPNG.decode._IHDR(data, offset, out);
					} else if (type == "IDAT") {
						for (var i = 0; i < len; i++) {
							dd[doff + i] = data[offset + i];
						}doff += len;
					} else if (type == "pHYs") {
						out.tabs[type] = [bin.readUint(data, offset), bin.readUint(data, offset + 4), data[offset + 8]];
					} else if (type == "cHRM") {
						out.tabs[type] = [];
						for (var i = 0; i < 8; i++) {
							out.tabs[type].push(bin.readUint(data, offset + i * 4));
						}
					} else if (type == "tEXt") {
						if (out.tabs[type] == null) out.tabs[type] = {};
						var nz = bin.nextZero(data, offset);
						var keyw = bin.readASCII(data, offset, nz - offset);
						var text = bin.readASCII(data, nz + 1, offset + len - nz - 1);
						out.tabs[type][keyw] = text;
					} else if (type == "iTXt") {
						if (out.tabs[type] == null) out.tabs[type] = {};
						var nz = 0,
						    off$$1 = offset;
						nz = bin.nextZero(data, off$$1);
						var keyw = bin.readASCII(data, off$$1, nz - off$$1);off$$1 = nz + 1;
						off$$1 += 2;
						nz = bin.nextZero(data, off$$1);
						var ltag = bin.readASCII(data, off$$1, nz - off$$1);off$$1 = nz + 1;
						nz = bin.nextZero(data, off$$1);
						var tkeyw = bin.readUTF8(data, off$$1, nz - off$$1);off$$1 = nz + 1;
						var text = bin.readUTF8(data, off$$1, len - (off$$1 - offset));
						out.tabs[type][keyw] = text;
					} else if (type == "PLTE") {
						out.tabs[type] = bin.readBytes(data, offset, len);
					} else if (type == "hIST") {
						var pl = out.tabs["PLTE"].length / 3;
						out.tabs[type] = [];for (var i = 0; i < pl; i++) {
							out.tabs[type].push(rUs(data, offset + i * 2));
						}
					} else if (type == "tRNS") {
						if (out.ctype == 3) out.tabs[type] = bin.readBytes(data, offset, len);else if (out.ctype == 0) out.tabs[type] = rUs(data, offset);else if (out.ctype == 2) out.tabs[type] = [rUs(data, offset), rUs(data, offset + 2), rUs(data, offset + 4)];else log("tRNS for unsupported color type", out.ctype, len);
					} else if (type == "gAMA") out.tabs[type] = bin.readUint(data, offset) / 100000;else if (type == "sRGB") out.tabs[type] = data[offset];else if (type == "bKGD") {
						if (out.ctype == 0 || out.ctype == 4) out.tabs[type] = [rUs(data, offset)];else if (out.ctype == 2 || out.ctype == 6) out.tabs[type] = [rUs(data, offset), rUs(data, offset + 2), rUs(data, offset + 4)];else if (out.ctype == 3) out.tabs[type] = data[offset];
					} else if (type == "IEND") {
						if (out.compress == 0) dd = UPNG.decode._inflate(dd);else log("unsupported compression method:", out.interlace);

						if (out.filter != 0) log("unsupported filter method:", out.filter);

						if (out.interlace == 0) out.data = UPNG.decode._filterZero(dd, out, 0, out.width, out.height);else if (out.interlace == 1) out.data = UPNG.decode._readInterlace(dd, out);else log("unsupported interlace method:", out.interlace);

						break;
					} else {
						log("unknown chunk type", type, len);
					}
					offset += len;
					var crc = bin.readUint(data, offset);offset += 4;
				}
				delete out.compress;delete out.interlace;delete out.filter;
				return out;
			};

			UPNG.decode._inflate = function (data) {
				return pako["inflate"](data);
			};

			UPNG.decode._readInterlace = function (data, out) {
				var w = out.width,
				    h = out.height;
				var bpp = UPNG.decode._getBPP(out),
				    cbpp = bpp >> 3,
				    bpl = Math.ceil(w * bpp / 8);
				var img = new Uint8Array(h * bpl);
				var di = 0;

				var starting_row = [0, 0, 4, 0, 2, 0, 1];
				var starting_col = [0, 4, 0, 2, 0, 1, 0];
				var row_increment = [8, 8, 8, 4, 4, 2, 2];
				var col_increment = [8, 8, 4, 4, 2, 2, 1];

				var pass = 0;
				while (pass < 7) {
					var ri = row_increment[pass],
					    ci = col_increment[pass];
					var sw = 0,
					    sh = 0;
					var cr = starting_row[pass];while (cr < h) {
						cr += ri;sh++;
					}
					var cc = starting_col[pass];while (cc < w) {
						cc += ci;sw++;
					}
					var bpll = Math.ceil(sw * bpp / 8);
					UPNG.decode._filterZero(data, out, di, sw, sh);

					var y = 0,
					    row = starting_row[pass];
					while (row < h) {
						var col = starting_col[pass];
						var cdi = di + y * bpll << 3;

						while (col < w) {
							if (bpp == 1) {
								var val = data[cdi >> 3];val = val >> 7 - (cdi & 7) & 1;
								img[row * bpl + (col >> 3)] |= val << 7 - ((col & 3) << 0);
							}
							if (bpp == 2) {
								var val = data[cdi >> 3];val = val >> 6 - (cdi & 7) & 3;
								img[row * bpl + (col >> 2)] |= val << 6 - ((col & 3) << 1);
							}
							if (bpp == 4) {
								var val = data[cdi >> 3];val = val >> 4 - (cdi & 7) & 15;
								img[row * bpl + (col >> 1)] |= val << 4 - ((col & 1) << 2);
							}
							if (bpp >= 8) {
								var ii = row * bpl + col * cbpp;
								for (var j = 0; j < cbpp; j++) {
									img[ii + j] = data[(cdi >> 3) + j];
								}
							}
							cdi += bpp;col += ci;
						}
						y++;row += ri;
					}
					if (sw * sh != 0) di += sh * (1 + bpll);
					pass = pass + 1;
				}
				return img;
			};

			UPNG.decode._getBPP = function (out) {
				var noc = [1, null, 3, 1, 2, null, 4][out.ctype];
				if (noc == null) log("unsupported color type", out.ctype);
				return noc * out.depth;
			};

			UPNG.decode._filterZero = function (data, out, off$$1, w, h) {
				var bpp = UPNG.decode._getBPP(out),
				    bpl = Math.ceil(w * bpp / 8),
				    paeth = UPNG.decode._paeth;
				bpp = Math.ceil(bpp / 8);

				for (var y = 0; y < h; y++) {
					var i = off$$1 + y * bpl,
					    di = i + y + 1;
					var type = data[di - 1];

					if (type == 0) for (var x = 0; x < bpl; x++) {
						data[i + x] = data[di + x];
					} else if (type == 1) {
						for (var x = 0; x < bpp; x++) {
							data[i + x] = data[di + x];
						}for (var x = bpp; x < bpl; x++) {
							data[i + x] = data[di + x] + data[i + x - bpp] & 255;
						}
					} else if (y == 0) {
						for (var x = 0; x < bpp; x++) {
							data[i + x] = data[di + x];
						}if (type == 2) for (var x = bpp; x < bpl; x++) {
							data[i + x] = data[di + x] & 255;
						}if (type == 3) for (var x = bpp; x < bpl; x++) {
							data[i + x] = data[di + x] + (data[i + x - bpp] >> 1) & 255;
						}if (type == 4) for (var x = bpp; x < bpl; x++) {
							data[i + x] = data[di + x] + paeth(data[i + x - bpp], 0, 0) & 255;
						}
					} else {
						if (type == 2) {
							for (var x = 0; x < bpl; x++) {
								data[i + x] = data[di + x] + data[i + x - bpl] & 255;
							}
						}

						if (type == 3) {
							for (var x = 0; x < bpp; x++) {
								data[i + x] = data[di + x] + (data[i + x - bpl] >> 1) & 255;
							}for (var x = bpp; x < bpl; x++) {
								data[i + x] = data[di + x] + (data[i + x - bpl] + data[i + x - bpp] >> 1) & 255;
							}
						}

						if (type == 4) {
							for (var x = 0; x < bpp; x++) {
								data[i + x] = data[di + x] + paeth(0, data[i + x - bpl], 0) & 255;
							}for (var x = bpp; x < bpl; x++) {
								data[i + x] = data[di + x] + paeth(data[i + x - bpp], data[i + x - bpl], data[i + x - bpp - bpl]) & 255;
							}
						}
					}
				}
				return data;
			};

			UPNG.decode._paeth = function (a, b, c) {
				var p = a + b - c,
				    pa = Math.abs(p - a),
				    pb = Math.abs(p - b),
				    pc = Math.abs(p - c);
				if (pa <= pb && pa <= pc) return a;else if (pb <= pc) return b;
				return c;
			};

			UPNG.decode._IHDR = function (data, offset, out) {
				var bin = UPNG._bin;
				out.width = bin.readUint(data, offset);offset += 4;
				out.height = bin.readUint(data, offset);offset += 4;
				out.depth = data[offset];offset++;
				out.ctype = data[offset];offset++;
				out.compress = data[offset];offset++;
				out.filter = data[offset];offset++;
				out.interlace = data[offset];offset++;
			};

			UPNG._bin = {
				nextZero: function nextZero(data, p) {
					while (data[p] != 0) {
						p++;
					}return p;
				},
				readUshort: function readUshort(buff, p) {
					return buff[p] << 8 | buff[p + 1];
				},
				writeUshort: function writeUshort(buff, p, n) {
					buff[p] = n >> 8 & 255;buff[p + 1] = n & 255;
				},
				readUint: function readUint(buff, p) {
					return buff[p] * (256 * 256 * 256) + (buff[p + 1] << 16 | buff[p + 2] << 8 | buff[p + 3]);
				},
				writeUint: function writeUint(buff, p, n) {
					buff[p] = n >> 24 & 255;buff[p + 1] = n >> 16 & 255;buff[p + 2] = n >> 8 & 255;buff[p + 3] = n & 255;
				},
				readASCII: function readASCII(buff, p, l) {
					var s = "";for (var i = 0; i < l; i++) {
						s += String.fromCharCode(buff[p + i]);
					}return s;
				},
				writeASCII: function writeASCII(data, p, s) {
					for (var i = 0; i < s.length; i++) {
						data[p + i] = s.charCodeAt(i);
					}
				},
				readBytes: function readBytes(buff, p, l) {
					var arr = [];for (var i = 0; i < l; i++) {
						arr.push(buff[p + i]);
					}return arr;
				},
				pad: function pad(n) {
					return n.length < 2 ? "0" + n : n;
				},
				readUTF8: function readUTF8(buff, p, l) {
					var s = "",
					    ns;
					for (var i = 0; i < l; i++) {
						s += "%" + UPNG._bin.pad(buff[p + i].toString(16));
					}try {
						ns = decodeURIComponent(s);
					} catch (e) {
						return UPNG._bin.readASCII(buff, p, l);
					}
					return ns;
				}
			};
		})(UPNG, pako);
	})();
});

/*
* Author   Jonathan Lurie - http://me.jonathanlurie.fr
* License  MIT
* Link     https://github.com/Pixpipe/pixpipejs
* Lab      MCIN - Montreal Neurological Institute
*/

//import pngjs from 'pngjs'; // ependency issues
/**
* An instance of PngDecoder will decode a PNG image in native Javascript and
* output an Image2D. This is of course slower than using `io/FileImageReader.js`
* but this is compatible with Node and not rely on HTML5 Canvas.
*
* **Usage**
* - [examples/fileToPng.html](../examples/fileToPng.html)
*/

var PngDecoder = function (_Filter) {
  inherits(PngDecoder, _Filter);

  function PngDecoder() {
    classCallCheck(this, PngDecoder);

    var _this = possibleConstructorReturn(this, (PngDecoder.__proto__ || Object.getPrototypeOf(PngDecoder)).call(this));

    _this.addInputValidator(0, ArrayBuffer);
    return _this;
  }

  createClass(PngDecoder, [{
    key: '_run',
    value: function _run() {
      var inputBuffer = this._getInput(0);

      if (!inputBuffer) {
        console.warn("PngDecoder requires an ArrayBuffer as input \"0\". Unable to continue.");
        return;
      }

      if (!this._isPng(inputBuffer)) {
        console.warn("This is not a PNG file, unable to decode this file.");
        return;
      }

      // The decode method uses Pako to uncompress the data. Pako outputs a larger array
      // than the expected size, so we have to cut it - It seems a bit cumbersome or being
      // kindof manual work, but it's 2x faster than using upng.toRGBA8()
      try {
        var pngData = UPNG.decode(inputBuffer);
        var ncpp = Math.round(pngData.data.length / (pngData.width * pngData.height));
        var outputImage = new Image2D();
        var croppedArray = new pngData.data.constructor(pngData.data.buffer, 0, pngData.width * pngData.height * ncpp);
        outputImage.setData(croppedArray, pngData.width, pngData.height, ncpp);
        this._output[0] = outputImage;
      } catch (e) {
        console.warn(e);
      }
    }

    /**
    * Checks if the input buffer is of a png file
    * @param {ArrayBuffer} buffer - an array buffer inside which a PNG could be hiding!
    * @return {Boolean} true if the buffer is a valid PNG buffer, false if not
    */

  }, {
    key: '_isPng',
    value: function _isPng(buffer) {
      var first8Bytes = new Uint8Array(buffer, 0, 8);
      var validSequence = new Uint8Array([0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a]);

      for (var i = 0; i < first8Bytes.length; i++) {
        if (first8Bytes[i] != validSequence[i]) return false;
      }

      return true;
    }
  }]);
  return PngDecoder;
}(Filter); /* PngDecoder */

/*
* Author    Jonathan Lurie - http://me.jonathanlurie.fr
*
* License   MIT
* Link      https://github.com/Pixpipe/pixpipejs
* Lab       MCIN - Montreal Neurological Institute
*/

// decoders
//import { PixBinDecoder } from './PixBinDecoder.js';


/**
* An instance of Image2DGenericDecoder takes a ArrayBuffer 
* as input 0 (`.addInput(myArrayBuffer)`) and output an Image2D.
* The `update` method will perform several decoding attempts, using the readers
* specified in the constructor.
* In case of success (one of the registered decoder was compatible to the data)
* the metadata `decoderConstructor` and `decoderName` are made accessible and give
* information about the file format. If no decoder managed to decode the input buffer,
* this filter will not have any output.
*
* Developers: if a new 2D dataset decoder is added, reference it here and in the import list
*
* **Usage**
* - [examples/fileToGenericImage2D.html](../examples/fileToGenericImage2D.html)
*/

var Image2DGenericDecoder = function (_Filter) {
  inherits(Image2DGenericDecoder, _Filter);

  function Image2DGenericDecoder() {
    classCallCheck(this, Image2DGenericDecoder);

    var _this = possibleConstructorReturn(this, (Image2DGenericDecoder.__proto__ || Object.getPrototypeOf(Image2DGenericDecoder)).call(this));

    _this._decoders = [TiffDecoder, JpegDecoder, PngDecoder, PixpDecoder];
    return _this;
  }

  createClass(Image2DGenericDecoder, [{
    key: '_run',
    value: function _run() {
      var inputBuffer = this._getInput(0);

      if (!inputBuffer) {
        console.warn("The input buffer must not be null.");
        return;
      }

      // try with each decoder
      for (var d = 0; d < this._decoders.length; d++) {
        var decoder = new this._decoders[d]();
        decoder.addInput(inputBuffer);
        decoder.update();

        if (decoder.getNumberOfOutputs()) {
          this._output[0] = decoder.getOutput();
          this.setMetadata("decoderConstructor", this._decoders[d]);
          this.setMetadata("decoderName", this._decoders[d].name);
          break;
        }
      }
    }
  }]);
  return Image2DGenericDecoder;
}(Filter); /* END of class Image2DGenericDecoder */

var asyncGenerator$3 = function () {
  function AwaitValue(value) {
    this.value = value;
  }

  function AsyncGenerator(gen) {
    var front, back;

    function send(key, arg) {
      return new Promise(function (resolve, reject) {
        var request = {
          key: key,
          arg: arg,
          resolve: resolve,
          reject: reject,
          next: null
        };

        if (back) {
          back = back.next = request;
        } else {
          front = back = request;
          resume(key, arg);
        }
      });
    }

    function resume(key, arg) {
      try {
        var result = gen[key](arg);
        var value = result.value;

        if (value instanceof AwaitValue) {
          Promise.resolve(value.value).then(function (arg) {
            resume("next", arg);
          }, function (arg) {
            resume("throw", arg);
          });
        } else {
          settle(result.done ? "return" : "normal", result.value);
        }
      } catch (err) {
        settle("throw", err);
      }
    }

    function settle(type, value) {
      switch (type) {
        case "return":
          front.resolve({
            value: value,
            done: true
          });
          break;

        case "throw":
          front.reject(value);
          break;

        default:
          front.resolve({
            value: value,
            done: false
          });
          break;
      }

      front = front.next;

      if (front) {
        resume(front.key, front.arg);
      } else {
        back = null;
      }
    }

    this._invoke = send;

    if (typeof gen.return !== "function") {
      this.return = undefined;
    }
  }

  if (typeof Symbol === "function" && Symbol.asyncIterator) {
    AsyncGenerator.prototype[Symbol.asyncIterator] = function () {
      return this;
    };
  }

  AsyncGenerator.prototype.next = function (arg) {
    return this._invoke("next", arg);
  };

  AsyncGenerator.prototype.throw = function (arg) {
    return this._invoke("throw", arg);
  };

  AsyncGenerator.prototype.return = function (arg) {
    return this._invoke("return", arg);
  };

  return {
    wrap: function wrap(fn) {
      return function () {
        return new AsyncGenerator(fn.apply(this, arguments));
      };
    },
    await: function _await(value) {
      return new AwaitValue(value);
    }
  };
}();

var classCallCheck$3 = function classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass$3 = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

/**
* MniObjParser is a parser of mniobj surface files. This version is an atempt of
* making a free from dependency independant module. It is based on the code witten
* by Nicolas Kassis and Tarek Sherif for BrainBrowser
* (https://brainbrowser.cbrain.mcgill.ca).
*
* Since mniobj file can be huge, it may be a good idea to call that froma worker.
*
* @author: Jonathan Lurie (github.com/jonathanlurie)
* @author: Nicolas Kassis
* @author: Tarek Sherif
*/

var MniObjParser = function () {

  /**
  * Constructor of the MniObjParser.
  */
  function MniObjParser() {
    classCallCheck$3(this, MniObjParser);

    this._stack = null;
    this._stackIndex = null;
    this._tempResult = null;
    this._shapeData = null;
  }

  /**
  * Copy an existing MniObjParser instance.
  * This is particularly usefull in the context of a worker, if an MniObjParser
  * is returned, it is using a JSON format to transfer, meaning all the methods
  * are lost and only remains the data. This is to rebuild a proper MniObjParser.
  * @param {MniObjParser} MniObjParserInstance - the instance to copy the data from.
  */

  createClass$3(MniObjParser, [{
    key: "copy",
    value: function copy(MniObjParserInstance) {
      this._stack = MniObjParserInstance._stack;
      this._stackIndex = MniObjParserInstance._stackIndex;
      this._tempResult = MniObjParserInstance._tempResult;
      this._shapeData = MniObjParserInstance._shapeData;
    }

    /**
    * Parse the nmiobj string.
    * @param {String} objString - This string is obviously taken out of a obj file
    */

  }, {
    key: "parse",
    value: function parse(objString) {
      try {
        this._parseRawData(objString);
        this._arrangeData();
      } catch (e) {
        console.warn("MNI OBJ file is invalid.");
        console.warn(e);
      }
    }

    /**
    * Parse a obj string
    * @param {String} objString - content of the obj file
    */

  }, {
    key: "_parseRawData",
    value: function _parseRawData(objString) {
      this._stack = objString.trim().split(/\s+/).reverse();
      this._stackIndex = this._stack.length - 1;
      this._tempResult = {};

      var objectClass = this._popStack();
      var start, end, nitems;
      var indices, endIndices;
      var lineIndices = null;
      var lineIndexSize, lineIndexCounter;

      this._tempResult.type = objectClass === "P" ? "polygon" : objectClass === "L" ? "line" : objectClass;

      if (this._tempResult.type === "polygon") {
        this._parseSurfProp();
        this._tempResult.numVertices = parseInt(this._popStack(), 10);
        this._parseVertices();
        this._parseNormals();
        this._tempResult.nitems = parseInt(this._popStack(), 10);
      } else if (this._tempResult.type === "line") {
        this._parseSurfProp();
        this._tempResult.numVertices = parseInt(this._popStack(), 10);
        this._parseVertices();
        this._tempResult.nitems = parseInt(this._popStack(), 10);
      } else {
        this._tempResult.error = true;
        this._tempResult.errorMessage = 'Invalid MNI Object class: must be "polygon" or "line"';
        return;
      }

      this._parseColors();
      this._parseEndIndices();
      this._parseIndices();

      if (this._tempResult.type === "polygon") {} else if (this._tempResult.type === "line") {
        indices = this._tempResult.indices;
        endIndices = this._tempResult.endIndices;
        nitems = this._tempResult.nitems;
        lineIndexSize = lineIndexCounter = 0;

        for (var i = 0; i < nitems; i++) {
          if (i === 0) {
            start = 0;
          } else {
            start = endIndices[i - 1];
          }

          end = endIndices[i];
          lineIndexSize += (end - start - 1) * 2;
        }

        lineIndices = new Uint32Array(lineIndexSize);

        for (var i = 0; i < nitems; i++) {
          if (i === 0) {
            start = 0;
          } else {
            start = endIndices[i - 1];
          }

          lineIndices[lineIndexCounter++] = indices[start];
          end = endIndices[i];

          for (var j = start + 1; j < end - 1; j++) {
            lineIndices[lineIndexCounter++] = indices[j];
            lineIndices[lineIndexCounter++] = indices[j];
          }

          lineIndices[lineIndexCounter++] = indices[end - 1];
        }

        this._tempResult.indices = lineIndices;
      }
    }

    /**
    * [PRIVATE]
    * Rearange the data from _tempResult to _shapeData
    */

  }, {
    key: "_arrangeData",
    value: function _arrangeData() {

      this._shapeData = {
        type: this._tempResult.type,
        vertices: this._tempResult.vertices,
        normals: this._tempResult.normals,
        colors: this._tempResult.colors,
        surfaceProperties: this._tempResult.surfaceProperties,
        error: this._tempResult.error,
        errorMessage: this._tempResult.errorMessage
      };

      var transfer = [this._shapeData.vertices.buffer, this._shapeData.colors.buffer];

      if (this._shapeData.normals) {
        transfer.push(this._shapeData.normals.buffer);
      }

      this._shapeData.shapes = this._tempResult.indices;

      transfer.push(this._tempResult.indices.buffer);

      // unroll colors if necessary
      if (this._shapeData.colors.length === 4) {
        this._unrollColors();
      }
    }

    /**
    * [PRIVATE]
    * From a single color, make a typed array (Uint8) of colors.
    */

  }, {
    key: "_unrollColors",
    value: function _unrollColors() {
      var dataColor0, dataColor1, dataColor2, dataColor3;
      var nbTriangles = this._shapeData.vertices.length / 3;
      var arraySize = nbTriangles * 4;
      var unrolledColors = new Uint8Array(arraySize);

      dataColor0 = this._shapeData.colors[0];
      dataColor1 = this._shapeData.colors[1];
      dataColor2 = this._shapeData.colors[2];
      dataColor3 = this._shapeData.colors[3];

      for (var i = 0; i < arraySize; i += 4) {
        unrolledColors[i] = dataColor0 * 255;
        unrolledColors[i + 1] = dataColor1 * 255;
        unrolledColors[i + 2] = dataColor2 * 255;
        unrolledColors[i + 3] = dataColor3 * 255;
      }

      this._shapeData.colors = unrolledColors;
    }

    /**
    * [PRIVATE]
    * Parse surface properties from the raw data.
    */

  }, {
    key: "_parseSurfProp",
    value: function _parseSurfProp() {
      if (this._tempResult.type === "polygon") {
        this._tempResult.surfaceProperties = {
          ambient: parseFloat(this._popStack()),
          diffuse: parseFloat(this._popStack()),
          specularReflectance: parseFloat(this._popStack()),
          specularScattering: parseFloat(this._popStack()),
          transparency: parseFloat(this._popStack())
        };
      } else if (this._tempResult.type === "line") {
        this._tempResult.surfaceProperties = {
          width: this._popStack()
        };
      }
    }

    /**
    * [PRIVATE]
    * Parse the vertices from the raw data.
    */

  }, {
    key: "_parseVertices",
    value: function _parseVertices() {
      var count = this._tempResult.numVertices * 3;
      var vertices = new Float32Array(count);
      for (var i = 0; i < count; i++) {
        vertices[i] = parseFloat(this._popStack());
      }

      this._tempResult.vertices = vertices;
    }

    /**
    * [PRIVATE]
    * Parse the normal vector from the raw data.
    */

  }, {
    key: "_parseNormals",
    value: function _parseNormals() {
      var count = this._tempResult.numVertices * 3;
      var normals = new Float32Array(count);

      for (var i = 0; i < count; i++) {
        normals[i] = parseFloat(this._popStack());
      }

      this._tempResult.normals = normals;
    }

    /**
    * [PRIVATE]
    * Parse the color from the raw data.
    */

  }, {
    key: "_parseColors",
    value: function _parseColors() {
      var colorFlag = parseInt(this._popStack(), 10);
      var colors;
      var count;

      if (colorFlag === 0) {
        colors = new Float32Array(4);
        for (var i = 0; i < 4; i++) {
          colors[i] = parseFloat(this._popStack());
        }
      } else if (colorFlag === 1) {
        count = this._tempResult.num_polygons * 4;
        colors = new Float32Array(count);
        for (var i = 0; i < count; i++) {
          colors[i] = parseFloat(this._popStack());
        }
      } else if (colorFlag === 2) {
        count = this._tempResult.numVertices * 4;
        colors = new Float32Array(count);
        for (var i = 0; i < count; i++) {
          colors[i] = parseFloat(this._popStack());
        }
      } else {
        this._tempResult.error = true;
        this._tempResult.errorMessage = "Invalid color flag: " + colorFlag;
      }

      this._tempResult.colorFlag = colorFlag;
      this._tempResult.colors = colors;
    }

    /**
    * [PRIVATE]
    * Not sure how useful endIndices are, it was used in BrainBrowser so I kept them.
    * (is that useful?)
    */

  }, {
    key: "_parseEndIndices",
    value: function _parseEndIndices() {
      var count = this._tempResult.nitems;
      var endIndices = new Uint32Array(count);

      for (var i = 0; i < count; i++) {
        endIndices[i] = parseInt(this._popStack(), 10);
      }

      this._tempResult.endIndices = endIndices;
    }

    /**
    * [PRIVATE]
    * Reads the vertices indices to use to make triangles.
    */

  }, {
    key: "_parseIndices",
    value: function _parseIndices() {
      var count = this._stackIndex + 1;
      var indices = new Uint32Array(count);

      for (var i = 0; i < count; i++) {
        indices[i] = parseInt(this._popStack(), 10);
      }

      this._tempResult.indices = indices;
    }

    /**
    * [PRIVATE]
    * pop the raw data (big string file)
    * @return {String}
    */

  }, {
    key: "_popStack",
    value: function _popStack() {
      return this._stack[this._stackIndex--];
    }

    /**
    * Get if the file is valid, after an atempt of parsing
    * @return {Boolean} true if valid, false if invalid
    */

  }, {
    key: "isValid",
    value: function isValid() {
      return !this._shapeData.error;
    }

    /**
    * Get the error message if any
    * @return {String} the error message, or null if any
    */

  }, {
    key: "getErrorMessage",
    value: function getErrorMessage() {
      return this._shapeData.errorMessage;
    }

    /**
    * [DEBUGGING]
    * @return {Object} the entire shapeData object.
    */

  }, {
    key: "getShapeData",
    value: function getShapeData() {
      return this._shapeData;
    }

    /**
    * Returns the index of vertices to be used to make triangles, as a typed array.
    * @return {Uint32Array} Since triangles have 3 vertices, the array contains index such as
    * [i0, i1, i2, i0, i1, i2, ...].
    */

  }, {
    key: "getShapeRawIndices",
    value: function getShapeRawIndices() {
      if (this._shapeData.error) {
        console.warn("ERROR while parsing: " + this._shapeData.errorMessage);
        return null;
      }

      return this._shapeData.shapes;
    }

    /**
    * Returns the vertice position as a typed array.
    * @return {Float32Array} of points encoded like [x, y, z, x, y, z, ...]
    */

  }, {
    key: "getRawVertices",
    value: function getRawVertices() {
      if (this._shapeData.error) {
        console.warn("ERROR while parsing: " + this._shapeData.errorMessage);
        return null;
      }

      return this._shapeData.vertices;
    }

    /**
    * Returns the normal vectors as a typed array.
    * @return {Float32Array} of normal vector encoded like [x, y, z, x, y, z, ...]
    */

  }, {
    key: "getRawNormals",
    value: function getRawNormals() {
      if (this._shapeData.error) {
        console.warn("ERROR while parsing: " + this._shapeData.errorMessage);
        return null;
      }

      return this._shapeData.normals;
    }

    /**
    * Get the colors encoded like [r, g, b, a, r, g, b, a, ...]
    * @return {Float32Array} of size 4 or of size 4xnumOfVertices
    */

  }, {
    key: "getRawColors",
    value: function getRawColors() {
      if (this._shapeData.error) {
        console.warn("ERROR while parsing: " + this._shapeData.errorMessage);
        return null;
      }

      return this._shapeData.colors;
    }

    /**
    * The surface properties contains transparency info about specularity transparency
    * and other nice light-related behaviour thingies.
    * May be used when building a material, but this is not mandatory.
    * @return {Object}
    */

  }, {
    key: "getSurfaceProperties",
    value: function getSurfaceProperties() {
      if (this._shapeData.error) {
        console.warn("ERROR while parsing: " + this._shapeData.errorMessage);
        return null;
      }

      return this._shapeData.surfaceProperties;
    }

    /**
    * Get the type of mesh.
    * @return {String} "polygon" or "line"
    */

  }, {
    key: "getType",
    value: function getType() {
      return this._shapeData.type;
    }

    /**
    * Get wether of not the output is a 3D polygon  type
    * @return {Boolean}
    */

  }, {
    key: "isPolygon",
    value: function isPolygon() {
      return this._shapeData.type === "polygon";
    }

    /**
    * Get wether of not the output is a line  type
    * @return {Boolean}
    */

  }, {
    key: "isLine",
    value: function isLine() {
      return this._shapeData.type === "line";
    }
  }]);
  return MniObjParser;
}(); /* END of class MniObjParser */

/*
* Author   Jonathan Lurie - http://me.jonathanlurie.fr
* License  MIT
* Link      https://github.com/Pixpipe/pixpipejs
* Lab       MCIN - Montreal Neurological Institute
*/

/**
* When most parser need an ArrayBuffer as input, the MNI OBJ mesh file being text
* files, an instance of MniObjDecoder takes the string content of such files.
* The string content of a file can be provided by a FileToArrayBufferReader or
* UrlToArrayBufferReader with the metadata `readAsText` being true.
* Then use the method `.addInput( myString )` to provide the input and call
* the method `.update()`. If the input is suscceessfully parsed, the output of
* a MniObjDecoder is a Mesh3D. If the file is invalid, a message is probably written
* in the JS console and no output is available.
*
* **Usage**
* - [examples/fileToMniObj.html](../examples/fileToMniObj.html)
*/

var MniObjDecoder = function (_Filter) {
  inherits(MniObjDecoder, _Filter);

  function MniObjDecoder() {
    classCallCheck(this, MniObjDecoder);
    return possibleConstructorReturn(this, (MniObjDecoder.__proto__ || Object.getPrototypeOf(MniObjDecoder)).call(this));
    //this.addInputValidator(0, string);
    // Adding an input validator with the type string is not possible because
    // a string is not an "instanceof" String unless it is created by the String
    // constructor, what we generaly dont want to do if they are very long.
    // When decoding a file, a string is generally as a DOMString, with is
    // different as String, and we dont want to duplicated that into memory.
  }

  createClass(MniObjDecoder, [{
    key: '_run',
    value: function _run() {
      var input = this._getInput();

      //if( !(input instanceof String) ){
      if (typeof input !== "string") {
        console.warn("The input data for MniObjDecoder ust be a String.");
        return;
      }

      var parser = new MniObjParser();
      parser.parse(input);

      // Check if the parsing went ok:
      if (!parser.isValid()) {
        console.warn("Invalid MNI OBJ file.\n" + "ERROR: " + parser.getErrorMessage());
        return;
      }

      if (!parser.isPolygon()) {
        console.warn("The MNI OBJ file is valid but does not describe a 3D mesh.");
        return;
      }

      // get the position of all the vertices as [x, y, z, x, y, z, ... ]
      var positions = parser.getRawVertices(); // Float32Array

      // get the index of the vertices involved in faces. These are the index from the "positions" array
      // [index0, index1, index2, index0, index1, index2, ... ] , each are triangles
      var indices = parser.getShapeRawIndices(); // Uint32Array

      // get the list of normal vectors (unit) as [x, y, z, x, y, z, ... ]
      var normals = parser.getRawNormals(); // Float32Array

      // get all the colors per vertex as [r, g, b, a, r, g, b, a, ... ]
      var colors = parser.getRawColors(); // Uint8Array

      // get some material information, not mandatory to reconstruct the mesh
      var surfaceProperties = parser.getSurfaceProperties(); // object


      var mesh = new Mesh3D();
      mesh.setVertexPositions(positions);
      mesh.setPolygonFacesOrder(indices);
      mesh.setPolygonFacesNormals(normals);
      mesh.setVertexColors(colors);
      mesh.setNumberOfVerticesPerShapes(3); // here
      mesh.setNumberOfComponentsPerColor(4);

      this._output[0] = mesh;
    }
  }]);
  return MniObjDecoder;
}(Filter); /* END of class Filter */

"use strict";

function iota(n) {
  var result = new Array(n);
  for (var i = 0; i < n; ++i) {
    result[i] = i;
  }
  return result;
}

var iota_1 = iota;

/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */

// The _isBuffer check is for Safari 5-7 support, because it's missing
// Object.prototype.constructor. Remove this eventually
var index$3 = function index(obj) {
  return obj != null && (isBuffer$1(obj) || isSlowBuffer$1(obj) || !!obj._isBuffer);
};

function isBuffer$1(obj) {
  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj);
}

// For Node v0.10 support. Remove this eventually.
function isSlowBuffer$1(obj) {
  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer$1(obj.slice(0, 0));
}

var hasTypedArrays = typeof Float64Array !== "undefined";

function compare1st(a, b) {
  return a[0] - b[0];
}

function order() {
  var stride = this.stride;
  var terms = new Array(stride.length);
  var i;
  for (i = 0; i < terms.length; ++i) {
    terms[i] = [Math.abs(stride[i]), i];
  }
  terms.sort(compare1st);
  var result = new Array(terms.length);
  for (i = 0; i < result.length; ++i) {
    result[i] = terms[i][1];
  }
  return result;
}

function compileConstructor(dtype, dimension) {
  var className = ["View", dimension, "d", dtype].join("");
  if (dimension < 0) {
    className = "View_Nil" + dtype;
  }
  var useGetters = dtype === "generic";

  if (dimension === -1) {
    //Special case for trivial arrays
    var code = "function " + className + "(a){this.data=a;};\
var proto=" + className + ".prototype;\
proto.dtype='" + dtype + "';\
proto.index=function(){return -1};\
proto.size=0;\
proto.dimension=-1;\
proto.shape=proto.stride=proto.order=[];\
proto.lo=proto.hi=proto.transpose=proto.step=\
function(){return new " + className + "(this.data);};\
proto.get=proto.set=function(){};\
proto.pick=function(){return null};\
return function construct_" + className + "(a){return new " + className + "(a);}";
    var procedure = new Function(code);
    return procedure();
  } else if (dimension === 0) {
    //Special case for 0d arrays
    var code = "function " + className + "(a,d) {\
this.data = a;\
this.offset = d\
};\
var proto=" + className + ".prototype;\
proto.dtype='" + dtype + "';\
proto.index=function(){return this.offset};\
proto.dimension=0;\
proto.size=1;\
proto.shape=\
proto.stride=\
proto.order=[];\
proto.lo=\
proto.hi=\
proto.transpose=\
proto.step=function " + className + "_copy() {\
return new " + className + "(this.data,this.offset)\
};\
proto.pick=function " + className + "_pick(){\
return TrivialArray(this.data);\
};\
proto.valueOf=proto.get=function " + className + "_get(){\
return " + (useGetters ? "this.data.get(this.offset)" : "this.data[this.offset]") + "};\
proto.set=function " + className + "_set(v){\
return " + (useGetters ? "this.data.set(this.offset,v)" : "this.data[this.offset]=v") + "\
};\
return function construct_" + className + "(a,b,c,d){return new " + className + "(a,d)}";
    var procedure = new Function("TrivialArray", code);
    return procedure(CACHED_CONSTRUCTORS[dtype][0]);
  }

  var code = ["'use strict'"];

  //Create constructor for view
  var indices = iota_1(dimension);
  var args = indices.map(function (i) {
    return "i" + i;
  });
  var index_str = "this.offset+" + indices.map(function (i) {
    return "this.stride[" + i + "]*i" + i;
  }).join("+");
  var shapeArg = indices.map(function (i) {
    return "b" + i;
  }).join(",");
  var strideArg = indices.map(function (i) {
    return "c" + i;
  }).join(",");
  code.push("function " + className + "(a," + shapeArg + "," + strideArg + ",d){this.data=a", "this.shape=[" + shapeArg + "]", "this.stride=[" + strideArg + "]", "this.offset=d|0}", "var proto=" + className + ".prototype", "proto.dtype='" + dtype + "'", "proto.dimension=" + dimension);

  //view.size:
  code.push("Object.defineProperty(proto,'size',{get:function " + className + "_size(){\
return " + indices.map(function (i) {
    return "this.shape[" + i + "]";
  }).join("*"), "}})");

  //view.order:
  if (dimension === 1) {
    code.push("proto.order=[0]");
  } else {
    code.push("Object.defineProperty(proto,'order',{get:");
    if (dimension < 4) {
      code.push("function " + className + "_order(){");
      if (dimension === 2) {
        code.push("return (Math.abs(this.stride[0])>Math.abs(this.stride[1]))?[1,0]:[0,1]}})");
      } else if (dimension === 3) {
        code.push("var s0=Math.abs(this.stride[0]),s1=Math.abs(this.stride[1]),s2=Math.abs(this.stride[2]);\
if(s0>s1){\
if(s1>s2){\
return [2,1,0];\
}else if(s0>s2){\
return [1,2,0];\
}else{\
return [1,0,2];\
}\
}else if(s0>s2){\
return [2,0,1];\
}else if(s2>s1){\
return [0,1,2];\
}else{\
return [0,2,1];\
}}})");
      }
    } else {
      code.push("ORDER})");
    }
  }

  //view.set(i0, ..., v):
  code.push("proto.set=function " + className + "_set(" + args.join(",") + ",v){");
  if (useGetters) {
    code.push("return this.data.set(" + index_str + ",v)}");
  } else {
    code.push("return this.data[" + index_str + "]=v}");
  }

  //view.get(i0, ...):
  code.push("proto.get=function " + className + "_get(" + args.join(",") + "){");
  if (useGetters) {
    code.push("return this.data.get(" + index_str + ")}");
  } else {
    code.push("return this.data[" + index_str + "]}");
  }

  //view.index:
  code.push("proto.index=function " + className + "_index(", args.join(), "){return " + index_str + "}");

  //view.hi():
  code.push("proto.hi=function " + className + "_hi(" + args.join(",") + "){return new " + className + "(this.data," + indices.map(function (i) {
    return ["(typeof i", i, "!=='number'||i", i, "<0)?this.shape[", i, "]:i", i, "|0"].join("");
  }).join(",") + "," + indices.map(function (i) {
    return "this.stride[" + i + "]";
  }).join(",") + ",this.offset)}");

  //view.lo():
  var a_vars = indices.map(function (i) {
    return "a" + i + "=this.shape[" + i + "]";
  });
  var c_vars = indices.map(function (i) {
    return "c" + i + "=this.stride[" + i + "]";
  });
  code.push("proto.lo=function " + className + "_lo(" + args.join(",") + "){var b=this.offset,d=0," + a_vars.join(",") + "," + c_vars.join(","));
  for (var i = 0; i < dimension; ++i) {
    code.push("if(typeof i" + i + "==='number'&&i" + i + ">=0){\
d=i" + i + "|0;\
b+=c" + i + "*d;\
a" + i + "-=d}");
  }
  code.push("return new " + className + "(this.data," + indices.map(function (i) {
    return "a" + i;
  }).join(",") + "," + indices.map(function (i) {
    return "c" + i;
  }).join(",") + ",b)}");

  //view.step():
  code.push("proto.step=function " + className + "_step(" + args.join(",") + "){var " + indices.map(function (i) {
    return "a" + i + "=this.shape[" + i + "]";
  }).join(",") + "," + indices.map(function (i) {
    return "b" + i + "=this.stride[" + i + "]";
  }).join(",") + ",c=this.offset,d=0,ceil=Math.ceil");
  for (var i = 0; i < dimension; ++i) {
    code.push("if(typeof i" + i + "==='number'){\
d=i" + i + "|0;\
if(d<0){\
c+=b" + i + "*(a" + i + "-1);\
a" + i + "=ceil(-a" + i + "/d)\
}else{\
a" + i + "=ceil(a" + i + "/d)\
}\
b" + i + "*=d\
}");
  }
  code.push("return new " + className + "(this.data," + indices.map(function (i) {
    return "a" + i;
  }).join(",") + "," + indices.map(function (i) {
    return "b" + i;
  }).join(",") + ",c)}");

  //view.transpose():
  var tShape = new Array(dimension);
  var tStride = new Array(dimension);
  for (var i = 0; i < dimension; ++i) {
    tShape[i] = "a[i" + i + "]";
    tStride[i] = "b[i" + i + "]";
  }
  code.push("proto.transpose=function " + className + "_transpose(" + args + "){" + args.map(function (n, idx) {
    return n + "=(" + n + "===undefined?" + idx + ":" + n + "|0)";
  }).join(";"), "var a=this.shape,b=this.stride;return new " + className + "(this.data," + tShape.join(",") + "," + tStride.join(",") + ",this.offset)}");

  //view.pick():
  code.push("proto.pick=function " + className + "_pick(" + args + "){var a=[],b=[],c=this.offset");
  for (var i = 0; i < dimension; ++i) {
    code.push("if(typeof i" + i + "==='number'&&i" + i + ">=0){c=(c+this.stride[" + i + "]*i" + i + ")|0}else{a.push(this.shape[" + i + "]);b.push(this.stride[" + i + "])}");
  }
  code.push("var ctor=CTOR_LIST[a.length+1];return ctor(this.data,a,b,c)}");

  //Add return statement
  code.push("return function construct_" + className + "(data,shape,stride,offset){return new " + className + "(data," + indices.map(function (i) {
    return "shape[" + i + "]";
  }).join(",") + "," + indices.map(function (i) {
    return "stride[" + i + "]";
  }).join(",") + ",offset)}");

  //Compile procedure
  var procedure = new Function("CTOR_LIST", "ORDER", code.join("\n"));
  return procedure(CACHED_CONSTRUCTORS[dtype], order);
}

function arrayDType(data) {
  if (index$3(data)) {
    return "buffer";
  }
  if (hasTypedArrays) {
    switch (Object.prototype.toString.call(data)) {
      case "[object Float64Array]":
        return "float64";
      case "[object Float32Array]":
        return "float32";
      case "[object Int8Array]":
        return "int8";
      case "[object Int16Array]":
        return "int16";
      case "[object Int32Array]":
        return "int32";
      case "[object Uint8Array]":
        return "uint8";
      case "[object Uint16Array]":
        return "uint16";
      case "[object Uint32Array]":
        return "uint32";
      case "[object Uint8ClampedArray]":
        return "uint8_clamped";
    }
  }
  if (Array.isArray(data)) {
    return "array";
  }
  return "generic";
}

var CACHED_CONSTRUCTORS = {
  "float32": [],
  "float64": [],
  "int8": [],
  "int16": [],
  "int32": [],
  "uint8": [],
  "uint16": [],
  "uint32": [],
  "array": [],
  "uint8_clamped": [],
  "buffer": [],
  "generic": []
};function wrappedNDArrayCtor(data, shape, stride, offset) {
  if (data === undefined) {
    var ctor = CACHED_CONSTRUCTORS.array[0];
    return ctor([]);
  } else if (typeof data === "number") {
    data = [data];
  }
  if (shape === undefined) {
    shape = [data.length];
  }
  var d = shape.length;
  if (stride === undefined) {
    stride = new Array(d);
    for (var i = d - 1, sz = 1; i >= 0; --i) {
      stride[i] = sz;
      sz *= shape[i];
    }
  }
  if (offset === undefined) {
    offset = 0;
    for (var i = 0; i < d; ++i) {
      if (stride[i] < 0) {
        offset -= (shape[i] - 1) * stride[i];
      }
    }
  }
  var dtype = arrayDType(data);
  var ctor_list = CACHED_CONSTRUCTORS[dtype];
  while (ctor_list.length <= d + 1) {
    ctor_list.push(compileConstructor(dtype, ctor_list.length - 1));
  }
  var ctor = ctor_list[d + 1];
  return ctor(data, shape, stride, offset);
}

var ndarray = wrappedNDArrayCtor;

"use strict";

function dtypeToType(dtype) {
  switch (dtype) {
    case 'uint8':
      return Uint8Array;
    case 'uint16':
      return Uint16Array;
    case 'uint32':
      return Uint32Array;
    case 'int8':
      return Int8Array;
    case 'int16':
      return Int16Array;
    case 'int32':
      return Int32Array;
    case 'float':
    case 'float32':
      return Float32Array;
    case 'double':
    case 'float64':
      return Float64Array;
    case 'uint8_clamped':
      return Uint8ClampedArray;
    case 'generic':
    case 'buffer':
    case 'data':
    case 'dataview':
      return ArrayBuffer;
    case 'array':
      return Array;
  }
}

var zeros = function zeros(shape, dtype) {
  dtype = dtype || 'float64';
  var sz = 1;
  for (var i = 0; i < shape.length; ++i) {
    sz *= shape[i];
  }
  return ndarray(new (dtypeToType(dtype))(sz), shape);
};

/*
 * Author   Armin Taheri - https://github.com/ArminTaheri
 * License  MIT
 * Link     https://github.com/Pixpipe/pixpipejs
 * Lab      MCIN - Montreal Neurological Institute
 */

var ComponentProjectionImage2DFilter = function (_Filter) {
  inherits(ComponentProjectionImage2DFilter, _Filter);

  function ComponentProjectionImage2DFilter() {
    classCallCheck(this, ComponentProjectionImage2DFilter);

    var _this = possibleConstructorReturn(this, (ComponentProjectionImage2DFilter.__proto__ || Object.getPrototypeOf(ComponentProjectionImage2DFilter)).call(this));

    _this.addInputValidator(0, Image2D);
    _this.setMetadata('componentOffset', 0);
    return _this;
  }

  createClass(ComponentProjectionImage2DFilter, [{
    key: '_run',
    value: function _run() {
      if (!this.hasValidInput()) {
        console.warn("A filter of type ComponentProjectionImage2DFilter requires 1 input of Image2D.");
        return;
      }
      var inputSignal = this._getInput(0);
      var width = inputSignal.getMetadata('width');
      var height = inputSignal.getMetadata('height');
      var ncpp = inputSignal.getMetadata('ncpp');
      var offset = this.getMetadata('componentOffset');
      var arr = ndarray(inputSignal.getData(), [width, height, ncpp]);
      var projected = arr.pick(null, null, offset); // pick out the component as an ndarray
      var projectedArray = zeros([width, height], arr.dtype);
      for (var i = 0; i < width; i++) {
        for (var j = 0; j < height; j++) {
          projectedArray.set(i, j, projected.get(i, j));
        }
      }
      var projectedImage = new Image2D();
      projectedImage.setData(projectedArray.data, width, height, 1);
      this._output[0] = projectedImage;
    }
  }]);
  return ComponentProjectionImage2DFilter;
}(Filter);

/*
 * Author   Armin Taheri - https://github.com/ArminTaheri
 * License  MIT
 * Link     https://github.com/Pixpipe/pixpipejs
 * Lab      MCIN - Montreal Neurological Institute
 */

function validateInputs(inputImages) {
  var widths = inputImages.map(function (i) {
    return i.getMetadata('width');
  });
  var widthsEqual = widths.reduce(function (eq, w) {
    return eq && w === widths[0];
  }, true);
  if (!widthsEqual) {
    return false;
  }
  var heights = inputImages.map(function (i) {
    return i.getMetadata('height');
  });
  var heightsEqual = heights.reduce(function (eq, h) {
    return eq && h === heights[0];
  }, true);
  if (!heightsEqual) {
    return false;
  }
  var types = inputImages.map(function (i) {
    return i.getData().constructor;
  });
  var typesEqual = types.reduce(function (eq, t) {
    return eq && t === types[0];
  }, true);
  if (!typesEqual) {
    return false;
  }
  return true;
}

var ComponentMergeImage2DFilter = function (_Filter) {
  inherits(ComponentMergeImage2DFilter, _Filter);

  function ComponentMergeImage2DFilter() {
    classCallCheck(this, ComponentMergeImage2DFilter);

    var _this = possibleConstructorReturn(this, (ComponentMergeImage2DFilter.__proto__ || Object.getPrototypeOf(ComponentMergeImage2DFilter)).call(this));

    _this.addInputValidator('ALL', Image2D);
    return _this;
  }

  createClass(ComponentMergeImage2DFilter, [{
    key: '_run',
    value: function _run() {
      var _this2 = this;

      if (this.getNumberOfInputs() < 2) {
        console.warn('A filter of type ComponentMergeImage2DFilter needs 2 or more inputs.');
        return;
      }
      if (!this.hasValidInput()) {
        console.warn("A filter of type ComponentMergeImage2DFilter requires inputs of Image2D.");
        return;
      }
      var inputImages = this.getInputCategories().map(function (cat) {
        return _this2._getInput(cat);
      });
      if (!validateInputs(inputImages)) {
        console.warn('A filter of type ComponentMergeImage2DFilter requires inputs to be the same dimensions and array type');
        return;
      }
      var width = inputImages[0].getMetadata('width');
      var height = inputImages[0].getMetadata('height');
      var ncpps = inputImages.map(function (i) {
        return i.getMetadata('ncpp');
      });
      var totalncpp = ncpps.reduce(function (x, y) {
        return x + y;
      });
      var type = ndarray(inputImages[0].getData()).dtype;
      var merged = zeros([width, height, totalncpp], type);

      var ncppoffset = 0;
      inputImages.forEach(function (image, index) {
        var ncpp = image.getMetadata('ncpp');
        var img = ndarray(image.getData(), [width, height, ncpp]);
        for (var i = 0; i < width; i++) {
          for (var j = 0; j < height; j++) {
            for (var k = 0; k < ncpp; k++) {
              merged.set(i, j, ncppoffset + k, img.get(i, j, k));
            }
          }
        }
        ncppoffset += ncpp;
      });
      this._output[0] = new Image2D();
      this._output[0].setData(merged.data, width, height, totalncpp);
    }
  }]);
  return ComponentMergeImage2DFilter;
}(Filter);

"use strict";

function unique_pred(list, compare) {
  var ptr = 1,
      len = list.length,
      a = list[0],
      b = list[0];
  for (var i = 1; i < len; ++i) {
    b = a;
    a = list[i];
    if (compare(a, b)) {
      if (i === ptr) {
        ptr++;
        continue;
      }
      list[ptr++] = a;
    }
  }
  list.length = ptr;
  return list;
}

function unique_eq(list) {
  var ptr = 1,
      len = list.length,
      a = list[0],
      b = list[0];
  for (var i = 1; i < len; ++i, b = a) {
    b = a;
    a = list[i];
    if (a !== b) {
      if (i === ptr) {
        ptr++;
        continue;
      }
      list[ptr++] = a;
    }
  }
  list.length = ptr;
  return list;
}

function unique(list, compare, sorted) {
  if (list.length === 0) {
    return list;
  }
  if (compare) {
    if (!sorted) {
      list.sort(compare);
    }
    return unique_pred(list, compare);
  }
  if (!sorted) {
    list.sort();
  }
  return unique_eq(list);
}

var uniq = unique;

"use strict";

// This function generates very simple loops analogous to how you typically traverse arrays (the outermost loop corresponds to the slowest changing index, the innermost loop to the fastest changing index)
// TODO: If two arrays have the same strides (and offsets) there is potential for decreasing the number of "pointers" and related variables. The drawback is that the type signature would become more specific and that there would thus be less potential for caching, but it might still be worth it, especially when dealing with large numbers of arguments.
function innerFill(order, proc, body) {
  var dimension = order.length,
      nargs = proc.arrayArgs.length,
      has_index = proc.indexArgs.length > 0,
      code = [],
      vars = [],
      idx = 0,
      pidx = 0,
      i,
      j;
  for (i = 0; i < dimension; ++i) {
    // Iteration variables
    vars.push(["i", i, "=0"].join(""));
  }
  //Compute scan deltas
  for (j = 0; j < nargs; ++j) {
    for (i = 0; i < dimension; ++i) {
      pidx = idx;
      idx = order[i];
      if (i === 0) {
        // The innermost/fastest dimension's delta is simply its stride
        vars.push(["d", j, "s", i, "=t", j, "p", idx].join(""));
      } else {
        // For other dimensions the delta is basically the stride minus something which essentially "rewinds" the previous (more inner) dimension
        vars.push(["d", j, "s", i, "=(t", j, "p", idx, "-s", pidx, "*t", j, "p", pidx, ")"].join(""));
      }
    }
  }
  if (vars.length > 0) {
    code.push("var " + vars.join(","));
  }
  //Scan loop
  for (i = dimension - 1; i >= 0; --i) {
    // Start at largest stride and work your way inwards
    idx = order[i];
    code.push(["for(i", i, "=0;i", i, "<s", idx, ";++i", i, "){"].join(""));
  }
  //Push body of inner loop
  code.push(body);
  //Advance scan pointers
  for (i = 0; i < dimension; ++i) {
    pidx = idx;
    idx = order[i];
    for (j = 0; j < nargs; ++j) {
      code.push(["p", j, "+=d", j, "s", i].join(""));
    }
    if (has_index) {
      if (i > 0) {
        code.push(["index[", pidx, "]-=s", pidx].join(""));
      }
      code.push(["++index[", idx, "]"].join(""));
    }
    code.push("}");
  }
  return code.join("\n");
}

// Generate "outer" loops that loop over blocks of data, applying "inner" loops to the blocks by manipulating the local variables in such a way that the inner loop only "sees" the current block.
// TODO: If this is used, then the previous declaration (done by generateCwiseOp) of s* is essentially unnecessary.
//       I believe the s* are not used elsewhere (in particular, I don't think they're used in the pre/post parts and "shape" is defined independently), so it would be possible to make defining the s* dependent on what loop method is being used.
function outerFill(matched, order, proc, body) {
  var dimension = order.length,
      nargs = proc.arrayArgs.length,
      blockSize = proc.blockSize,
      has_index = proc.indexArgs.length > 0,
      code = [];
  for (var i = 0; i < nargs; ++i) {
    code.push(["var offset", i, "=p", i].join(""));
  }
  //Generate loops for unmatched dimensions
  // The order in which these dimensions are traversed is fairly arbitrary (from small stride to large stride, for the first argument)
  // TODO: It would be nice if the order in which these loops are placed would also be somehow "optimal" (at the very least we should check that it really doesn't hurt us if they're not).
  for (var i = matched; i < dimension; ++i) {
    code.push(["for(var j" + i + "=SS[", order[i], "]|0;j", i, ">0;){"].join("")); // Iterate back to front
    code.push(["if(j", i, "<", blockSize, "){"].join("")); // Either decrease j by blockSize (s = blockSize), or set it to zero (after setting s = j).
    code.push(["s", order[i], "=j", i].join(""));
    code.push(["j", i, "=0"].join(""));
    code.push(["}else{s", order[i], "=", blockSize].join(""));
    code.push(["j", i, "-=", blockSize, "}"].join(""));
    if (has_index) {
      code.push(["index[", order[i], "]=j", i].join(""));
    }
  }
  for (var i = 0; i < nargs; ++i) {
    var indexStr = ["offset" + i];
    for (var j = matched; j < dimension; ++j) {
      indexStr.push(["j", j, "*t", i, "p", order[j]].join(""));
    }
    code.push(["p", i, "=(", indexStr.join("+"), ")"].join(""));
  }
  code.push(innerFill(order, proc, body));
  for (var i = matched; i < dimension; ++i) {
    code.push("}");
  }
  return code.join("\n");
}

//Count the number of compatible inner orders
// This is the length of the longest common prefix of the arrays in orders.
// Each array in orders lists the dimensions of the correspond ndarray in order of increasing stride.
// This is thus the maximum number of dimensions that can be efficiently traversed by simple nested loops for all arrays.
function countMatches(orders) {
  var matched = 0,
      dimension = orders[0].length;
  while (matched < dimension) {
    for (var j = 1; j < orders.length; ++j) {
      if (orders[j][matched] !== orders[0][matched]) {
        return matched;
      }
    }
    ++matched;
  }
  return matched;
}

//Processes a block according to the given data types
// Replaces variable names by different ones, either "local" ones (that are then ferried in and out of the given array) or ones matching the arguments that the function performing the ultimate loop will accept.
function processBlock(block, proc, dtypes) {
  var code = block.body;
  var pre = [];
  var post = [];
  for (var i = 0; i < block.args.length; ++i) {
    var carg = block.args[i];
    if (carg.count <= 0) {
      continue;
    }
    var re = new RegExp(carg.name, "g");
    var ptrStr = "";
    var arrNum = proc.arrayArgs.indexOf(i);
    switch (proc.argTypes[i]) {
      case "offset":
        var offArgIndex = proc.offsetArgIndex.indexOf(i);
        var offArg = proc.offsetArgs[offArgIndex];
        arrNum = offArg.array;
        ptrStr = "+q" + offArgIndex; // Adds offset to the "pointer" in the array
      case "array":
        ptrStr = "p" + arrNum + ptrStr;
        var localStr = "l" + i;
        var arrStr = "a" + arrNum;
        if (proc.arrayBlockIndices[arrNum] === 0) {
          // Argument to body is just a single value from this array
          if (carg.count === 1) {
            // Argument/array used only once(?)
            if (dtypes[arrNum] === "generic") {
              if (carg.lvalue) {
                pre.push(["var ", localStr, "=", arrStr, ".get(", ptrStr, ")"].join("")); // Is this necessary if the argument is ONLY used as an lvalue? (keep in mind that we can have a += something, so we would actually need to check carg.rvalue)
                code = code.replace(re, localStr);
                post.push([arrStr, ".set(", ptrStr, ",", localStr, ")"].join(""));
              } else {
                code = code.replace(re, [arrStr, ".get(", ptrStr, ")"].join(""));
              }
            } else {
              code = code.replace(re, [arrStr, "[", ptrStr, "]"].join(""));
            }
          } else if (dtypes[arrNum] === "generic") {
            pre.push(["var ", localStr, "=", arrStr, ".get(", ptrStr, ")"].join("")); // TODO: Could we optimize by checking for carg.rvalue?
            code = code.replace(re, localStr);
            if (carg.lvalue) {
              post.push([arrStr, ".set(", ptrStr, ",", localStr, ")"].join(""));
            }
          } else {
            pre.push(["var ", localStr, "=", arrStr, "[", ptrStr, "]"].join("")); // TODO: Could we optimize by checking for carg.rvalue?
            code = code.replace(re, localStr);
            if (carg.lvalue) {
              post.push([arrStr, "[", ptrStr, "]=", localStr].join(""));
            }
          }
        } else {
          // Argument to body is a "block"
          var reStrArr = [carg.name],
              ptrStrArr = [ptrStr];
          for (var j = 0; j < Math.abs(proc.arrayBlockIndices[arrNum]); j++) {
            reStrArr.push("\\s*\\[([^\\]]+)\\]");
            ptrStrArr.push("$" + (j + 1) + "*t" + arrNum + "b" + j); // Matched index times stride
          }
          re = new RegExp(reStrArr.join(""), "g");
          ptrStr = ptrStrArr.join("+");
          if (dtypes[arrNum] === "generic") {
            /*if(carg.lvalue) {
              pre.push(["var ", localStr, "=", arrStr, ".get(", ptrStr, ")"].join("")) // Is this necessary if the argument is ONLY used as an lvalue? (keep in mind that we can have a += something, so we would actually need to check carg.rvalue)
              code = code.replace(re, localStr)
              post.push([arrStr, ".set(", ptrStr, ",", localStr,")"].join(""))
            } else {
              code = code.replace(re, [arrStr, ".get(", ptrStr, ")"].join(""))
            }*/
            throw new Error("cwise: Generic arrays not supported in combination with blocks!");
          } else {
            // This does not produce any local variables, even if variables are used multiple times. It would be possible to do so, but it would complicate things quite a bit.
            code = code.replace(re, [arrStr, "[", ptrStr, "]"].join(""));
          }
        }
        break;
      case "scalar":
        code = code.replace(re, "Y" + proc.scalarArgs.indexOf(i));
        break;
      case "index":
        code = code.replace(re, "index");
        break;
      case "shape":
        code = code.replace(re, "shape");
        break;
    }
  }
  return [pre.join("\n"), code, post.join("\n")].join("\n").trim();
}

function typeSummary(dtypes) {
  var summary = new Array(dtypes.length);
  var allEqual = true;
  for (var i = 0; i < dtypes.length; ++i) {
    var t = dtypes[i];
    var digits = t.match(/\d+/);
    if (!digits) {
      digits = "";
    } else {
      digits = digits[0];
    }
    if (t.charAt(0) === 0) {
      summary[i] = "u" + t.charAt(1) + digits;
    } else {
      summary[i] = t.charAt(0) + digits;
    }
    if (i > 0) {
      allEqual = allEqual && summary[i] === summary[i - 1];
    }
  }
  if (allEqual) {
    return summary[0];
  }
  return summary.join("");
}

//Generates a cwise operator
function generateCWiseOp(proc, typesig) {

  //Compute dimension
  // Arrays get put first in typesig, and there are two entries per array (dtype and order), so this gets the number of dimensions in the first array arg.
  var dimension = typesig[1].length - Math.abs(proc.arrayBlockIndices[0]) | 0;
  var orders = new Array(proc.arrayArgs.length);
  var dtypes = new Array(proc.arrayArgs.length);
  for (var i = 0; i < proc.arrayArgs.length; ++i) {
    dtypes[i] = typesig[2 * i];
    orders[i] = typesig[2 * i + 1];
  }

  //Determine where block and loop indices start and end
  var blockBegin = [],
      blockEnd = []; // These indices are exposed as blocks
  var loopBegin = [],
      loopEnd = []; // These indices are iterated over
  var loopOrders = []; // orders restricted to the loop indices
  for (var i = 0; i < proc.arrayArgs.length; ++i) {
    if (proc.arrayBlockIndices[i] < 0) {
      loopBegin.push(0);
      loopEnd.push(dimension);
      blockBegin.push(dimension);
      blockEnd.push(dimension + proc.arrayBlockIndices[i]);
    } else {
      loopBegin.push(proc.arrayBlockIndices[i]); // Non-negative
      loopEnd.push(proc.arrayBlockIndices[i] + dimension);
      blockBegin.push(0);
      blockEnd.push(proc.arrayBlockIndices[i]);
    }
    var newOrder = [];
    for (var j = 0; j < orders[i].length; j++) {
      if (loopBegin[i] <= orders[i][j] && orders[i][j] < loopEnd[i]) {
        newOrder.push(orders[i][j] - loopBegin[i]); // If this is a loop index, put it in newOrder, subtracting loopBegin, to make sure that all loopOrders are using a common set of indices.
      }
    }
    loopOrders.push(newOrder);
  }

  //First create arguments for procedure
  var arglist = ["SS"]; // SS is the overall shape over which we iterate
  var code = ["'use strict'"];
  var vars = [];

  for (var j = 0; j < dimension; ++j) {
    vars.push(["s", j, "=SS[", j, "]"].join("")); // The limits for each dimension.
  }
  for (var i = 0; i < proc.arrayArgs.length; ++i) {
    arglist.push("a" + i); // Actual data array
    arglist.push("t" + i); // Strides
    arglist.push("p" + i); // Offset in the array at which the data starts (also used for iterating over the data)

    for (var j = 0; j < dimension; ++j) {
      // Unpack the strides into vars for looping
      vars.push(["t", i, "p", j, "=t", i, "[", loopBegin[i] + j, "]"].join(""));
    }

    for (var j = 0; j < Math.abs(proc.arrayBlockIndices[i]); ++j) {
      // Unpack the strides into vars for block iteration
      vars.push(["t", i, "b", j, "=t", i, "[", blockBegin[i] + j, "]"].join(""));
    }
  }
  for (var i = 0; i < proc.scalarArgs.length; ++i) {
    arglist.push("Y" + i);
  }
  if (proc.shapeArgs.length > 0) {
    vars.push("shape=SS.slice(0)"); // Makes the shape over which we iterate available to the user defined functions (so you can use width/height for example)
  }
  if (proc.indexArgs.length > 0) {
    // Prepare an array to keep track of the (logical) indices, initialized to dimension zeroes.
    var zeros = new Array(dimension);
    for (var i = 0; i < dimension; ++i) {
      zeros[i] = "0";
    }
    vars.push(["index=[", zeros.join(","), "]"].join(""));
  }
  for (var i = 0; i < proc.offsetArgs.length; ++i) {
    // Offset arguments used for stencil operations
    var off_arg = proc.offsetArgs[i];
    var init_string = [];
    for (var j = 0; j < off_arg.offset.length; ++j) {
      if (off_arg.offset[j] === 0) {
        continue;
      } else if (off_arg.offset[j] === 1) {
        init_string.push(["t", off_arg.array, "p", j].join(""));
      } else {
        init_string.push([off_arg.offset[j], "*t", off_arg.array, "p", j].join(""));
      }
    }
    if (init_string.length === 0) {
      vars.push("q" + i + "=0");
    } else {
      vars.push(["q", i, "=", init_string.join("+")].join(""));
    }
  }

  //Prepare this variables
  var thisVars = uniq([].concat(proc.pre.thisVars).concat(proc.body.thisVars).concat(proc.post.thisVars));
  vars = vars.concat(thisVars);
  if (vars.length > 0) {
    code.push("var " + vars.join(","));
  }
  for (var i = 0; i < proc.arrayArgs.length; ++i) {
    code.push("p" + i + "|=0");
  }

  //Inline prelude
  if (proc.pre.body.length > 3) {
    code.push(processBlock(proc.pre, proc, dtypes));
  }

  //Process body
  var body = processBlock(proc.body, proc, dtypes);
  var matched = countMatches(loopOrders);
  if (matched < dimension) {
    code.push(outerFill(matched, loopOrders[0], proc, body)); // TODO: Rather than passing loopOrders[0], it might be interesting to look at passing an order that represents the majority of the arguments for example.
  } else {
    code.push(innerFill(loopOrders[0], proc, body));
  }

  //Inline epilog
  if (proc.post.body.length > 3) {
    code.push(processBlock(proc.post, proc, dtypes));
  }

  if (proc.debug) {
    console.log("-----Generated cwise routine for ", typesig, ":\n" + code.join("\n") + "\n----------");
  }

  var loopName = [proc.funcName || "unnamed", "_cwise_loop_", orders[0].join("s"), "m", matched, typeSummary(dtypes)].join("");
  var f = new Function(["function ", loopName, "(", arglist.join(","), "){", code.join("\n"), "} return ", loopName].join(""));
  return f();
}
var compile = generateCWiseOp;

"use strict";

// The function below is called when constructing a cwise function object, and does the following:
// A function object is constructed which accepts as argument a compilation function and returns another function.
// It is this other function that is eventually returned by createThunk, and this function is the one that actually
// checks whether a certain pattern of arguments has already been used before and compiles new loops as needed.
// The compilation passed to the first function object is used for compiling new functions.
// Once this function object is created, it is called with compile as argument, where the first argument of compile
// is bound to "proc" (essentially containing a preprocessed version of the user arguments to cwise).
// So createThunk roughly works like this:
// function createThunk(proc) {
//   var thunk = function(compileBound) {
//     var CACHED = {}
//     return function(arrays and scalars) {
//       if (dtype and order of arrays in CACHED) {
//         var func = CACHED[dtype and order of arrays]
//       } else {
//         var func = CACHED[dtype and order of arrays] = compileBound(dtype and order of arrays)
//       }
//       return func(arrays and scalars)
//     }
//   }
//   return thunk(compile.bind1(proc))
// }


function createThunk(proc) {
  var code = ["'use strict'", "var CACHED={}"];
  var vars = [];
  var thunkName = proc.funcName + "_cwise_thunk";

  //Build thunk
  code.push(["return function ", thunkName, "(", proc.shimArgs.join(","), "){"].join(""));
  var typesig = [];
  var string_typesig = [];
  var proc_args = [["array", proc.arrayArgs[0], ".shape.slice(", // Slice shape so that we only retain the shape over which we iterate (which gets passed to the cwise operator as SS).
  Math.max(0, proc.arrayBlockIndices[0]), proc.arrayBlockIndices[0] < 0 ? "," + proc.arrayBlockIndices[0] + ")" : ")"].join("")];
  var shapeLengthConditions = [],
      shapeConditions = [];
  // Process array arguments
  for (var i = 0; i < proc.arrayArgs.length; ++i) {
    var j = proc.arrayArgs[i];
    vars.push(["t", j, "=array", j, ".dtype,", "r", j, "=array", j, ".order"].join(""));
    typesig.push("t" + j);
    typesig.push("r" + j);
    string_typesig.push("t" + j);
    string_typesig.push("r" + j + ".join()");
    proc_args.push("array" + j + ".data");
    proc_args.push("array" + j + ".stride");
    proc_args.push("array" + j + ".offset|0");
    if (i > 0) {
      // Gather conditions to check for shape equality (ignoring block indices)
      shapeLengthConditions.push("array" + proc.arrayArgs[0] + ".shape.length===array" + j + ".shape.length+" + (Math.abs(proc.arrayBlockIndices[0]) - Math.abs(proc.arrayBlockIndices[i])));
      shapeConditions.push("array" + proc.arrayArgs[0] + ".shape[shapeIndex+" + Math.max(0, proc.arrayBlockIndices[0]) + "]===array" + j + ".shape[shapeIndex+" + Math.max(0, proc.arrayBlockIndices[i]) + "]");
    }
  }
  // Check for shape equality
  if (proc.arrayArgs.length > 1) {
    code.push("if (!(" + shapeLengthConditions.join(" && ") + ")) throw new Error('cwise: Arrays do not all have the same dimensionality!')");
    code.push("for(var shapeIndex=array" + proc.arrayArgs[0] + ".shape.length-" + Math.abs(proc.arrayBlockIndices[0]) + "; shapeIndex-->0;) {");
    code.push("if (!(" + shapeConditions.join(" && ") + ")) throw new Error('cwise: Arrays do not all have the same shape!')");
    code.push("}");
  }
  // Process scalar arguments
  for (var i = 0; i < proc.scalarArgs.length; ++i) {
    proc_args.push("scalar" + proc.scalarArgs[i]);
  }
  // Check for cached function (and if not present, generate it)
  vars.push(["type=[", string_typesig.join(","), "].join()"].join(""));
  vars.push("proc=CACHED[type]");
  code.push("var " + vars.join(","));

  code.push(["if(!proc){", "CACHED[type]=proc=compile([", typesig.join(","), "])}", "return proc(", proc_args.join(","), ")}"].join(""));

  if (proc.debug) {
    console.log("-----Generated thunk:\n" + code.join("\n") + "\n----------");
  }

  //Compile thunk
  var thunk = new Function("compile", code.join("\n"));
  return thunk(compile.bind(undefined, proc));
}

var thunk = createThunk;

"use strict";

function Procedure() {
  this.argTypes = [];
  this.shimArgs = [];
  this.arrayArgs = [];
  this.arrayBlockIndices = [];
  this.scalarArgs = [];
  this.offsetArgs = [];
  this.offsetArgIndex = [];
  this.indexArgs = [];
  this.shapeArgs = [];
  this.funcName = "";
  this.pre = null;
  this.body = null;
  this.post = null;
  this.debug = false;
}

function compileCwise(user_args) {
  //Create procedure
  var proc = new Procedure();

  //Parse blocks
  proc.pre = user_args.pre;
  proc.body = user_args.body;
  proc.post = user_args.post;

  //Parse arguments
  var proc_args = user_args.args.slice(0);
  proc.argTypes = proc_args;
  for (var i = 0; i < proc_args.length; ++i) {
    var arg_type = proc_args[i];
    if (arg_type === "array" || (typeof arg_type === 'undefined' ? 'undefined' : _typeof(arg_type)) === "object" && arg_type.blockIndices) {
      proc.argTypes[i] = "array";
      proc.arrayArgs.push(i);
      proc.arrayBlockIndices.push(arg_type.blockIndices ? arg_type.blockIndices : 0);
      proc.shimArgs.push("array" + i);
      if (i < proc.pre.args.length && proc.pre.args[i].count > 0) {
        throw new Error("cwise: pre() block may not reference array args");
      }
      if (i < proc.post.args.length && proc.post.args[i].count > 0) {
        throw new Error("cwise: post() block may not reference array args");
      }
    } else if (arg_type === "scalar") {
      proc.scalarArgs.push(i);
      proc.shimArgs.push("scalar" + i);
    } else if (arg_type === "index") {
      proc.indexArgs.push(i);
      if (i < proc.pre.args.length && proc.pre.args[i].count > 0) {
        throw new Error("cwise: pre() block may not reference array index");
      }
      if (i < proc.body.args.length && proc.body.args[i].lvalue) {
        throw new Error("cwise: body() block may not write to array index");
      }
      if (i < proc.post.args.length && proc.post.args[i].count > 0) {
        throw new Error("cwise: post() block may not reference array index");
      }
    } else if (arg_type === "shape") {
      proc.shapeArgs.push(i);
      if (i < proc.pre.args.length && proc.pre.args[i].lvalue) {
        throw new Error("cwise: pre() block may not write to array shape");
      }
      if (i < proc.body.args.length && proc.body.args[i].lvalue) {
        throw new Error("cwise: body() block may not write to array shape");
      }
      if (i < proc.post.args.length && proc.post.args[i].lvalue) {
        throw new Error("cwise: post() block may not write to array shape");
      }
    } else if ((typeof arg_type === 'undefined' ? 'undefined' : _typeof(arg_type)) === "object" && arg_type.offset) {
      proc.argTypes[i] = "offset";
      proc.offsetArgs.push({ array: arg_type.array, offset: arg_type.offset });
      proc.offsetArgIndex.push(i);
    } else {
      throw new Error("cwise: Unknown argument type " + proc_args[i]);
    }
  }

  //Make sure at least one array argument was specified
  if (proc.arrayArgs.length <= 0) {
    throw new Error("cwise: No array arguments specified");
  }

  //Make sure arguments are correct
  if (proc.pre.args.length > proc_args.length) {
    throw new Error("cwise: Too many arguments in pre() block");
  }
  if (proc.body.args.length > proc_args.length) {
    throw new Error("cwise: Too many arguments in body() block");
  }
  if (proc.post.args.length > proc_args.length) {
    throw new Error("cwise: Too many arguments in post() block");
  }

  //Check debug flag
  proc.debug = !!user_args.printCode || !!user_args.debug;

  //Retrieve name
  proc.funcName = user_args.funcName || "cwise";

  //Read in block size
  proc.blockSize = user_args.blockSize || 64;

  return thunk(proc);
}

var compiler = compileCwise;

var ndarrayOps = createCommonjsModule$$1(function (module, exports) {
  "use strict";

  var EmptyProc = {
    body: "",
    args: [],
    thisVars: [],
    localVars: []
  };

  function fixup(x) {
    if (!x) {
      return EmptyProc;
    }
    for (var i = 0; i < x.args.length; ++i) {
      var a = x.args[i];
      if (i === 0) {
        x.args[i] = { name: a, lvalue: true, rvalue: !!x.rvalue, count: x.count || 1 };
      } else {
        x.args[i] = { name: a, lvalue: false, rvalue: true, count: 1 };
      }
    }
    if (!x.thisVars) {
      x.thisVars = [];
    }
    if (!x.localVars) {
      x.localVars = [];
    }
    return x;
  }

  function pcompile(user_args) {
    return compiler({
      args: user_args.args,
      pre: fixup(user_args.pre),
      body: fixup(user_args.body),
      post: fixup(user_args.proc),
      funcName: user_args.funcName
    });
  }

  function makeOp(user_args) {
    var args = [];
    for (var i = 0; i < user_args.args.length; ++i) {
      args.push("a" + i);
    }
    var wrapper = new Function("P", ["return function ", user_args.funcName, "_ndarrayops(", args.join(","), ") {P(", args.join(","), ");return a0}"].join(""));
    return wrapper(pcompile(user_args));
  }

  var assign_ops = {
    add: "+",
    sub: "-",
    mul: "*",
    div: "/",
    mod: "%",
    band: "&",
    bor: "|",
    bxor: "^",
    lshift: "<<",
    rshift: ">>",
    rrshift: ">>>"
  };(function () {
    for (var id in assign_ops) {
      var op = assign_ops[id];
      exports[id] = makeOp({
        args: ["array", "array", "array"],
        body: { args: ["a", "b", "c"],
          body: "a=b" + op + "c" },
        funcName: id
      });
      exports[id + "eq"] = makeOp({
        args: ["array", "array"],
        body: { args: ["a", "b"],
          body: "a" + op + "=b" },
        rvalue: true,
        funcName: id + "eq"
      });
      exports[id + "s"] = makeOp({
        args: ["array", "array", "scalar"],
        body: { args: ["a", "b", "s"],
          body: "a=b" + op + "s" },
        funcName: id + "s"
      });
      exports[id + "seq"] = makeOp({
        args: ["array", "scalar"],
        body: { args: ["a", "s"],
          body: "a" + op + "=s" },
        rvalue: true,
        funcName: id + "seq"
      });
    }
  })();

  var unary_ops = {
    not: "!",
    bnot: "~",
    neg: "-",
    recip: "1.0/"
  };(function () {
    for (var id in unary_ops) {
      var op = unary_ops[id];
      exports[id] = makeOp({
        args: ["array", "array"],
        body: { args: ["a", "b"],
          body: "a=" + op + "b" },
        funcName: id
      });
      exports[id + "eq"] = makeOp({
        args: ["array"],
        body: { args: ["a"],
          body: "a=" + op + "a" },
        rvalue: true,
        count: 2,
        funcName: id + "eq"
      });
    }
  })();

  var binary_ops = {
    and: "&&",
    or: "||",
    eq: "===",
    neq: "!==",
    lt: "<",
    gt: ">",
    leq: "<=",
    geq: ">="
  };(function () {
    for (var id in binary_ops) {
      var op = binary_ops[id];
      exports[id] = makeOp({
        args: ["array", "array", "array"],
        body: { args: ["a", "b", "c"],
          body: "a=b" + op + "c" },
        funcName: id
      });
      exports[id + "s"] = makeOp({
        args: ["array", "array", "scalar"],
        body: { args: ["a", "b", "s"],
          body: "a=b" + op + "s" },
        funcName: id + "s"
      });
      exports[id + "eq"] = makeOp({
        args: ["array", "array"],
        body: { args: ["a", "b"],
          body: "a=a" + op + "b" },
        rvalue: true,
        count: 2,
        funcName: id + "eq"
      });
      exports[id + "seq"] = makeOp({
        args: ["array", "scalar"],
        body: { args: ["a", "s"],
          body: "a=a" + op + "s" },
        rvalue: true,
        count: 2,
        funcName: id + "seq"
      });
    }
  })();

  var math_unary = ["abs", "acos", "asin", "atan", "ceil", "cos", "exp", "floor", "log", "round", "sin", "sqrt", "tan"];(function () {
    for (var i = 0; i < math_unary.length; ++i) {
      var f = math_unary[i];
      exports[f] = makeOp({
        args: ["array", "array"],
        pre: { args: [], body: "this_f=Math." + f, thisVars: ["this_f"] },
        body: { args: ["a", "b"], body: "a=this_f(b)", thisVars: ["this_f"] },
        funcName: f
      });
      exports[f + "eq"] = makeOp({
        args: ["array"],
        pre: { args: [], body: "this_f=Math." + f, thisVars: ["this_f"] },
        body: { args: ["a"], body: "a=this_f(a)", thisVars: ["this_f"] },
        rvalue: true,
        count: 2,
        funcName: f + "eq"
      });
    }
  })();

  var math_comm = ["max", "min", "atan2", "pow"];(function () {
    for (var i = 0; i < math_comm.length; ++i) {
      var f = math_comm[i];
      exports[f] = makeOp({
        args: ["array", "array", "array"],
        pre: { args: [], body: "this_f=Math." + f, thisVars: ["this_f"] },
        body: { args: ["a", "b", "c"], body: "a=this_f(b,c)", thisVars: ["this_f"] },
        funcName: f
      });
      exports[f + "s"] = makeOp({
        args: ["array", "array", "scalar"],
        pre: { args: [], body: "this_f=Math." + f, thisVars: ["this_f"] },
        body: { args: ["a", "b", "c"], body: "a=this_f(b,c)", thisVars: ["this_f"] },
        funcName: f + "s"
      });
      exports[f + "eq"] = makeOp({ args: ["array", "array"],
        pre: { args: [], body: "this_f=Math." + f, thisVars: ["this_f"] },
        body: { args: ["a", "b"], body: "a=this_f(a,b)", thisVars: ["this_f"] },
        rvalue: true,
        count: 2,
        funcName: f + "eq"
      });
      exports[f + "seq"] = makeOp({ args: ["array", "scalar"],
        pre: { args: [], body: "this_f=Math." + f, thisVars: ["this_f"] },
        body: { args: ["a", "b"], body: "a=this_f(a,b)", thisVars: ["this_f"] },
        rvalue: true,
        count: 2,
        funcName: f + "seq"
      });
    }
  })();

  var math_noncomm = ["atan2", "pow"];(function () {
    for (var i = 0; i < math_noncomm.length; ++i) {
      var f = math_noncomm[i];
      exports[f + "op"] = makeOp({
        args: ["array", "array", "array"],
        pre: { args: [], body: "this_f=Math." + f, thisVars: ["this_f"] },
        body: { args: ["a", "b", "c"], body: "a=this_f(c,b)", thisVars: ["this_f"] },
        funcName: f + "op"
      });
      exports[f + "ops"] = makeOp({
        args: ["array", "array", "scalar"],
        pre: { args: [], body: "this_f=Math." + f, thisVars: ["this_f"] },
        body: { args: ["a", "b", "c"], body: "a=this_f(c,b)", thisVars: ["this_f"] },
        funcName: f + "ops"
      });
      exports[f + "opeq"] = makeOp({ args: ["array", "array"],
        pre: { args: [], body: "this_f=Math." + f, thisVars: ["this_f"] },
        body: { args: ["a", "b"], body: "a=this_f(b,a)", thisVars: ["this_f"] },
        rvalue: true,
        count: 2,
        funcName: f + "opeq"
      });
      exports[f + "opseq"] = makeOp({ args: ["array", "scalar"],
        pre: { args: [], body: "this_f=Math." + f, thisVars: ["this_f"] },
        body: { args: ["a", "b"], body: "a=this_f(b,a)", thisVars: ["this_f"] },
        rvalue: true,
        count: 2,
        funcName: f + "opseq"
      });
    }
  })();

  exports.any = compiler({
    args: ["array"],
    pre: EmptyProc,
    body: { args: [{ name: "a", lvalue: false, rvalue: true, count: 1 }], body: "if(a){return true}", localVars: [], thisVars: [] },
    post: { args: [], localVars: [], thisVars: [], body: "return false" },
    funcName: "any"
  });

  exports.all = compiler({
    args: ["array"],
    pre: EmptyProc,
    body: { args: [{ name: "x", lvalue: false, rvalue: true, count: 1 }], body: "if(!x){return false}", localVars: [], thisVars: [] },
    post: { args: [], localVars: [], thisVars: [], body: "return true" },
    funcName: "all"
  });

  exports.sum = compiler({
    args: ["array"],
    pre: { args: [], localVars: [], thisVars: ["this_s"], body: "this_s=0" },
    body: { args: [{ name: "a", lvalue: false, rvalue: true, count: 1 }], body: "this_s+=a", localVars: [], thisVars: ["this_s"] },
    post: { args: [], localVars: [], thisVars: ["this_s"], body: "return this_s" },
    funcName: "sum"
  });

  exports.prod = compiler({
    args: ["array"],
    pre: { args: [], localVars: [], thisVars: ["this_s"], body: "this_s=1" },
    body: { args: [{ name: "a", lvalue: false, rvalue: true, count: 1 }], body: "this_s*=a", localVars: [], thisVars: ["this_s"] },
    post: { args: [], localVars: [], thisVars: ["this_s"], body: "return this_s" },
    funcName: "prod"
  });

  exports.norm2squared = compiler({
    args: ["array"],
    pre: { args: [], localVars: [], thisVars: ["this_s"], body: "this_s=0" },
    body: { args: [{ name: "a", lvalue: false, rvalue: true, count: 2 }], body: "this_s+=a*a", localVars: [], thisVars: ["this_s"] },
    post: { args: [], localVars: [], thisVars: ["this_s"], body: "return this_s" },
    funcName: "norm2squared"
  });

  exports.norm2 = compiler({
    args: ["array"],
    pre: { args: [], localVars: [], thisVars: ["this_s"], body: "this_s=0" },
    body: { args: [{ name: "a", lvalue: false, rvalue: true, count: 2 }], body: "this_s+=a*a", localVars: [], thisVars: ["this_s"] },
    post: { args: [], localVars: [], thisVars: ["this_s"], body: "return Math.sqrt(this_s)" },
    funcName: "norm2"
  });

  exports.norminf = compiler({
    args: ["array"],
    pre: { args: [], localVars: [], thisVars: ["this_s"], body: "this_s=0" },
    body: { args: [{ name: "a", lvalue: false, rvalue: true, count: 4 }], body: "if(-a>this_s){this_s=-a}else if(a>this_s){this_s=a}", localVars: [], thisVars: ["this_s"] },
    post: { args: [], localVars: [], thisVars: ["this_s"], body: "return this_s" },
    funcName: "norminf"
  });

  exports.norm1 = compiler({
    args: ["array"],
    pre: { args: [], localVars: [], thisVars: ["this_s"], body: "this_s=0" },
    body: { args: [{ name: "a", lvalue: false, rvalue: true, count: 3 }], body: "this_s+=a<0?-a:a", localVars: [], thisVars: ["this_s"] },
    post: { args: [], localVars: [], thisVars: ["this_s"], body: "return this_s" },
    funcName: "norm1"
  });

  exports.sup = compiler({
    args: ["array"],
    pre: { body: "this_h=-Infinity",
      args: [],
      thisVars: ["this_h"],
      localVars: [] },
    body: { body: "if(_inline_1_arg0_>this_h)this_h=_inline_1_arg0_",
      args: [{ "name": "_inline_1_arg0_", "lvalue": false, "rvalue": true, "count": 2 }],
      thisVars: ["this_h"],
      localVars: [] },
    post: { body: "return this_h",
      args: [],
      thisVars: ["this_h"],
      localVars: [] }
  });

  exports.inf = compiler({
    args: ["array"],
    pre: { body: "this_h=Infinity",
      args: [],
      thisVars: ["this_h"],
      localVars: [] },
    body: { body: "if(_inline_1_arg0_<this_h)this_h=_inline_1_arg0_",
      args: [{ "name": "_inline_1_arg0_", "lvalue": false, "rvalue": true, "count": 2 }],
      thisVars: ["this_h"],
      localVars: [] },
    post: { body: "return this_h",
      args: [],
      thisVars: ["this_h"],
      localVars: [] }
  });

  exports.argmin = compiler({
    args: ["index", "array", "shape"],
    pre: {
      body: "{this_v=Infinity;this_i=_inline_0_arg2_.slice(0)}",
      args: [{ name: "_inline_0_arg0_", lvalue: false, rvalue: false, count: 0 }, { name: "_inline_0_arg1_", lvalue: false, rvalue: false, count: 0 }, { name: "_inline_0_arg2_", lvalue: false, rvalue: true, count: 1 }],
      thisVars: ["this_i", "this_v"],
      localVars: [] },
    body: {
      body: "{if(_inline_1_arg1_<this_v){this_v=_inline_1_arg1_;for(var _inline_1_k=0;_inline_1_k<_inline_1_arg0_.length;++_inline_1_k){this_i[_inline_1_k]=_inline_1_arg0_[_inline_1_k]}}}",
      args: [{ name: "_inline_1_arg0_", lvalue: false, rvalue: true, count: 2 }, { name: "_inline_1_arg1_", lvalue: false, rvalue: true, count: 2 }],
      thisVars: ["this_i", "this_v"],
      localVars: ["_inline_1_k"] },
    post: {
      body: "{return this_i}",
      args: [],
      thisVars: ["this_i"],
      localVars: [] }
  });

  exports.argmax = compiler({
    args: ["index", "array", "shape"],
    pre: {
      body: "{this_v=-Infinity;this_i=_inline_0_arg2_.slice(0)}",
      args: [{ name: "_inline_0_arg0_", lvalue: false, rvalue: false, count: 0 }, { name: "_inline_0_arg1_", lvalue: false, rvalue: false, count: 0 }, { name: "_inline_0_arg2_", lvalue: false, rvalue: true, count: 1 }],
      thisVars: ["this_i", "this_v"],
      localVars: [] },
    body: {
      body: "{if(_inline_1_arg1_>this_v){this_v=_inline_1_arg1_;for(var _inline_1_k=0;_inline_1_k<_inline_1_arg0_.length;++_inline_1_k){this_i[_inline_1_k]=_inline_1_arg0_[_inline_1_k]}}}",
      args: [{ name: "_inline_1_arg0_", lvalue: false, rvalue: true, count: 2 }, { name: "_inline_1_arg1_", lvalue: false, rvalue: true, count: 2 }],
      thisVars: ["this_i", "this_v"],
      localVars: ["_inline_1_k"] },
    post: {
      body: "{return this_i}",
      args: [],
      thisVars: ["this_i"],
      localVars: [] }
  });

  exports.random = makeOp({
    args: ["array"],
    pre: { args: [], body: "this_f=Math.random", thisVars: ["this_f"] },
    body: { args: ["a"], body: "a=this_f()", thisVars: ["this_f"] },
    funcName: "random"
  });

  exports.assign = makeOp({
    args: ["array", "array"],
    body: { args: ["a", "b"], body: "a=b" },
    funcName: "assign" });

  exports.assigns = makeOp({
    args: ["array", "scalar"],
    body: { args: ["a", "b"], body: "a=b" },
    funcName: "assigns" });

  exports.equals = compiler({
    args: ["array", "array"],
    pre: EmptyProc,
    body: { args: [{ name: "x", lvalue: false, rvalue: true, count: 1 }, { name: "y", lvalue: false, rvalue: true, count: 1 }],
      body: "if(x!==y){return false}",
      localVars: [],
      thisVars: [] },
    post: { args: [], localVars: [], thisVars: [], body: "return true" },
    funcName: "equals"
  });
});

/**
 * Bit twiddling hacks for JavaScript.
 *
 * Author: Mikola Lysenko
 *
 * Ported from Stanford bit twiddling hack library:
 *    http://graphics.stanford.edu/~seander/bithacks.html
 */

"use strict";"use restrict";

//Number of bits in an integer

var INT_BITS = 32;

//Constants
var INT_BITS_1 = INT_BITS;
var INT_MAX = 0x7fffffff;
var INT_MIN = -1 << INT_BITS - 1;

//Returns -1, 0, +1 depending on sign of x
var sign = function sign(v) {
  return (v > 0) - (v < 0);
};

//Computes absolute value of integer
var abs = function abs(v) {
  var mask = v >> INT_BITS - 1;
  return (v ^ mask) - mask;
};

//Computes minimum of integers x and y
var min$3 = function min(x, y) {
  return y ^ (x ^ y) & -(x < y);
};

//Computes maximum of integers x and y
var max$3 = function max(x, y) {
  return x ^ (x ^ y) & -(x < y);
};

//Checks if a number is a power of two
var isPow2 = function isPow2(v) {
  return !(v & v - 1) && !!v;
};

//Computes log base 2 of v
var log2 = function log2(v) {
  var r, shift;
  r = (v > 0xFFFF) << 4;v >>>= r;
  shift = (v > 0xFF) << 3;v >>>= shift;r |= shift;
  shift = (v > 0xF) << 2;v >>>= shift;r |= shift;
  shift = (v > 0x3) << 1;v >>>= shift;r |= shift;
  return r | v >> 1;
};

//Computes log base 10 of v
var log10 = function log10(v) {
  return v >= 1000000000 ? 9 : v >= 100000000 ? 8 : v >= 10000000 ? 7 : v >= 1000000 ? 6 : v >= 100000 ? 5 : v >= 10000 ? 4 : v >= 1000 ? 3 : v >= 100 ? 2 : v >= 10 ? 1 : 0;
};

//Counts number of bits
var popCount = function popCount(v) {
  v = v - (v >>> 1 & 0x55555555);
  v = (v & 0x33333333) + (v >>> 2 & 0x33333333);
  return (v + (v >>> 4) & 0xF0F0F0F) * 0x1010101 >>> 24;
};

//Counts number of trailing zeros
function countTrailingZeros(v) {
  var c = 32;
  v &= -v;
  if (v) c--;
  if (v & 0x0000FFFF) c -= 16;
  if (v & 0x00FF00FF) c -= 8;
  if (v & 0x0F0F0F0F) c -= 4;
  if (v & 0x33333333) c -= 2;
  if (v & 0x55555555) c -= 1;
  return c;
}
var countTrailingZeros_1 = countTrailingZeros;

//Rounds to next power of 2
var nextPow2 = function nextPow2(v) {
  v += v === 0;
  --v;
  v |= v >>> 1;
  v |= v >>> 2;
  v |= v >>> 4;
  v |= v >>> 8;
  v |= v >>> 16;
  return v + 1;
};

//Rounds down to previous power of 2
var prevPow2 = function prevPow2(v) {
  v |= v >>> 1;
  v |= v >>> 2;
  v |= v >>> 4;
  v |= v >>> 8;
  v |= v >>> 16;
  return v - (v >>> 1);
};

//Computes parity of word
var parity = function parity(v) {
  v ^= v >>> 16;
  v ^= v >>> 8;
  v ^= v >>> 4;
  v &= 0xf;
  return 0x6996 >>> v & 1;
};

var REVERSE_TABLE = new Array(256);

(function (tab) {
  for (var i = 0; i < 256; ++i) {
    var v = i,
        r = i,
        s = 7;
    for (v >>>= 1; v; v >>>= 1) {
      r <<= 1;
      r |= v & 1;
      --s;
    }
    tab[i] = r << s & 0xff;
  }
})(REVERSE_TABLE);

//Reverse bits in a 32 bit word
var reverse = function reverse(v) {
  return REVERSE_TABLE[v & 0xff] << 24 | REVERSE_TABLE[v >>> 8 & 0xff] << 16 | REVERSE_TABLE[v >>> 16 & 0xff] << 8 | REVERSE_TABLE[v >>> 24 & 0xff];
};

//Interleave bits of 2 coordinates with 16 bits.  Useful for fast quadtree codes
var interleave2 = function interleave2(x, y) {
  x &= 0xFFFF;
  x = (x | x << 8) & 0x00FF00FF;
  x = (x | x << 4) & 0x0F0F0F0F;
  x = (x | x << 2) & 0x33333333;
  x = (x | x << 1) & 0x55555555;

  y &= 0xFFFF;
  y = (y | y << 8) & 0x00FF00FF;
  y = (y | y << 4) & 0x0F0F0F0F;
  y = (y | y << 2) & 0x33333333;
  y = (y | y << 1) & 0x55555555;

  return x | y << 1;
};

//Extracts the nth interleaved component
var deinterleave2 = function deinterleave2(v, n) {
  v = v >>> n & 0x55555555;
  v = (v | v >>> 1) & 0x33333333;
  v = (v | v >>> 2) & 0x0F0F0F0F;
  v = (v | v >>> 4) & 0x00FF00FF;
  v = (v | v >>> 16) & 0x000FFFF;
  return v << 16 >> 16;
};

//Interleave bits of 3 coordinates, each with 10 bits.  Useful for fast octree codes
var interleave3 = function interleave3(x, y, z) {
  x &= 0x3FF;
  x = (x | x << 16) & 4278190335;
  x = (x | x << 8) & 251719695;
  x = (x | x << 4) & 3272356035;
  x = (x | x << 2) & 1227133513;

  y &= 0x3FF;
  y = (y | y << 16) & 4278190335;
  y = (y | y << 8) & 251719695;
  y = (y | y << 4) & 3272356035;
  y = (y | y << 2) & 1227133513;
  x |= y << 1;

  z &= 0x3FF;
  z = (z | z << 16) & 4278190335;
  z = (z | z << 8) & 251719695;
  z = (z | z << 4) & 3272356035;
  z = (z | z << 2) & 1227133513;

  return x | z << 2;
};

//Extracts nth interleaved component of a 3-tuple
var deinterleave3 = function deinterleave3(v, n) {
  v = v >>> n & 1227133513;
  v = (v | v >>> 2) & 3272356035;
  v = (v | v >>> 4) & 251719695;
  v = (v | v >>> 8) & 4278190335;
  v = (v | v >>> 16) & 0x3FF;
  return v << 22 >> 22;
};

//Computes next combination in colexicographic order (this is mistakenly called nextPermutation on the bit twiddling hacks page)
var nextCombination = function nextCombination(v) {
  var t = v | v - 1;
  return t + 1 | (~t & -~t) - 1 >>> countTrailingZeros(v) + 1;
};

var twiddle = {
  INT_BITS: INT_BITS_1,
  INT_MAX: INT_MAX,
  INT_MIN: INT_MIN,
  sign: sign,
  abs: abs,
  min: min$3,
  max: max$3,
  isPow2: isPow2,
  log2: log2,
  log10: log10,
  popCount: popCount,
  countTrailingZeros: countTrailingZeros_1,
  nextPow2: nextPow2,
  prevPow2: prevPow2,
  parity: parity,
  reverse: reverse,
  interleave2: interleave2,
  deinterleave2: deinterleave2,
  interleave3: interleave3,
  deinterleave3: deinterleave3,
  nextCombination: nextCombination
};

"use strict";

function dupe_array(count, value, i) {
  var c = count[i] | 0;
  if (c <= 0) {
    return [];
  }
  var result = new Array(c),
      j;
  if (i === count.length - 1) {
    for (j = 0; j < c; ++j) {
      result[j] = value;
    }
  } else {
    for (j = 0; j < c; ++j) {
      result[j] = dupe_array(count, value, i + 1);
    }
  }
  return result;
}

function dupe_number(count, value) {
  var result, i;
  result = new Array(count);
  for (i = 0; i < count; ++i) {
    result[i] = value;
  }
  return result;
}

function dupe(count, value) {
  if (typeof value === "undefined") {
    value = 0;
  }
  switch (typeof count === "undefined" ? "undefined" : _typeof(count)) {
    case "number":
      if (count > 0) {
        return dupe_number(count | 0, value);
      }
      break;
    case "object":
      if (typeof count.length === "number") {
        return dupe_array(count, value, 0);
      }
      break;
  }
  return [];
}

var dup = dupe;

var pool = createCommonjsModule$$1(function (module, exports) {
  'use strict';

  //Legacy pool support

  if (!commonjsGlobal$$1.__TYPEDARRAY_POOL) {
    commonjsGlobal$$1.__TYPEDARRAY_POOL = {
      UINT8: dup([32, 0]),
      UINT16: dup([32, 0]),
      UINT32: dup([32, 0]),
      INT8: dup([32, 0]),
      INT16: dup([32, 0]),
      INT32: dup([32, 0]),
      FLOAT: dup([32, 0]),
      DOUBLE: dup([32, 0]),
      DATA: dup([32, 0]),
      UINT8C: dup([32, 0]),
      BUFFER: dup([32, 0])
    };
  }

  var hasUint8C = typeof Uint8ClampedArray !== 'undefined';
  var POOL = commonjsGlobal$$1.__TYPEDARRAY_POOL;

  //Upgrade pool
  if (!POOL.UINT8C) {
    POOL.UINT8C = dup([32, 0]);
  }
  if (!POOL.BUFFER) {
    POOL.BUFFER = dup([32, 0]);
  }

  //New technique: Only allocate from ArrayBufferView and Buffer
  var DATA = POOL.DATA,
      BUFFER = POOL.BUFFER;

  exports.free = function free(array) {
    if (isBuffer(array)) {
      BUFFER[twiddle.log2(array.length)].push(array);
    } else {
      if (Object.prototype.toString.call(array) !== '[object ArrayBuffer]') {
        array = array.buffer;
      }
      if (!array) {
        return;
      }
      var n = array.length || array.byteLength;
      var log_n = twiddle.log2(n) | 0;
      DATA[log_n].push(array);
    }
  };

  function freeArrayBuffer(buffer) {
    if (!buffer) {
      return;
    }
    var n = buffer.length || buffer.byteLength;
    var log_n = twiddle.log2(n);
    DATA[log_n].push(buffer);
  }

  function freeTypedArray(array) {
    freeArrayBuffer(array.buffer);
  }

  exports.freeUint8 = exports.freeUint16 = exports.freeUint32 = exports.freeInt8 = exports.freeInt16 = exports.freeInt32 = exports.freeFloat32 = exports.freeFloat = exports.freeFloat64 = exports.freeDouble = exports.freeUint8Clamped = exports.freeDataView = freeTypedArray;

  exports.freeArrayBuffer = freeArrayBuffer;

  exports.freeBuffer = function freeBuffer(array) {
    BUFFER[twiddle.log2(array.length)].push(array);
  };

  exports.malloc = function malloc(n, dtype) {
    if (dtype === undefined || dtype === 'arraybuffer') {
      return mallocArrayBuffer(n);
    } else {
      switch (dtype) {
        case 'uint8':
          return mallocUint8(n);
        case 'uint16':
          return mallocUint16(n);
        case 'uint32':
          return mallocUint32(n);
        case 'int8':
          return mallocInt8(n);
        case 'int16':
          return mallocInt16(n);
        case 'int32':
          return mallocInt32(n);
        case 'float':
        case 'float32':
          return mallocFloat(n);
        case 'double':
        case 'float64':
          return mallocDouble(n);
        case 'uint8_clamped':
          return mallocUint8Clamped(n);
        case 'buffer':
          return mallocBuffer(n);
        case 'data':
        case 'dataview':
          return mallocDataView(n);

        default:
          return null;
      }
    }
    return null;
  };

  function mallocArrayBuffer(n) {
    var n = twiddle.nextPow2(n);
    var log_n = twiddle.log2(n);
    var d = DATA[log_n];
    if (d.length > 0) {
      return d.pop();
    }
    return new ArrayBuffer(n);
  }
  exports.mallocArrayBuffer = mallocArrayBuffer;

  function mallocUint8(n) {
    return new Uint8Array(mallocArrayBuffer(n), 0, n);
  }
  exports.mallocUint8 = mallocUint8;

  function mallocUint16(n) {
    return new Uint16Array(mallocArrayBuffer(2 * n), 0, n);
  }
  exports.mallocUint16 = mallocUint16;

  function mallocUint32(n) {
    return new Uint32Array(mallocArrayBuffer(4 * n), 0, n);
  }
  exports.mallocUint32 = mallocUint32;

  function mallocInt8(n) {
    return new Int8Array(mallocArrayBuffer(n), 0, n);
  }
  exports.mallocInt8 = mallocInt8;

  function mallocInt16(n) {
    return new Int16Array(mallocArrayBuffer(2 * n), 0, n);
  }
  exports.mallocInt16 = mallocInt16;

  function mallocInt32(n) {
    return new Int32Array(mallocArrayBuffer(4 * n), 0, n);
  }
  exports.mallocInt32 = mallocInt32;

  function mallocFloat(n) {
    return new Float32Array(mallocArrayBuffer(4 * n), 0, n);
  }
  exports.mallocFloat32 = exports.mallocFloat = mallocFloat;

  function mallocDouble(n) {
    return new Float64Array(mallocArrayBuffer(8 * n), 0, n);
  }
  exports.mallocFloat64 = exports.mallocDouble = mallocDouble;

  function mallocUint8Clamped(n) {
    if (hasUint8C) {
      return new Uint8ClampedArray(mallocArrayBuffer(n), 0, n);
    } else {
      return mallocUint8(n);
    }
  }
  exports.mallocUint8Clamped = mallocUint8Clamped;

  function mallocDataView(n) {
    return new DataView(mallocArrayBuffer(n), 0, n);
  }
  exports.mallocDataView = mallocDataView;

  function mallocBuffer(n) {
    n = twiddle.nextPow2(n);
    var log_n = twiddle.log2(n);
    var cache = BUFFER[log_n];
    if (cache.length > 0) {
      return cache.pop();
    }
    return new Buffer(n);
  }
  exports.mallocBuffer = mallocBuffer;

  exports.clearCache = function clearCache() {
    for (var i = 0; i < 32; ++i) {
      POOL.UINT8[i].length = 0;
      POOL.UINT16[i].length = 0;
      POOL.UINT32[i].length = 0;
      POOL.INT8[i].length = 0;
      POOL.INT16[i].length = 0;
      POOL.INT32[i].length = 0;
      POOL.FLOAT[i].length = 0;
      POOL.DOUBLE[i].length = 0;
      POOL.UINT8C[i].length = 0;
      DATA[i].length = 0;
      BUFFER[i].length = 0;
    }
  };
});

function fft$1(dir, nrows, ncols, buffer, x_ptr, y_ptr, scratch_ptr) {
  dir |= 0;
  nrows |= 0;
  ncols |= 0;
  x_ptr |= 0;
  y_ptr |= 0;
  if (twiddle.isPow2(ncols)) {
    fftRadix2(dir, nrows, ncols, buffer, x_ptr, y_ptr);
  } else {
    fftBluestein(dir, nrows, ncols, buffer, x_ptr, y_ptr, scratch_ptr);
  }
}
var fftMatrix = fft$1;

function scratchMemory(n) {
  if (twiddle.isPow2(n)) {
    return 0;
  }
  return 2 * n + 4 * twiddle.nextPow2(2 * n + 1);
}
var scratchMemory_1 = scratchMemory;

//Radix 2 FFT Adapted from Paul Bourke's C Implementation
function fftRadix2(dir, nrows, ncols, buffer, x_ptr, y_ptr) {
  dir |= 0;
  nrows |= 0;
  ncols |= 0;
  x_ptr |= 0;
  y_ptr |= 0;
  var nn, m, i, i1, j, k, i2, l, l1, l2;
  var c1, c2, t, t1, t2, u1, u2, z, row, a, b, c, d, k1, k2, k3;

  // Calculate the number of points
  nn = ncols;
  m = twiddle.log2(nn);

  for (row = 0; row < nrows; ++row) {
    // Do the bit reversal
    i2 = nn >> 1;
    j = 0;
    for (i = 0; i < nn - 1; i++) {
      if (i < j) {
        t = buffer[x_ptr + i];
        buffer[x_ptr + i] = buffer[x_ptr + j];
        buffer[x_ptr + j] = t;
        t = buffer[y_ptr + i];
        buffer[y_ptr + i] = buffer[y_ptr + j];
        buffer[y_ptr + j] = t;
      }
      k = i2;
      while (k <= j) {
        j -= k;
        k >>= 1;
      }
      j += k;
    }

    // Compute the FFT
    c1 = -1.0;
    c2 = 0.0;
    l2 = 1;
    for (l = 0; l < m; l++) {
      l1 = l2;
      l2 <<= 1;
      u1 = 1.0;
      u2 = 0.0;
      for (j = 0; j < l1; j++) {
        for (i = j; i < nn; i += l2) {
          i1 = i + l1;
          a = buffer[x_ptr + i1];
          b = buffer[y_ptr + i1];
          c = buffer[x_ptr + i];
          d = buffer[y_ptr + i];
          k1 = u1 * (a + b);
          k2 = a * (u2 - u1);
          k3 = b * (u1 + u2);
          t1 = k1 - k3;
          t2 = k1 + k2;
          buffer[x_ptr + i1] = c - t1;
          buffer[y_ptr + i1] = d - t2;
          buffer[x_ptr + i] += t1;
          buffer[y_ptr + i] += t2;
        }
        k1 = c1 * (u1 + u2);
        k2 = u1 * (c2 - c1);
        k3 = u2 * (c1 + c2);
        u1 = k1 - k3;
        u2 = k1 + k2;
      }
      c2 = Math.sqrt((1.0 - c1) / 2.0);
      if (dir < 0) {
        c2 = -c2;
      }
      c1 = Math.sqrt((1.0 + c1) / 2.0);
    }

    // Scaling for inverse transform
    if (dir < 0) {
      var scale_f = 1.0 / nn;
      for (i = 0; i < nn; i++) {
        buffer[x_ptr + i] *= scale_f;
        buffer[y_ptr + i] *= scale_f;
      }
    }

    // Advance pointers
    x_ptr += ncols;
    y_ptr += ncols;
  }
}

// Use Bluestein algorithm for npot FFTs
// Scratch memory required:  2 * ncols + 4 * bits.nextPow2(2*ncols + 1)
function fftBluestein(dir, nrows, ncols, buffer, x_ptr, y_ptr, scratch_ptr) {
  dir |= 0;
  nrows |= 0;
  ncols |= 0;
  x_ptr |= 0;
  y_ptr |= 0;
  scratch_ptr |= 0;

  // Initialize tables
  var m = twiddle.nextPow2(2 * ncols + 1),
      cos_ptr = scratch_ptr,
      sin_ptr = cos_ptr + ncols,
      xs_ptr = sin_ptr + ncols,
      ys_ptr = xs_ptr + m,
      cft_ptr = ys_ptr + m,
      sft_ptr = cft_ptr + m,
      w = -dir * Math.PI / ncols,
      row,
      a,
      b,
      c,
      d,
      k1,
      k2,
      k3,
      i;
  for (i = 0; i < ncols; ++i) {
    a = w * (i * i % (ncols * 2));
    c = Math.cos(a);
    d = Math.sin(a);
    buffer[cft_ptr + (m - i)] = buffer[cft_ptr + i] = buffer[cos_ptr + i] = c;
    buffer[sft_ptr + (m - i)] = buffer[sft_ptr + i] = buffer[sin_ptr + i] = d;
  }
  for (i = ncols; i <= m - ncols; ++i) {
    buffer[cft_ptr + i] = 0.0;
  }
  for (i = ncols; i <= m - ncols; ++i) {
    buffer[sft_ptr + i] = 0.0;
  }

  fftRadix2(1, 1, m, buffer, cft_ptr, sft_ptr);

  //Compute scale factor
  if (dir < 0) {
    w = 1.0 / ncols;
  } else {
    w = 1.0;
  }

  //Handle direction
  for (row = 0; row < nrows; ++row) {

    // Copy row into scratch memory, multiply weights
    for (i = 0; i < ncols; ++i) {
      a = buffer[x_ptr + i];
      b = buffer[y_ptr + i];
      c = buffer[cos_ptr + i];
      d = -buffer[sin_ptr + i];
      k1 = c * (a + b);
      k2 = a * (d - c);
      k3 = b * (c + d);
      buffer[xs_ptr + i] = k1 - k3;
      buffer[ys_ptr + i] = k1 + k2;
    }
    //Zero out the rest
    for (i = ncols; i < m; ++i) {
      buffer[xs_ptr + i] = 0.0;
    }
    for (i = ncols; i < m; ++i) {
      buffer[ys_ptr + i] = 0.0;
    }

    // FFT buffer
    fftRadix2(1, 1, m, buffer, xs_ptr, ys_ptr);

    // Apply multiplier
    for (i = 0; i < m; ++i) {
      a = buffer[xs_ptr + i];
      b = buffer[ys_ptr + i];
      c = buffer[cft_ptr + i];
      d = buffer[sft_ptr + i];
      k1 = c * (a + b);
      k2 = a * (d - c);
      k3 = b * (c + d);
      buffer[xs_ptr + i] = k1 - k3;
      buffer[ys_ptr + i] = k1 + k2;
    }

    // Inverse FFT buffer
    fftRadix2(-1, 1, m, buffer, xs_ptr, ys_ptr);

    // Copy result back into x/y
    for (i = 0; i < ncols; ++i) {
      a = buffer[xs_ptr + i];
      b = buffer[ys_ptr + i];
      c = buffer[cos_ptr + i];
      d = -buffer[sin_ptr + i];
      k1 = c * (a + b);
      k2 = a * (d - c);
      k3 = b * (c + d);
      buffer[x_ptr + i] = w * (k1 - k3);
      buffer[y_ptr + i] = w * (k1 + k2);
    }

    x_ptr += ncols;
    y_ptr += ncols;
  }
}

fftMatrix.scratchMemory = scratchMemory_1;

'use strict';

function ndfft(dir, x, y) {
  var shape = x.shape,
      d = shape.length,
      size = 1,
      stride = new Array(d),
      pad = 0,
      i,
      j;
  for (i = d - 1; i >= 0; --i) {
    stride[i] = size;
    size *= shape[i];
    pad = Math.max(pad, fftMatrix.scratchMemory(shape[i]));
    if (x.shape[i] !== y.shape[i]) {
      throw new Error('Shape mismatch, real and imaginary arrays must have same size');
    }
  }
  var buf_size = 4 * size + pad;
  var buffer;
  if (x.dtype === 'array' || x.dtype === 'float64' || x.dtype === 'custom') {
    buffer = pool.mallocDouble(buf_size);
  } else {
    buffer = pool.mallocFloat(buf_size);
  }
  var x1 = ndarray(buffer, shape.slice(0), stride, 0),
      y1 = ndarray(buffer, shape.slice(0), stride.slice(0), size),
      x2 = ndarray(buffer, shape.slice(0), stride.slice(0), 2 * size),
      y2 = ndarray(buffer, shape.slice(0), stride.slice(0), 3 * size),
      tmp,
      n,
      s1,
      s2,
      scratch_ptr = 4 * size;

  //Copy into x1/y1
  ndarrayOps.assign(x1, x);
  ndarrayOps.assign(y1, y);

  for (i = d - 1; i >= 0; --i) {
    fftMatrix(dir, size / shape[i], shape[i], buffer, x1.offset, y1.offset, scratch_ptr);
    if (i === 0) {
      break;
    }

    //Compute new stride for x2/y2
    n = 1;
    s1 = x2.stride;
    s2 = y2.stride;
    for (j = i - 1; j < d; ++j) {
      s2[j] = s1[j] = n;
      n *= shape[j];
    }
    for (j = i - 2; j >= 0; --j) {
      s2[j] = s1[j] = n;
      n *= shape[j];
    }

    //Transpose
    ndarrayOps.assign(x2, x1);
    ndarrayOps.assign(y2, y1);

    //Swap buffers
    tmp = x1;
    x1 = x2;
    x2 = tmp;
    tmp = y1;
    y1 = y2;
    y2 = tmp;
  }

  //Copy result back into x
  ndarrayOps.assign(x, x1);
  ndarrayOps.assign(y, y1);

  pool.free(buffer);
}

var fft = ndfft;

/*
 * Author   Armin Taheri - https://github.com/ArminTaheri
 * License  MIT
 * Link     https://github.com/Pixpipe/pixpipejs
 * Lab      MCIN - Montreal Neurological Institute
 */
var DIRECTIONS = {
  'FORWARD': 1,
  'INVERSE': -1
};

var BaseFourierSignalFilter = function (_Filter) {
  inherits(BaseFourierSignalFilter, _Filter);

  function BaseFourierSignalFilter(direction) {
    classCallCheck(this, BaseFourierSignalFilter);

    var _this = possibleConstructorReturn(this, (BaseFourierSignalFilter.__proto__ || Object.getPrototypeOf(BaseFourierSignalFilter)).call(this));

    _this.direction = direction;
    _this.setMetadata('direction', _this.direction);
    if (DIRECTIONS[_this.direction] === undefined) {
      throw new Error(_this.direction + ' is not a valid fourier transform direction. Please try one of: ' + Object.keys(DIRECTIONS));
    }
    _this.addInputValidator(0, Signal1D);
    _this.addInputValidator(1, Signal1D);
    return _this;
  }

  createClass(BaseFourierSignalFilter, [{
    key: '_run',
    value: function _run() {
      if (!this.hasValidInput()) {
        console.warn("A filter of type BaseFourierSignalFilter requires 2 inputs of Signal1D.");
        return;
      }
      var realSignal = this._getInput(0);
      var imgSignal = this._getInput(1);
      var length = realSignal.getMetadata('length');
      if (length !== imgSignal.getMetadata('length')) {
        console.warn('The imaginary and real components of the signal need to be of equal length.');
      }
      var real = ndarray(realSignal.clone().getData(), [length]);
      var img = ndarray(imgSignal.clone().getData(), [length]);

      fft(DIRECTIONS[this.direction], real, img);
      this._output[0] = new Signal1D();
      this._output[0].setData(real.data);
      this._output[1] = new Signal1D();
      this._output[1].setData(img.data);
    }
  }]);
  return BaseFourierSignalFilter;
}(Filter);

var ForwardFourierSignalFilter = function (_BaseFourierSignalFil) {
  inherits(ForwardFourierSignalFilter, _BaseFourierSignalFil);

  function ForwardFourierSignalFilter() {
    classCallCheck(this, ForwardFourierSignalFilter);
    return possibleConstructorReturn(this, (ForwardFourierSignalFilter.__proto__ || Object.getPrototypeOf(ForwardFourierSignalFilter)).call(this, 'FORWARD'));
  }

  return ForwardFourierSignalFilter;
}(BaseFourierSignalFilter);

var InverseFourierSignalFilter = function (_BaseFourierSignalFil2) {
  inherits(InverseFourierSignalFilter, _BaseFourierSignalFil2);

  function InverseFourierSignalFilter() {
    classCallCheck(this, InverseFourierSignalFilter);
    return possibleConstructorReturn(this, (InverseFourierSignalFilter.__proto__ || Object.getPrototypeOf(InverseFourierSignalFilter)).call(this, 'INVERSE'));
  }

  return InverseFourierSignalFilter;
}(BaseFourierSignalFilter);

/*
 * Author   Armin Taheri - https://github.com/ArminTaheri
 * License  MIT
 * Link     https://github.com/Pixpipe/pixpipejs
 * Lab      MCIN - Montreal Neurological Institute
 */
var DIRECTIONS$1 = {
  'FORWARD': 1,
  'INVERSE': -1
};

var BaseFourierImageFilter = function (_Filter) {
  inherits(BaseFourierImageFilter, _Filter);

  function BaseFourierImageFilter(direction) {
    classCallCheck(this, BaseFourierImageFilter);

    var _this = possibleConstructorReturn(this, (BaseFourierImageFilter.__proto__ || Object.getPrototypeOf(BaseFourierImageFilter)).call(this));

    _this.direction = direction;
    if (DIRECTIONS$1[_this.direction] === undefined) {
      throw new Error(_this.direction + ' is not a valid fourier transform direction. Please try one of: ' + Object.keys(DIRECTIONS$1));
    }
    _this.addInputValidator(0, Image2D);
    _this.addInputValidator(1, Image2D);
    return _this;
  }

  createClass(BaseFourierImageFilter, [{
    key: '_run',
    value: function _run() {
      if (!this.hasValidInput()) {
        console.warn("A filter of type BaseFourierSignalFilter requires 2 inputs of Signal1D.");
        return;
      }
      var inputImagereal = this._getInput(0);
      var inputImageimg = this._getInput(1);
      var ncpp = inputImagereal.getMetadata('ncpp');
      if (ncpp > 1) {
        console.warn('Please make sure the input images are made of exactly 1 channel.');
        return;
      }

      var width = inputImagereal.getMetadata('width');
      var height = inputImagereal.getMetadata('height');
      if (width !== inputImageimg.getMetadata('width') || height !== inputImageimg.getMetadata('height')) {
        console.warn('Please make sure the real and imaginary input images are the same dimensions');
      }
      var real = ndarray(inputImagereal.getDataAsFloat32Array(), [width, height]);
      var img = ndarray(inputImageimg.getDataAsFloat32Array(), [width, height]);
      this.setMetadata('direction', this.direction);

      fft(DIRECTIONS$1[this.direction], real, img);
      this._output[0] = new Image2D();
      this._output[0].setData(real.data, width, height, 1);
      this._output[0].setMetadata('ncpp', 1);
      this._output[1] = new Image2D();
      this._output[1].setData(img.data, width, height, 1);
      this._output[1].setMetadata('ncpp', 1);
    }
  }]);
  return BaseFourierImageFilter;
}(Filter);

var ForwardFourierImageFilter = function (_BaseFourierImageFilt) {
  inherits(ForwardFourierImageFilter, _BaseFourierImageFilt);

  function ForwardFourierImageFilter() {
    classCallCheck(this, ForwardFourierImageFilter);
    return possibleConstructorReturn(this, (ForwardFourierImageFilter.__proto__ || Object.getPrototypeOf(ForwardFourierImageFilter)).call(this, 'FORWARD'));
  }

  return ForwardFourierImageFilter;
}(BaseFourierImageFilter);

var InverseFourierImageFilter = function (_BaseFourierImageFilt2) {
  inherits(InverseFourierImageFilter, _BaseFourierImageFilt2);

  function InverseFourierImageFilter() {
    classCallCheck(this, InverseFourierImageFilter);
    return possibleConstructorReturn(this, (InverseFourierImageFilter.__proto__ || Object.getPrototypeOf(InverseFourierImageFilter)).call(this, 'INVERSE'));
  }

  return InverseFourierImageFilter;
}(BaseFourierImageFilter);

/*
* Author   Jonathan Lurie - http://me.jonathanlurie.fr
* License  MIT
* Link      https://github.com/Pixpipe/pixpipejs
* Lab       MCIN - Montreal Neurological Institute
*/

/**
* A filter of type ForEachPixelImageFilter can perform a operation on evey pixel
* of an Image2D with a simple interface. For this purpose, a per-pixel-callback
* must be specified using method
* .on( "pixel" , function( coord, color ){ ... })
* where coord is of form {x, y} and color is of form [r, g, b, a] (with possibly)
* a different number of components per pixel.
* This callback must return, or null (original color not modified),
* or a array of color (same dimension as the one in arguments).
*
* **Usage**
* - [examples/forEachPixel.html](../examples/forEachPixel.html)
*
* @example
* var forEachPixelFilter = new pixpipe.ForEachPixelImageFilter();
* forEachPixelFilter.on( "pixel", function(position, color){
*
*     return [
*       color[1], // red (takes the values from green)
*       color[0], // green (takes the values from red)
*       color[2] * 0.5, // blue get 50% darker
*       255 // alpha, at max
*     ]
*
*   }
* );
*
*/

var ForEachPixelImageFilter = function (_ImageToImageFilter) {
  inherits(ForEachPixelImageFilter, _ImageToImageFilter);

  function ForEachPixelImageFilter() {
    classCallCheck(this, ForEachPixelImageFilter);

    var _this = possibleConstructorReturn(this, (ForEachPixelImageFilter.__proto__ || Object.getPrototypeOf(ForEachPixelImageFilter)).call(this));

    _this.addInputValidator(0, Image2D);
    return _this;
  }

  /**
  * Run the filter
  */


  createClass(ForEachPixelImageFilter, [{
    key: '_run',
    value: function _run() {
      if (!this.hasValidInput()) return;

      var inputImage2D = this._getInput();
      var firstPixel = 0;
      var lastPixel = inputImage2D.getWidth() * inputImage2D.getHeight();
      var increment = 1;

      var bufferCopy = inputImage2D.getDataCopy();

      this._forEachPixelOfSuch(bufferCopy, firstPixel, lastPixel, increment);

      // 1 - init the output
      var outputImg = this._addOutput(Image2D);

      // 2 - tune the output
      outputImg.setData(bufferCopy, inputImage2D.getWidth(), inputImage2D.getHeight(), inputImage2D.getComponentsPerPixel());
    }

    /**
    * [PRIVATE]
    * generic function for painting row, colum or whole
    * @param {Number} firstPixel - Index of the first pixel in 1D array
    * @param {Number} lastPixel - Index of the last pixel in 1D array
    * @param {Number} increment - jump gap from a pixel to another (in a 1D style)
    */

  }, {
    key: '_forEachPixelOfSuch',
    value: function _forEachPixelOfSuch(buffer, firstPixel, lastPixel, increment) {
      // abort if no callback per pixel
      //if( ! ("pixel" in this._events)){
      if (!this.hasEvent("pixel")) {
        console.warn("No function to apply per pixel was specified.");
        return;
      }

      var inputImage2D = this._getInput();
      var inputBuffer = inputImage2D.getData();
      var componentPerPixel = inputImage2D.getComponentsPerPixel();

      var currentColor = null;

      for (var p = firstPixel; p < lastPixel; p += increment) {
        var firstCompoPos1D = p * componentPerPixel;
        var position2D = inputImage2D.get2dPositionFrom1dIndex(p);
        currentColor = inputBuffer.slice(firstCompoPos1D, firstCompoPos1D + componentPerPixel);

        var newColor = this.triggerEvent("pixel", position2D, currentColor);

        if (newColor && newColor.length == componentPerPixel) {
          for (var i = 0; i < componentPerPixel; i++) {
            buffer[firstCompoPos1D + i] = newColor[i];
          }
        }
      }
    }
  }]);
  return ForEachPixelImageFilter;
}(ImageToImageFilter); /* END class ForEachPixelImageFilter */

/*
* Author   Jonathan Lurie - http://me.jonathanlurie.fr
* License  MIT
* Link      https://github.com/Pixpipe/pixpipejs
* Lab       MCIN - Montreal Neurological Institute
*/

/**
* Multiply an image by the other, like a scaling function.
* The image requires two inputs named "0" and "1".
* Simply use `addInput( myImg1, "0" )`
* and `addInput( myImg2, "1" )`. The input "0" can have 1 or more bands while
* the input "1" can have only one band since the same scale is apply to each band.
*
* **Usage**
* - [examples/forEachPixelGadient.html](../examples/forEachPixelGadient.html)
*/

var SpectralScaleImageFilter = function (_ImageToImageFilter) {
  inherits(SpectralScaleImageFilter, _ImageToImageFilter);

  function SpectralScaleImageFilter() {
    classCallCheck(this, SpectralScaleImageFilter);

    // both input are images.
    var _this = possibleConstructorReturn(this, (SpectralScaleImageFilter.__proto__ || Object.getPrototypeOf(SpectralScaleImageFilter)).call(this));

    _this.addInputValidator(0, Image2D);
    _this.addInputValidator(1, Image2D);

    return _this;
  }

  /**
  * Run the filter
  */


  createClass(SpectralScaleImageFilter, [{
    key: '_run',
    value: function _run() {
      if (!this.hasValidInput()) {
        return;
      }

      // filter must have valid input of the same size
      if (!this.hasSameSizeInput() || !this.hasValidInput()) {
        return;
      }

      var dataImg0 = this._getInput(0);
      var dataImg1 = this._getInput(1);

      // the input "1" (aka. the scaling data) must be single band
      if (dataImg1.getComponentsPerPixel() != 1) {
        console.warn("The scaling image must have one single band.");
        return;
      }

      var nbOfPixels = dataImg0.getWidth() * dataImg0.getHeight();
      var ncpp = dataImg0.getComponentsPerPixel();

      var data0 = dataImg0.getDataCopy();
      var data1 = dataImg1.getData();

      // scale the spectral info
      for (var p = 0; p < nbOfPixels; p++) {
        for (var b = 0; b < ncpp; b++) {
          data0[p * ncpp + b] *= data1[p];
        }
      }

      // building the output
      var img2D = this._addOutput(Image2D);
      img2D.setData(data0, dataImg0.getWidth(), dataImg0.getHeight());
    }
  }]);
  return SpectralScaleImageFilter;
}(ImageToImageFilter); /* END class SpectralScaleImageFilter */

var bundle = createCommonjsModule$$1(function (module, exports) {
  (function (global, factory) {
    module.exports = factory();
  })(commonjsGlobal$$1, function () {
    'use strict';

    /*!
     Based on ndef.parser, by Raphael Graf(r@undefined.ch)
     http://www.undefined.ch/mparser/index.html
    
     Ported to JavaScript and modified by Matthew Crumley (email@matthewcrumley.com, http://silentmatt.com/)
    
     You are free to use and modify this code in anyway you find useful. Please leave this comment in the code
     to acknowledge its original source. If you feel like it, I enjoy hearing about projects that use my code,
     but don't feel like you have to let me know or ask permission.
    */

    function indexOf(array, obj) {
      for (var i = 0; i < array.length; i++) {
        if (array[i] === obj) {
          return i;
        }
      }
      return -1;
    }

    var INUMBER = 'INUMBER';
    var IOP1 = 'IOP1';
    var IOP2 = 'IOP2';
    var IOP3 = 'IOP3';
    var IVAR = 'IVAR';
    var IFUNCALL = 'IFUNCALL';
    var IEXPR = 'IEXPR';
    var IMEMBER = 'IMEMBER';

    function Instruction(type, value) {
      this.type = type;
      this.value = value !== undefined && value !== null ? value : 0;
    }

    Instruction.prototype.toString = function () {
      switch (this.type) {
        case INUMBER:
        case IOP1:
        case IOP2:
        case IOP3:
        case IVAR:
          return this.value;
        case IFUNCALL:
          return 'CALL ' + this.value;
        case IMEMBER:
          return '.' + this.value;
        default:
          return 'Invalid Instruction';
      }
    };

    function Expression(tokens, parser) {
      this.tokens = tokens;
      this.parser = parser;
      this.unaryOps = parser.unaryOps;
      this.binaryOps = parser.binaryOps;
      this.ternaryOps = parser.ternaryOps;
      this.functions = parser.functions;
    }

    function escapeValue(v) {
      if (typeof v === 'string') {
        return JSON.stringify(v).replace(/\u2028/g, '\\u2028').replace(/\u2029/g, '\\u2029');
      }
      return v;
    }

    function simplify(tokens, unaryOps, binaryOps, ternaryOps, values) {
      var nstack = [];
      var newexpression = [];
      var n1, n2, n3;
      var f;
      for (var i = 0, L = tokens.length; i < L; i++) {
        var item = tokens[i];
        var type = item.type;
        if (type === INUMBER) {
          nstack.push(item);
        } else if (type === IVAR && values.hasOwnProperty(item.value)) {
          item = new Instruction(INUMBER, values[item.value]);
          nstack.push(item);
        } else if (type === IOP2 && nstack.length > 1) {
          n2 = nstack.pop();
          n1 = nstack.pop();
          f = binaryOps[item.value];
          item = new Instruction(INUMBER, f(n1.value, n2.value));
          nstack.push(item);
        } else if (type === IOP3 && nstack.length > 2) {
          n3 = nstack.pop();
          n2 = nstack.pop();
          n1 = nstack.pop();
          if (item.value === '?') {
            nstack.push(n1.value ? n2.value : n3.value);
          } else {
            f = ternaryOps[item.value];
            item = new Instruction(INUMBER, f(n1.value, n2.value, n3.value));
            nstack.push(item);
          }
        } else if (type === IOP1 && nstack.length > 0) {
          n1 = nstack.pop();
          f = unaryOps[item.value];
          item = new Instruction(INUMBER, f(n1.value));
          nstack.push(item);
        } else if (type === IEXPR) {
          while (nstack.length > 0) {
            newexpression.push(nstack.shift());
          }
          newexpression.push(new Instruction(IEXPR, simplify(item.value, unaryOps, binaryOps, ternaryOps, values)));
        } else if (type === IMEMBER && nstack.length > 0) {
          n1 = nstack.pop();
          nstack.push(new Instruction(INUMBER, n1.value[item.value]));
        } else {
          while (nstack.length > 0) {
            newexpression.push(nstack.shift());
          }
          newexpression.push(item);
        }
      }
      while (nstack.length > 0) {
        newexpression.push(nstack.shift());
      }
      return newexpression;
    }

    Expression.prototype.simplify = function (values) {
      values = values || {};
      return new Expression(simplify(this.tokens, this.unaryOps, this.binaryOps, this.ternaryOps, values), this.parser);
    };

    function substitute(tokens, variable, expr) {
      var newexpression = [];
      for (var i = 0, L = tokens.length; i < L; i++) {
        var item = tokens[i];
        var type = item.type;
        if (type === IVAR && item.value === variable) {
          for (var j = 0; j < expr.tokens.length; j++) {
            var expritem = expr.tokens[j];
            var replitem;
            if (expritem.type === IOP1) {
              replitem = unaryInstruction(expritem.value);
            } else if (expritem.type === IOP2) {
              replitem = binaryInstruction(expritem.value);
            } else if (expritem.type === IOP3) {
              replitem = ternaryInstruction(expritem.value);
            } else {
              replitem = new Instruction(expritem.type, expritem.value);
            }
            newexpression.push(replitem);
          }
        } else if (type === IEXPR) {
          newexpression.push(new Instruction(IEXPR, substitute(item.value, variable, expr)));
        } else {
          newexpression.push(item);
        }
      }
      return newexpression;
    }

    Expression.prototype.substitute = function (variable, expr) {
      if (!(expr instanceof Expression)) {
        expr = this.parser.parse(String(expr));
      }

      return new Expression(substitute(this.tokens, variable, expr), this.parser);
    };

    function evaluate(tokens, expr, values) {
      var nstack = [];
      var n1, n2, n3;
      var f;
      for (var i = 0, L = tokens.length; i < L; i++) {
        var item = tokens[i];
        var type = item.type;
        if (type === INUMBER) {
          nstack.push(item.value);
        } else if (type === IOP2) {
          n2 = nstack.pop();
          n1 = nstack.pop();
          f = expr.binaryOps[item.value];
          nstack.push(f(n1, n2));
        } else if (type === IOP3) {
          n3 = nstack.pop();
          n2 = nstack.pop();
          n1 = nstack.pop();
          if (item.value === '?') {
            nstack.push(evaluate(n1 ? n2 : n3, expr, values));
          } else {
            f = expr.ternaryOps[item.value];
            nstack.push(f(n1, n2, n3));
          }
        } else if (type === IVAR) {
          if (item.value in expr.functions) {
            nstack.push(expr.functions[item.value]);
          } else {
            var v = values[item.value];
            if (v !== undefined) {
              nstack.push(v);
            } else {
              throw new Error('undefined variable: ' + item.value);
            }
          }
        } else if (type === IOP1) {
          n1 = nstack.pop();
          f = expr.unaryOps[item.value];
          nstack.push(f(n1));
        } else if (type === IFUNCALL) {
          var argCount = item.value;
          var args = [];
          while (argCount-- > 0) {
            args.unshift(nstack.pop());
          }
          f = nstack.pop();
          if (f.apply && f.call) {
            nstack.push(f.apply(undefined, args));
          } else {
            throw new Error(f + ' is not a function');
          }
        } else if (type === IEXPR) {
          nstack.push(item.value);
        } else if (type === IMEMBER) {
          n1 = nstack.pop();
          nstack.push(n1[item.value]);
        } else {
          throw new Error('invalid Expression');
        }
      }
      if (nstack.length > 1) {
        throw new Error('invalid Expression (parity)');
      }
      return nstack[0];
    }

    Expression.prototype.evaluate = function (values) {
      values = values || {};
      return evaluate(this.tokens, this, values);
    };

    function expressionToString(tokens, toJS) {
      var nstack = [];
      var n1, n2, n3;
      var f;
      for (var i = 0, L = tokens.length; i < L; i++) {
        var item = tokens[i];
        var type = item.type;
        if (type === INUMBER) {
          if (typeof item.value === 'number' && item.value < 0) {
            nstack.push('(' + item.value + ')');
          } else {
            nstack.push(escapeValue(item.value));
          }
        } else if (type === IOP2) {
          n2 = nstack.pop();
          n1 = nstack.pop();
          f = item.value;
          if (toJS) {
            if (f === '^') {
              nstack.push('Math.pow(' + n1 + ', ' + n2 + ')');
            } else if (f === 'and') {
              nstack.push('(!!' + n1 + ' && !!' + n2 + ')');
            } else if (f === 'or') {
              nstack.push('(!!' + n1 + ' || !!' + n2 + ')');
            } else if (f === '||') {
              nstack.push('(String(' + n1 + ') + String(' + n2 + '))');
            } else if (f === '==') {
              nstack.push('(' + n1 + ' === ' + n2 + ')');
            } else if (f === '!=') {
              nstack.push('(' + n1 + ' !== ' + n2 + ')');
            } else {
              nstack.push('(' + n1 + ' ' + f + ' ' + n2 + ')');
            }
          } else {
            nstack.push('(' + n1 + ' ' + f + ' ' + n2 + ')');
          }
        } else if (type === IOP3) {
          n3 = nstack.pop();
          n2 = nstack.pop();
          n1 = nstack.pop();
          f = item.value;
          if (f === '?') {
            nstack.push('(' + n1 + ' ? ' + n2 + ' : ' + n3 + ')');
          } else {
            throw new Error('invalid Expression');
          }
        } else if (type === IVAR) {
          nstack.push(item.value);
        } else if (type === IOP1) {
          n1 = nstack.pop();
          f = item.value;
          if (f === '-' || f === '+') {
            nstack.push('(' + f + n1 + ')');
          } else if (toJS) {
            if (f === 'not') {
              nstack.push('(' + '!' + n1 + ')');
            } else if (f === '!') {
              nstack.push('fac(' + n1 + ')');
            } else {
              nstack.push(f + '(' + n1 + ')');
            }
          } else if (f === '!') {
            nstack.push('(' + n1 + '!)');
          } else {
            nstack.push('(' + f + ' ' + n1 + ')');
          }
        } else if (type === IFUNCALL) {
          var argCount = item.value;
          var args = [];
          while (argCount-- > 0) {
            args.unshift(nstack.pop());
          }
          f = nstack.pop();
          nstack.push(f + '(' + args.join(', ') + ')');
        } else if (type === IMEMBER) {
          n1 = nstack.pop();
          nstack.push(n1 + '.' + item.value);
        } else if (type === IEXPR) {
          nstack.push('(' + expressionToString(item.value, toJS) + ')');
        } else {
          throw new Error('invalid Expression');
        }
      }
      if (nstack.length > 1) {
        throw new Error('invalid Expression (parity)');
      }
      return nstack[0];
    }

    Expression.prototype.toString = function () {
      return expressionToString(this.tokens, false);
    };

    function getSymbols(tokens, symbols) {
      for (var i = 0, L = tokens.length; i < L; i++) {
        var item = tokens[i];
        if (item.type === IVAR && indexOf(symbols, item.value) === -1) {
          symbols.push(item.value);
        } else if (item.type === IEXPR) {
          getSymbols(item.value, symbols);
        }
      }
    }

    Expression.prototype.symbols = function () {
      var vars = [];
      getSymbols(this.tokens, vars);
      return vars;
    };

    Expression.prototype.variables = function () {
      var vars = [];
      getSymbols(this.tokens, vars);
      var functions = this.functions;
      return vars.filter(function (name) {
        return !(name in functions);
      });
    };

    Expression.prototype.toJSFunction = function (param, variables) {
      var expr = this;
      var f = new Function(param, 'with(this.functions) with (this.ternaryOps) with (this.binaryOps) with (this.unaryOps) { return ' + expressionToString(this.simplify(variables).tokens, true) + '; }'); // eslint-disable-line no-new-func
      return function () {
        return f.apply(expr, arguments);
      };
    };

    function add(a, b) {
      return Number(a) + Number(b);
    }
    function sub(a, b) {
      return a - b;
    }
    function mul(a, b) {
      return a * b;
    }
    function div(a, b) {
      return a / b;
    }
    function mod(a, b) {
      return a % b;
    }
    function concat(a, b) {
      return '' + a + b;
    }
    function equal(a, b) {
      return a === b;
    }
    function notEqual(a, b) {
      return a !== b;
    }
    function greaterThan(a, b) {
      return a > b;
    }
    function lessThan(a, b) {
      return a < b;
    }
    function greaterThanEqual(a, b) {
      return a >= b;
    }
    function lessThanEqual(a, b) {
      return a <= b;
    }
    function andOperator(a, b) {
      return Boolean(a && b);
    }
    function orOperator(a, b) {
      return Boolean(a || b);
    }
    function sinh(a) {
      return (Math.exp(a) - Math.exp(-a)) / 2;
    }
    function cosh(a) {
      return (Math.exp(a) + Math.exp(-a)) / 2;
    }
    function tanh(a) {
      if (a === Infinity) return 1;
      if (a === -Infinity) return -1;
      return (Math.exp(a) - Math.exp(-a)) / (Math.exp(a) + Math.exp(-a));
    }
    function asinh(a) {
      if (a === -Infinity) return a;
      return Math.log(a + Math.sqrt(a * a + 1));
    }
    function acosh(a) {
      return Math.log(a + Math.sqrt(a * a - 1));
    }
    function atanh(a) {
      return Math.log((1 + a) / (1 - a)) / 2;
    }
    function log10(a) {
      return Math.log(a) * Math.LOG10E;
    }
    function neg(a) {
      return -a;
    }
    function not(a) {
      return !a;
    }
    function trunc(a) {
      return a < 0 ? Math.ceil(a) : Math.floor(a);
    }
    function random(a) {
      return Math.random() * (a || 1);
    }
    function factorial(a) {
      // a!
      return gamma(a + 1);
    }
    function stringLength(s) {
      return String(s).length;
    }

    function hypot() {
      var sum = 0;
      var larg = 0;
      for (var i = 0, L = arguments.length; i < L; i++) {
        var arg = Math.abs(arguments[i]);
        var div;
        if (larg < arg) {
          div = larg / arg;
          sum = sum * div * div + 1;
          larg = arg;
        } else if (arg > 0) {
          div = arg / larg;
          sum += div * div;
        } else {
          sum += arg;
        }
      }
      return larg === Infinity ? Infinity : larg * Math.sqrt(sum);
    }

    function condition(cond, yep, nope) {
      return cond ? yep : nope;
    }

    function isInteger(value) {
      return isFinite(value) && value === Math.round(value);
    }

    var GAMMA_G = 4.7421875;
    var GAMMA_P = [0.99999999999999709182, 57.156235665862923517, -59.597960355475491248, 14.136097974741747174, -0.49191381609762019978, 0.33994649984811888699e-4, 0.46523628927048575665e-4, -0.98374475304879564677e-4, 0.15808870322491248884e-3, -0.21026444172410488319e-3, 0.21743961811521264320e-3, -0.16431810653676389022e-3, 0.84418223983852743293e-4, -0.26190838401581408670e-4, 0.36899182659531622704e-5];

    // Gamma function from math.js
    function gamma(n) {
      var t, x;

      if (isInteger(n)) {
        if (n <= 0) {
          return isFinite(n) ? Infinity : NaN;
        }

        if (n > 171) {
          return Infinity; // Will overflow
        }

        var value = n - 2;
        var res = n - 1;
        while (value > 1) {
          res *= value;
          value--;
        }

        if (res === 0) {
          res = 1; // 0! is per definition 1
        }

        return res;
      }

      if (n < 0.5) {
        return Math.PI / (Math.sin(Math.PI * n) * gamma(1 - n));
      }

      if (n >= 171.35) {
        return Infinity; // will overflow
      }

      if (n > 85.0) {
        // Extended Stirling Approx
        var twoN = n * n;
        var threeN = twoN * n;
        var fourN = threeN * n;
        var fiveN = fourN * n;
        return Math.sqrt(2 * Math.PI / n) * Math.pow(n / Math.E, n) * (1 + 1 / (12 * n) + 1 / (288 * twoN) - 139 / (51840 * threeN) - 571 / (2488320 * fourN) + 163879 / (209018880 * fiveN) + 5246819 / (75246796800 * fiveN * n));
      }

      --n;
      x = GAMMA_P[0];
      for (var i = 1; i < GAMMA_P.length; ++i) {
        x += GAMMA_P[i] / (n + i);
      }

      t = n + GAMMA_G + 0.5;
      return Math.sqrt(2 * Math.PI) * Math.pow(t, n + 0.5) * Math.exp(-t) * x;
    }

    var TEOF = 'TEOF';
    var TOP = 'TOP';
    var TNUMBER = 'TNUMBER';
    var TSTRING = 'TSTRING';
    var TPAREN = 'TPAREN';
    var TCOMMA = 'TCOMMA';
    var TNAME = 'TNAME';

    function Token(type, value, line, column) {
      this.type = type;
      this.value = value;
      this.line = line;
      this.column = column;
    }

    Token.prototype.toString = function () {
      return this.type + ': ' + this.value;
    };

    function TokenStream(expression, unaryOps, binaryOps, ternaryOps, consts) {
      this.pos = 0;
      this.line = 0;
      this.column = 0;
      this.current = null;
      this.unaryOps = unaryOps;
      this.binaryOps = binaryOps;
      this.ternaryOps = ternaryOps;
      this.consts = consts;
      this.expression = expression;
      this.savedPosition = 0;
      this.savedCurrent = null;
      this.savedLine = 0;
      this.savedColumn = 0;
    }

    TokenStream.prototype.newToken = function (type, value, line, column) {
      return new Token(type, value, line != null ? line : this.line, column != null ? column : this.column);
    };

    TokenStream.prototype.save = function () {
      this.savedPosition = this.pos;
      this.savedCurrent = this.current;
      this.savedLine = this.line;
      this.savedColumn = this.column;
    };

    TokenStream.prototype.restore = function () {
      this.pos = this.savedPosition;
      this.current = this.savedCurrent;
      this.line = this.savedLine;
      this.column = this.savedColumn;
    };

    TokenStream.prototype.next = function () {
      if (this.pos >= this.expression.length) {
        return this.newToken(TEOF, 'EOF');
      }

      if (this.isWhitespace() || this.isComment()) {
        return this.next();
      } else if (this.isNumber() || this.isOperator() || this.isString() || this.isParen() || this.isComma() || this.isNamedOp() || this.isConst() || this.isName()) {
        return this.current;
      } else {
        this.parseError('Unknown character "' + this.expression.charAt(this.pos) + '"');
      }
    };

    TokenStream.prototype.isString = function () {
      var r = false;
      var startLine = this.line;
      var startColumn = this.column;
      var startPos = this.pos;
      var quote = this.expression.charAt(startPos);

      if (quote === '\'' || quote === '"') {
        this.pos++;
        this.column++;
        var index = this.expression.indexOf(quote, startPos + 1);
        while (index >= 0 && this.pos < this.expression.length) {
          this.pos = index + 1;
          if (this.expression.charAt(index - 1) !== '\\') {
            var rawString = this.expression.substring(startPos + 1, index);
            this.current = this.newToken(TSTRING, this.unescape(rawString), startLine, startColumn);
            var newLine = rawString.indexOf('\n');
            var lastNewline = -1;
            while (newLine >= 0) {
              this.line++;
              this.column = 0;
              lastNewline = newLine;
              newLine = rawString.indexOf('\n', newLine + 1);
            }
            this.column += rawString.length - lastNewline;
            r = true;
            break;
          }
          index = this.expression.indexOf(quote, index + 1);
        }
      }
      return r;
    };

    TokenStream.prototype.isParen = function () {
      var char = this.expression.charAt(this.pos);
      if (char === '(' || char === ')') {
        this.current = this.newToken(TPAREN, char);
        this.pos++;
        this.column++;
        return true;
      }
      return false;
    };

    TokenStream.prototype.isComma = function () {
      var char = this.expression.charAt(this.pos);
      if (char === ',') {
        this.current = this.newToken(TCOMMA, ',');
        this.pos++;
        this.column++;
        return true;
      }
      return false;
    };

    TokenStream.prototype.isConst = function () {
      var startPos = this.pos;
      var i = startPos;
      for (; i < this.expression.length; i++) {
        var c = this.expression.charAt(i);
        if (c.toUpperCase() === c.toLowerCase()) {
          if (i === this.pos || c !== '_' && c !== '.' && (c < '0' || c > '9')) {
            break;
          }
        }
      }
      if (i > startPos) {
        var str = this.expression.substring(startPos, i);
        if (str in this.consts) {
          this.current = this.newToken(TNUMBER, this.consts[str]);
          this.pos += str.length;
          this.column += str.length;
          return true;
        }
      }
      return false;
    };

    TokenStream.prototype.isNamedOp = function () {
      var startPos = this.pos;
      var i = startPos;
      for (; i < this.expression.length; i++) {
        var c = this.expression.charAt(i);
        if (c.toUpperCase() === c.toLowerCase()) {
          if (i === this.pos || c !== '_' && (c < '0' || c > '9')) {
            break;
          }
        }
      }
      if (i > startPos) {
        var str = this.expression.substring(startPos, i);
        if (str in this.binaryOps || str in this.unaryOps || str in this.ternaryOps) {
          this.current = this.newToken(TOP, str);
          this.pos += str.length;
          this.column += str.length;
          return true;
        }
      }
      return false;
    };

    TokenStream.prototype.isName = function () {
      var startPos = this.pos;
      var i = startPos;
      for (; i < this.expression.length; i++) {
        var c = this.expression.charAt(i);
        if (c.toUpperCase() === c.toLowerCase()) {
          if (i === this.pos || c !== '_' && (c < '0' || c > '9')) {
            break;
          }
        }
      }
      if (i > startPos) {
        var str = this.expression.substring(startPos, i);
        this.current = this.newToken(TNAME, str);
        this.pos += str.length;
        this.column += str.length;
        return true;
      }
      return false;
    };

    TokenStream.prototype.isWhitespace = function () {
      var r = false;
      var char = this.expression.charAt(this.pos);
      while (char === ' ' || char === '\t' || char === '\n' || char === '\r') {
        r = true;
        this.pos++;
        this.column++;
        if (char === '\n') {
          this.line++;
          this.column = 0;
        }
        if (this.pos >= this.expression.length) {
          break;
        }
        char = this.expression.charAt(this.pos);
      }
      return r;
    };

    var codePointPattern = /^[0-9a-f]{4}$/i;

    TokenStream.prototype.unescape = function (v) {
      var index = v.indexOf('\\');
      if (index < 0) {
        return v;
      }

      var buffer = v.substring(0, index);
      while (index >= 0) {
        var c = v.charAt(++index);
        switch (c) {
          case '\'':
            buffer += '\'';
            break;
          case '"':
            buffer += '"';
            break;
          case '\\':
            buffer += '\\';
            break;
          case '/':
            buffer += '/';
            break;
          case 'b':
            buffer += '\b';
            break;
          case 'f':
            buffer += '\f';
            break;
          case 'n':
            buffer += '\n';
            break;
          case 'r':
            buffer += '\r';
            break;
          case 't':
            buffer += '\t';
            break;
          case 'u':
            // interpret the following 4 characters as the hex of the unicode code point
            var codePoint = v.substring(index + 1, index + 5);
            if (!codePointPattern.test(codePoint)) {
              this.parseError('Illegal escape sequence: \\u' + codePoint);
            }
            buffer += String.fromCharCode(parseInt(codePoint, 16));
            index += 4;
            break;
          default:
            throw this.parseError('Illegal escape sequence: "\\' + c + '"');
        }
        ++index;
        var backslash = v.indexOf('\\', index);
        buffer += v.substring(index, backslash < 0 ? v.length : backslash);
        index = backslash;
      }

      return buffer;
    };

    TokenStream.prototype.isComment = function () {
      var char = this.expression.charAt(this.pos);
      if (char === '/' && this.expression.charAt(this.pos + 1) === '*') {
        var startPos = this.pos;
        this.pos = this.expression.indexOf('*/', this.pos) + 2;
        if (this.pos === 1) {
          this.pos = this.expression.length;
        }
        var comment = this.expression.substring(startPos, this.pos);
        var newline = comment.indexOf('\n');
        while (newline >= 0) {
          this.line++;
          this.column = comment.length - newline;
          newline = comment.indexOf('\n', newline + 1);
        }
        return true;
      }
      return false;
    };

    TokenStream.prototype.isNumber = function () {
      var valid = false;
      var pos = this.pos;
      var startPos = pos;
      var resetPos = pos;
      var column = this.column;
      var resetColumn = column;
      var foundDot = false;
      var foundDigits = false;
      var char;

      while (pos < this.expression.length) {
        char = this.expression.charAt(pos);
        if (char >= '0' && char <= '9' || !foundDot && char === '.') {
          if (char === '.') {
            foundDot = true;
          } else {
            foundDigits = true;
          }
          pos++;
          column++;
          valid = foundDigits;
        } else {
          break;
        }
      }

      if (valid) {
        resetPos = pos;
        resetColumn = column;
      }

      if (char === 'e' || char === 'E') {
        pos++;
        column++;
        var acceptSign = true;
        var validExponent = false;
        while (pos < this.expression.length) {
          char = this.expression.charAt(pos);
          if (acceptSign && (char === '+' || char === '-')) {
            acceptSign = false;
          } else if (char >= '0' && char <= '9') {
            validExponent = true;
            acceptSign = false;
          } else {
            break;
          }
          pos++;
          column++;
        }

        if (!validExponent) {
          pos = resetPos;
          column = resetColumn;
        }
      }

      if (valid) {
        this.current = this.newToken(TNUMBER, parseFloat(this.expression.substring(startPos, pos)));
        this.pos = pos;
        this.column = column;
      } else {
        this.pos = resetPos;
        this.column = resetColumn;
      }
      return valid;
    };

    TokenStream.prototype.isOperator = function () {
      var char = this.expression.charAt(this.pos);

      if (char === '+' || char === '-' || char === '*' || char === '/' || char === '%' || char === '^' || char === '?' || char === ':' || char === '.') {
        this.current = this.newToken(TOP, char);
      } else if (char === '∙' || char === '•') {
        this.current = this.newToken(TOP, '*');
      } else if (char === '>') {
        if (this.expression.charAt(this.pos + 1) === '=') {
          this.current = this.newToken(TOP, '>=');
          this.pos++;
          this.column++;
        } else {
          this.current = this.newToken(TOP, '>');
        }
      } else if (char === '<') {
        if (this.expression.charAt(this.pos + 1) === '=') {
          this.current = this.newToken(TOP, '<=');
          this.pos++;
          this.column++;
        } else {
          this.current = this.newToken(TOP, '<');
        }
      } else if (char === '|') {
        if (this.expression.charAt(this.pos + 1) === '|') {
          this.current = this.newToken(TOP, '||');
          this.pos++;
          this.column++;
        } else {
          return false;
        }
      } else if (char === '=') {
        if (this.expression.charAt(this.pos + 1) === '=') {
          this.current = this.newToken(TOP, '==');
          this.pos++;
          this.column++;
        } else {
          return false;
        }
      } else if (char === '!') {
        if (this.expression.charAt(this.pos + 1) === '=') {
          this.current = this.newToken(TOP, '!=');
          this.pos++;
          this.column++;
        } else {
          this.current = this.newToken(TOP, char);
        }
      } else {
        return false;
      }
      this.pos++;
      this.column++;
      return true;
    };

    TokenStream.prototype.parseError = function (msg) {
      throw new Error('parse error [' + (this.line + 1) + ':' + (this.column + 1) + ']: ' + msg);
    };

    function unaryInstruction(value) {
      return new Instruction(IOP1, value);
    }

    function binaryInstruction(value) {
      return new Instruction(IOP2, value);
    }

    function ternaryInstruction(value) {
      return new Instruction(IOP3, value);
    }

    function ParserState(parser, tokenStream) {
      this.parser = parser;
      this.tokens = tokenStream;
      this.current = null;
      this.nextToken = null;
      this.next();
      this.savedCurrent = null;
      this.savedNextToken = null;
    }

    ParserState.prototype.next = function () {
      this.current = this.nextToken;
      return this.nextToken = this.tokens.next();
    };

    ParserState.prototype.tokenMatches = function (token, value) {
      if (typeof value === 'undefined') {
        return true;
      } else if (Array.isArray(value)) {
        return indexOf(value, token.value) >= 0;
      } else if (typeof value === 'function') {
        return value(token);
      } else {
        return token.value === value;
      }
    };

    ParserState.prototype.save = function () {
      this.savedCurrent = this.current;
      this.savedNextToken = this.nextToken;
      this.tokens.save();
    };

    ParserState.prototype.restore = function () {
      this.tokens.restore();
      this.current = this.savedCurrent;
      this.nextToken = this.savedNextToken;
    };

    ParserState.prototype.accept = function (type, value) {
      if (this.nextToken.type === type && this.tokenMatches(this.nextToken, value)) {
        this.next();
        return true;
      }
      return false;
    };

    ParserState.prototype.expect = function (type, value) {
      if (!this.accept(type, value)) {
        throw new Error('parse error [' + this.tokens.line + ':' + this.tokens.column + ']: Expected ' + (value || type));
      }
    };

    ParserState.prototype.parseAtom = function (instr) {
      if (this.accept(TNAME)) {
        instr.push(new Instruction(IVAR, this.current.value));
      } else if (this.accept(TNUMBER)) {
        instr.push(new Instruction(INUMBER, this.current.value));
      } else if (this.accept(TSTRING)) {
        instr.push(new Instruction(INUMBER, this.current.value));
      } else if (this.accept(TPAREN, '(')) {
        this.parseExpression(instr);
        this.expect(TPAREN, ')');
      } else {
        throw new Error('unexpected ' + this.nextToken);
      }
    };

    ParserState.prototype.parseExpression = function (instr) {
      this.parseConditionalExpression(instr);
    };

    ParserState.prototype.parseConditionalExpression = function (instr) {
      this.parseOrExpression(instr);
      while (this.accept(TOP, '?')) {
        var trueBranch = [];
        var falseBranch = [];
        this.parseConditionalExpression(trueBranch);
        this.expect(TOP, ':');
        this.parseConditionalExpression(falseBranch);
        instr.push(new Instruction(IEXPR, trueBranch));
        instr.push(new Instruction(IEXPR, falseBranch));
        instr.push(ternaryInstruction('?'));
      }
    };

    ParserState.prototype.parseOrExpression = function (instr) {
      this.parseAndExpression(instr);
      while (this.accept(TOP, 'or')) {
        this.parseAndExpression(instr);
        instr.push(binaryInstruction('or'));
      }
    };

    ParserState.prototype.parseAndExpression = function (instr) {
      this.parseComparison(instr);
      while (this.accept(TOP, 'and')) {
        this.parseComparison(instr);
        instr.push(binaryInstruction('and'));
      }
    };

    ParserState.prototype.parseComparison = function (instr) {
      this.parseAddSub(instr);
      while (this.accept(TOP, ['==', '!=', '<', '<=', '>=', '>'])) {
        var op = this.current;
        this.parseAddSub(instr);
        instr.push(binaryInstruction(op.value));
      }
    };

    ParserState.prototype.parseAddSub = function (instr) {
      this.parseTerm(instr);
      while (this.accept(TOP, ['+', '-', '||'])) {
        var op = this.current;
        this.parseTerm(instr);
        instr.push(binaryInstruction(op.value));
      }
    };

    ParserState.prototype.parseTerm = function (instr) {
      this.parseFactor(instr);
      while (this.accept(TOP, ['*', '/', '%'])) {
        var op = this.current;
        this.parseFactor(instr);
        instr.push(binaryInstruction(op.value));
      }
    };

    ParserState.prototype.parseFactor = function (instr) {
      var unaryOps = this.tokens.unaryOps;
      function isPrefixOperator(token) {
        return token.value in unaryOps;
      }

      this.save();
      if (this.accept(TOP, isPrefixOperator)) {
        if (this.current.value !== '-' && this.current.value !== '+' && this.nextToken.type === TPAREN && this.nextToken.value === '(') {
          this.restore();
          this.parseExponential(instr);
        } else {
          var op = this.current;
          this.parseFactor(instr);
          instr.push(unaryInstruction(op.value));
        }
      } else {
        this.parseExponential(instr);
      }
    };

    ParserState.prototype.parseExponential = function (instr) {
      this.parsePostfixExpression(instr);
      while (this.accept(TOP, '^')) {
        this.parseFactor(instr);
        instr.push(binaryInstruction('^'));
      }
    };

    ParserState.prototype.parsePostfixExpression = function (instr) {
      this.parseFunctionCall(instr);
      while (this.accept(TOP, '!')) {
        instr.push(unaryInstruction('!'));
      }
    };

    ParserState.prototype.parseFunctionCall = function (instr) {
      var unaryOps = this.tokens.unaryOps;
      function isPrefixOperator(token) {
        return token.value in unaryOps;
      }

      if (this.accept(TOP, isPrefixOperator)) {
        var op = this.current;
        this.parseAtom(instr);
        instr.push(unaryInstruction(op.value));
      } else {
        this.parseMemberExpression(instr);
        while (this.accept(TPAREN, '(')) {
          if (this.accept(TPAREN, ')')) {
            instr.push(new Instruction(IFUNCALL, 0));
          } else {
            var argCount = this.parseArgumentList(instr);
            instr.push(new Instruction(IFUNCALL, argCount));
          }
        }
      }
    };

    ParserState.prototype.parseArgumentList = function (instr) {
      var argCount = 0;

      while (!this.accept(TPAREN, ')')) {
        this.parseExpression(instr);
        ++argCount;
        while (this.accept(TCOMMA)) {
          this.parseExpression(instr);
          ++argCount;
        }
      }

      return argCount;
    };

    ParserState.prototype.parseMemberExpression = function (instr) {
      this.parseAtom(instr);
      while (this.accept(TOP, '.')) {
        this.expect(TNAME);
        instr.push(new Instruction(IMEMBER, this.current.value));
      }
    };

    function Parser() {
      this.unaryOps = {
        sin: Math.sin,
        cos: Math.cos,
        tan: Math.tan,
        asin: Math.asin,
        acos: Math.acos,
        atan: Math.atan,
        sinh: Math.sinh || sinh,
        cosh: Math.cosh || cosh,
        tanh: Math.tanh || tanh,
        asinh: Math.asinh || asinh,
        acosh: Math.acosh || acosh,
        atanh: Math.atanh || atanh,
        sqrt: Math.sqrt,
        log: Math.log,
        ln: Math.log,
        lg: Math.log10 || log10,
        log10: Math.log10 || log10,
        abs: Math.abs,
        ceil: Math.ceil,
        floor: Math.floor,
        round: Math.round,
        trunc: Math.trunc || trunc,
        '-': neg,
        '+': Number,
        exp: Math.exp,
        not: not,
        length: stringLength,
        '!': factorial
      };

      this.binaryOps = {
        '+': add,
        '-': sub,
        '*': mul,
        '/': div,
        '%': mod,
        '^': Math.pow,
        '||': concat,
        '==': equal,
        '!=': notEqual,
        '>': greaterThan,
        '<': lessThan,
        '>=': greaterThanEqual,
        '<=': lessThanEqual,
        and: andOperator,
        or: orOperator
      };

      this.ternaryOps = {
        '?': condition
      };

      this.functions = {
        random: random,
        fac: factorial,
        min: Math.min,
        max: Math.max,
        hypot: Math.hypot || hypot,
        pyt: Math.hypot || hypot, // backward compat
        pow: Math.pow,
        atan2: Math.atan2,
        'if': condition,
        gamma: gamma
      };

      this.consts = {
        E: Math.E,
        PI: Math.PI,
        'true': true,
        'false': false
      };
    }

    Parser.parse = function (expr) {
      return new Parser().parse(expr);
    };

    Parser.evaluate = function (expr, variables) {
      return Parser.parse(expr).evaluate(variables);
    };

    Parser.prototype = {
      parse: function parse(expr) {
        var instr = [];
        var parserState = new ParserState(this, new TokenStream(expr, this.unaryOps, this.binaryOps, this.ternaryOps, this.consts));
        parserState.parseExpression(instr);
        parserState.expect(TEOF, 'EOF');

        return new Expression(instr, this);
      },

      evaluate: function evaluate(expr, variables) {
        return this.parse(expr).evaluate(variables);
      }
    };

    var parser = {
      Parser: Parser,
      Expression: Expression
    };

    return parser;
  });
});

/*
* Author   Jonathan Lurie - http://me.jonathanlurie.fr
* License  MIT
* Link      https://github.com/Pixpipe/pixpipejs
* Lab       MCIN - Montreal Neurological Institute
*/

/**
* An instance of ImageBlendExpressionFilter takes Image2D inputs, as many as
* we need as long as they have the same size and the same number of components
* per pixel.
* This filter blends images pixel values using a literal expression. This expression
* should be set using `setMetadata( "expresssion", "A * B" )` , where `A` and `B`
* are the categories set in input.
*
* Using a blending expression is the aesiest way to test a blending but it is a
* pretty slow process since the expresion has to be evaluated for every process.
* To speed-up your process, it is recomended to develop a new filter that does
* exactly (and only) the blending method you want.
*
* **usage**  
* - [examples/imageBlending.html](../examples/imageBlending.html)
* - [examples/imageBlending2.html](../examples/imageBlending2.html)
* - [examples/forEachPixelGradientBlend.html](../examples/forEachPixelGradientBlend.html)
*
*/

var ImageBlendExpressionFilter = function (_ImageToImageFilter) {
  inherits(ImageBlendExpressionFilter, _ImageToImageFilter);

  function ImageBlendExpressionFilter() {
    classCallCheck(this, ImageBlendExpressionFilter);
    return possibleConstructorReturn(this, (ImageBlendExpressionFilter.__proto__ || Object.getPrototypeOf(ImageBlendExpressionFilter)).call(this));
  }

  createClass(ImageBlendExpressionFilter, [{
    key: '_run',
    value: function _run() {

      // the metadata was not set
      if (!this.hasMetadata("expression")) {
        console.warn("A filter of type ImageBlendExpressionFilter requires a blending expression.\nUse 'setMetadata(\"expression\", \"...\")' to set it.");
        return;
      }

      if (!this.hasSameNcppInput() || !this.hasSameSizeInput()) {
        return;
      }

      if (!this.getNumberOfInputs()) {
        console.warn("A filter of type ImageBlendExpressionFilter requires at least one input.");
        return;
      }

      var inputCategories = this.getInputCategories();
      var firstInput = this._getInput(inputCategories[0]);
      var outputBuffer = firstInput.getDataCopy();
      var parser = new bundle.Parser();
      var expr = parser.parse(this.getMetadata("expression"));

      for (var i = 0; i < outputBuffer.length; i++) {

        var evaluationData = {};
        for (var c = 0; c < inputCategories.length; c++) {
          evaluationData[inputCategories[c]] = this._getInput(inputCategories[c]).getData()[i];
        }

        outputBuffer[i] = expr.evaluate(evaluationData);
      }

      // building the output
      var img2D = this._addOutput(Image2D);

      img2D.setData(outputBuffer, firstInput.getWidth(), firstInput.getHeight());
    }
  }]);
  return ImageBlendExpressionFilter;
}(ImageToImageFilter); /* END of class ImageBlendExpressionFilter */

/*
* Author   Jonathan Lurie - http://me.jonathanlurie.fr
* License  MIT
* Link      https://github.com/Pixpipe/pixpipejs
* Lab       MCIN - Montreal Neurological Institute
*/

/**
* An instance of SpatialConvolutionFilter perform a convolution in a spatial reference,
* this can be applying a Sobel filter, a median or gaussian blur or perform a derivative.
* The filter is a NxM (aka. an array of arrays) of the following form:
* ```
*   var medianBlurFilter = [
*     [1/9, 1/9, 1/9],
*     [1/9, 1/9, 1/9],
*     [1/9, 1/9, 1/9],
*   ];
* ```
* For example, in the case of a simple derivative, it will be like that:
* ```
*  var dx = [
*    [1, -1]
*  ];
*
*  // or
*
*  var dy = [
*    [1],
*    [-1]
*  ];
* ```
* 
* The filter must be specified using the method `.setMetadata('filter', ...)`.
*
* **Usage**
*  - [examples/spatialConvolImage2D.html](../examples/spatialConvolImage2D.html)
*
*/

var SpatialConvolutionFilter = function (_ImageToImageFilter) {
  inherits(SpatialConvolutionFilter, _ImageToImageFilter);

  function SpatialConvolutionFilter() {
    classCallCheck(this, SpatialConvolutionFilter);

    var _this = possibleConstructorReturn(this, (SpatialConvolutionFilter.__proto__ || Object.getPrototypeOf(SpatialConvolutionFilter)).call(this));

    _this.addInputValidator(0, Image2D);
    _this.setMetadata("filter", null);
    return _this;
  }

  createClass(SpatialConvolutionFilter, [{
    key: '_run',
    value: function _run() {
      // the input checking
      if (!this.hasValidInput()) {
        console.warn("A filter of type SpatialConvolutionFilter requires 1 input of category '0' and one input of category '1'.");
        return;
      }

      var filter = this.getMetadata("filter");

      if (!filter) {
        console.warn("A filter must be specified using .setMetadata('filter', [[]])");
        return;
      }

      // input
      var inputImg = this._getInput(0);
      var inputData = inputImg.getData();
      var ncpp = inputImg.getNcpp();
      var width = inputImg.getWidth();
      var height = inputImg.getHeight();

      // output 
      var outputImg = new Image2D({ width: width, height: height, color: new Array(ncpp).fill(0) });
      var outputData = outputImg.getData();

      // filter
      var filterHeight = filter.length;
      var filterWidth = filter[0].length;
      var filterHalfWidth = Math.floor(filterWidth / 2);
      var filterHalfHeight = Math.floor(filterHeight / 2);

      // looping info
      var startX = filterHalfWidth;
      var startY = filterHalfHeight;
      var endX = width - filterHalfWidth;
      var endY = height - filterHalfHeight;

      // along image width
      for (var iImg = startX; iImg < endX; iImg++) {

        // along image height
        for (var jImg = startY; jImg < endY; jImg++) {

          // get the 1D position of the first component
          var linearPosition = (jImg * width + iImg) * ncpp;

          // along filter width
          for (var iFilter = 0; iFilter < filterWidth; iFilter++) {

            // along filter height
            for (var jFilter = 0; jFilter < filterHeight; jFilter++) {

              var iUnderFilter = iImg + iFilter - filterHalfWidth;
              var jUnderFilter = jImg + jFilter - filterHalfHeight;
              var colorUnderFilter = inputImg.getPixel({ x: iUnderFilter, y: jUnderFilter });
              var curentFilterValue = filter[jFilter][iFilter];

              // looping around components
              for (var c = 0; c < ncpp; c++) {
                outputData[linearPosition + c] += colorUnderFilter[c] * curentFilterValue;
              } /* END for-loop over components */
            } /* END for-loop over filter height */
          } /* END for-loop over filter width */
        } /* END for-loop over image height */
      } /* END for-loop over image width */

      this._output[0] = outputImg;
    }
  }]);
  return SpatialConvolutionFilter;
}(ImageToImageFilter); /* END of class SpatialConvolutionFilter */

/*
* Author   Jonathan Lurie - http://me.jonathanlurie.fr
* License  MIT
* Link      https://github.com/Pixpipe/pixpipejs
* Lab       MCIN - Montreal Neurological Institute
*/

/**
* Multiply two Image2D pixel by pixel. They must have the same number of components per pixel
* and the same size.
* Output an new Image3D.
* Equivalent to `SpectralScaleImageFilter`.
*
* **Usage**
*  - [examples/multiplyImage2D.html](../examples/multiplyImage2D.html)
*
*/

var MultiplyImageFilter = function (_ImageToImageFilter) {
  inherits(MultiplyImageFilter, _ImageToImageFilter);

  function MultiplyImageFilter() {
    classCallCheck(this, MultiplyImageFilter);

    var _this = possibleConstructorReturn(this, (MultiplyImageFilter.__proto__ || Object.getPrototypeOf(MultiplyImageFilter)).call(this));

    _this.addInputValidator(0, Image2D);
    _this.addInputValidator(1, Image2D);
    return _this;
  }

  createClass(MultiplyImageFilter, [{
    key: '_run',
    value: function _run() {

      // the input checking
      if (!this.hasValidInput()) {
        console.warn("A filter of type MultiplyImageFilter requires 1 input of category '0' and one input of category '1'.");
        return;
      }

      if (!this.hasSameNcppInput() || !this.hasSameSizeInput()) {
        return;
      }

      var img0 = this._getInput(0);
      var img1 = this._getInput(1);

      var img1Buffer = img1.getData();
      var outputBuffer = img0.getDataCopy();

      for (var i = 0; i < outputBuffer.length; i++) {
        outputBuffer[i] *= img1Buffer[i];
      }

      var img2D = this._addOutput(Image2D);

      img2D.setData(outputBuffer, img0.getWidth(), img0.getHeight());
    }
  }]);
  return MultiplyImageFilter;
}(ImageToImageFilter); /* END class MultiplyImageFilter */

/*
* Author   Jonathan Lurie - http://me.jonathanlurie.fr
* License  MIT
* Link      https://github.com/Pixpipe/pixpipejs
* Lab       MCIN - Montreal Neurological Institute
*/

/**
* An instance of SimpleThresholdFilter perform a threshold on an input image.
* The input must be an Image2D with 1, 3 or 4 bands.
* The default threshold can be changed using `.setMetadata("threshold", 128)`
* and the low and high value can be replaced using `.setMetadata("lowValue", 0)`
* and `.setMetadata("highValue", 255)`. In addition, in case of dealing with a
* RGBA image, you can decide of preserving the alpha channel or not, using 
* `.setMetadata("preserveAlpha", true)`.
*
* **Usage**
*  - [examples/imageThresholding.html](../examples/imageThresholding.html)
*/

var SimpleThresholdFilter = function (_ImageToImageFilter) {
  inherits(SimpleThresholdFilter, _ImageToImageFilter);

  function SimpleThresholdFilter() {
    classCallCheck(this, SimpleThresholdFilter);

    var _this = possibleConstructorReturn(this, (SimpleThresholdFilter.__proto__ || Object.getPrototypeOf(SimpleThresholdFilter)).call(this));

    _this.addInputValidator(0, Image2D);

    // default values
    _this.setMetadata("threshold", 128);
    _this.setMetadata("lowValue", 0);
    _this.setMetadata("highValue", 255);
    _this.setMetadata("preserveAlpha", true);
    return _this;
  }

  createClass(SimpleThresholdFilter, [{
    key: '_run',
    value: function _run() {
      // the input checking
      if (!this.hasValidInput()) return;

      var inputImg = this._getInput(0);

      var outputImage = inputImg.clone();

      // Number of bands
      var ncpp = inputImg.getComponentsPerPixel();

      // having a local value is faster than fetching an object
      var threshold = this.getMetadata("threshold");
      var lowValue = this.getMetadata("lowValue");
      var highValue = this.getMetadata("highValue");

      // get a copy of the input buffer so that we dont overwrite it!
      var outputBuffer = outputImage.getData();

      // if the input image has:
      // - a single band, OR
      // - three bands (assuming RGB), OR
      // - four bands (assuming RGBA)
      if (ncpp == 1 || ncpp == 3 || ncpp == 4) {
        // we want to preserve transparency ( = not affected by thresholding)
        if (this.getMetadata("preserveAlpha") && ncpp == 4) {

          for (var i = 0; i < outputBuffer.length; i++) {
            // every four band is an alpha band
            if (i % 4 == 3) {
              continue;
            }
            outputBuffer[i] = outputBuffer[i] < threshold ? lowValue : highValue;
          }

          // transparency is altered by the threshold like any other channel
        } else {
          for (var i = 0; i < outputBuffer.length; i++) {
            outputBuffer[i] = outputBuffer[i] < threshold ? lowValue : highValue;
          }
        }

        this._output[0] = outputImage;

        /*
        // creating a blank Image2D output and getting the ref
        var outputImg = this._addOutput( Image2D );
        
        // filling it with actual data
        outputImg.setData(
          outputBuffer,
          inputImg.getWidth(),
          inputImg.getHeight(),
          ncpp
        );
        */
      } else {
        outputBuffer = null;
        console.warn("The input data must have 1, 3 or 4 components per pixel.");
        return;
      }
    }
  }]);
  return SimpleThresholdFilter;
}(ImageToImageFilter); /* END of class SimpleThresholdFilter */

/*
* Author   Jonathan Lurie - http://me.jonathanlurie.fr
* License  MIT
* Link      https://github.com/Pixpipe/pixpipejs
* Lab       MCIN - Montreal Neurological Institute
*/

/**
* A ImageDerivativeFilter filter will compute the dx and dy derivative using the filters
* h = [1, -1]
* 
* You can change the built-in filters that perform the derivative by setting the metadata
*  "dxFilter" and "dyFilter" with the method `.setMetadata()`. See the documentation of
* `SpatialConvolutionFilter` to make your custom filter compatible.
*
* **Usage**
* - [examples/derivativeImage2D.html](../examples/derivativeImage2D.html)
*
*/

var ImageDerivativeFilter = function (_ImageToImageFilter) {
  inherits(ImageDerivativeFilter, _ImageToImageFilter);

  function ImageDerivativeFilter() {
    classCallCheck(this, ImageDerivativeFilter);

    var _this = possibleConstructorReturn(this, (ImageDerivativeFilter.__proto__ || Object.getPrototypeOf(ImageDerivativeFilter)).call(this));

    _this.addInputValidator(0, Image2D);

    // filters for derivative
    var dx = [[1, -1]];

    var dy = [[1], [-1]];

    _this.setMetadata("dxFilter", dx);
    _this.setMetadata("dyFilter", dy);
    return _this;
  }

  createClass(ImageDerivativeFilter, [{
    key: '_run',
    value: function _run() {
      // the input checking
      if (!this.hasValidInput()) {
        console.warn("A filter of type ImageDerivativeFilter requires 1 input of category '0' and one input of category '1'.");
        return;
      }

      var inputImg = this._getInput(0);

      var dx = this.getMetadata('dxFilter');
      var dy = this.getMetadata('dyFilter');

      var spatialConv = new pixpipe.SpatialConvolutionFilter();
      spatialConv.addInput(inputImg);

      spatialConv.setMetadata("filter", dx);
      spatialConv.update();

      this._output["dx"] = spatialConv.getOutput();

      spatialConv.setMetadata("filter", dy);
      spatialConv.update();

      this._output["dy"] = spatialConv.getOutput();
    }
  }]);
  return ImageDerivativeFilter;
}(ImageToImageFilter); /* END class ImageDerivativeFilter */

/*
* Author   Jonathan Lurie - http://me.jonathanlurie.fr
* License  MIT
* Link      https://github.com/Pixpipe/pixpipejs
* Lab       MCIN - Montreal Neurological Institute
*/

/**
* An instance of GradientImageFilter takes 2 input Image2D: a derivative in x,
* with the category "dx" and a derivative in y with the category "dy". They must
* be the same size and have the same number of  components per pixel.
*
* **Usage**
* - [examples/gradientImage2D.html](../examples/gradientImage2D.html)
*/

var GradientImageFilter = function (_ImageToImageFilter) {
  inherits(GradientImageFilter, _ImageToImageFilter);

  function GradientImageFilter() {
    classCallCheck(this, GradientImageFilter);

    var _this = possibleConstructorReturn(this, (GradientImageFilter.__proto__ || Object.getPrototypeOf(GradientImageFilter)).call(this));

    _this.addInputValidator('dx', Image2D);
    _this.addInputValidator('dy', Image2D);
    return _this;
  }

  createClass(GradientImageFilter, [{
    key: '_run',
    value: function _run() {
      // the input checking
      if (!this.hasValidInput()) {
        console.warn("A filter of type GradientImageFilter requires 1 input of category 'dx' and 1 input of category 'dy'.");
        return;
      }

      // they must be the same size and same ncpp
      if (!this.hasSameSizeInput() || !this.hasSameNcppInput()) {
        return;
      }

      var dxImage = this._getInput("dx");
      var dxImageData = dxImage.getData();

      var dyImage = this._getInput("dy");
      var dyImageData = dyImage.getData();

      var gradMagnitude = dxImage.hollowClone();
      var gradMagnitudeData = gradMagnitude.getData();

      var gradDirection = dxImage.hollowClone();
      var gradDirectionData = gradDirection.getData();

      var magnitudeExtrema = { min: Infinity, max: -Infinity };
      var directionExtrema = { min: Infinity, max: -Infinity };

      for (var i = 0; i < dxImageData.length; i++) {
        // gradient magnitude
        gradMagnitudeData[i] = Math.sqrt(dxImageData[i] * dxImageData[i] + dyImageData[i] * dyImageData[i]);
        if (!isNaN(gradMagnitudeData[i])) {
          magnitudeExtrema.min = Math.min(magnitudeExtrema.min, gradMagnitudeData[i]);
          magnitudeExtrema.max = Math.max(magnitudeExtrema.max, gradMagnitudeData[i]);
        }

        // gradient direction
        gradDirectionData[i] = Math.atan(dyImageData[i] / dxImageData[i]);
        if (!isNaN(gradDirectionData[i])) {
          directionExtrema.min = Math.min(directionExtrema.min, gradDirectionData[i]);
          directionExtrema.max = Math.max(directionExtrema.max, gradDirectionData[i]);
        }
      }

      gradMagnitude.setMetadata("min", magnitudeExtrema.min);
      gradMagnitude.setMetadata("max", magnitudeExtrema.max);

      gradDirection.setMetadata("min", directionExtrema.min);
      gradDirection.setMetadata("max", directionExtrema.max);

      this._output["direction"] = gradDirection;
      this._output["magnitude"] = gradMagnitude;
    }
  }]);
  return GradientImageFilter;
}(ImageToImageFilter); /* END of class GradientImageFilter  */

/*
* Author   Jonathan Lurie - http://me.jonathanlurie.fr
* License  MIT
* Link      https://github.com/Pixpipe/pixpipejs
* Lab       MCIN - Montreal Neurological Institute
*/

/**
* A NormalizeImageFilter instance takes an Image2D as input and outputs an Image2D.
* The output images will have values in [0.0, 1.0]. One of the usage is that is can then
* be used as a scaling function.
* 
* The max value to normalize with will be the max value of the input image (among all components)
* but an manual max value can be given to this filter using `.setMetadata("max", m)`.
*
* **Usage**
* - [examples/gradientHueWheelImage2D.html](../examples/gradientHueWheelImage2D.html)
*
*/

var NormalizeImageFilter = function (_ImageToImageFilter) {
  inherits(NormalizeImageFilter, _ImageToImageFilter);

  function NormalizeImageFilter() {
    classCallCheck(this, NormalizeImageFilter);

    var _this = possibleConstructorReturn(this, (NormalizeImageFilter.__proto__ || Object.getPrototypeOf(NormalizeImageFilter)).call(this));

    _this.addInputValidator(0, Image2D);

    _this.setMetadata("max", NaN);
    return _this;
  }

  createClass(NormalizeImageFilter, [{
    key: '_run',
    value: function _run() {
      // the input checking
      if (!this.hasValidInput()) {
        console.warn("A filter of type */ requires 1 input of category '0'.");
        return;
      }

      var inputImage = this._input[0];
      var inputData = inputImage.getData();
      var outputImg = inputImage.hollowClone();
      var outputData = outputImg.getData();

      var max = this.getMetadata("max");
      if (isNaN(max)) {
        max = inputImage.getMax();
      }

      for (var i = 0; i < inputData.length; i++) {
        outputData[i] = inputData[i] / max;
      }

      this._output[0] = outputImg;
    }
  }]);
  return NormalizeImageFilter;
}(ImageToImageFilter); /* END class NormalizeImageFilter */

/*
* Author   Jonathan Lurie - http://me.jonathanlurie.fr
* License  MIT
* Link      https://github.com/Pixpipe/pixpipejs
* Lab       MCIN - Montreal Neurological Institute
*/

/**
* An instance of ContourImage2DFilter takes a seed (`.setMetadata("seed", [x, y])`)
* and finds the contour of the shape of a segmented image by going north.
* The input must be an `Image2D` and the output is a `LineString`.  
* Two options are availble for neighbour connexity: 4 or 8. Set this option using
* `.setMetadata("connexity", n)`.
*
* **Usage**
* - [examples/contourImage2D.html](../examples/contourImage2D.html)
*
*/

var ContourImage2DFilter = function (_Filter) {
  inherits(ContourImage2DFilter, _Filter);

  function ContourImage2DFilter() {
    classCallCheck(this, ContourImage2DFilter);

    var _this = possibleConstructorReturn(this, (ContourImage2DFilter.__proto__ || Object.getPrototypeOf(ContourImage2DFilter)).call(this));

    _this.addInputValidator(0, Image2D);
    _this.setMetadata("connexity", 8);
    _this.setMetadata("seed", [0, 0]);

    _this._directionListConnexity4 = [[0, -1], // [0] => N
    [-1, 0], // [1] => W
    [0, 1], // [2] => S
    [1, 0] // [3] => E
    ];

    _this._directionListConnexity8 = [[0, -1], // [0] => N
    [-1, -1], // [1] => NW
    [-1, 0], // [2] => W
    [-1, 1], // [3] => SW
    [0, 1], // [4] => S
    [1, 1], // [5] => SE
    [1, 0], // [6] => E
    [1, -1] // [7] => NE
    ];

    return _this;
  }

  createClass(ContourImage2DFilter, [{
    key: '_run',
    value: function _run() {
      // the input checking
      if (!this.hasValidInput()) {
        console.warn("A filter of type AngleToHueWheelHelper requires 1 input of category '0'.");
        return;
      }

      var imageIn = this._getInput(0);
      var ncpp = imageIn.getNcpp();
      var width = imageIn.getWidth();
      var height = imageIn.getHeight();
      var directionList = null;

      if (this.getMetadata("connexity") == 8) {
        directionList = this._directionListConnexity8;
      } else {
        directionList = this._directionListConnexity4;
      }

      // handy color comparison
      function isSameColor(c1, c2) {
        if (c1.length != c2.length) return false;

        for (var i = 0; i < c1.length; i++) {
          if (c1[i] != c2[i]) return false;
        }
        return true;
      }

      var newSeed = this._metadata.seed.slice();
      var directionIncrement = directionList.length / 4;
      var direction = directionIncrement; // once top north, we go west

      if (newSeed[0] < 0 || newSeed[1] < 0 || newSeed[0] >= width || newSeed[1] >= height) {
        console.warn("The seed is out of image range.");
        return;
      }

      var clusterColor = imageIn.getPixel({ x: newSeed[0], y: newSeed[1] });
      var newColor = clusterColor;
      var atNorth = newSeed.slice();

      var canStartFromOriginalSeed = false;

      // test the local surrounding and avoid going North
      for (var i = 0; i < this._directionListConnexity4.length; i++) {
        var localColor = imageIn.getPixel({ x: newSeed[0] + this._directionListConnexity4[i][0], y: newSeed[1] + this._directionListConnexity4[i][1] });

        if (!isSameColor(localColor, clusterColor)) {
          canStartFromOriginalSeed = true;
          direction = i;

          if (this.getMetadata("connexity") == 8) {
            direction *= 2;
          }

          direction += directionIncrement;
          break;
        }
      }

      // first, we go to the north border of our cluster
      while (true && !canStartFromOriginalSeed) {
        atNorth[0] += directionList[0][0];
        atNorth[1] += directionList[0][1];

        // we reached the border of the image
        if (atNorth[0] < 0) {
          newSeed[0] = 0;
          newSeed[1] = atNorth[1];
          break;
        }

        // can be null if out of the image
        newColor = imageIn.getPixel({ x: atNorth[0], y: atNorth[1] });

        if (newColor && isSameColor(newColor, clusterColor)) {
          newSeed[0] = atNorth[0];
          newSeed[1] = atNorth[1];
        } else {
          break;
        }
      }

      var movingPoint = newSeed.slice();
      var potentialPosition = [0, 0];
      var listOfValidPoints = [];
      listOfValidPoints.push(newSeed[0]);
      listOfValidPoints.push(newSeed[1]);

      // return 0: the tested point is the starting point
      // return 1: the tested point is of the right color
      // return 2: the tested point id from the wrong color (test other direction)
      function tryPotientialPosition() {

        potentialPosition[0] = movingPoint[0] + directionList[direction][0];
        potentialPosition[1] = movingPoint[1] + directionList[direction][1];

        // prevent from going ouside the image
        if (potentialPosition[0] < 0 || potentialPosition[1] < 0 || potentialPosition[0] >= width || potentialPosition[1] >= height) {
          return 2;
        }

        var potentialPositionColor = imageIn.getPixel({ x: potentialPosition[0], y: potentialPosition[1] });

        // test if the new direction goes with the same color
        if (isSameColor(potentialPositionColor, clusterColor)) {

          if (potentialPosition[0] == listOfValidPoints[0] && // the point just found is the
          potentialPosition[1] == listOfValidPoints[1]) // same as the very first
            {
              return 0; // break the loop
            } else {
            // we validate the point and keep moving
            movingPoint[0] = potentialPosition[0];
            movingPoint[1] = potentialPosition[1];
            listOfValidPoints.push(movingPoint[0]);
            listOfValidPoints.push(movingPoint[1]);
          }
          return 1; // continue the loop
        }
        return 2; // try directions
      }

      // start the real navigation, starting from movingPoint
      main_loop: while (true) {

        // go the previous direction on the list
        direction -= directionIncrement;
        if (direction < 0) direction = directionList.length - directionIncrement;

        var score = tryPotientialPosition();

        if (score == 0) {
          break main_loop;
        } else if (score == 1) {
          continue;
        } else {
          // score == 2

          var nbTrials = 0;

          // we try the other directions
          direction_loop: for (var i = 0; i < directionList.length - 1; i++) {
            // -1 because we don't need to retry the last, since it's also the one done before

            //direction += i;
            direction++;
            direction = direction % directionList.length;
            score = tryPotientialPosition();

            if (score == 0) {
              break main_loop; // back to the start point/seed
            } else if (score == 1) {
              break direction_loop; // point is good, 
            } else {
              nbTrials++;
              continue; // try the next direction
            }
          }

          // it means the seed was in a single pixel island :(
          if (nbTrials == directionList.length - 1) {
            break;
          }
        }
      }

      var outputLineString = new LineString();
      outputLineString.setData(listOfValidPoints);
      outputLineString.setMetadata("closed", true);
      this._output[0] = outputLineString;
    } /* END of _run() */

  }]);
  return ContourImage2DFilter;
}(Filter); /* END of class ContourImage2DFilter */

/*
* Author   Jonathan Lurie - http://me.jonathanlurie.fr
* License  MIT
* Link      https://github.com/Pixpipe/pixpipejs
* Lab       MCIN - Montreal Neurological Institute
*/

/**
* A FloodFillImageFilter instance takes an Image2D as input and gives a Image2D
* as output.  
* The starting point of the flood (seed) has to be set using `.setMetadata("seed", [x, y])`
* where `x` and `y` are winthin the boundaries of the image.  
* The tolerance can also be set using `.setMetadata("tolerance", n)`.
* The tolerance is an absolute average over each component per pixel.
* 
* Neighbour connexity can be 4 or 8 using `.setMetadata("connexity", n)`.
* Destination color can be set with `.setMetadata("color", [r, g, b])`.
* The color array depends on your input image and can be of size 1 (intensity),
* 3 (RGB), 4 (RBGA) or other if multispectral.
*
* In addition to the output image, the list of internal hit points is created and
* availble with `.getOutput("hits")`.
*
*
* **Usage**
* - [examples/floodFillImage2D.html](../examples/floodFillImage2D.html)
*
*
*/

var FloodFillImageFilter = function (_ImageToImageFilter) {
  inherits(FloodFillImageFilter, _ImageToImageFilter);

  function FloodFillImageFilter() {
    classCallCheck(this, FloodFillImageFilter);

    var _this = possibleConstructorReturn(this, (FloodFillImageFilter.__proto__ || Object.getPrototypeOf(FloodFillImageFilter)).call(this));

    _this.addInputValidator(0, Image2D);
    _this.setMetadata("tolerance", 1);
    _this.setMetadata("connexity", 4);
    _this.setMetadata("color", null);
    _this.setMetadata("onlyHits", false);

    _this._directionListConnexity4 = [[0, -1], // [0] => N
    [-1, 0], // [1] => W
    [0, 1], // [2] => S
    [1, 0] // [3] => E
    ];

    _this._directionListConnexity8 = [[0, -1], // [0] => N
    [-1, -1], // [1] => NW
    [-1, 0], // [2] => W
    [-1, 1], // [3] => SW
    [0, 1], // [4] => S
    [1, 1], // [5] => SE
    [1, 0], // [6] => E
    [1, -1] // [7] => NE
    ];

    return _this;
  }

  createClass(FloodFillImageFilter, [{
    key: '_run',
    value: function _run() {

      // the input checking
      if (!this.hasValidInput()) {
        console.warn("A filter of type FloodFillImageFilter requires 1 input of category '0'.");
        return;
      }

      var imageIn = this._getInput(0);
      var ncpp = imageIn.getNcpp();
      var width = imageIn.getWidth();
      var height = imageIn.getHeight();
      var directionList = null;

      if (this.getMetadata("connexity") == 8) {
        directionList = this._directionListConnexity8;
      } else {
        directionList = this._directionListConnexity4;
      }

      var replacementColor = new Array(ncpp); // red
      replacementColor[0] = 255;

      var paintColor = this.getMetadata("color") || replacementColor;

      // checking color validity
      if (paintColor.length != ncpp) {
        if (!(paintColor.length == 3 && ncpp == 4)) {
          console.warn("The color to fill must have the same number of components as the input image. (RGB color for RGBA image is accepted)");
          return;
        }
      }

      // to mark the place we've been in the filling
      var markerImage = new Image2D({ width: width, height: height, color: [0] });
      var seed = this.getMetadata("seed");
      var seedColor = imageIn.getPixel({ x: seed[0], y: seed[1] });
      var tolerance = this.getMetadata("tolerance");
      var onlyHits = this.getMetadata("onlyHits");

      var imageOut = null;
      if (!onlyHits) {
        imageOut = imageIn.clone();
      }

      // the points in this list are points at the edge, except the edge of the image
      var edgePointList = [];

      var pixelStack = [];
      pixelStack.push(seed);

      while (pixelStack.length > 0) {

        var currentPixel = pixelStack.pop();
        var x = currentPixel[0];
        var y = currentPixel[1];

        if (x < 0 || x >= width || y < 0 || y >= height) {
          continue;
        }

        // if the image was not filled here...
        if (markerImage.getPixel({ x: x, y: y })[0] == 0) {

          // mark as visited
          markerImage.setPixel({ x: x, y: y }, [1]);

          // paint the image
          if (!onlyHits) {
            imageOut.setPixel({ x: x, y: y }, paintColor);
          }

          // check neighbours upon connexity degree
          var potentialPosition = [0, 0];
          var isOnEdge = false;

          for (var i = 0; i < directionList.length; i++) {
            potentialPosition[0] = x + directionList[i][0];
            potentialPosition[1] = y + directionList[i][1];

            if (potentialPosition[0] < 0 || potentialPosition[0] >= width || potentialPosition[1] < 0 || potentialPosition[1] >= height) {
              continue;
            }

            var targetColor = imageIn.getPixel({ x: potentialPosition[0], y: potentialPosition[1] });

            var isWithinTolerance = true;
            for (var c = 0; c < seedColor.length; c++) {
              if (Math.abs(targetColor[c] - seedColor[c]) > tolerance) {
                isWithinTolerance = false;
                isOnEdge = true;
                break;
              }
            } /* END for loop color channels */

            if (isWithinTolerance) {
              var newCandidate = [potentialPosition[0], potentialPosition[1]];
              pixelStack.push(newCandidate);
            }
          } /* END for loop direction*/

          if (isOnEdge) {
            if (x != 0 && x != width - 1 && y != 0 && y != height - 1) {
              // we dont want the edge of the image
              edgePointList.push(currentPixel);
            }
          }
        } /* END if image was not filled at this position */
      } /* END while loop unstacking the points */

      if (!onlyHits) {
        this._output[0] = imageOut;
      }

      this._output["edgePoints"] = edgePointList;
    } /* END of _run() */

  }]);
  return FloodFillImageFilter;
}(ImageToImageFilter); /* END of class FloodFillImageFilter */

/*
* Author   Jonathan Lurie - http://me.jonathanlurie.fr
* License  MIT
* Link      https://github.com/Pixpipe/pixpipejs
* Lab       MCIN - Montreal Neurological Institute
*/

/**
*
*/

var ContourHolesImage2DFilter = function (_Filter) {
  inherits(ContourHolesImage2DFilter, _Filter);

  function ContourHolesImage2DFilter() {
    classCallCheck(this, ContourHolesImage2DFilter);

    var _this = possibleConstructorReturn(this, (ContourHolesImage2DFilter.__proto__ || Object.getPrototypeOf(ContourHolesImage2DFilter)).call(this));

    _this.addInputValidator(0, Image2D);
    _this.setMetadata("connexity", 4);
    _this.setMetadata("seed", [0, 0]);
    return _this;
  }

  createClass(ContourHolesImage2DFilter, [{
    key: '_run',
    value: function _run() {

      // the input checking
      if (!this.hasValidInput()) {
        console.warn("A filter of type ContourHolesImage2DFilter requires 1 input of category '0'.");
        return;
      }

      var imageIn = this._getInput(0);
      var ncpp = imageIn.getNcpp();
      var width = imageIn.getWidth();
      var height = imageIn.getHeight();
      var contours = [];

      var connexity = this.getMetadata("connexity");
      var seed = this.getMetadata("seed");

      // finding the 1st contour
      var contourDetector = new ContourImage2DFilter();
      contourDetector.addInput(imageIn);
      contourDetector.setMetadata("connexity", connexity);
      contourDetector.setMetadata("seed", seed);
      contourDetector.update();

      contours.push(contourDetector.getOutput());

      // From the same seed, flood fill - we dont care about the filled image, but
      // we want the hit points from it
      var filler = new FloodFillImageFilter();
      filler.addInput(imageIn);
      filler.setMetadata('onlyHits', false); // if we are not interested in the image but just want the hit points, this must be true.
      filler.setMetadata("connexity", 4); // could be 4
      filler.setMetadata("tolerance", 0); // in pixel value, applied to each component
      filler.setMetadata("seed", seed);
      filler.update();

      var fillingEdgePoints = filler.getOutput("edgePoints");

      var flyContourDetector = new ContourImage2DFilter(); // will be reused several times
      flyContourDetector.setMetadata("time", false); // prevent every little contour finding to print their time

      // for each point found while filling, we check if already in one of the contours.
      // if not already, we launch a new contour extraction from this point (as a seed)
      // and add a new contour.
      for (var i = 0; i < fillingEdgePoints.length; i++) {
        var edgePoint = fillingEdgePoints[i];

        var isAlreadyPartOfContour = false;

        for (var c = 0; c < contours.length; c++) {
          if (contours[c].hasPoint(edgePoint)) {
            isAlreadyPartOfContour = true;
            break;
          }
        }

        if (!isAlreadyPartOfContour) {
          // finding the 1st contour

          flyContourDetector.addInput(imageIn);
          flyContourDetector.setMetadata("connexity", connexity);
          flyContourDetector.setMetadata("seed", edgePoint);
          flyContourDetector.update();

          contours.push(flyContourDetector.getOutput());
        }
      } /* END of for loop over edge points */

      for (var i = 0; i < contours.length; i++) {
        this._output[i] = contours[i];
      }
    }
  }]);
  return ContourHolesImage2DFilter;
}(Filter); /* END of class ContourHolesImage2DFilter */

/*
* Author   Jonathan Lurie - http://me.jonathanlurie.fr
* License  MIT
* Link      https://github.com/Pixpipe/pixpipejs
* Lab       MCIN - Montreal Neurological Institute
*/

/**
* This Filter is a bit special in a sense that it does not output anything. It takes
* an Image2D as output "0" and the event "pixel" must be defined, with a callback taking
* two arguments: the position as an object {x: Number, y: Number} and the color as
* an array, ie. [Number, Number, Number] for an RGB image.
*
* This filter is convenient for computing statistics or for anything where the output is mannually
* created ( because the filter ForEachPixelImageFilter creates an output with same number of band.)
*
* **Usage**
* - [the filter TerrainRgbToElevationImageFilter](https://github.com/Pixpipe/pixpipejs/blob/master/src/filter/TerrainRgbToElevationImageFilter.js)
*
*/

var ForEachPixelReadOnlyFilter = function (_Filter) {
  inherits(ForEachPixelReadOnlyFilter, _Filter);

  function ForEachPixelReadOnlyFilter() {
    classCallCheck(this, ForEachPixelReadOnlyFilter);

    var _this = possibleConstructorReturn(this, (ForEachPixelReadOnlyFilter.__proto__ || Object.getPrototypeOf(ForEachPixelReadOnlyFilter)).call(this));

    _this.addInputValidator(0, Image2D);
    return _this;
  }

  createClass(ForEachPixelReadOnlyFilter, [{
    key: '_run',
    value: function _run() {

      // the input checking
      if (!this.hasValidInput()) {
        console.warn("A filter of type ForEachPixelReadOnlyFilter requires 1 input of category '0'.");
        return;
      }

      if (!this.hasEvent("pixel")) {
        console.warn("No function to apply per pixel was specified.");
        return;
      }

      var imageIn = this._getInput(0);
      var ncpp = imageIn.getNcpp();
      var width = imageIn.getWidth();
      var height = imageIn.getHeight();

      // reading pixel by pixel
      for (var j = 0; j < height; j++) {
        for (var i = 0; i < width; i++) {
          var position = { x: i, y: j };
          var color = imageIn.getPixel(position);
          this.triggerEvent("pixel", position, color);
        }
      }
    }
  }]);
  return ForEachPixelReadOnlyFilter;
}(Filter); /* END of class ForEachPixelReadOnlyFilter */

/*
* Author   Jonathan Lurie - http://me.jonathanlurie.fr
* License  MIT
* Link      https://github.com/Pixpipe/pixpipejs
* Lab       MCIN - Montreal Neurological Institute
*/

/**
* This filter's purpose is to convert Mapbox's TerrainRGB image data into monochannel
* elevation (in meter).
* See more info about the format here: https://www.mapbox.com/blog/terrain-rgb/
* The filter takes an Image2D that respect Mapbox's format (can be a result of stictching tiles together)
* and output a single component image with possibly up to 16777216 different values.
*
* **Usage**
* - [examples/terrainRgbToElevation.html](../examples/terrainRgbToElevation.html)
*
*/

var TerrainRgbToElevationImageFilter = function (_ImageToImageFilter) {
  inherits(TerrainRgbToElevationImageFilter, _ImageToImageFilter);

  function TerrainRgbToElevationImageFilter() {
    classCallCheck(this, TerrainRgbToElevationImageFilter);

    var _this = possibleConstructorReturn(this, (TerrainRgbToElevationImageFilter.__proto__ || Object.getPrototypeOf(TerrainRgbToElevationImageFilter)).call(this));

    _this.addInputValidator(0, Image2D);
    return _this;
  }

  createClass(TerrainRgbToElevationImageFilter, [{
    key: '_run',
    value: function _run() {
      // the input checking
      if (!this.hasValidInput()) {
        console.warn("A filter of type TerrainRgbToElevationImageFilter requires 1 input of category '0'.");
        return;
      }

      var imageIn = this._getInput(0);
      var ncpp = imageIn.getNcpp();
      var width = imageIn.getWidth();
      var height = imageIn.getHeight();

      // the image must be RGB or RGBA (we dont use A)
      if (ncpp < 3) {
        console.warn("A filter of type TerrainRgbToElevationImageFilter requires an input with at least 3 components per pixel.");
        return;
      }

      // monochannel output, init with zeros
      var outputImg = new pixpipe.Image2D({ width: width, height: height, color: [0] });
      var forEachPixelFilterRead = new pixpipe.ForEachPixelReadOnlyFilter();

      // add the input input
      forEachPixelFilterRead.addInput(imageIn);

      forEachPixelFilterRead.on("pixel", function (position, color) {
        var elevation = -10000 + (color[0] * 256 * 256 + color[1] * 256 + color[2]) * 0.1;
        outputImg.setPixel(position, [elevation]);
      });

      forEachPixelFilterRead.update();
      this._output[0] = outputImg;
    }
  }]);
  return TerrainRgbToElevationImageFilter;
}(ImageToImageFilter); /* END of class TerrainRgbToElevationImageFilter */

/*
* Author    Jonathan Lurie - http://me.jonathanlurie.fr
*
* License   MIT
* Link      https://github.com/Pixpipe/pixpipejs
* Lab       MCIN - Montreal Neurological Institute
*/

/**
* With a given set of points ( each being {x: Number, y: Number, value: Number} )
* An instance of NearestNeighborSparseInterpolationImageFilter creates an image where
* each value is the closest from the given point.
* 
* The original points/measures must be given as an Array of Object using
* the method `.addInput([...])`
*
* The output image size must be set using the method
* `.setMetadata( "outputSize", {width: Number, height: Number})`
*
* The given point can be outside the output image boundaries.
* 
* **Usage**
* - [examples/nearestSparseInterpolation.html](../examples/nearestSparseInterpolation.html)
*/

var NearestNeighborSparseInterpolationImageFilter = function (_Filter) {
  inherits(NearestNeighborSparseInterpolationImageFilter, _Filter);

  function NearestNeighborSparseInterpolationImageFilter() {
    classCallCheck(this, NearestNeighborSparseInterpolationImageFilter);

    var _this = possibleConstructorReturn(this, (NearestNeighborSparseInterpolationImageFilter.__proto__ || Object.getPrototypeOf(NearestNeighborSparseInterpolationImageFilter)).call(this));

    _this.setMetadata("outputSize", { width: 0, height: 0 });
    return _this;
  }

  createClass(NearestNeighborSparseInterpolationImageFilter, [{
    key: '_run',
    value: function _run() {

      var points = null;

      // getting the input
      if ("0" in this._input) {
        points = this._input[0];
      } else {
        console.warn("No input point set were given.");
        return;
      }

      var outputSize = this.getMetadata("outputSize");

      // checking output size
      if (outputSize.width == 0 || outputSize.height == 0) {
        console.warn("The output size cannot be 0.");
        return;
      }

      // creating the output image
      var out = new pixpipe.Image2D({ width: outputSize.width, height: outputSize.height, color: [0] });

      // for each pixel of the image...
      for (var i = 0; i < outputSize.width; i++) {
        for (var j = 0; j < outputSize.height; j++) {

          var nearestPointIndex = 0;
          var nearestDistance = Infinity;

          // for each point of the original set...
          for (var p = 0; p < points.length; p++) {

            // compute euclidian distance from [i, j] to p(x, y)
            var d = Math.sqrt(Math.pow(points[p].x - i, 2) + Math.pow(points[p].y - j, 2));

            if (d < nearestDistance) {
              nearestDistance = d;
              nearestPointIndex = p;
            }
          }

          out.setPixel({ x: i, y: j }, [points[nearestPointIndex].value]);
        }
      }

      this._output[0] = out;
    }
  }]);
  return NearestNeighborSparseInterpolationImageFilter;
}(Filter); /* END of class NearestNeighborSparseInterpolationImageFilter */

/*
* Author    Jonathan Lurie - http://me.jonathanlurie.fr
*
* License   MIT
* Link      https://github.com/Pixpipe/pixpipejs
* Lab       MCIN - Montreal Neurological Institute
*/

/**
* An instance of IDWSparseInterpolationImageFilter performs a 2D interpolation from 
* a sparse dataset using the method of Inverse Distance Weighting.
* The original dataset is specified using the method `.addInput( points )`, where
* `points` is an `Array` of `{x: Number, y: Number, value: Number}`.
* This filter outputs an `Image2D` with interpolated values. The size of the output must be
* specified using the method `.setMetadata( "outputSize", {width: Number, height: Number})`.
*
* The IDW algorithm can be tuned with a "strength", which is essentially the value
* of exponent of the distances. Default is `2` but it is common the see a value
* of `1` or `3`. With higher values, the output will look like a cells pattern.
* The strength can be defined using the method `.setMetadata( "strength", Number )`
*
* Note 1: points can be outside the boundaries of the original image
* Note 2: interpolated values are floating point
*
* Note that only single-component images are outputed from this filter.
* Ressources:
* https://www.e-education.psu.edu/geog486/node/1877
* 
* **Usage**
* - [examples/nearestSparseInterpolation.html](../examples/nearestSparseInterpolation.html)
*/

var IDWSparseInterpolationImageFilter = function (_Filter) {
  inherits(IDWSparseInterpolationImageFilter, _Filter);

  function IDWSparseInterpolationImageFilter() {
    classCallCheck(this, IDWSparseInterpolationImageFilter);

    var _this = possibleConstructorReturn(this, (IDWSparseInterpolationImageFilter.__proto__ || Object.getPrototypeOf(IDWSparseInterpolationImageFilter)).call(this));

    _this.setMetadata("strength", 2);
    _this.setMetadata("outputSize", { width: 0, height: 0 });
    return _this;
  }

  createClass(IDWSparseInterpolationImageFilter, [{
    key: '_run',
    value: function _run() {

      var points = null;

      // getting the input
      if ("0" in this._input) {
        points = this._input[0];
      } else {
        console.warn("No input point set were given.");
        return;
      }

      var outputSize = this.getMetadata("outputSize");

      // checking output size
      if (outputSize.width == 0 || outputSize.height == 0) {
        console.warn("The output size cannot be 0.");
        return;
      }

      // creating the output image
      var out = new pixpipe.Image2D({ width: outputSize.width, height: outputSize.height, color: [0] });
      var strength = this.getMetadata("strength");
      for (var i = 0; i < outputSize.width; i++) {
        for (var j = 0; j < outputSize.height; j++) {

          if (i == 90 && j == 90) {
            console.log("here");
          }

          var numerator = 0;
          var denominator = 0;

          // value taken when a pixel is exactely on one of the original point
          var pointValue = null;
          var isOnPoint = false;

          // for each point of the original set...
          for (var p = 0; p < points.length; p++) {
            // compute euclidian distance from [i, j] to p(x, y)
            var d = Math.sqrt(Math.pow(points[p].x - i, 2) + Math.pow(points[p].y - j, 2));

            if (d == 0) {
              isOnPoint = true;
              pointValue = points[p].value;
              break;
            }

            numerator += points[p].value / Math.pow(d, strength);
            denominator += 1 / Math.pow(d, strength);
          }

          var pixelValue = isOnPoint ? pointValue : numerator / denominator;

          out.setPixel({ x: i, y: j }, [pixelValue]);
        }
      }

      this._output[0] = out;
    }
  }]);
  return IDWSparseInterpolationImageFilter;
}(Filter); /* END of class IDWSparseInterpolationImageFilter */

var delaunay = createCommonjsModule$$1(function (module) {
  var Delaunay;

  (function () {
    "use strict";

    var EPSILON = 1.0 / 1048576.0;

    function supertriangle(vertices) {
      var xmin = Number.POSITIVE_INFINITY,
          ymin = Number.POSITIVE_INFINITY,
          xmax = Number.NEGATIVE_INFINITY,
          ymax = Number.NEGATIVE_INFINITY,
          i,
          dx,
          dy,
          dmax,
          xmid,
          ymid;

      for (i = vertices.length; i--;) {
        if (vertices[i][0] < xmin) xmin = vertices[i][0];
        if (vertices[i][0] > xmax) xmax = vertices[i][0];
        if (vertices[i][1] < ymin) ymin = vertices[i][1];
        if (vertices[i][1] > ymax) ymax = vertices[i][1];
      }

      dx = xmax - xmin;
      dy = ymax - ymin;
      dmax = Math.max(dx, dy);
      xmid = xmin + dx * 0.5;
      ymid = ymin + dy * 0.5;

      return [[xmid - 20 * dmax, ymid - dmax], [xmid, ymid + 20 * dmax], [xmid + 20 * dmax, ymid - dmax]];
    }

    function circumcircle(vertices, i, j, k) {
      var x1 = vertices[i][0],
          y1 = vertices[i][1],
          x2 = vertices[j][0],
          y2 = vertices[j][1],
          x3 = vertices[k][0],
          y3 = vertices[k][1],
          fabsy1y2 = Math.abs(y1 - y2),
          fabsy2y3 = Math.abs(y2 - y3),
          xc,
          yc,
          m1,
          m2,
          mx1,
          mx2,
          my1,
          my2,
          dx,
          dy;

      /* Check for coincident points */
      if (fabsy1y2 < EPSILON && fabsy2y3 < EPSILON) throw new Error("Eek! Coincident points!");

      if (fabsy1y2 < EPSILON) {
        m2 = -((x3 - x2) / (y3 - y2));
        mx2 = (x2 + x3) / 2.0;
        my2 = (y2 + y3) / 2.0;
        xc = (x2 + x1) / 2.0;
        yc = m2 * (xc - mx2) + my2;
      } else if (fabsy2y3 < EPSILON) {
        m1 = -((x2 - x1) / (y2 - y1));
        mx1 = (x1 + x2) / 2.0;
        my1 = (y1 + y2) / 2.0;
        xc = (x3 + x2) / 2.0;
        yc = m1 * (xc - mx1) + my1;
      } else {
        m1 = -((x2 - x1) / (y2 - y1));
        m2 = -((x3 - x2) / (y3 - y2));
        mx1 = (x1 + x2) / 2.0;
        mx2 = (x2 + x3) / 2.0;
        my1 = (y1 + y2) / 2.0;
        my2 = (y2 + y3) / 2.0;
        xc = (m1 * mx1 - m2 * mx2 + my2 - my1) / (m1 - m2);
        yc = fabsy1y2 > fabsy2y3 ? m1 * (xc - mx1) + my1 : m2 * (xc - mx2) + my2;
      }

      dx = x2 - xc;
      dy = y2 - yc;
      return { i: i, j: j, k: k, x: xc, y: yc, r: dx * dx + dy * dy };
    }

    function dedup(edges) {
      var i, j, a, b, m, n;

      for (j = edges.length; j;) {
        b = edges[--j];
        a = edges[--j];

        for (i = j; i;) {
          n = edges[--i];
          m = edges[--i];

          if (a === m && b === n || a === n && b === m) {
            edges.splice(j, 2);
            edges.splice(i, 2);
            break;
          }
        }
      }
    }

    Delaunay = {
      triangulate: function triangulate(vertices, key) {
        var n = vertices.length,
            i,
            j,
            indices,
            st,
            open,
            closed,
            edges,
            dx,
            dy,
            a,
            b,
            c;

        /* Bail if there aren't enough vertices to form any triangles. */
        if (n < 3) return [];

        /* Slice out the actual vertices from the passed objects. (Duplicate the
         * array even if we don't, though, since we need to make a supertriangle
         * later on!) */
        vertices = vertices.slice(0);

        if (key) for (i = n; i--;) {
          vertices[i] = vertices[i][key];
        } /* Make an array of indices into the vertex array, sorted by the
           * vertices' x-position. Force stable sorting by comparing indices if
           * the x-positions are equal. */
        indices = new Array(n);

        for (i = n; i--;) {
          indices[i] = i;
        }indices.sort(function (i, j) {
          var diff = vertices[j][0] - vertices[i][0];
          return diff !== 0 ? diff : i - j;
        });

        /* Next, find the vertices of the supertriangle (which contains all other
         * triangles), and append them onto the end of a (copy of) the vertex
         * array. */
        st = supertriangle(vertices);
        vertices.push(st[0], st[1], st[2]);

        /* Initialize the open list (containing the supertriangle and nothing
         * else) and the closed list (which is empty since we havn't processed
         * any triangles yet). */
        open = [circumcircle(vertices, n + 0, n + 1, n + 2)];
        closed = [];
        edges = [];

        /* Incrementally add each vertex to the mesh. */
        for (i = indices.length; i--; edges.length = 0) {
          c = indices[i];

          /* For each open triangle, check to see if the current point is
           * inside it's circumcircle. If it is, remove the triangle and add
           * it's edges to an edge list. */
          for (j = open.length; j--;) {
            /* If this point is to the right of this triangle's circumcircle,
             * then this triangle should never get checked again. Remove it
             * from the open list, add it to the closed list, and skip. */
            dx = vertices[c][0] - open[j].x;
            if (dx > 0.0 && dx * dx > open[j].r) {
              closed.push(open[j]);
              open.splice(j, 1);
              continue;
            }

            /* If we're outside the circumcircle, skip this triangle. */
            dy = vertices[c][1] - open[j].y;
            if (dx * dx + dy * dy - open[j].r > EPSILON) continue;

            /* Remove the triangle and add it's edges to the edge list. */
            edges.push(open[j].i, open[j].j, open[j].j, open[j].k, open[j].k, open[j].i);
            open.splice(j, 1);
          }

          /* Remove any doubled edges. */
          dedup(edges);

          /* Add a new triangle for each edge. */
          for (j = edges.length; j;) {
            b = edges[--j];
            a = edges[--j];
            open.push(circumcircle(vertices, a, b, c));
          }
        }

        /* Copy any remaining open triangles to the closed list, and then
         * remove any triangles that share a vertex with the supertriangle,
         * building a list of triplets that represent triangles. */
        for (i = open.length; i--;) {
          closed.push(open[i]);
        }open.length = 0;

        for (i = closed.length; i--;) {
          if (closed[i].i < n && closed[i].j < n && closed[i].k < n) open.push(closed[i].i, closed[i].j, closed[i].k);
        } /* Yay, we're done! */
        return open;
      },
      contains: function contains(tri, p) {
        /* Bounding box test first, for quick rejections. */
        if (p[0] < tri[0][0] && p[0] < tri[1][0] && p[0] < tri[2][0] || p[0] > tri[0][0] && p[0] > tri[1][0] && p[0] > tri[2][0] || p[1] < tri[0][1] && p[1] < tri[1][1] && p[1] < tri[2][1] || p[1] > tri[0][1] && p[1] > tri[1][1] && p[1] > tri[2][1]) return null;

        var a = tri[1][0] - tri[0][0],
            b = tri[2][0] - tri[0][0],
            c = tri[1][1] - tri[0][1],
            d = tri[2][1] - tri[0][1],
            i = a * d - b * c;

        /* Degenerate tri. */
        if (i === 0.0) return null;

        var u = (d * (p[0] - tri[0][0]) - b * (p[1] - tri[0][1])) / i,
            v = (a * (p[1] - tri[0][1]) - c * (p[0] - tri[0][0])) / i;

        /* If we're outside the tri, fail. */
        if (u < 0.0 || v < 0.0 || u + v > 1.0) return null;

        return [u, v];
      }
    };

    module.exports = Delaunay;
  })();
});

/*
* Author    Jonathan Lurie - http://me.jonathanlurie.fr
*
* License   MIT
* Link      https://github.com/Pixpipe/pixpipejs
* Lab       MCIN - Montreal Neurological Institute
*/

/**
* An instance of TriangulationSparseInterpolationImageFilter performs a triangulation
* of an original dataset followed by a barycentric 2D interpolation. It is used to
* perform a 2D linear interpolation of a sparse dataset.
* The original dataset is specified using the method `.addInput( points )`, where
* `points` is an `Array` of `{x: Number, y: Number, value: Number}`.
* The triangulation is the result of a Delaunay triangulation.
* This filter outputs an `Image2D` with interpolated values only within the boundaries
* of the convex hull created by the triangulation. The size of the output must be
* specified using the method `.setMetadata( "outputSize", {width: Number, height: Number})`.
*
* Note 1: at least 3 unaligned points are required to perform a triangulation
* Note 2: points can be outside the boundaries of the original image
* Note 3: interpolated values are floating point
*
* Note that only single-component images are outputed from this filter.
* 
* **Usage**
* - [examples/TriangleSparseInterpolation.html](../examples/TriangleSparseInterpolation.html)
*/

var TriangulationSparseInterpolationImageFilter = function (_Filter) {
  inherits(TriangulationSparseInterpolationImageFilter, _Filter);

  function TriangulationSparseInterpolationImageFilter() {
    classCallCheck(this, TriangulationSparseInterpolationImageFilter);

    var _this = possibleConstructorReturn(this, (TriangulationSparseInterpolationImageFilter.__proto__ || Object.getPrototypeOf(TriangulationSparseInterpolationImageFilter)).call(this));

    _this.setMetadata("outputSize", { width: 0, height: 0 });
    return _this;
  }

  createClass(TriangulationSparseInterpolationImageFilter, [{
    key: '_run',
    value: function _run() {

      var origPoints = null;

      // getting the input
      if ("0" in this._input) {
        origPoints = this._input[0];
      } else {
        console.warn("No input point set were given.");
        return;
      }

      var outputSize = this.getMetadata("outputSize");

      // checking output size
      if (outputSize.width == 0 || outputSize.height == 0) {
        console.warn("The output size cannot be 0.");
        return;
      }

      // remapping the point as an array of ArrayBuffer
      var points = origPoints.map(function (p) {
        return [p.x, p.y];
      });

      // computing the list of triangles
      var triangleVertices = delaunay.triangulate(points);

      // rearranging the triangles in a propper array that group by 3 the index of vertices used
      var triangles = [];
      for (var i = 0; i <= triangleVertices.length - 3; i += 3) {
        triangles.push([triangleVertices[i], triangleVertices[i + 1], triangleVertices[i + 2]]);
      }

      console.log(points);
      console.log(triangles);

      // return the area of a triangle using Heron's formula
      // Each point A, B and C is a couple of 2D coords like [Number, Number] 
      function getTriangleArea(A, B, C) {
        // manhattan distances
        var _AB = [A[0] - B[0], A[1] - B[1]];
        var _BC = [B[0] - C[0], B[1] - C[1]];
        var _CA = [C[0] - A[0], C[1] - A[1]];

        // Euclidian distances - Pythagore
        var a = Math.sqrt(_BC[0] * _BC[0] + _BC[1] * _BC[1]);
        var b = Math.sqrt(_CA[0] * _CA[0] + _CA[1] * _CA[1]);
        var c = Math.sqrt(_AB[0] * _AB[0] + _AB[1] * _AB[1]);

        // semiperimeter
        var s = (a + b + c) / 2;

        var area = Math.sqrt(s * (s - a) * (s - b) * (s - c));
        return area;
      }

      // creating the output image
      var out = new pixpipe.Image2D({ width: Math.round(outputSize.width), height: Math.round(outputSize.height), color: [0] });

      // each line of the output image...
      for (var i = 0; i < outputSize.width; i++) {
        // each column of the output image...
        for (var j = 0; j < outputSize.height; j++) {

          var pixelValue = 0;
          var isInsideTriangle = false;
          var encompassingTriangle = 0;

          // each triangle...
          for (var t = 0; t < triangles.length; t++) {
            var contain = delaunay.contains([points[triangles[t][0]], points[triangles[t][1]], points[triangles[t][2]]], [i, j]);

            if (contain) {
              isInsideTriangle = true;
              encompassingTriangle = triangles[t];
              break;
            }
          }

          if (isInsideTriangle) {
            // vectices of the emcompassing triangle
            var _A = points[encompassingTriangle[0]];
            var _B = points[encompassingTriangle[1]];
            var _C = points[encompassingTriangle[2]];

            // current point of the image
            var _P = [i, j];

            // area of the emcompassing triangle (made only from points of the original dataset)
            var areaTriEncomp = getTriangleArea(_A, _B, _C);

            // area of each subtriangles
            var areaABP = getTriangleArea(_A, _B, _P);
            var areaBCP = getTriangleArea(_B, _C, _P);
            var areaCAP = getTriangleArea(_C, _A, _P);

            // making the color mix
            pixelValue = areaABP / areaTriEncomp * origPoints[encompassingTriangle[2]].value + areaBCP / areaTriEncomp * origPoints[encompassingTriangle[0]].value + areaCAP / areaTriEncomp * origPoints[encompassingTriangle[1]].value;
          }

          out.setPixel({ x: i, y: j }, [pixelValue]);
        }
      }

      this._output[0] = out;
    } // en of _run


  }]);
  return TriangulationSparseInterpolationImageFilter;
}(Filter); /* END of class TriangulationSparseInterpolationImageFilter */

/*
* Author   Jonathan Lurie - http://me.jonathanlurie.fr
* License  MIT
* Link      https://github.com/Pixpipe/pixpipejs
* Lab       MCIN - Montreal Neurological Institute
*/

/**
* An instance of CropImageFilter is used to crop an `Image2D`. This filter accepts
* a single input, using `.addInput( myImage )`, then, it requires a top left point
* that must be set with `.setMetadata( "x", Number)` and `.setMetadata( "y", Number)`.
* In addition, you must specify the width and heigth of the output using 
* `.setMetadata( "w", Number)` and `.setMetadata( "h", Number)`.
*
* **Usage**
* - [examples/cropImage2D.html](../examples/cropImage2D.html)
*
*/

var CropImageFilter = function (_ImageToImageFilter) {
  inherits(CropImageFilter, _ImageToImageFilter);

  function CropImageFilter() {
    classCallCheck(this, CropImageFilter);

    var _this = possibleConstructorReturn(this, (CropImageFilter.__proto__ || Object.getPrototypeOf(CropImageFilter)).call(this));

    _this.addInputValidator(0, Image2D);

    _this.setMetadata("x", 0);
    _this.setMetadata("y", 0);
    _this.setMetadata("w", 0);
    _this.setMetadata("h", 0);
    return _this;
  }

  createClass(CropImageFilter, [{
    key: '_run',
    value: function _run() {
      if (!this.hasValidInput()) {
        console.warn("A filter of type CropImageFilter requires 1 input of category '0' (Image2D)");
        return;
      }

      var startX = Math.round(this.getMetadata("x"));
      var startY = Math.round(this.getMetadata("y"));
      var outW = Math.round(this.getMetadata("w"));
      var outH = Math.round(this.getMetadata("h"));
      var endX = startX + outW;
      var endY = startY + outH;

      var inputImage = this._getInput(0);
      var inputWidth = inputImage.getWidth();
      var inputHeight = inputImage.getHeight();
      var ncpp = inputImage.getNcpp();

      if (startX < 0 || startY < 0 || startX >= inputWidth || startY >= inputHeight || endX < 0 || endY < 0 || endX >= inputWidth || endY >= inputHeight) {
        console.warn("The query area is out of bound");
        return;
      }

      var inputData = inputImage.getData();

      var outputImage = new Image2D({
        width: outW,
        height: outH,
        color: new inputData.constructor(ncpp)
      });

      for (var i = 0; i < outW; i++) {
        for (var j = 0; j < outH; j++) {
          var inputColor = inputImage.getPixel({ x: i + startX, y: j + startY });
          outputImage.setPixel({ x: i, y: j }, inputColor);
        }
      }

      this._output[0] = outputImage;
    }
  }]);
  return CropImageFilter;
}(ImageToImageFilter); /* END of class CropImageFilter */

var simplify = createCommonjsModule$$1(function (module) {
    /*
     (c) 2013, Vladimir Agafonkin
     Simplify.js, a high-performance JS polyline simplification library
     mourner.github.io/simplify-js
    */

    (function () {
        'use strict';

        // to suit your point format, run search/replace for '.x' and '.y';
        // for 3D version, see 3d branch (configurability would draw significant performance overhead)

        // square distance between 2 points

        function getSqDist(p1, p2) {

            var dx = p1.x - p2.x,
                dy = p1.y - p2.y;

            return dx * dx + dy * dy;
        }

        // square distance from a point to a segment
        function getSqSegDist(p, p1, p2) {

            var x = p1.x,
                y = p1.y,
                dx = p2.x - x,
                dy = p2.y - y;

            if (dx !== 0 || dy !== 0) {

                var t = ((p.x - x) * dx + (p.y - y) * dy) / (dx * dx + dy * dy);

                if (t > 1) {
                    x = p2.x;
                    y = p2.y;
                } else if (t > 0) {
                    x += dx * t;
                    y += dy * t;
                }
            }

            dx = p.x - x;
            dy = p.y - y;

            return dx * dx + dy * dy;
        }
        // rest of the code doesn't care about point format

        // basic distance-based simplification
        function simplifyRadialDist(points, sqTolerance) {

            var prevPoint = points[0],
                newPoints = [prevPoint],
                point;

            for (var i = 1, len = points.length; i < len; i++) {
                point = points[i];

                if (getSqDist(point, prevPoint) > sqTolerance) {
                    newPoints.push(point);
                    prevPoint = point;
                }
            }

            if (prevPoint !== point) newPoints.push(point);

            return newPoints;
        }

        // simplification using optimized Douglas-Peucker algorithm with recursion elimination
        function simplifyDouglasPeucker(points, sqTolerance) {

            var len = points.length,
                MarkerArray = typeof Uint8Array !== 'undefined' ? Uint8Array : Array,
                markers = new MarkerArray(len),
                first = 0,
                last = len - 1,
                stack = [],
                newPoints = [],
                i,
                maxSqDist,
                sqDist,
                index;

            markers[first] = markers[last] = 1;

            while (last) {

                maxSqDist = 0;

                for (i = first + 1; i < last; i++) {
                    sqDist = getSqSegDist(points[i], points[first], points[last]);

                    if (sqDist > maxSqDist) {
                        index = i;
                        maxSqDist = sqDist;
                    }
                }

                if (maxSqDist > sqTolerance) {
                    markers[index] = 1;
                    stack.push(first, index, index, last);
                }

                last = stack.pop();
                first = stack.pop();
            }

            for (i = 0; i < len; i++) {
                if (markers[i]) newPoints.push(points[i]);
            }

            return newPoints;
        }

        // both algorithms combined for awesome performance
        function simplify(points, tolerance, highestQuality) {

            var sqTolerance = tolerance !== undefined ? tolerance * tolerance : 1;

            points = highestQuality ? points : simplifyRadialDist(points, sqTolerance);
            points = simplifyDouglasPeucker(points, sqTolerance);

            return points;
        }

        // export as AMD module / Node module / browser or worker variable
        if (typeof undefined === 'function' && undefined.amd) undefined(function () {
            return simplify;
        });else module.exports = simplify;
    })();
});

/*
* Author   Jonathan Lurie - http://me.jonathanlurie.fr
* License  MIT
* Link     https://github.com/Pixpipe/pixpipejs
* Lab      MCIN - Montreal Neurological Institute
*/

/**
* An instance of SimplifyLineStringFilter takes a LineString and simplifies upon
* a given tolerance distance (in pixel, possibly being sub-pixel).
* This filter outputs another LineString with a fewer amount of points.
*
* **Usage**
* - [examples/contourSimplifiedImage2D.html](../examples/contourSimplifiedImage2D.html)
*/

var SimplifyLineStringFilter = function (_Filter) {
  inherits(SimplifyLineStringFilter, _Filter);

  function SimplifyLineStringFilter() {
    classCallCheck(this, SimplifyLineStringFilter);

    var _this = possibleConstructorReturn(this, (SimplifyLineStringFilter.__proto__ || Object.getPrototypeOf(SimplifyLineStringFilter)).call(this));

    _this.addInputValidator(0, LineString);
    _this.setMetadata("tolerance", 0.1);
    return _this;
  }

  createClass(SimplifyLineStringFilter, [{
    key: '_run',
    value: function _run() {

      if (!this.hasValidInput()) {
        console.warn("A filter of type SimplifyLineStringFilter requires 1 input of category '0' (LineString)");
        return;
      }

      var inputString = this._getInput(0);
      var nod = inputString.getNod();
      var inputPoints = inputString.getData();
      var tolerance = this.getMetadata("tolerance");

      if (nod != 2) {
        console.warn("SimplifyLineStringFilter is only for 2D LineStrings.");
        return;
      }

      // points need to be group in an array of {x: Number, y: Number}
      var groupedStringData = new Array(inputPoints.length / 2);

      for (var i = 0; i < groupedStringData.length; i++) {
        groupedStringData[i] = { x: inputPoints[i * 2], y: inputPoints[i * 2 + 1] };
      }

      // simplifying the linestring
      var simplified = simplify(groupedStringData, tolerance, true);

      // putting back the data as a big array
      var linearStringData = new Array(simplified.length * 2);

      for (var i = 0; i < simplified.length - 1; i++) {
        linearStringData[i * 2] = simplified[i].x;
        linearStringData[i * 2 + 1] = simplified[i + 1].y;
      }

      var outputLineString = new LineString();
      outputLineString.setData(linearStringData, nod);
      outputLineString.copyMetadataFrom(inputString);

      this._output[0] = outputLineString;
    }
  }]);
  return SimplifyLineStringFilter;
}(Filter); /* END of class SimplifyLineStringFilter */

/*
* Author   Jonathan Lurie - http://me.jonathanlurie.fr
* License  MIT
* Link      https://github.com/Pixpipe/pixpipejs
* Lab       MCIN - Montreal Neurological Institute
*/

/**
* A instance of PatchImageFilter will copy an Image2D into another at a given position.
* The same process can be repeated mutiple times so that the output is the result
* of several patched applied on a image with a solid color background.
* 
* **Usage**
* - [examples/patchImage2D.html](../examples/patchImage2D.html)
*
*/

var PatchImageFilter = function (_ImageToImageFilter) {
  inherits(PatchImageFilter, _ImageToImageFilter);

  function PatchImageFilter() {
    classCallCheck(this, PatchImageFilter);

    var _this = possibleConstructorReturn(this, (PatchImageFilter.__proto__ || Object.getPrototypeOf(PatchImageFilter)).call(this));

    _this.addInputValidator(0, Image2D);
    // default image size does not allow to create an output
    _this.setMetadata("outputSize", { w: 0, h: 0 });

    // defines the default background color for the output
    // This also defines the number of components per pixel (ncpp)
    _this.setMetadata("outputColor", [0, 0, 0, 255]);

    // position where to put the to left corner of the patch
    _this.setMetadata("patchPosition", { x: 0, y: 0 });

    // automatically turned to false at the end a every patching. Turning back
    // to true will make the filter generate a new output Image2D.
    _this.setMetadata("resetOutput", true);

    // Unlike most filters this one could be reuse to patch multiple times.
    // We have to by-pass the regulat this._output object because it is flushed
    // at the begining of every update()
    _this._patchedOutput = null;
    return _this;
  }

  createClass(PatchImageFilter, [{
    key: '_run',
    value: function _run() {
      if (!this.hasValidInput()) {
        console.warn("A filter of type PatchImageFilter requires 1 input of category '0' (Image2D)");
        return;
      }

      var inputImage = this._getInput(0);
      var inputNcpp = inputImage.getNcpp();
      var inputWidth = inputImage.getWidth();
      var inputHeight = inputImage.getHeight();
      var outputSize = this.getMetadata("outputSize");

      if (outputSize.w == 0 || outputSize.h == 0) {
        console.warn("The output image cannot have a size of (0, 0). Use .setMetadata( 'outputSize', {w: Number, h:Number} ) to specify a size.");
        return;
      }

      var outputColor = this.getMetadata("outputColor");

      if (!Array.isArray(outputColor)) {
        console.warn("The filter metadata 'outputColor' must be an Array of non null size.");
        return;
      }

      // of the output
      var ncpp = outputColor.length;

      if (inputNcpp != ncpp) {
        console.warn('The Image2D specified in input has ' + inputNcpp + ' ncpp while the output is configured with ' + ncpp + ' ncpp. Unable to continue patching.');
        return;
      }

      // We have two possibilities: creating a new output or patching into an existing one (outputImage)
      if (this.getMetadata("resetOutput")) {
        this._patchedOutput = new pixpipe.Image2D({ width: outputSize.w, height: outputSize.h, color: outputColor });
      }

      this._output[0] = this._patchedOutput;

      var patchPosition = this.getMetadata("patchPosition");
      // just in case floating points coord were specified
      patchPosition.x = Math.round(patchPosition.x);
      patchPosition.y = Math.round(patchPosition.y);

      // checking if the patch will be out of the output boundaries
      if (patchPosition.x + inputWidth > outputSize.w || patchPosition.y + inputHeight > outputSize.h || patchPosition.x < 0 || patchPosition.y < 0) {
        console.warn("The patch is partly or totaly out of bound.");
      }

      // along width of the input
      for (var i = 0; i < inputWidth; i++) {
        // along height of the input
        for (var j = 0; j < inputHeight; j++) {
          var patchColor = inputImage.getPixel({ x: i, y: j });
          this._patchedOutput.setPixel({ x: i + patchPosition.x, y: j + patchPosition.y }, patchColor);
        }
      }

      // by default, we want to continue patching the current output with other images
      this.setMetadata("resetOutput", false);
    }
  }]);
  return PatchImageFilter;
}(ImageToImageFilter); /* END of class PatchImageFilter */

/*
* Author   Jonathan Lurie - http://me.jonathanlurie.fr
* License  MIT
* Link      https://github.com/Pixpipe/pixpipejs
* Lab       MCIN - Montreal Neurological Institute
*/

/**
* AngleToHueWheelHelper has for goal to help visualize angular data such as gradient
* orientation. The idea behind the "hue wheel" is to associate every direction (angle)
* to a color without having the 0/360 interuption.
* The helper takes one Image2D input and gives one RGBA Image2D output. From the output,
* the index of the compnent that contains angular information has to be given using:
* `.setMetadata("component", n)` where `n` by default is `0`.  
*
* Depending on the usage of this filter, the range of angle can varry,
* ie. in [0, 2PI] (the default), or in [-PI/2, PI/2] (in the case of a gradient)
* or even in degrees [0, 360]. In any case, use `.setMetadata("minAngle", ...)`
* and `.setMetadata("maxAngle", ...)`. 
* If the metadata "minAngle" or "maxAngle" is given the value "auto", then the min and max
* values of the image will be looked-up (or computed if not defined).
*
* **Usage**
* - [examples/gradientHueWheelImage2D.html](../examples/gradientHueWheelImage2D.html)
*
*/

var AngleToHueWheelHelper = function (_ImageToImageFilter) {
  inherits(AngleToHueWheelHelper, _ImageToImageFilter);

  function AngleToHueWheelHelper() {
    classCallCheck(this, AngleToHueWheelHelper);

    var _this = possibleConstructorReturn(this, (AngleToHueWheelHelper.__proto__ || Object.getPrototypeOf(AngleToHueWheelHelper)).call(this));

    _this.addInputValidator(0, Image2D);
    _this.setMetadata("component", 0);

    _this.setMetadata("minAngle", 0);
    _this.setMetadata("maxAngle", Math.PI / 2);
    return _this;
  }

  createClass(AngleToHueWheelHelper, [{
    key: '_run',
    value: function _run() {
      // the input checking
      if (!this.hasValidInput()) {
        console.warn("A filter of type AngleToHueWheelHelper requires 1 input of category '0'.");
        return;
      }

      var that = this;

      var inputImage = this._getInput(0);
      var ncpp = inputImage.getNcpp();
      var component = this.getMetadata("component");

      if (component < 0 && component >= ncpp) {
        console.warn("The component to filter must be valid.");
        return;
      }

      var imageIn = this._getInput();
      var width = imageIn.getWidth();
      var height = imageIn.getHeight();
      var ncpp = imageIn.getNcpp();

      var minAngle = this.getMetadata("minAngle");
      var maxAngle = this.getMetadata("maxAngle");

      if (minAngle === "auto" || maxAngle === "auto") {
        minAngle = imageIn.getMin();
        maxAngle = imageIn.getMax();
      }

      var imageOut = new Image2D({ width: width, height: height, color: [0, 0, 0, 255] });
      var forEachPixelFilter = new pixpipe.ForEachPixelImageFilter();

      // add the input input
      forEachPixelFilter.addInput(imageOut);

      forEachPixelFilter.on("pixel", function (position, color) {
        var angle = imageIn.getPixel(position)[component];
        var angle360 = (angle - minAngle) / (maxAngle - minAngle) * 360;
        var colorRGB = that._hsl2Rgba(angle360, 100, 50);
        return colorRGB;
      });

      // run the filter to create a gradient image
      forEachPixelFilter.update();

      if (forEachPixelFilter.getNumberOfOutputs() == 0) {
        console.warn("No output of ForEachPixelImageFilter.");
        return;
      }

      // mapping the output
      this._output[0] = forEachPixelFilter.getOutput();
    }

    /**
    * 
    * A part of this code was borrowed from github.com/netbeast/colorsys and modified.
    */

  }, {
    key: '_hsl2Rgba',
    value: function _hsl2Rgba(h) {
      var s = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;
      var l = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 100;

      // pseudo constants
      var HUE_MAX = 360;
      var SV_MAX = 100;
      var RGB_MAX = 255;

      // ouputs
      var r, g, b;

      h = h === HUE_MAX ? 1 : h % HUE_MAX / HUE_MAX;
      s = s === SV_MAX ? 1 : s % SV_MAX / SV_MAX;
      l = l === SV_MAX ? 1 : l % SV_MAX / SV_MAX;

      if (s === 0) {
        r = g = b = l; // achromatic
      } else {
        var hue2rgb = function hue2rgb(p, q, t) {
          if (t < 0) t += 1;
          if (t > 1) t -= 1;
          if (t < 1 / 6) return p + (q - p) * 6 * t;
          if (t < 1 / 2) return q;
          if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;
          return p;
        };

        var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
        var p = 2 * l - q;
        r = hue2rgb(p, q, h + 1 / 3);
        g = hue2rgb(p, q, h);
        b = hue2rgb(p, q, h - 1 / 3);
      }

      return [Math.round(r * RGB_MAX), Math.round(g * RGB_MAX), Math.round(b * RGB_MAX), 255];
    }
  }]);
  return AngleToHueWheelHelper;
}(ImageToImageFilter); /* END of class AngleToHueWheelFilter */

/*
* Author   Jonathan Lurie - http://me.jonathanlurie.fr
* License  MIT
* Link      https://github.com/Pixpipe/pixpipejs
* Lab       MCIN - Montreal Neurological Institute
*/

/**
* A instance of LineStringPrinterOnImage2DHelper prints a list of LineStrings on
* an Image2D. To add the Image2D input, use `.addInput(myImage2D)`.
* To add a LineString, use `.addLineString(ls, c );` where `ls` is a LineString 
* instance and `c` is an Array representing a color (i.e. [255, 0, 0] for red).
*
* **Usage**
* - [examples/contourImage2D.html](../examples/contourImage2D.html)
*
*/

var LineStringPrinterOnImage2DHelper = function (_ImageToImageFilter) {
  inherits(LineStringPrinterOnImage2DHelper, _ImageToImageFilter);

  function LineStringPrinterOnImage2DHelper() {
    classCallCheck(this, LineStringPrinterOnImage2DHelper);

    var _this = possibleConstructorReturn(this, (LineStringPrinterOnImage2DHelper.__proto__ || Object.getPrototypeOf(LineStringPrinterOnImage2DHelper)).call(this));

    _this.addInputValidator(0, Image2D);
    _this.setMetadata("lineStrings", []);
    _this.setMetadata("lineStringsColors", []);
    return _this;
  }

  /**
  * Add a LineString instance to be printed on the image
  * @param {LineString} ls - a linestring to add
  * @param {Array} color - of for [R, G, B] or [R, G, B, A] 
  */


  createClass(LineStringPrinterOnImage2DHelper, [{
    key: 'addLineString',
    value: function addLineString(ls, color) {
      this._metadata.lineStrings.push(ls);
      this._metadata.lineStringsColors.push(color);
    }
  }, {
    key: '_run',
    value: function _run() {

      // the input checking
      if (!this.hasValidInput()) {
        console.warn("A filter of type LineStringPrinterOnImage2DHelper requires 1 input of category '0'.");
        return;
      }

      var imageIn = this._getInput();
      var imageOut = imageIn.clone();
      var width = imageIn.getWidth();
      var height = imageIn.getHeight();
      var ncpp = imageIn.getNcpp();

      var printed = false;

      var lineStrings = this._metadata.lineStrings;
      var colors = this._metadata.lineStringsColors;

      for (var i = 0; i < lineStrings.length; i++) {

        if (lineStrings[i].getMetadata("nod") != 2) {
          console.warn("Linstring must be 2D to be printed on images.");
          continue;
        }

        // color verification: ok if same number of channel OR if giving RGB color to RGBA image
        if (ncpp == colors[i].length || ncpp == 4 && colors[i].length == 3) {

          var lineStringData = lineStrings[i].getData();

          for (var j = 0; j < lineStringData.length - 1; j += 2) {
            imageOut.setPixel({ x: lineStringData[j], y: lineStringData[j + 1] }, colors[i]);
          }

          printed = true;
        } else {
          continue;
        }
      }

      if (printed) {
        this._output[0] = imageOut;
      }
    } /* END of _run() */

  }]);
  return LineStringPrinterOnImage2DHelper;
}(ImageToImageFilter); /* END of class LineStringPrinterOnImage2DHelper */

/**
* From https://github.com/bpostlethwaite/colormap
*/

var ColorScales = {
	"jet": [{ "index": 0, "rgb": [0, 0, 131] }, { "index": 0.125, "rgb": [0, 60, 170] }, { "index": 0.375, "rgb": [5, 255, 255] }, { "index": 0.625, "rgb": [255, 255, 0] }, { "index": 0.875, "rgb": [250, 0, 0] }, { "index": 1, "rgb": [128, 0, 0] }],

	"hsv": [{ "index": 0, "rgb": [255, 0, 0] }, { "index": 0.169, "rgb": [253, 255, 2] }, { "index": 0.173, "rgb": [247, 255, 2] }, { "index": 0.337, "rgb": [0, 252, 4] }, { "index": 0.341, "rgb": [0, 252, 10] }, { "index": 0.506, "rgb": [1, 249, 255] }, { "index": 0.671, "rgb": [2, 0, 253] }, { "index": 0.675, "rgb": [8, 0, 253] }, { "index": 0.839, "rgb": [255, 0, 251] }, { "index": 0.843, "rgb": [255, 0, 245] }, { "index": 1, "rgb": [255, 0, 6] }],

	"hot": [{ "index": 0, "rgb": [0, 0, 0] }, { "index": 0.3, "rgb": [230, 0, 0] }, { "index": 0.6, "rgb": [255, 210, 0] }, { "index": 1, "rgb": [255, 255, 255] }],

	"cool": [{ "index": 0, "rgb": [0, 255, 255] }, { "index": 1, "rgb": [255, 0, 255] }],

	"spring": [{ "index": 0, "rgb": [255, 0, 255] }, { "index": 1, "rgb": [255, 255, 0] }],

	"summer": [{ "index": 0, "rgb": [0, 128, 102] }, { "index": 1, "rgb": [255, 255, 102] }],

	"autumn": [{ "index": 0, "rgb": [255, 0, 0] }, { "index": 1, "rgb": [255, 255, 0] }],

	"winter": [{ "index": 0, "rgb": [0, 0, 255] }, { "index": 1, "rgb": [0, 255, 128] }],

	"bone": [{ "index": 0, "rgb": [0, 0, 0] }, { "index": 0.376, "rgb": [84, 84, 116] }, { "index": 0.753, "rgb": [169, 200, 200] }, { "index": 1, "rgb": [255, 255, 255] }],

	"copper": [{ "index": 0, "rgb": [0, 0, 0] }, { "index": 0.804, "rgb": [255, 160, 102] }, { "index": 1, "rgb": [255, 199, 127] }],

	"greys": [{ "index": 0, "rgb": [0, 0, 0] }, { "index": 1, "rgb": [255, 255, 255] }],

	"yignbu": [{ "index": 0, "rgb": [8, 29, 88] }, { "index": 0.125, "rgb": [37, 52, 148] }, { "index": 0.25, "rgb": [34, 94, 168] }, { "index": 0.375, "rgb": [29, 145, 192] }, { "index": 0.5, "rgb": [65, 182, 196] }, { "index": 0.625, "rgb": [127, 205, 187] }, { "index": 0.75, "rgb": [199, 233, 180] }, { "index": 0.875, "rgb": [237, 248, 217] }, { "index": 1, "rgb": [255, 255, 217] }],

	"greens": [{ "index": 0, "rgb": [0, 68, 27] }, { "index": 0.125, "rgb": [0, 109, 44] }, { "index": 0.25, "rgb": [35, 139, 69] }, { "index": 0.375, "rgb": [65, 171, 93] }, { "index": 0.5, "rgb": [116, 196, 118] }, { "index": 0.625, "rgb": [161, 217, 155] }, { "index": 0.75, "rgb": [199, 233, 192] }, { "index": 0.875, "rgb": [229, 245, 224] }, { "index": 1, "rgb": [247, 252, 245] }],

	"yiorrd": [{ "index": 0, "rgb": [128, 0, 38] }, { "index": 0.125, "rgb": [189, 0, 38] }, { "index": 0.25, "rgb": [227, 26, 28] }, { "index": 0.375, "rgb": [252, 78, 42] }, { "index": 0.5, "rgb": [253, 141, 60] }, { "index": 0.625, "rgb": [254, 178, 76] }, { "index": 0.75, "rgb": [254, 217, 118] }, { "index": 0.875, "rgb": [255, 237, 160] }, { "index": 1, "rgb": [255, 255, 204] }],

	"bluered": [{ "index": 0, "rgb": [0, 0, 255] }, { "index": 1, "rgb": [255, 0, 0] }],

	"rdbu": [{ "index": 0, "rgb": [5, 10, 172] }, { "index": 0.35, "rgb": [106, 137, 247] }, { "index": 0.5, "rgb": [190, 190, 190] }, { "index": 0.6, "rgb": [220, 170, 132] }, { "index": 0.7, "rgb": [230, 145, 90] }, { "index": 1, "rgb": [178, 10, 28] }],

	"picnic": [{ "index": 0, "rgb": [0, 0, 255] }, { "index": 0.1, "rgb": [51, 153, 255] }, { "index": 0.2, "rgb": [102, 204, 255] }, { "index": 0.3, "rgb": [153, 204, 255] }, { "index": 0.4, "rgb": [204, 204, 255] }, { "index": 0.5, "rgb": [255, 255, 255] }, { "index": 0.6, "rgb": [255, 204, 255] }, { "index": 0.7, "rgb": [255, 153, 255] }, { "index": 0.8, "rgb": [255, 102, 204] }, { "index": 0.9, "rgb": [255, 102, 102] }, { "index": 1, "rgb": [255, 0, 0] }],

	"rainbow": [{ "index": 0, "rgb": [150, 0, 90] }, { "index": 0.125, "rgb": [0, 0, 200] }, { "index": 0.25, "rgb": [0, 25, 255] }, { "index": 0.375, "rgb": [0, 152, 255] }, { "index": 0.5, "rgb": [44, 255, 150] }, { "index": 0.625, "rgb": [151, 255, 0] }, { "index": 0.75, "rgb": [255, 234, 0] }, { "index": 0.875, "rgb": [255, 111, 0] }, { "index": 1, "rgb": [255, 0, 0] }],

	"portland": [{ "index": 0, "rgb": [12, 51, 131] }, { "index": 0.25, "rgb": [10, 136, 186] }, { "index": 0.5, "rgb": [242, 211, 56] }, { "index": 0.75, "rgb": [242, 143, 56] }, { "index": 1, "rgb": [217, 30, 30] }],

	"blackbody": [{ "index": 0, "rgb": [0, 0, 0] }, { "index": 0.2, "rgb": [230, 0, 0] }, { "index": 0.4, "rgb": [230, 210, 0] }, { "index": 0.7, "rgb": [255, 255, 255] }, { "index": 1, "rgb": [160, 200, 255] }],

	"earth": [{ "index": 0, "rgb": [0, 0, 130] }, { "index": 0.1, "rgb": [0, 180, 180] }, { "index": 0.2, "rgb": [40, 210, 40] }, { "index": 0.4, "rgb": [230, 230, 50] }, { "index": 0.6, "rgb": [120, 70, 20] }, { "index": 1, "rgb": [255, 255, 255] }],

	"electric": [{ "index": 0, "rgb": [0, 0, 0] }, { "index": 0.15, "rgb": [30, 0, 100] }, { "index": 0.4, "rgb": [120, 0, 100] }, { "index": 0.6, "rgb": [160, 90, 0] }, { "index": 0.8, "rgb": [230, 200, 0] }, { "index": 1, "rgb": [255, 250, 220] }],

	"viridis": [{ "index": 0, "rgb": [68, 1, 84] }, { "index": 0.13, "rgb": [71, 44, 122] }, { "index": 0.25, "rgb": [59, 81, 139] }, { "index": 0.38, "rgb": [44, 113, 142] }, { "index": 0.5, "rgb": [33, 144, 141] }, { "index": 0.63, "rgb": [39, 173, 129] }, { "index": 0.75, "rgb": [92, 200, 99] }, { "index": 0.88, "rgb": [170, 220, 50] }, { "index": 1, "rgb": [253, 231, 37] }],

	"inferno": [{ "index": 0, "rgb": [0, 0, 4] }, { "index": 0.13, "rgb": [31, 12, 72] }, { "index": 0.25, "rgb": [85, 15, 109] }, { "index": 0.38, "rgb": [136, 34, 106] }, { "index": 0.5, "rgb": [186, 54, 85] }, { "index": 0.63, "rgb": [227, 89, 51] }, { "index": 0.75, "rgb": [249, 140, 10] }, { "index": 0.88, "rgb": [249, 201, 50] }, { "index": 1, "rgb": [252, 255, 164] }],

	"magma": [{ "index": 0, "rgb": [0, 0, 4] }, { "index": 0.13, "rgb": [28, 16, 68] }, { "index": 0.25, "rgb": [79, 18, 123] }, { "index": 0.38, "rgb": [129, 37, 129] }, { "index": 0.5, "rgb": [181, 54, 122] }, { "index": 0.63, "rgb": [229, 80, 100] }, { "index": 0.75, "rgb": [251, 135, 97] }, { "index": 0.88, "rgb": [254, 194, 135] }, { "index": 1, "rgb": [252, 253, 191] }],

	"plasma": [{ "index": 0, "rgb": [13, 8, 135] }, { "index": 0.13, "rgb": [75, 3, 161] }, { "index": 0.25, "rgb": [125, 3, 168] }, { "index": 0.38, "rgb": [168, 34, 150] }, { "index": 0.5, "rgb": [203, 70, 121] }, { "index": 0.63, "rgb": [229, 107, 93] }, { "index": 0.75, "rgb": [248, 148, 65] }, { "index": 0.88, "rgb": [253, 195, 40] }, { "index": 1, "rgb": [240, 249, 33] }],

	"warm": [{ "index": 0, "rgb": [125, 0, 179] }, { "index": 0.13, "rgb": [172, 0, 187] }, { "index": 0.25, "rgb": [219, 0, 170] }, { "index": 0.38, "rgb": [255, 0, 130] }, { "index": 0.5, "rgb": [255, 63, 74] }, { "index": 0.63, "rgb": [255, 123, 0] }, { "index": 0.75, "rgb": [234, 176, 0] }, { "index": 0.88, "rgb": [190, 228, 0] }, { "index": 1, "rgb": [147, 255, 0] }],

	"cool2": [{ "index": 0, "rgb": [125, 0, 179] }, { "index": 0.13, "rgb": [116, 0, 218] }, { "index": 0.25, "rgb": [98, 74, 237] }, { "index": 0.38, "rgb": [68, 146, 231] }, { "index": 0.5, "rgb": [0, 204, 197] }, { "index": 0.63, "rgb": [0, 247, 146] }, { "index": 0.75, "rgb": [0, 255, 88] }, { "index": 0.88, "rgb": [40, 255, 8] }, { "index": 1, "rgb": [147, 255, 0] }],

	"rainbow-soft": [{ "index": 0, "rgb": [125, 0, 179] }, { "index": 0.1, "rgb": [199, 0, 180] }, { "index": 0.2, "rgb": [255, 0, 121] }, { "index": 0.3, "rgb": [255, 108, 0] }, { "index": 0.4, "rgb": [222, 194, 0] }, { "index": 0.5, "rgb": [150, 255, 0] }, { "index": 0.6, "rgb": [0, 255, 55] }, { "index": 0.7, "rgb": [0, 246, 150] }, { "index": 0.8, "rgb": [50, 167, 222] }, { "index": 0.9, "rgb": [103, 51, 235] }, { "index": 1, "rgb": [124, 0, 186] }],

	"bathymetry": [{ "index": 0, "rgb": [40, 26, 44] }, { "index": 0.13, "rgb": [59, 49, 90] }, { "index": 0.25, "rgb": [64, 76, 139] }, { "index": 0.38, "rgb": [63, 110, 151] }, { "index": 0.5, "rgb": [72, 142, 158] }, { "index": 0.63, "rgb": [85, 174, 163] }, { "index": 0.75, "rgb": [120, 206, 163] }, { "index": 0.88, "rgb": [187, 230, 172] }, { "index": 1, "rgb": [253, 254, 204] }],

	"cdom": [{ "index": 0, "rgb": [47, 15, 62] }, { "index": 0.13, "rgb": [87, 23, 86] }, { "index": 0.25, "rgb": [130, 28, 99] }, { "index": 0.38, "rgb": [171, 41, 96] }, { "index": 0.5, "rgb": [206, 67, 86] }, { "index": 0.63, "rgb": [230, 106, 84] }, { "index": 0.75, "rgb": [242, 149, 103] }, { "index": 0.88, "rgb": [249, 193, 135] }, { "index": 1, "rgb": [254, 237, 176] }],

	"chlorophyll": [{ "index": 0, "rgb": [18, 36, 20] }, { "index": 0.13, "rgb": [25, 63, 41] }, { "index": 0.25, "rgb": [24, 91, 59] }, { "index": 0.38, "rgb": [13, 119, 72] }, { "index": 0.5, "rgb": [18, 148, 80] }, { "index": 0.63, "rgb": [80, 173, 89] }, { "index": 0.75, "rgb": [132, 196, 122] }, { "index": 0.88, "rgb": [175, 221, 162] }, { "index": 1, "rgb": [215, 249, 208] }],

	"density": [{ "index": 0, "rgb": [54, 14, 36] }, { "index": 0.13, "rgb": [89, 23, 80] }, { "index": 0.25, "rgb": [110, 45, 132] }, { "index": 0.38, "rgb": [120, 77, 178] }, { "index": 0.5, "rgb": [120, 113, 213] }, { "index": 0.63, "rgb": [115, 151, 228] }, { "index": 0.75, "rgb": [134, 185, 227] }, { "index": 0.88, "rgb": [177, 214, 227] }, { "index": 1, "rgb": [230, 241, 241] }],

	"freesurface-blue": [{ "index": 0, "rgb": [30, 4, 110] }, { "index": 0.13, "rgb": [47, 14, 176] }, { "index": 0.25, "rgb": [41, 45, 236] }, { "index": 0.38, "rgb": [25, 99, 212] }, { "index": 0.5, "rgb": [68, 131, 200] }, { "index": 0.63, "rgb": [114, 156, 197] }, { "index": 0.75, "rgb": [157, 181, 203] }, { "index": 0.88, "rgb": [200, 208, 216] }, { "index": 1, "rgb": [241, 237, 236] }],

	"freesurface-red": [{ "index": 0, "rgb": [60, 9, 18] }, { "index": 0.13, "rgb": [100, 17, 27] }, { "index": 0.25, "rgb": [142, 20, 29] }, { "index": 0.38, "rgb": [177, 43, 27] }, { "index": 0.5, "rgb": [192, 87, 63] }, { "index": 0.63, "rgb": [205, 125, 105] }, { "index": 0.75, "rgb": [216, 162, 148] }, { "index": 0.88, "rgb": [227, 199, 193] }, { "index": 1, "rgb": [241, 237, 236] }],

	"oxygen": [{ "index": 0, "rgb": [64, 5, 5] }, { "index": 0.13, "rgb": [106, 6, 15] }, { "index": 0.25, "rgb": [144, 26, 7] }, { "index": 0.38, "rgb": [168, 64, 3] }, { "index": 0.5, "rgb": [188, 100, 4] }, { "index": 0.63, "rgb": [206, 136, 11] }, { "index": 0.75, "rgb": [220, 174, 25] }, { "index": 0.88, "rgb": [231, 215, 44] }, { "index": 1, "rgb": [248, 254, 105] }],

	"par": [{ "index": 0, "rgb": [51, 20, 24] }, { "index": 0.13, "rgb": [90, 32, 35] }, { "index": 0.25, "rgb": [129, 44, 34] }, { "index": 0.38, "rgb": [159, 68, 25] }, { "index": 0.5, "rgb": [182, 99, 19] }, { "index": 0.63, "rgb": [199, 134, 22] }, { "index": 0.75, "rgb": [212, 171, 35] }, { "index": 0.88, "rgb": [221, 210, 54] }, { "index": 1, "rgb": [225, 253, 75] }],

	"phase": [{ "index": 0, "rgb": [145, 105, 18] }, { "index": 0.13, "rgb": [184, 71, 38] }, { "index": 0.25, "rgb": [186, 58, 115] }, { "index": 0.38, "rgb": [160, 71, 185] }, { "index": 0.5, "rgb": [110, 97, 218] }, { "index": 0.63, "rgb": [50, 123, 164] }, { "index": 0.75, "rgb": [31, 131, 110] }, { "index": 0.88, "rgb": [77, 129, 34] }, { "index": 1, "rgb": [145, 105, 18] }],

	"salinity": [{ "index": 0, "rgb": [42, 24, 108] }, { "index": 0.13, "rgb": [33, 50, 162] }, { "index": 0.25, "rgb": [15, 90, 145] }, { "index": 0.38, "rgb": [40, 118, 137] }, { "index": 0.5, "rgb": [59, 146, 135] }, { "index": 0.63, "rgb": [79, 175, 126] }, { "index": 0.75, "rgb": [120, 203, 104] }, { "index": 0.88, "rgb": [193, 221, 100] }, { "index": 1, "rgb": [253, 239, 154] }],

	"temperature": [{ "index": 0, "rgb": [4, 35, 51] }, { "index": 0.13, "rgb": [23, 51, 122] }, { "index": 0.25, "rgb": [85, 59, 157] }, { "index": 0.38, "rgb": [129, 79, 143] }, { "index": 0.5, "rgb": [175, 95, 130] }, { "index": 0.63, "rgb": [222, 112, 101] }, { "index": 0.75, "rgb": [249, 146, 66] }, { "index": 0.88, "rgb": [249, 196, 65] }, { "index": 1, "rgb": [232, 250, 91] }],

	"turbidity": [{ "index": 0, "rgb": [34, 31, 27] }, { "index": 0.13, "rgb": [65, 50, 41] }, { "index": 0.25, "rgb": [98, 69, 52] }, { "index": 0.38, "rgb": [131, 89, 57] }, { "index": 0.5, "rgb": [161, 112, 59] }, { "index": 0.63, "rgb": [185, 140, 66] }, { "index": 0.75, "rgb": [202, 174, 88] }, { "index": 0.88, "rgb": [216, 209, 126] }, { "index": 1, "rgb": [233, 246, 171] }],

	"velocity-blue": [{ "index": 0, "rgb": [17, 32, 64] }, { "index": 0.13, "rgb": [35, 52, 116] }, { "index": 0.25, "rgb": [29, 81, 156] }, { "index": 0.38, "rgb": [31, 113, 162] }, { "index": 0.5, "rgb": [50, 144, 169] }, { "index": 0.63, "rgb": [87, 173, 176] }, { "index": 0.75, "rgb": [149, 196, 189] }, { "index": 0.88, "rgb": [203, 221, 211] }, { "index": 1, "rgb": [254, 251, 230] }],

	"velocity-green": [{ "index": 0, "rgb": [23, 35, 19] }, { "index": 0.13, "rgb": [24, 64, 38] }, { "index": 0.25, "rgb": [11, 95, 45] }, { "index": 0.38, "rgb": [39, 123, 35] }, { "index": 0.5, "rgb": [95, 146, 12] }, { "index": 0.63, "rgb": [152, 165, 18] }, { "index": 0.75, "rgb": [201, 186, 69] }, { "index": 0.88, "rgb": [233, 216, 137] }, { "index": 1, "rgb": [255, 253, 205] }],

	"cubehelix": [{ "index": 0, "rgb": [0, 0, 0] }, { "index": 0.07, "rgb": [22, 5, 59] }, { "index": 0.13, "rgb": [60, 4, 105] }, { "index": 0.2, "rgb": [109, 1, 135] }, { "index": 0.27, "rgb": [161, 0, 147] }, { "index": 0.33, "rgb": [210, 2, 142] }, { "index": 0.4, "rgb": [251, 11, 123] }, { "index": 0.47, "rgb": [255, 29, 97] }, { "index": 0.53, "rgb": [255, 54, 69] }, { "index": 0.6, "rgb": [255, 85, 46] }, { "index": 0.67, "rgb": [255, 120, 34] }, { "index": 0.73, "rgb": [255, 157, 37] }, { "index": 0.8, "rgb": [241, 191, 57] }, { "index": 0.87, "rgb": [224, 220, 93] }, { "index": 0.93, "rgb": [218, 241, 142] }, { "index": 1, "rgb": [227, 253, 198] }]
};

/*
* Author   Jonathan Lurie - http://me.jonathanlurie.fr
* License  MIT
* Link      https://github.com/Pixpipe/pixpipejs
* Lab       MCIN - Montreal Neurological Institute
*/

/**
* A Colormap instance is a range of color and can be used in two ways. The first,
* is by getting a single color using `.getValueAt(p)` where `p` is a position in [0, 1] and, second,
* by building en entire LUT with a given granularity and then getting back these values.
* In case of intensive use (ie. applying fake colors), building a LUT is a faster option.
* Once a LUT is built,  an image of this LUT can be created (horizontal or vertical, flipped or not).
* The image will be flipped is the `flip` matadata is set to `true`;
* This image, which is an Image2D is not supposed to be used as a LUT but just as a visual reference.
*
* **Usage**
* - [examples/colormap.html](../examples/colormap.html)
*
*/

var Colormap = function (_PixpipeObject) {
  inherits(Colormap, _PixpipeObject);

  /**
  * Build a colormap with some options.
  * @param {Object} options - here is the list of options:
  *     style {String} - one of the available styles (see property names in ColorScales.js)
  *     description {Object} - colormap description like in ColorScales.js. Can also be the equivalent JSON string.
  *     lutSize {Number} - Number of samples to pregenerate a LUT
  *     Note: "style" and "description" are mutually exclusive and "style" has the priority in case both are set.
  */
  function Colormap() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    classCallCheck(this, Colormap);

    var _this = possibleConstructorReturn(this, (Colormap.__proto__ || Object.getPrototypeOf(Colormap)).call(this));

    _this._type = Colormap.TYPE();
    _this._colormapDescription = null;
    _this._LUT = [];

    _this.setMetadata("flip", false);

    var style = _this._getOption(options, "style", null);

    if (style) {
      _this.setStyle(style);
    } else {
      var description = _this._getOption(options, "description", null);
      _this.setDescription(description);
    }

    if (_this._colormapDescription) {
      var lutSize = _this._getOption(options, "lutSize", null);
      if (lutSize) {
        _this.buildLut(lutSize);
      }
    }

    return _this;
  }

  /**
  * Hardcode the datatype
  */


  createClass(Colormap, [{
    key: 'setStyle',


    /**
    * Define the style of the colormap
    * @param {String} style - the colormap style. They are all listed with `Colormap.getAvailableStyles()`
    */
    value: function setStyle(style) {
      if (style in ColorScales) {
        if (this._validateDescription(ColorScales[style])) {
          this._colormapDescription = JSON.parse(JSON.stringify(ColorScales[style]));
        }
      } else {
        console.warn("The given colormap style des not exist.");
      }
    }

    /**
    * Set the description of the colormap. See ColorScales.js for the format
    * @param {Object} d - description, can be the equivalent JSON string
    */

  }, {
    key: 'setDescription',
    value: function setDescription(d) {
      // the description in argument can be a json string
      var description = typeof d === "string" ? JSON.parse(d) : d;

      if (description && this._validateDescription(description)) {
        this._colormapDescription = description;
      }
    }

    /**
    * [PRIVATE]
    * Validates a colormap description integrity.
    * @return {Boolean} true is the description is valid, false if not
    */

  }, {
    key: '_validateDescription',
    value: function _validateDescription(d) {
      if (!Array.isArray(d)) {
        console.warn("The colormap description has to be an Array");
        return false;
      }

      for (var i = 0; i < d.length; i++) {
        // each color segment is an object containing a position as 'index'
        // and an array of number as "rgb"

        // each is a non-null object
        if (d[i] !== null && _typeof(d[i]) === 'object') {
          if ("index" in d[i] && "rgb" in d[i]) {
            if (typeof d[i].index === 'number') {
              if (d[i].index < 0 || d[i].index > 1) {
                console.warn("Each colormap segment 'index' property should be in [0, 1]");
                return false;
              }
            } else {
              console.warn("Each colormap segment 'index' property should be a number.");
              return false;
            }

            // the rgb property has to be an array
            if (Array.isArray(d[i].rgb)) {
              if (d[i].rgb.length == 3) {
                for (var j = 0; j < d[i].rgb.length; j++) {
                  if (d[i].rgb[j] < 0 || d[i].rgb[j] > 255) {
                    console.warn("The colormap must have only values in [0, 255]");
                    return false;
                  }
                }
              } else {
                console.warn("Each colormap segment 'rgb' should contain 3 values");
                return false;
              }
            }
          } else {
            console.warn("Each colormap segment must have a 'index' property and a 'rgb' property.");
            return false;
          }
        } else {
          console.warn("Each colormap segment must be a non-null object");
          return false;
        }
      }
      return true;
    }

    /**
    * Get the color at the colormap position
    * @param {Number} position - position within the colormap in [0, 1]
    * @return {Array} color array as [r, g, b] , values being in [0, 255]
    */

  }, {
    key: 'getValueAt',
    value: function getValueAt(position) {
      if (!this._colormapDescription) {
        console.warn("The colormap description is not defined.");
        return null;
      }

      // case 1: before the first "index" position
      if (position <= this._colormapDescription[0].index) {
        return this._colormapDescription[0].rgb.slice();
      }

      // case 2: after the last "index" position
      if (position >= this._colormapDescription[this._colormapDescription.length - 1].index) {
        return this._colormapDescription[this._colormapDescription.length - 1].rgb.slice();
      }

      // case 3: between 2 values of the descrition (most likely to happen)
      for (var i = 0; i < this._colormapDescription.length - 1; i++) {
        if (position >= this._colormapDescription[i].index && position < this._colormapDescription[i + 1].index) {

          var unitDistanceToFirst = (position - this._colormapDescription[i].index) / (this._colormapDescription[i + 1].index - this._colormapDescription[i].index);
          var unitDistanceToSecond = 1 - unitDistanceToFirst;

          var color = [Math.round(this._colormapDescription[i].rgb[0] * unitDistanceToSecond + this._colormapDescription[i + 1].rgb[0] * unitDistanceToFirst), // R
          Math.round(this._colormapDescription[i].rgb[1] * unitDistanceToSecond + this._colormapDescription[i + 1].rgb[1] * unitDistanceToFirst), // G
          Math.round(this._colormapDescription[i].rgb[2] * unitDistanceToSecond + this._colormapDescription[i + 1].rgb[2] * unitDistanceToFirst)];

          return color;
        }
      }
    }

    /**
    * Build a LUT from the colormap description
    * @param {Number} size - number of samples in the LUT
    */

  }, {
    key: 'buildLut',
    value: function buildLut(size) {
      if (!this._colormapDescription) {
        console.warn("The colormap description is not defined, the LUT cannot be created");
        return null;
      }

      if (size < 0) {
        console.warn("Size of the colormap can not be negative.");
        return;
      }

      this._LUT = new Array(size);

      for (var i = 0; i < size; i++) {
        this._LUT[i] = this.getValueAt(i / size + 0.5 / size);
      }
    }

    /**
    * Get the color within the internal LUT
    * @param {Number} index - the index in the LUT
    * @return {Array} color array as [r, g, b] , values being in [0, 255]
    */

  }, {
    key: 'getLutAt',
    value: function getLutAt(index) {
      if (index < 0 || index > this._LUT.length) return null;

      return this._LUT[index];
    }

    /**
    * Creates a horizontal Image2D of the colormap. The height is 1px and
    * the width is the size of the LUT currently in use.
    * The image can be horizontally flipped when the "flip" metadata is true;
    * @return {Image2D} the result image
    */

  }, {
    key: 'createHorizontalLutImage',
    value: function createHorizontalLutImage() {
      if (!this._LUT) {
        console.warn("The LUT must be built before creating a LUT image.");
        return;
      }

      var flip = this.getMetadata("flip");
      var LutSize = this._LUT.length;
      var colorStrip = new Image2D({ width: LutSize, height: 1, color: [0, 0, 0] });

      for (var i = 0; i < LutSize; i++) {
        var positionInLut = flip ? LutSize - i - 1 : i;
        colorStrip.setPixel({ x: i, y: 0 }, this._LUT[positionInLut]);
      }

      return colorStrip;
    }

    /**
    * Creates a vertical Image2D of the colormap. The height is 1px and
    * the width is the size of the LUT currently in use.
    * The image can be vertically flipped when the "flip" metadata is true;
    * @return {Image2D} the result image
    */

  }, {
    key: 'createVerticalLutImage',
    value: function createVerticalLutImage() {
      if (!this._LUT) {
        console.warn("The LUT must be built before creating a LUT image.");
        return;
      }

      var flip = this.getMetadata("flip");
      var LutSize = this._LUT.length;
      var colorStrip = new Image2D({ width: 1, height: LutSize, color: [0, 0, 0] });

      for (var i = 0; i < LutSize; i++) {
        var positionInLut = flip ? LutSize - i - 1 : i;
        colorStrip.setPixel({ x: 0, y: i }, this._LUT[positionInLut]);
      }

      return colorStrip;
    }

    /**
    * Add a color to the color description. This color must be at a non-taken index
    * @param {Number} index - index to place the color, must be in [0, 1]
    * @param {Array} rgb - rgb array of the form [r, g, b], each value being in [0, 255]
    * @return {Boolean} true if the color was succesfully added, false if not
    */

  }, {
    key: 'addColor',
    value: function addColor(index, rgb) {
      // the colormap is possibly empty
      if (!this._colormapDescription) {
        this._colormapDescription = [];
      }

      if (index < 0 || index > 1) {
        console.warn("The color cannot be added because its index is out of range [0, 1]");
        return false;
      }

      // checking if a color is already present at the given index
      var indexAlreadyPresent = this._colormapDescription.find(function (indexAndColor) {
        return indexAndColor.index == index;
      });

      if (indexAlreadyPresent) {
        console.warn("A color is already present at index " + index);
        return false;
      }

      if (rgb && Array.isArray(rgb) && rgb.length == 3) {
        for (var i = 0; i < rgb.length; i++) {
          if (typeof rgb[i] !== 'number' || rgb[i] < 0 || rgb[i] > 255) {
            console.warn("The rgb colors must be in [0, 255]");
            return false;
          }
        }
      } else {
        console.warn("The color cannot be added because its rgb array is the wrong size.");
        return false;
      }

      // data integrity is ok
      this._colormapDescription.push({ "index": index, "rgb": rgb.slice() });
      this._colormapDescription.sort(function (a, b) {
        return a.index - b.index;
      });

      return true;
    }

    /**
    * Remove the color at the given index
    * @param {Number} index - the [0, 1] index of the color to remove
    * @return {Boolean} true if successfully remove, false if not
    */

  }, {
    key: 'removeColor',
    value: function removeColor(index) {
      if (!this._colormapDescription) {
        console.warn("The colormap description is empty.");
        return false;
      }

      var indexAlreadyIn = this._colormapDescription.findIndex(function (element) {
        return element.index == index;
      });

      if (indexAlreadyIn == -1) {
        console.warn("Such index does not exist.");
        return false;
      }

      this._colormapDescription.splice(indexAlreadyIn, 1);
      return true;
    }

    /**
    * Get a json version of the colormap description
    * @return {String} the json string
    */

  }, {
    key: 'toJson',
    value: function toJson() {
      return JSON.stringify(this._colormapDescription);
    }
  }], [{
    key: 'TYPE',
    value: function TYPE() {
      return "COLORMAP";
    }

    /**
    * [STATIC]
    * Get all the style id available
    * @return {Array} all the styles
    */

  }, {
    key: 'getAvailableStyles',
    value: function getAvailableStyles() {
      return Object.keys(ColorScales);
    }
  }]);
  return Colormap;
}(PixpipeObject); /* END of class Colormap */

/*
* Author   Jonathan Lurie - http://me.jonathanlurie.fr
* License  MIT
* Link      https://github.com/Pixpipe/pixpipejs
* Lab       MCIN - Montreal Neurological Institute
*/

/**
* An instance of Image3DToMosaicFilter takes an Image3D as Input and output a
* mosaic composed of each slice. The axis: "xspace", "yspace" or "zspace" can be
* specified with `setMetadata("axis", "xspace")`, the default being xspace.
* The default output image is 4096x4096 but these boundaries can be changed using
* `setMetadata("maxWidth", n)` and `setMetadata("maxHeight", m)`.
* These are boundaries so the size of the output image(s) will possibly be lower
* to not contain unused space.
* If mosaicing the whole given Image3D does not fit in maxWidth*maxHeight, more
* Image2D will be created and accessible through `getOutput(n)`.
* All output image have the same size so that the last one may have dead space.
* To know precisely the size of the output mosaic use `getMetadata("gridWidth")`
* and `getMetadata("gridHeight")`, this will give the number of slices used in
* horizontal and vertical respectively.
*
* **Usage**
* - [examples/niftiToMosaic.html](../examples/niftiToMosaic.html)
*/

var Image3DToMosaicFilter = function (_Filter) {
  inherits(Image3DToMosaicFilter, _Filter);

  function Image3DToMosaicFilter() {
    classCallCheck(this, Image3DToMosaicFilter);

    var _this = possibleConstructorReturn(this, (Image3DToMosaicFilter.__proto__ || Object.getPrototypeOf(Image3DToMosaicFilter)).call(this));

    _this.addInputValidator(0, Image3D);

    // default settings
    _this.setMetadata("maxWidth", 4096);
    _this.setMetadata("maxHeight", 4096);
    _this.setMetadata("axis", "xspace");
    _this.setMetadata("time", 0);
    return _this;
  }

  createClass(Image3DToMosaicFilter, [{
    key: '_run',
    value: function _run() {
      if (!this.hasValidInput()) {
        return;
      }

      var inputImage3D = this._getInput(0);
      var spaceInfo = inputImage3D.getMetadata(this.getMetadata("axis"));

      if (!spaceInfo) {
        console.warn("Sampling axis for mosaicing was not poperly set. Has to be 'xspace', 'yspace' or 'zspace'.");
        return;
      }

      var numOfSlices = spaceInfo.space_length;
      var width = spaceInfo.width;
      var height = spaceInfo.height;

      // dealing with time series
      var startTime = 0;
      var endTime = 1;

      if (inputImage3D.hasMetadata("time")) {
        var timeInfo = inputImage3D.getMetadata("time");
        var timeLength = timeInfo.space_length;

        if (this._metadata.time == -1) {
          startTime = 0;
          endTime = timeLength;
        } else if (this._metadata.time < timeLength) {
          startTime = this._metadata.time;
          endTime = startTime + 1;
        }
      }

      var numberOfSlicesWithTime = numOfSlices * (endTime - startTime);

      // number of image we can fit in the with and heigth of an output image
      var widthFit = Math.floor(this.getMetadata("maxWidth") / width);
      var heightFit = Math.floor(this.getMetadata("maxHeight") / height);

      // size of the ouput image(s)
      var outputWidth = widthFit * width;
      var outputHeight = heightFit * height;
      var slicePerOutputIm = widthFit * heightFit;

      // Number of output image(s) necessary to cover the whole Image3D dataset
      //var outputNecessary = Math.ceil( numOfSlices / slicePerOutputIm ); // does not work for time series
      var outputNecessary = Math.ceil(numberOfSlicesWithTime / slicePerOutputIm);

      // if only one output, maybe it's not filled entirely, so we can make it a bit smaller
      if (outputNecessary == 1) {
        outputHeight = Math.ceil(numberOfSlicesWithTime / widthFit) * height;
      }

      this.setMetadata("gridWidth", outputWidth / width);
      this.setMetadata("gridHeight", outputHeight / height);

      var outputCounter = 0;
      var sliceCounter = 0;
      var sliceIndexCurrentOutput = 0;

      var outImage = null;

      // the 3 following functions are a work around to fetch voxel along the right axis
      function fetchAlongXspace(i, j, sliceIndex, time) {
        //return inputImage3D.getIntensity_xyz(sliceIndex, i, j, time)
        return inputImage3D.getIntensity_xyzOrientation(sliceIndex, i, j, time);
      }

      function fetchAlongYspace(i, j, sliceIndex, time) {
        //return inputImage3D.getIntensity_xyz(i, sliceIndex, j, time)
        return inputImage3D.getIntensity_xyzOrientation(i, sliceIndex, j, time);
      }

      function fetchAlongZspace(i, j, sliceIndex, time) {
        //return inputImage3D.getIntensity_xyz(i, j,  sliceIndex, time)
        return inputImage3D.getIntensity_xyzOrientation(i, j, sliceIndex, time);
      }

      var fetchAlongAxis = null;

      if (this._metadata.axis === "xspace") fetchAlongAxis = fetchAlongXspace;else if (this._metadata.axis === "yspace") fetchAlongAxis = fetchAlongYspace;else if (this._metadata.axis === "zspace") fetchAlongAxis = fetchAlongZspace;

      if (!fetchAlongAxis) {
        console.warn("The axis to sample along for the mosaic was not properly set.");
        return;
      }

      // to make it works no matter the ncpp
      var initPixel = new Array(inputImage3D.getMetadata("ncpp")).fill(0);

      for (var t = startTime; t < endTime; t++) {

        // for each slice
        for (var sliceIndex = 0; sliceIndex < numOfSlices; sliceIndex++) {

          // create a new output image when the current is full (or not init)
          if (sliceCounter % slicePerOutputIm == 0) {
            outImage = new Image2D({ width: outputWidth, height: outputHeight, color: initPixel });
            this._output[outputCounter] = outImage;
            sliceIndexCurrentOutput = 0;
            outputCounter++;
          }

          var col = sliceIndexCurrentOutput % widthFit;
          var row = Math.floor(sliceIndexCurrentOutput / widthFit);
          sliceIndexCurrentOutput++;

          var offsetPixelCol = col * width;
          var offsetPixelRow = row * height;

          // for each row of the input slice
          for (var y = 0; y < height; y++) {
            // for each col of the output image
            for (var x = 0; x < width; x++) {
              var voxelValue = [fetchAlongAxis(x, y, sliceIndex, t)];

              outImage.setPixel({ x: offsetPixelCol + x, y: offsetPixelRow + (height - y - 1) }, voxelValue);
            }
          }
          sliceCounter++;
        } /* END for each slice*/
      } /* END for each time sample */
    }
  }]);
  return Image3DToMosaicFilter;
}(Filter); /* END of class Image3DToMosaicFilter */

/*
* Author   Jonathan Lurie - http://me.jonathanlurie.fr
* License  MIT
* Link      https://github.com/Pixpipe/pixpipejs
* Lab       MCIN - Montreal Neurological Institute
*/

/**
* An instance of Image3DToMosaicFilterAlt takes an Image3D as Input and output a
* mosaic composed of each slice. The axis: "x", "y" or "z" can be
* specified with `setMetadata("axis", "x")`, the default being x.
* The default output image is 4096x4096 but these boundaries can be changed using
* `setMetadata("maxWidth", n)` and `setMetadata("maxHeight", m)`.
* These are boundaries so the size of the output image(s) will possibly be lower
* to not contain unused space.
* If mosaicing the whole given Image3D does not fit in maxWidth*maxHeight, more
* Image2D will be created and accessible through `getOutput(n)`.
* All output image have the same size so that the last one may have dead space.
* To know precisely the size of the output mosaic use `getMetadata("gridWidth")`
* and `getMetadata("gridHeight")`, this will give the number of slices used in
* horizontal and vertical respectively.
*
* By setting the `time` metadata we can get a mosaic at a given time position,
* the default being `0`. If set to `-1`, then the filter outputs the whole time
* series.
*
* **Usage**
* - [examples/niftiToMosaicAlt.html](../examples/niftiToMosaicAlt.html)
*/

var Image3DToMosaicFilterAlt = function (_Filter) {
  inherits(Image3DToMosaicFilterAlt, _Filter);

  function Image3DToMosaicFilterAlt() {
    classCallCheck(this, Image3DToMosaicFilterAlt);

    var _this = possibleConstructorReturn(this, (Image3DToMosaicFilterAlt.__proto__ || Object.getPrototypeOf(Image3DToMosaicFilterAlt)).call(this));

    _this.addInputValidator(0, Image3DAlt);

    // default settings
    _this.setMetadata("maxWidth", 4096);
    _this.setMetadata("maxHeight", 4096);
    _this.setMetadata("axis", "x");
    _this.setMetadata("time", 0);
    return _this;
  }

  createClass(Image3DToMosaicFilterAlt, [{
    key: '_run',
    value: function _run() {

      if (!this.hasValidInput()) {
        console.warn("A filter of type Image3DToMosaicFilterAlt requires 1 input of category '0' (Image3DAlt)");
        return;
      }

      var inputImage3D = this._getInput(0);
      var axis = this.getMetadata("axis");
      var sliceDimension = inputImage3D.getSliceSize(axis);
      var numberOfSlices = inputImage3D.getNumberOfSlices(axis);
      var numberOfTimeSamples = inputImage3D.getTimeLength();

      // dealing with time
      var startTime = 0;
      var endTime = 1;
      // we want slices of all the time samples
      if (this._metadata.time == -1) {
        startTime = 0;
        endTime = numberOfTimeSamples;
      } else if (this._metadata.time >= 0 && this._metadata.time < numberOfTimeSamples) {
        startTime = this._metadata.time;
        endTime = startTime + 1;
      } else {
        console.warn('The required time sample is out of bound. Must be 0 <= t < ' + numberOfTimeSamples);
        return;
      }
      var numberOfSlicesWithTime = numberOfSlices * (endTime - startTime);

      // dealing with output size and number of output
      var widthFit = Math.floor(this.getMetadata("maxWidth") / sliceDimension.w);
      var heightFit = Math.floor(this.getMetadata("maxHeight") / sliceDimension.h);

      // size of the ouput image(s)
      var outputWidth = widthFit * sliceDimension.w;
      var outputHeight = heightFit * sliceDimension.h;
      var nbOfSlicesPerOutputImg = widthFit * heightFit;

      // Number of output image(s) necessary to cover the whole Image3D dataset (on the time interval we want)
      var outputImagesNecessary = Math.ceil(numberOfSlicesWithTime / nbOfSlicesPerOutputImg);

      // if only one output, maybe it's not filled entirely, so we can make it a bit smaller
      if (outputImagesNecessary == 1) {
        outputHeight = Math.ceil(numberOfSlicesWithTime / widthFit) * sliceDimension.h;
      }

      this.setMetadata("gridWidth", outputWidth / sliceDimension.w);
      this.setMetadata("gridHeight", outputHeight / sliceDimension.h);

      // to make it works no matter the ncpp
      var initPixel = new Array(inputImage3D.getMetadata("ncpp")).fill(0);

      var patchFilter = new PatchImageFilter();
      patchFilter.setMetadata("time", false); // we dont want to display the timer
      patchFilter.setMetadata("outputSize", { w: outputWidth, h: outputHeight });
      patchFilter.setMetadata("outputColor", initPixel);

      var outputCounter = 0;
      var sliceCounter = 0;
      var sliceIndexCurrentOutput = 0;
      for (var t = startTime; t < endTime; t++) {
        // for each slice
        for (var sliceIndex = 0; sliceIndex < numberOfSlices; sliceIndex++) {

          // TODO this has to come first
          // create a new output image when the current is full (or not init)
          if (sliceCounter % nbOfSlicesPerOutputImg == 0) {
            patchFilter.setMetadata("resetOutput", true);
            sliceIndexCurrentOutput = 0;
          }

          var col = sliceIndexCurrentOutput % widthFit;
          var row = Math.floor(sliceIndexCurrentOutput / widthFit);
          var offsetPixelCol = col * sliceDimension.w;
          var offsetPixelRow = row * sliceDimension.h;

          // fetching the right slice
          var slice = inputImage3D.getSlice(axis, sliceIndex, t);
          patchFilter.addInput(slice);
          patchFilter.setMetadata("patchPosition", { x: offsetPixelCol, y: offsetPixelRow });
          patchFilter.update();

          if (sliceCounter % nbOfSlicesPerOutputImg == 0) {
            this._output[outputCounter] = patchFilter.getOutput();
            outputCounter++;
          }

          sliceIndexCurrentOutput++;
          sliceCounter++;
        }
      }

      // TODO to be tested on larger series
      //if(outputCounter == 0){
      //  this._output[ outputCounter ] = patchFilter.getOutput();
      //}
    }
  }]);
  return Image3DToMosaicFilterAlt;
}(Filter); /* END of class Image3DToMosaicFilterAlt */

'use strict';

// defines the type of array to be used by glMatrix. Default would be Float32Array
// but typed arrays cause issue when serialized, this is why we'd rather use regular Array.

setMatrixArrayType(Array);

exports.CoreTypes = CoreTypes;
exports.PixpipeObject = PixpipeObject;
exports.Filter = Filter;
exports.Signal1D = Signal1D;
exports.Image2D = Image2D;
exports.Image3D = Image3D;
exports.ImageToImageFilter = ImageToImageFilter;
exports.MniVolume = MniVolume;
exports.LineString = LineString;
exports.Image3DAlt = Image3DAlt;
exports.Mesh3D = Mesh3D;
exports.CanvasImageWriter = CanvasImageWriter;
exports.UrlImageReader = UrlImageReader;
exports.FileImageReader = FileImageReader;
exports.FileToArrayBufferReader = FileToArrayBufferReader;
exports.UrlToArrayBufferReader = UrlToArrayBufferReader;
exports.BrowserDownloadBuffer = BrowserDownloadBuffer;
exports.Minc2Decoder = Minc2Decoder;
exports.NiftiDecoder = NiftiDecoder;
exports.NiftiDecoderAlt = NiftiDecoderAlt;
exports.PixpEncoder = PixpEncoder;
exports.PixpDecoder = PixpDecoder;
exports.Image3DGenericDecoder = Image3DGenericDecoder;
exports.Image3DGenericDecoderAlt = Image3DGenericDecoderAlt;
exports.TiffDecoder = TiffDecoder;
exports.MghDecoder = MghDecoder;
exports.MghDecoderAlt = MghDecoderAlt;
exports.EegModDecoder = EegModDecoder;
exports.PixBinEncoder = PixBinEncoder$$1;
exports.PixBinDecoder = PixBinDecoder$1;
exports.JpegDecoder = JpegDecoder;
exports.PngDecoder = PngDecoder;
exports.Image2DGenericDecoder = Image2DGenericDecoder;
exports.Minc2DecoderAlt = Minc2DecoderAlt;
exports.MniObjDecoder = MniObjDecoder;
exports.ComponentProjectionImage2DFilter = ComponentProjectionImage2DFilter;
exports.ComponentMergeImage2DFilter = ComponentMergeImage2DFilter;
exports.ForwardFourierSignalFilter = ForwardFourierSignalFilter;
exports.InverseFourierSignalFilter = InverseFourierSignalFilter;
exports.ForwardFourierImageFilter = ForwardFourierImageFilter;
exports.InverseFourierImageFilter = InverseFourierImageFilter;
exports.ForEachPixelImageFilter = ForEachPixelImageFilter;
exports.SpectralScaleImageFilter = SpectralScaleImageFilter;
exports.ImageBlendExpressionFilter = ImageBlendExpressionFilter;
exports.SpatialConvolutionFilter = SpatialConvolutionFilter;
exports.MultiplyImageFilter = MultiplyImageFilter;
exports.SimpleThresholdFilter = SimpleThresholdFilter;
exports.ImageDerivativeFilter = ImageDerivativeFilter;
exports.GradientImageFilter = GradientImageFilter;
exports.NormalizeImageFilter = NormalizeImageFilter;
exports.ContourImage2DFilter = ContourImage2DFilter;
exports.FloodFillImageFilter = FloodFillImageFilter;
exports.ContourHolesImage2DFilter = ContourHolesImage2DFilter;
exports.ForEachPixelReadOnlyFilter = ForEachPixelReadOnlyFilter;
exports.TerrainRgbToElevationImageFilter = TerrainRgbToElevationImageFilter;
exports.NearestNeighborSparseInterpolationImageFilter = NearestNeighborSparseInterpolationImageFilter;
exports.IDWSparseInterpolationImageFilter = IDWSparseInterpolationImageFilter;
exports.TriangulationSparseInterpolationImageFilter = TriangulationSparseInterpolationImageFilter;
exports.CropImageFilter = CropImageFilter;
exports.SimplifyLineStringFilter = SimplifyLineStringFilter;
exports.PatchImageFilter = PatchImageFilter;
exports.AngleToHueWheelHelper = AngleToHueWheelHelper;
exports.LineStringPrinterOnImage2DHelper = LineStringPrinterOnImage2DHelper;
exports.Colormap = Colormap;
exports.Image3DToMosaicFilter = Image3DToMosaicFilter;
exports.Image3DToMosaicFilterAlt = Image3DToMosaicFilterAlt;
exports.Image3DMetadataConverter = Image3DMetadataConverter;
exports.MatrixTricks = MatrixTricks;
//# sourceMappingURL=pixpipe.cjs.js.map
});

unwrapExports(pixpipe_cjs);
var pixpipe_cjs_15 = pixpipe_cjs.FileToArrayBufferReader;

const MODALITY_TYPES = {
  mesh: "mesh",
  volume: "volume",
  unknown: "unknown"
};

const MODALITY_COMPATIBLE = {
  mesh: true,
  volume: true,
  unknown: false
};

/**
* A modality is the duo made of an HTML5 File object (or Blob) and its
* once-loaded-and-parsed counterpart, which will generally be a Pixpipe object
* such as a Image3D or a Mesh3D. This guarrantis some integrity and provide the
* flexibility of not always having to load and parse a file directly when the
* user selects it from a file dialog but rather when it will be necessary and used
*
*/
class Modality {
  
  constructor(){
    this._file = null;
    this._object = null;
    this._type = "unknown";
    
    // a modality is valid until the file is read and an atempt to parsing is 
    // performed. Then, is the generic parser that goes with the given modality
    // type fails, the _isValid switches to false, FOR EVER.
    this._isValid = true;
  }
  
  
  /**
  * [STATIC]
  * Get the object that list the comaptible modalities.
  * @return {Object}
  */
  static getModalityTypes(){
    return MODALITY_TYPES;
  }
  
  
  /**
  * Get if the given modality type is a valid one
  * @param {String} modType - a type of modality
  * @return {boolean} true if valid, false if invalid
  */
  static isValidModalityType( modType ){
    return (modType in  MODALITY_TYPES);
  }
  
  
  /**
  * Set the file and type of this modality
  * @param {File} f - HTML File object
  * @param {String} type - 
  */
  setFile( f, type ){
    if( type in MODALITY_TYPES && MODALITY_COMPATIBLE[type] ){
      this._file = f;
      this._type = type;
    }else{
      console.warn(`The modality ${type} is a possible choice.\nPossible choices are ${Object.keys(MODALITY_TYPES).join('" "')}`);
    }
  }
  
  
  
  /**
  * Get the object, result of the parsed file. If the file was never read before,
  * this method will perform an attempt of reading and parsing it.
  * @param {Function} successCb - callback to use the modality object (called with the object as argument)
  * @param {Function} failCb - callback to use if the modality cannot retrieve the assicated object
  */
  GetObject( successCb, failCb ){
    var that = this;
    
    if( !this._object ){
      if(this._isValid){
        
        if( this._type === MODALITY_TYPES.unknown ){
          failCb();
          return;
        }
        
        var file2Buff = new pixpipe_cjs_15();
        file2Buff.addInput( this._file );
          
        if( this._isTextFile() ){
          file2Buff.setMetadata("readAsText", true);
        }
        
        file2Buff.on("ready", function(){
          var buff = this.getOutput();
          var object = null;
          
          if( this._type === MODALITY_TYPES.volume ){
            var generic3DDecoder = new pixpipe.Image3DGenericDecoderAlt();
            generic3DDecoder.addInput( buff );
            generic3DDecoder.update();
            object = generic3DDecoder.getOutput();
          }else if( this._type === MODALITY_TYPES.mesh ){
            var meshParser = new pixpipe.MniObjDecoder();
            meshParser.addInput( buff );
            meshParser.update();
            object = meshParser.getOutput();
          }
          
          if( object ){
            that._object = object;
            successCb( that._object );
          }else{
            that._isValid = false;
            failCb();
          }
          
        });

        file2Buff.update();
      }else{
        console.warn(`ERROR: The file ${this._file.name} is not a valid ${this._type}.`);
      }
    }else{
      successCb( this._object );
    }
  }
  
  
  /**
  * [NOTICE] This is very basic but accurate for the moment. This method should
  * be improved as new file types are included.  
  * Get if the given file to load is a text file or a binary file
  * @return {Boolean} true for text file, false for binary file
  */
  _isTextFile(){
    return !( this._type == "volume" );
  }
  
  
  /**
  * Tells if this modality has ever been atte;pted to be loaded.
  * @return {Boolean} true if an attempt of loading was done, false if never tried
  */
  hasAttemptedToLoad(){
    var neverTried = (!this._object && this._isValid);
    return !neverTried;
  }
  
  
  /**
  * Get if the modality is valid and loaded, IOW, we can do something with it.
  * @return {Boolean} true if ready, false if not
  */
  isReady(){
    return ( this._object && this._isValid );
  }
  
  
  /**
  * Return if valid. Note that with no attempt of loading, a modality is considered
  * valid. It will get invalid only if the attempt of reading it failed.
  * @return {Boolean} true if valid, false if not
  */
  ifValid(){
    return this._isValid;
  }
  
  
  /**
  * Get the name of this modalitie's file
  * @return {String} the filename
  */
  getFilename(){
    return this._file.name;
  }
  
  
  /**
  * Get the type of a modality
  * @return {String} type ("volume", "mesh")
  */
  getType(){
    return this._type;
  }
  
} /* END of class Modality */

class ModalityCollection {
  constructor(){
    this._modalities = [];
  }
  
  
  /**
  * Add a new modality
  * @param {File} file - File or Blob to be loaded
  * @param {String} type - one of the valid types
  * @param {Function} successCb - a callback called in case of success (no arg)
  * @param {Function} failCb - a callback called in case of failure (no arg)
  */
  addModality( file, type, successCb, failCb ){
    console.log("blah");
    console.log( file );
    if( Modality.isValidModalityType( type ) ){
      var m = new Modality();
      m.setFile( file, type );
      successCb();
    }else{
      failCb();
    }
  }
  
  
  /**
  * Remove a modality from the collection
  * @param {Number} index - the index of the modality to remove
  * @param {Function} successCb - a callback called in case of success (no arg)
  * @param {Function} failCb - a callback called in case of failure (no arg)
  */
  removeModality( index, successCb, failCb ){
    if( index<0 || index>=this._modalities.length){
      console.warn("The modality index is out of bound.");
      failCb();
    }
    
    var modRemoved = this._modalities[index];
    this._modalities.splice( index, 1 );
    successCb( modRemoved );
  }
  
  
  /**
  * Get the number of modalities
  * @return {Number}
  */
  getNumberOfModalities(){
    return this._modalities.length;
  }
  
  getModalityList(){
    
  }
  
  
}

var modalityCollection = new ModalityCollection();

/*
var threePlayground = new ThreePlayground({
  target: document.body 
})
*/


var meshOpener = new FileOpener({
  target: document.body,
  data: {
    modalityName: "mesh",
    modalityCollection: modalityCollection
  }
});



/*
var fileOpener = new FileOpener({
  target: document.body,
  data: {
    name: "you",
    leFoo: f,
    fileLister: fileLister
  }
});

var fileLister = new FileLister({
  target: document.body,
  data: {
    leFoo: f,
  }
});
*/

/*
fileOpener.up = function(){
  console.log("up");
  fileLister.updateFileList();
}
*/

/*
const listener = fileOpener.on( 'fileAdded', function(event){
  console.log( event.files );
  //console.log( `those files were just added ${event.files.map(function(f){return f.name}).join(" ")}` );
  fileLister.updateFileList();
});
*/

return app;

}());
//# sourceMappingURL=bundle.js.map
